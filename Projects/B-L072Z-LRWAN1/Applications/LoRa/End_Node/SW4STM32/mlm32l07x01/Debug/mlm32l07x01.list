
mlm32l07x01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ab4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001068  08010b74  08010b74  00020b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011bdc  08011bdc  00021bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011be4  08011be4  00021be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011be8  08011be8  00021be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000000  08011bec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001484  200001f0  08011ddc  000301f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001674  08011ddc  00031674  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 10 .debug_line   00040821  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0004f2c8  00000000  00000000  00070a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009914  00000000  00000000  000bfd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002280  00000000  00000000  000c9618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000a977e  00000000  00000000  000cb898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002238  00000000  00000000  00175018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0001c82f  00000000  00000000  00177250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f67  00000000  00000000  00193a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001b79e6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000064dc  00000000  00000000  001b7a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000014d  00000000  00000000  001bdf18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010b5c 	.word	0x08010b5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	08010b5c 	.word	0x08010b5c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fa41 	bl	80018a0 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 f98b 	bl	8001744 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fa33 	bl	80018a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fa29 	bl	80018a0 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f9ad 	bl	80017bc <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 f9a3 	bl	80017bc <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	1c08      	adds	r0, r1, #0
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f824 	bl	8000500 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_d2uiz>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	2200      	movs	r2, #0
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004ca:	0004      	movs	r4, r0
 80004cc:	000d      	movs	r5, r1
 80004ce:	f7ff ffcf 	bl	8000470 <__aeabi_dcmpge>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d104      	bne.n	80004e0 <__aeabi_d2uiz+0x1c>
 80004d6:	0020      	movs	r0, r4
 80004d8:	0029      	movs	r1, r5
 80004da:	f002 f84f 	bl	800257c <__aeabi_d2iz>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0020      	movs	r0, r4
 80004e6:	0029      	movs	r1, r5
 80004e8:	f001 fcb6 	bl	8001e58 <__aeabi_dsub>
 80004ec:	f002 f846 	bl	800257c <__aeabi_d2iz>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	061b      	lsls	r3, r3, #24
 80004f4:	469c      	mov	ip, r3
 80004f6:	4460      	add	r0, ip
 80004f8:	e7f1      	b.n	80004de <__aeabi_d2uiz+0x1a>
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	41e00000 	.word	0x41e00000

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	4692      	mov	sl, r2
 8000512:	4699      	mov	r9, r3
 8000514:	b083      	sub	sp, #12
 8000516:	428b      	cmp	r3, r1
 8000518:	d830      	bhi.n	800057c <__udivmoddi4+0x7c>
 800051a:	d02d      	beq.n	8000578 <__udivmoddi4+0x78>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f002 f91e 	bl	8002760 <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f002 f919 	bl	8002760 <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	469b      	mov	fp, r3
 8000536:	d433      	bmi.n	80005a0 <__udivmoddi4+0xa0>
 8000538:	465a      	mov	r2, fp
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	4642      	mov	r2, r8
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d83a      	bhi.n	80005c2 <__udivmoddi4+0xc2>
 800054c:	42af      	cmp	r7, r5
 800054e:	d100      	bne.n	8000552 <__udivmoddi4+0x52>
 8000550:	e078      	b.n	8000644 <__udivmoddi4+0x144>
 8000552:	465b      	mov	r3, fp
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	41bd      	sbcs	r5, r7
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <__udivmoddi4+0x5e>
 800055c:	e075      	b.n	800064a <__udivmoddi4+0x14a>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	465a      	mov	r2, fp
 800056a:	4093      	lsls	r3, r2
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4642      	mov	r2, r8
 8000572:	4093      	lsls	r3, r2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	e028      	b.n	80005ca <__udivmoddi4+0xca>
 8000578:	4282      	cmp	r2, r0
 800057a:	d9cf      	bls.n	800051c <__udivmoddi4+0x1c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <__udivmoddi4+0x8e>
 800058a:	601c      	str	r4, [r3, #0]
 800058c:	605d      	str	r5, [r3, #4]
 800058e:	9800      	ldr	r0, [sp, #0]
 8000590:	9901      	ldr	r1, [sp, #4]
 8000592:	b003      	add	sp, #12
 8000594:	bcf0      	pop	{r4, r5, r6, r7}
 8000596:	46bb      	mov	fp, r7
 8000598:	46b2      	mov	sl, r6
 800059a:	46a9      	mov	r9, r5
 800059c:	46a0      	mov	r8, r4
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	4652      	mov	r2, sl
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	4641      	mov	r1, r8
 80005ac:	0013      	movs	r3, r2
 80005ae:	464a      	mov	r2, r9
 80005b0:	408a      	lsls	r2, r1
 80005b2:	0017      	movs	r7, r2
 80005b4:	4642      	mov	r2, r8
 80005b6:	431f      	orrs	r7, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	4093      	lsls	r3, r2
 80005bc:	001e      	movs	r6, r3
 80005be:	42af      	cmp	r7, r5
 80005c0:	d9c4      	bls.n	800054c <__udivmoddi4+0x4c>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2300      	movs	r3, #0
 80005c6:	9200      	str	r2, [sp, #0]
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	4643      	mov	r3, r8
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0d9      	beq.n	8000584 <__udivmoddi4+0x84>
 80005d0:	07fb      	lsls	r3, r7, #31
 80005d2:	0872      	lsrs	r2, r6, #1
 80005d4:	431a      	orrs	r2, r3
 80005d6:	4646      	mov	r6, r8
 80005d8:	087b      	lsrs	r3, r7, #1
 80005da:	e00e      	b.n	80005fa <__udivmoddi4+0xfa>
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d101      	bne.n	80005e4 <__udivmoddi4+0xe4>
 80005e0:	42a2      	cmp	r2, r4
 80005e2:	d80c      	bhi.n	80005fe <__udivmoddi4+0xfe>
 80005e4:	1aa4      	subs	r4, r4, r2
 80005e6:	419d      	sbcs	r5, r3
 80005e8:	2001      	movs	r0, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2100      	movs	r1, #0
 80005f0:	3e01      	subs	r6, #1
 80005f2:	1824      	adds	r4, r4, r0
 80005f4:	414d      	adcs	r5, r1
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d006      	beq.n	8000608 <__udivmoddi4+0x108>
 80005fa:	42ab      	cmp	r3, r5
 80005fc:	d9ee      	bls.n	80005dc <__udivmoddi4+0xdc>
 80005fe:	3e01      	subs	r6, #1
 8000600:	1924      	adds	r4, r4, r4
 8000602:	416d      	adcs	r5, r5
 8000604:	2e00      	cmp	r6, #0
 8000606:	d1f8      	bne.n	80005fa <__udivmoddi4+0xfa>
 8000608:	9800      	ldr	r0, [sp, #0]
 800060a:	9901      	ldr	r1, [sp, #4]
 800060c:	465b      	mov	r3, fp
 800060e:	1900      	adds	r0, r0, r4
 8000610:	4169      	adcs	r1, r5
 8000612:	2b00      	cmp	r3, #0
 8000614:	db24      	blt.n	8000660 <__udivmoddi4+0x160>
 8000616:	002b      	movs	r3, r5
 8000618:	465a      	mov	r2, fp
 800061a:	4644      	mov	r4, r8
 800061c:	40d3      	lsrs	r3, r2
 800061e:	002a      	movs	r2, r5
 8000620:	40e2      	lsrs	r2, r4
 8000622:	001c      	movs	r4, r3
 8000624:	465b      	mov	r3, fp
 8000626:	0015      	movs	r5, r2
 8000628:	2b00      	cmp	r3, #0
 800062a:	db2a      	blt.n	8000682 <__udivmoddi4+0x182>
 800062c:	0026      	movs	r6, r4
 800062e:	409e      	lsls	r6, r3
 8000630:	0033      	movs	r3, r6
 8000632:	0026      	movs	r6, r4
 8000634:	4647      	mov	r7, r8
 8000636:	40be      	lsls	r6, r7
 8000638:	0032      	movs	r2, r6
 800063a:	1a80      	subs	r0, r0, r2
 800063c:	4199      	sbcs	r1, r3
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	9101      	str	r1, [sp, #4]
 8000642:	e79f      	b.n	8000584 <__udivmoddi4+0x84>
 8000644:	42a3      	cmp	r3, r4
 8000646:	d8bc      	bhi.n	80005c2 <__udivmoddi4+0xc2>
 8000648:	e783      	b.n	8000552 <__udivmoddi4+0x52>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	2100      	movs	r1, #0
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	2200      	movs	r2, #0
 8000654:	9100      	str	r1, [sp, #0]
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	40da      	lsrs	r2, r3
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	e786      	b.n	800056e <__udivmoddi4+0x6e>
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	4646      	mov	r6, r8
 800066a:	409a      	lsls	r2, r3
 800066c:	0023      	movs	r3, r4
 800066e:	40f3      	lsrs	r3, r6
 8000670:	4644      	mov	r4, r8
 8000672:	4313      	orrs	r3, r2
 8000674:	002a      	movs	r2, r5
 8000676:	40e2      	lsrs	r2, r4
 8000678:	001c      	movs	r4, r3
 800067a:	465b      	mov	r3, fp
 800067c:	0015      	movs	r5, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	dad4      	bge.n	800062c <__udivmoddi4+0x12c>
 8000682:	4642      	mov	r2, r8
 8000684:	002f      	movs	r7, r5
 8000686:	2320      	movs	r3, #32
 8000688:	0026      	movs	r6, r4
 800068a:	4097      	lsls	r7, r2
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	40de      	lsrs	r6, r3
 8000690:	003b      	movs	r3, r7
 8000692:	4333      	orrs	r3, r6
 8000694:	e7cd      	b.n	8000632 <__udivmoddi4+0x132>
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <__aeabi_fsub>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4646      	mov	r6, r8
 800069c:	46d6      	mov	lr, sl
 800069e:	464f      	mov	r7, r9
 80006a0:	0243      	lsls	r3, r0, #9
 80006a2:	0a5b      	lsrs	r3, r3, #9
 80006a4:	00da      	lsls	r2, r3, #3
 80006a6:	4694      	mov	ip, r2
 80006a8:	024a      	lsls	r2, r1, #9
 80006aa:	b5c0      	push	{r6, r7, lr}
 80006ac:	0044      	lsls	r4, r0, #1
 80006ae:	0a56      	lsrs	r6, r2, #9
 80006b0:	1c05      	adds	r5, r0, #0
 80006b2:	46b0      	mov	r8, r6
 80006b4:	0e24      	lsrs	r4, r4, #24
 80006b6:	004e      	lsls	r6, r1, #1
 80006b8:	0992      	lsrs	r2, r2, #6
 80006ba:	001f      	movs	r7, r3
 80006bc:	0020      	movs	r0, r4
 80006be:	4692      	mov	sl, r2
 80006c0:	0fed      	lsrs	r5, r5, #31
 80006c2:	0e36      	lsrs	r6, r6, #24
 80006c4:	0fc9      	lsrs	r1, r1, #31
 80006c6:	2eff      	cmp	r6, #255	; 0xff
 80006c8:	d100      	bne.n	80006cc <__aeabi_fsub+0x34>
 80006ca:	e07f      	b.n	80007cc <__aeabi_fsub+0x134>
 80006cc:	2201      	movs	r2, #1
 80006ce:	4051      	eors	r1, r2
 80006d0:	428d      	cmp	r5, r1
 80006d2:	d051      	beq.n	8000778 <__aeabi_fsub+0xe0>
 80006d4:	1ba2      	subs	r2, r4, r6
 80006d6:	4691      	mov	r9, r2
 80006d8:	2a00      	cmp	r2, #0
 80006da:	dc00      	bgt.n	80006de <__aeabi_fsub+0x46>
 80006dc:	e07e      	b.n	80007dc <__aeabi_fsub+0x144>
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fsub+0x4c>
 80006e2:	e099      	b.n	8000818 <__aeabi_fsub+0x180>
 80006e4:	2cff      	cmp	r4, #255	; 0xff
 80006e6:	d100      	bne.n	80006ea <__aeabi_fsub+0x52>
 80006e8:	e08c      	b.n	8000804 <__aeabi_fsub+0x16c>
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	4652      	mov	r2, sl
 80006ee:	04db      	lsls	r3, r3, #19
 80006f0:	431a      	orrs	r2, r3
 80006f2:	4692      	mov	sl, r2
 80006f4:	464a      	mov	r2, r9
 80006f6:	2301      	movs	r3, #1
 80006f8:	2a1b      	cmp	r2, #27
 80006fa:	dc08      	bgt.n	800070e <__aeabi_fsub+0x76>
 80006fc:	4653      	mov	r3, sl
 80006fe:	2120      	movs	r1, #32
 8000700:	40d3      	lsrs	r3, r2
 8000702:	1a89      	subs	r1, r1, r2
 8000704:	4652      	mov	r2, sl
 8000706:	408a      	lsls	r2, r1
 8000708:	1e51      	subs	r1, r2, #1
 800070a:	418a      	sbcs	r2, r1
 800070c:	4313      	orrs	r3, r2
 800070e:	4662      	mov	r2, ip
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	015a      	lsls	r2, r3, #5
 8000714:	d400      	bmi.n	8000718 <__aeabi_fsub+0x80>
 8000716:	e0f3      	b.n	8000900 <__aeabi_fsub+0x268>
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	099e      	lsrs	r6, r3, #6
 800071c:	0030      	movs	r0, r6
 800071e:	f002 f801 	bl	8002724 <__clzsi2>
 8000722:	3805      	subs	r0, #5
 8000724:	4086      	lsls	r6, r0
 8000726:	4284      	cmp	r4, r0
 8000728:	dd00      	ble.n	800072c <__aeabi_fsub+0x94>
 800072a:	e0f7      	b.n	800091c <__aeabi_fsub+0x284>
 800072c:	0032      	movs	r2, r6
 800072e:	1b04      	subs	r4, r0, r4
 8000730:	2020      	movs	r0, #32
 8000732:	3401      	adds	r4, #1
 8000734:	40e2      	lsrs	r2, r4
 8000736:	1b04      	subs	r4, r0, r4
 8000738:	40a6      	lsls	r6, r4
 800073a:	0033      	movs	r3, r6
 800073c:	1e5e      	subs	r6, r3, #1
 800073e:	41b3      	sbcs	r3, r6
 8000740:	2400      	movs	r4, #0
 8000742:	4313      	orrs	r3, r2
 8000744:	075a      	lsls	r2, r3, #29
 8000746:	d004      	beq.n	8000752 <__aeabi_fsub+0xba>
 8000748:	220f      	movs	r2, #15
 800074a:	401a      	ands	r2, r3
 800074c:	2a04      	cmp	r2, #4
 800074e:	d000      	beq.n	8000752 <__aeabi_fsub+0xba>
 8000750:	3304      	adds	r3, #4
 8000752:	015a      	lsls	r2, r3, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fsub+0xc0>
 8000756:	e0d6      	b.n	8000906 <__aeabi_fsub+0x26e>
 8000758:	1c62      	adds	r2, r4, #1
 800075a:	2cfe      	cmp	r4, #254	; 0xfe
 800075c:	d100      	bne.n	8000760 <__aeabi_fsub+0xc8>
 800075e:	e0da      	b.n	8000916 <__aeabi_fsub+0x27e>
 8000760:	019b      	lsls	r3, r3, #6
 8000762:	0a5f      	lsrs	r7, r3, #9
 8000764:	b2d0      	uxtb	r0, r2
 8000766:	05c0      	lsls	r0, r0, #23
 8000768:	4338      	orrs	r0, r7
 800076a:	07ed      	lsls	r5, r5, #31
 800076c:	4328      	orrs	r0, r5
 800076e:	bce0      	pop	{r5, r6, r7}
 8000770:	46ba      	mov	sl, r7
 8000772:	46b1      	mov	r9, r6
 8000774:	46a8      	mov	r8, r5
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000778:	1ba2      	subs	r2, r4, r6
 800077a:	4691      	mov	r9, r2
 800077c:	2a00      	cmp	r2, #0
 800077e:	dd63      	ble.n	8000848 <__aeabi_fsub+0x1b0>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0xee>
 8000784:	e099      	b.n	80008ba <__aeabi_fsub+0x222>
 8000786:	2cff      	cmp	r4, #255	; 0xff
 8000788:	d03c      	beq.n	8000804 <__aeabi_fsub+0x16c>
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	4652      	mov	r2, sl
 800078e:	04db      	lsls	r3, r3, #19
 8000790:	431a      	orrs	r2, r3
 8000792:	4692      	mov	sl, r2
 8000794:	464a      	mov	r2, r9
 8000796:	2301      	movs	r3, #1
 8000798:	2a1b      	cmp	r2, #27
 800079a:	dc08      	bgt.n	80007ae <__aeabi_fsub+0x116>
 800079c:	4653      	mov	r3, sl
 800079e:	2120      	movs	r1, #32
 80007a0:	40d3      	lsrs	r3, r2
 80007a2:	1a89      	subs	r1, r1, r2
 80007a4:	4652      	mov	r2, sl
 80007a6:	408a      	lsls	r2, r1
 80007a8:	1e51      	subs	r1, r2, #1
 80007aa:	418a      	sbcs	r2, r1
 80007ac:	4313      	orrs	r3, r2
 80007ae:	4463      	add	r3, ip
 80007b0:	015a      	lsls	r2, r3, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fsub+0x11e>
 80007b4:	e0a4      	b.n	8000900 <__aeabi_fsub+0x268>
 80007b6:	3401      	adds	r4, #1
 80007b8:	2cff      	cmp	r4, #255	; 0xff
 80007ba:	d100      	bne.n	80007be <__aeabi_fsub+0x126>
 80007bc:	e0ab      	b.n	8000916 <__aeabi_fsub+0x27e>
 80007be:	2201      	movs	r2, #1
 80007c0:	4997      	ldr	r1, [pc, #604]	; (8000a20 <__aeabi_fsub+0x388>)
 80007c2:	401a      	ands	r2, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	400b      	ands	r3, r1
 80007c8:	4313      	orrs	r3, r2
 80007ca:	e7bb      	b.n	8000744 <__aeabi_fsub+0xac>
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	d032      	beq.n	8000836 <__aeabi_fsub+0x19e>
 80007d0:	428d      	cmp	r5, r1
 80007d2:	d035      	beq.n	8000840 <__aeabi_fsub+0x1a8>
 80007d4:	22ff      	movs	r2, #255	; 0xff
 80007d6:	4252      	negs	r2, r2
 80007d8:	4691      	mov	r9, r2
 80007da:	44a1      	add	r9, r4
 80007dc:	464a      	mov	r2, r9
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d051      	beq.n	8000886 <__aeabi_fsub+0x1ee>
 80007e2:	1b30      	subs	r0, r6, r4
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d000      	beq.n	80007ea <__aeabi_fsub+0x152>
 80007e8:	e09c      	b.n	8000924 <__aeabi_fsub+0x28c>
 80007ea:	4663      	mov	r3, ip
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fsub+0x15a>
 80007f0:	e0df      	b.n	80009b2 <__aeabi_fsub+0x31a>
 80007f2:	3801      	subs	r0, #1
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x162>
 80007f8:	e0f7      	b.n	80009ea <__aeabi_fsub+0x352>
 80007fa:	2eff      	cmp	r6, #255	; 0xff
 80007fc:	d000      	beq.n	8000800 <__aeabi_fsub+0x168>
 80007fe:	e099      	b.n	8000934 <__aeabi_fsub+0x29c>
 8000800:	000d      	movs	r5, r1
 8000802:	4643      	mov	r3, r8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fsub+0x172>
 8000808:	e085      	b.n	8000916 <__aeabi_fsub+0x27e>
 800080a:	2780      	movs	r7, #128	; 0x80
 800080c:	03ff      	lsls	r7, r7, #15
 800080e:	431f      	orrs	r7, r3
 8000810:	027f      	lsls	r7, r7, #9
 8000812:	20ff      	movs	r0, #255	; 0xff
 8000814:	0a7f      	lsrs	r7, r7, #9
 8000816:	e7a6      	b.n	8000766 <__aeabi_fsub+0xce>
 8000818:	4652      	mov	r2, sl
 800081a:	2a00      	cmp	r2, #0
 800081c:	d074      	beq.n	8000908 <__aeabi_fsub+0x270>
 800081e:	2201      	movs	r2, #1
 8000820:	4252      	negs	r2, r2
 8000822:	4690      	mov	r8, r2
 8000824:	44c1      	add	r9, r8
 8000826:	464a      	mov	r2, r9
 8000828:	2a00      	cmp	r2, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x196>
 800082c:	e0c8      	b.n	80009c0 <__aeabi_fsub+0x328>
 800082e:	2cff      	cmp	r4, #255	; 0xff
 8000830:	d000      	beq.n	8000834 <__aeabi_fsub+0x19c>
 8000832:	e75f      	b.n	80006f4 <__aeabi_fsub+0x5c>
 8000834:	e7e6      	b.n	8000804 <__aeabi_fsub+0x16c>
 8000836:	2201      	movs	r2, #1
 8000838:	4051      	eors	r1, r2
 800083a:	42a9      	cmp	r1, r5
 800083c:	d000      	beq.n	8000840 <__aeabi_fsub+0x1a8>
 800083e:	e749      	b.n	80006d4 <__aeabi_fsub+0x3c>
 8000840:	22ff      	movs	r2, #255	; 0xff
 8000842:	4252      	negs	r2, r2
 8000844:	4691      	mov	r9, r2
 8000846:	44a1      	add	r9, r4
 8000848:	464a      	mov	r2, r9
 800084a:	2a00      	cmp	r2, #0
 800084c:	d043      	beq.n	80008d6 <__aeabi_fsub+0x23e>
 800084e:	1b31      	subs	r1, r6, r4
 8000850:	2c00      	cmp	r4, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0x1be>
 8000854:	e08c      	b.n	8000970 <__aeabi_fsub+0x2d8>
 8000856:	2eff      	cmp	r6, #255	; 0xff
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x1c4>
 800085a:	e092      	b.n	8000982 <__aeabi_fsub+0x2ea>
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	4662      	mov	r2, ip
 8000860:	04db      	lsls	r3, r3, #19
 8000862:	431a      	orrs	r2, r3
 8000864:	4694      	mov	ip, r2
 8000866:	2301      	movs	r3, #1
 8000868:	291b      	cmp	r1, #27
 800086a:	dc09      	bgt.n	8000880 <__aeabi_fsub+0x1e8>
 800086c:	2020      	movs	r0, #32
 800086e:	4663      	mov	r3, ip
 8000870:	4662      	mov	r2, ip
 8000872:	40cb      	lsrs	r3, r1
 8000874:	1a41      	subs	r1, r0, r1
 8000876:	408a      	lsls	r2, r1
 8000878:	0011      	movs	r1, r2
 800087a:	1e48      	subs	r0, r1, #1
 800087c:	4181      	sbcs	r1, r0
 800087e:	430b      	orrs	r3, r1
 8000880:	0034      	movs	r4, r6
 8000882:	4453      	add	r3, sl
 8000884:	e794      	b.n	80007b0 <__aeabi_fsub+0x118>
 8000886:	22fe      	movs	r2, #254	; 0xfe
 8000888:	1c66      	adds	r6, r4, #1
 800088a:	4232      	tst	r2, r6
 800088c:	d164      	bne.n	8000958 <__aeabi_fsub+0x2c0>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fsub+0x1fc>
 8000892:	e082      	b.n	800099a <__aeabi_fsub+0x302>
 8000894:	4663      	mov	r3, ip
 8000896:	2b00      	cmp	r3, #0
 8000898:	d100      	bne.n	800089c <__aeabi_fsub+0x204>
 800089a:	e0ab      	b.n	80009f4 <__aeabi_fsub+0x35c>
 800089c:	4653      	mov	r3, sl
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x20c>
 80008a2:	e760      	b.n	8000766 <__aeabi_fsub+0xce>
 80008a4:	4663      	mov	r3, ip
 80008a6:	4652      	mov	r2, sl
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fsub+0x218>
 80008ae:	e0aa      	b.n	8000a06 <__aeabi_fsub+0x36e>
 80008b0:	4663      	mov	r3, ip
 80008b2:	4652      	mov	r2, sl
 80008b4:	000d      	movs	r5, r1
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	e744      	b.n	8000744 <__aeabi_fsub+0xac>
 80008ba:	4652      	mov	r2, sl
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d023      	beq.n	8000908 <__aeabi_fsub+0x270>
 80008c0:	2201      	movs	r2, #1
 80008c2:	4252      	negs	r2, r2
 80008c4:	4690      	mov	r8, r2
 80008c6:	44c1      	add	r9, r8
 80008c8:	464a      	mov	r2, r9
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d075      	beq.n	80009ba <__aeabi_fsub+0x322>
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fsub+0x23c>
 80008d2:	e75f      	b.n	8000794 <__aeabi_fsub+0xfc>
 80008d4:	e796      	b.n	8000804 <__aeabi_fsub+0x16c>
 80008d6:	26fe      	movs	r6, #254	; 0xfe
 80008d8:	3401      	adds	r4, #1
 80008da:	4226      	tst	r6, r4
 80008dc:	d153      	bne.n	8000986 <__aeabi_fsub+0x2ee>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d172      	bne.n	80009c8 <__aeabi_fsub+0x330>
 80008e2:	4663      	mov	r3, ip
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fsub+0x252>
 80008e8:	e093      	b.n	8000a12 <__aeabi_fsub+0x37a>
 80008ea:	4653      	mov	r3, sl
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fsub+0x25a>
 80008f0:	e739      	b.n	8000766 <__aeabi_fsub+0xce>
 80008f2:	4463      	add	r3, ip
 80008f4:	2400      	movs	r4, #0
 80008f6:	015a      	lsls	r2, r3, #5
 80008f8:	d502      	bpl.n	8000900 <__aeabi_fsub+0x268>
 80008fa:	4a4a      	ldr	r2, [pc, #296]	; (8000a24 <__aeabi_fsub+0x38c>)
 80008fc:	3401      	adds	r4, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	075a      	lsls	r2, r3, #29
 8000902:	d000      	beq.n	8000906 <__aeabi_fsub+0x26e>
 8000904:	e720      	b.n	8000748 <__aeabi_fsub+0xb0>
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	2cff      	cmp	r4, #255	; 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x276>
 800090c:	e77a      	b.n	8000804 <__aeabi_fsub+0x16c>
 800090e:	025b      	lsls	r3, r3, #9
 8000910:	0a5f      	lsrs	r7, r3, #9
 8000912:	b2e0      	uxtb	r0, r4
 8000914:	e727      	b.n	8000766 <__aeabi_fsub+0xce>
 8000916:	20ff      	movs	r0, #255	; 0xff
 8000918:	2700      	movs	r7, #0
 800091a:	e724      	b.n	8000766 <__aeabi_fsub+0xce>
 800091c:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <__aeabi_fsub+0x38c>)
 800091e:	1a24      	subs	r4, r4, r0
 8000920:	4033      	ands	r3, r6
 8000922:	e70f      	b.n	8000744 <__aeabi_fsub+0xac>
 8000924:	2eff      	cmp	r6, #255	; 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fsub+0x292>
 8000928:	e76a      	b.n	8000800 <__aeabi_fsub+0x168>
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	4662      	mov	r2, ip
 800092e:	04db      	lsls	r3, r3, #19
 8000930:	431a      	orrs	r2, r3
 8000932:	4694      	mov	ip, r2
 8000934:	2301      	movs	r3, #1
 8000936:	281b      	cmp	r0, #27
 8000938:	dc09      	bgt.n	800094e <__aeabi_fsub+0x2b6>
 800093a:	2420      	movs	r4, #32
 800093c:	4663      	mov	r3, ip
 800093e:	4662      	mov	r2, ip
 8000940:	40c3      	lsrs	r3, r0
 8000942:	1a20      	subs	r0, r4, r0
 8000944:	4082      	lsls	r2, r0
 8000946:	0010      	movs	r0, r2
 8000948:	1e44      	subs	r4, r0, #1
 800094a:	41a0      	sbcs	r0, r4
 800094c:	4303      	orrs	r3, r0
 800094e:	4652      	mov	r2, sl
 8000950:	000d      	movs	r5, r1
 8000952:	0034      	movs	r4, r6
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	e6dc      	b.n	8000712 <__aeabi_fsub+0x7a>
 8000958:	4663      	mov	r3, ip
 800095a:	4652      	mov	r2, sl
 800095c:	1a9e      	subs	r6, r3, r2
 800095e:	0173      	lsls	r3, r6, #5
 8000960:	d417      	bmi.n	8000992 <__aeabi_fsub+0x2fa>
 8000962:	2e00      	cmp	r6, #0
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x2d0>
 8000966:	e6d9      	b.n	800071c <__aeabi_fsub+0x84>
 8000968:	2500      	movs	r5, #0
 800096a:	2000      	movs	r0, #0
 800096c:	2700      	movs	r7, #0
 800096e:	e6fa      	b.n	8000766 <__aeabi_fsub+0xce>
 8000970:	4663      	mov	r3, ip
 8000972:	2b00      	cmp	r3, #0
 8000974:	d044      	beq.n	8000a00 <__aeabi_fsub+0x368>
 8000976:	3901      	subs	r1, #1
 8000978:	2900      	cmp	r1, #0
 800097a:	d04c      	beq.n	8000a16 <__aeabi_fsub+0x37e>
 800097c:	2eff      	cmp	r6, #255	; 0xff
 800097e:	d000      	beq.n	8000982 <__aeabi_fsub+0x2ea>
 8000980:	e771      	b.n	8000866 <__aeabi_fsub+0x1ce>
 8000982:	4643      	mov	r3, r8
 8000984:	e73e      	b.n	8000804 <__aeabi_fsub+0x16c>
 8000986:	2cff      	cmp	r4, #255	; 0xff
 8000988:	d0c5      	beq.n	8000916 <__aeabi_fsub+0x27e>
 800098a:	4652      	mov	r2, sl
 800098c:	4462      	add	r2, ip
 800098e:	0853      	lsrs	r3, r2, #1
 8000990:	e7b6      	b.n	8000900 <__aeabi_fsub+0x268>
 8000992:	4663      	mov	r3, ip
 8000994:	000d      	movs	r5, r1
 8000996:	1ad6      	subs	r6, r2, r3
 8000998:	e6c0      	b.n	800071c <__aeabi_fsub+0x84>
 800099a:	4662      	mov	r2, ip
 800099c:	2a00      	cmp	r2, #0
 800099e:	d116      	bne.n	80009ce <__aeabi_fsub+0x336>
 80009a0:	4653      	mov	r3, sl
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fsub+0x310>
 80009a6:	e72b      	b.n	8000800 <__aeabi_fsub+0x168>
 80009a8:	2780      	movs	r7, #128	; 0x80
 80009aa:	2500      	movs	r5, #0
 80009ac:	20ff      	movs	r0, #255	; 0xff
 80009ae:	03ff      	lsls	r7, r7, #15
 80009b0:	e6d9      	b.n	8000766 <__aeabi_fsub+0xce>
 80009b2:	000d      	movs	r5, r1
 80009b4:	4643      	mov	r3, r8
 80009b6:	0034      	movs	r4, r6
 80009b8:	e7a6      	b.n	8000908 <__aeabi_fsub+0x270>
 80009ba:	4653      	mov	r3, sl
 80009bc:	4463      	add	r3, ip
 80009be:	e6f7      	b.n	80007b0 <__aeabi_fsub+0x118>
 80009c0:	4663      	mov	r3, ip
 80009c2:	4652      	mov	r2, sl
 80009c4:	1a9b      	subs	r3, r3, r2
 80009c6:	e6a4      	b.n	8000712 <__aeabi_fsub+0x7a>
 80009c8:	4662      	mov	r2, ip
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d0d9      	beq.n	8000982 <__aeabi_fsub+0x2ea>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x33e>
 80009d4:	e716      	b.n	8000804 <__aeabi_fsub+0x16c>
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	03d2      	lsls	r2, r2, #15
 80009da:	4213      	tst	r3, r2
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fsub+0x348>
 80009de:	e711      	b.n	8000804 <__aeabi_fsub+0x16c>
 80009e0:	4640      	mov	r0, r8
 80009e2:	4210      	tst	r0, r2
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fsub+0x350>
 80009e6:	e70d      	b.n	8000804 <__aeabi_fsub+0x16c>
 80009e8:	e70a      	b.n	8000800 <__aeabi_fsub+0x168>
 80009ea:	4652      	mov	r2, sl
 80009ec:	000d      	movs	r5, r1
 80009ee:	0034      	movs	r4, r6
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	e68e      	b.n	8000712 <__aeabi_fsub+0x7a>
 80009f4:	4653      	mov	r3, sl
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d008      	beq.n	8000a0c <__aeabi_fsub+0x374>
 80009fa:	000d      	movs	r5, r1
 80009fc:	4647      	mov	r7, r8
 80009fe:	e6b2      	b.n	8000766 <__aeabi_fsub+0xce>
 8000a00:	4643      	mov	r3, r8
 8000a02:	0034      	movs	r4, r6
 8000a04:	e780      	b.n	8000908 <__aeabi_fsub+0x270>
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fsub+0x374>
 8000a0a:	e779      	b.n	8000900 <__aeabi_fsub+0x268>
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	2700      	movs	r7, #0
 8000a10:	e6a9      	b.n	8000766 <__aeabi_fsub+0xce>
 8000a12:	4647      	mov	r7, r8
 8000a14:	e6a7      	b.n	8000766 <__aeabi_fsub+0xce>
 8000a16:	4653      	mov	r3, sl
 8000a18:	0034      	movs	r4, r6
 8000a1a:	4463      	add	r3, ip
 8000a1c:	e6c8      	b.n	80007b0 <__aeabi_fsub+0x118>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	7dffffff 	.word	0x7dffffff
 8000a24:	fbffffff 	.word	0xfbffffff

08000a28 <__aeabi_ui2f>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	1e05      	subs	r5, r0, #0
 8000a2c:	d00e      	beq.n	8000a4c <__aeabi_ui2f+0x24>
 8000a2e:	f001 fe79 	bl	8002724 <__clzsi2>
 8000a32:	239e      	movs	r3, #158	; 0x9e
 8000a34:	0004      	movs	r4, r0
 8000a36:	1a1b      	subs	r3, r3, r0
 8000a38:	2b96      	cmp	r3, #150	; 0x96
 8000a3a:	dc0c      	bgt.n	8000a56 <__aeabi_ui2f+0x2e>
 8000a3c:	2808      	cmp	r0, #8
 8000a3e:	dd01      	ble.n	8000a44 <__aeabi_ui2f+0x1c>
 8000a40:	3c08      	subs	r4, #8
 8000a42:	40a5      	lsls	r5, r4
 8000a44:	026d      	lsls	r5, r5, #9
 8000a46:	0a6d      	lsrs	r5, r5, #9
 8000a48:	b2d8      	uxtb	r0, r3
 8000a4a:	e001      	b.n	8000a50 <__aeabi_ui2f+0x28>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	2500      	movs	r5, #0
 8000a50:	05c0      	lsls	r0, r0, #23
 8000a52:	4328      	orrs	r0, r5
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	2b99      	cmp	r3, #153	; 0x99
 8000a58:	dd09      	ble.n	8000a6e <__aeabi_ui2f+0x46>
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	0029      	movs	r1, r5
 8000a5e:	321b      	adds	r2, #27
 8000a60:	4091      	lsls	r1, r2
 8000a62:	1e4a      	subs	r2, r1, #1
 8000a64:	4191      	sbcs	r1, r2
 8000a66:	2205      	movs	r2, #5
 8000a68:	1a12      	subs	r2, r2, r0
 8000a6a:	40d5      	lsrs	r5, r2
 8000a6c:	430d      	orrs	r5, r1
 8000a6e:	2c05      	cmp	r4, #5
 8000a70:	dd01      	ble.n	8000a76 <__aeabi_ui2f+0x4e>
 8000a72:	1f62      	subs	r2, r4, #5
 8000a74:	4095      	lsls	r5, r2
 8000a76:	0029      	movs	r1, r5
 8000a78:	4e08      	ldr	r6, [pc, #32]	; (8000a9c <__aeabi_ui2f+0x74>)
 8000a7a:	4031      	ands	r1, r6
 8000a7c:	076a      	lsls	r2, r5, #29
 8000a7e:	d009      	beq.n	8000a94 <__aeabi_ui2f+0x6c>
 8000a80:	200f      	movs	r0, #15
 8000a82:	4028      	ands	r0, r5
 8000a84:	2804      	cmp	r0, #4
 8000a86:	d005      	beq.n	8000a94 <__aeabi_ui2f+0x6c>
 8000a88:	3104      	adds	r1, #4
 8000a8a:	014a      	lsls	r2, r1, #5
 8000a8c:	d502      	bpl.n	8000a94 <__aeabi_ui2f+0x6c>
 8000a8e:	239f      	movs	r3, #159	; 0x9f
 8000a90:	4031      	ands	r1, r6
 8000a92:	1b1b      	subs	r3, r3, r4
 8000a94:	0189      	lsls	r1, r1, #6
 8000a96:	0a4d      	lsrs	r5, r1, #9
 8000a98:	b2d8      	uxtb	r0, r3
 8000a9a:	e7d9      	b.n	8000a50 <__aeabi_ui2f+0x28>
 8000a9c:	fbffffff 	.word	0xfbffffff

08000aa0 <__aeabi_dadd>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	464f      	mov	r7, r9
 8000aa4:	46d6      	mov	lr, sl
 8000aa6:	4646      	mov	r6, r8
 8000aa8:	000d      	movs	r5, r1
 8000aaa:	0001      	movs	r1, r0
 8000aac:	0018      	movs	r0, r3
 8000aae:	b5c0      	push	{r6, r7, lr}
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	032b      	lsls	r3, r5, #12
 8000ab4:	0a5a      	lsrs	r2, r3, #9
 8000ab6:	0f4b      	lsrs	r3, r1, #29
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	00ca      	lsls	r2, r1, #3
 8000abc:	4691      	mov	r9, r2
 8000abe:	0302      	lsls	r2, r0, #12
 8000ac0:	006e      	lsls	r6, r5, #1
 8000ac2:	0041      	lsls	r1, r0, #1
 8000ac4:	0a52      	lsrs	r2, r2, #9
 8000ac6:	0fec      	lsrs	r4, r5, #31
 8000ac8:	0f7d      	lsrs	r5, r7, #29
 8000aca:	4315      	orrs	r5, r2
 8000acc:	0d76      	lsrs	r6, r6, #21
 8000ace:	0d49      	lsrs	r1, r1, #21
 8000ad0:	0fc0      	lsrs	r0, r0, #31
 8000ad2:	4682      	mov	sl, r0
 8000ad4:	46ac      	mov	ip, r5
 8000ad6:	00ff      	lsls	r7, r7, #3
 8000ad8:	1a72      	subs	r2, r6, r1
 8000ada:	4284      	cmp	r4, r0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x40>
 8000ade:	e098      	b.n	8000c12 <__aeabi_dadd+0x172>
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	dc00      	bgt.n	8000ae6 <__aeabi_dadd+0x46>
 8000ae4:	e081      	b.n	8000bea <__aeabi_dadd+0x14a>
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x4c>
 8000aea:	e0b6      	b.n	8000c5a <__aeabi_dadd+0x1ba>
 8000aec:	49c9      	ldr	r1, [pc, #804]	; (8000e14 <__aeabi_dadd+0x374>)
 8000aee:	428e      	cmp	r6, r1
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dadd+0x54>
 8000af2:	e172      	b.n	8000dda <__aeabi_dadd+0x33a>
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	0028      	movs	r0, r5
 8000af8:	0409      	lsls	r1, r1, #16
 8000afa:	4308      	orrs	r0, r1
 8000afc:	4684      	mov	ip, r0
 8000afe:	2a38      	cmp	r2, #56	; 0x38
 8000b00:	dd00      	ble.n	8000b04 <__aeabi_dadd+0x64>
 8000b02:	e15e      	b.n	8000dc2 <__aeabi_dadd+0x322>
 8000b04:	2a1f      	cmp	r2, #31
 8000b06:	dd00      	ble.n	8000b0a <__aeabi_dadd+0x6a>
 8000b08:	e1ee      	b.n	8000ee8 <__aeabi_dadd+0x448>
 8000b0a:	2020      	movs	r0, #32
 8000b0c:	0039      	movs	r1, r7
 8000b0e:	4665      	mov	r5, ip
 8000b10:	1a80      	subs	r0, r0, r2
 8000b12:	4087      	lsls	r7, r0
 8000b14:	40d1      	lsrs	r1, r2
 8000b16:	4085      	lsls	r5, r0
 8000b18:	430d      	orrs	r5, r1
 8000b1a:	0039      	movs	r1, r7
 8000b1c:	1e4f      	subs	r7, r1, #1
 8000b1e:	41b9      	sbcs	r1, r7
 8000b20:	4667      	mov	r7, ip
 8000b22:	40d7      	lsrs	r7, r2
 8000b24:	4329      	orrs	r1, r5
 8000b26:	1bdb      	subs	r3, r3, r7
 8000b28:	464a      	mov	r2, r9
 8000b2a:	1a55      	subs	r5, r2, r1
 8000b2c:	45a9      	cmp	r9, r5
 8000b2e:	4189      	sbcs	r1, r1
 8000b30:	4249      	negs	r1, r1
 8000b32:	1a5b      	subs	r3, r3, r1
 8000b34:	4698      	mov	r8, r3
 8000b36:	4643      	mov	r3, r8
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	d400      	bmi.n	8000b3e <__aeabi_dadd+0x9e>
 8000b3c:	e0cc      	b.n	8000cd8 <__aeabi_dadd+0x238>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	0a5b      	lsrs	r3, r3, #9
 8000b44:	4698      	mov	r8, r3
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0xae>
 8000b4c:	e12c      	b.n	8000da8 <__aeabi_dadd+0x308>
 8000b4e:	4640      	mov	r0, r8
 8000b50:	f001 fde8 	bl	8002724 <__clzsi2>
 8000b54:	0001      	movs	r1, r0
 8000b56:	3908      	subs	r1, #8
 8000b58:	2220      	movs	r2, #32
 8000b5a:	0028      	movs	r0, r5
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	1a52      	subs	r2, r2, r1
 8000b60:	408b      	lsls	r3, r1
 8000b62:	40d0      	lsrs	r0, r2
 8000b64:	408d      	lsls	r5, r1
 8000b66:	4303      	orrs	r3, r0
 8000b68:	428e      	cmp	r6, r1
 8000b6a:	dd00      	ble.n	8000b6e <__aeabi_dadd+0xce>
 8000b6c:	e117      	b.n	8000d9e <__aeabi_dadd+0x2fe>
 8000b6e:	1b8e      	subs	r6, r1, r6
 8000b70:	1c72      	adds	r2, r6, #1
 8000b72:	2a1f      	cmp	r2, #31
 8000b74:	dd00      	ble.n	8000b78 <__aeabi_dadd+0xd8>
 8000b76:	e1a7      	b.n	8000ec8 <__aeabi_dadd+0x428>
 8000b78:	2120      	movs	r1, #32
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	002e      	movs	r6, r5
 8000b7e:	1a89      	subs	r1, r1, r2
 8000b80:	408d      	lsls	r5, r1
 8000b82:	4088      	lsls	r0, r1
 8000b84:	40d6      	lsrs	r6, r2
 8000b86:	40d3      	lsrs	r3, r2
 8000b88:	1e69      	subs	r1, r5, #1
 8000b8a:	418d      	sbcs	r5, r1
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	4698      	mov	r8, r3
 8000b90:	2600      	movs	r6, #0
 8000b92:	4305      	orrs	r5, r0
 8000b94:	076b      	lsls	r3, r5, #29
 8000b96:	d009      	beq.n	8000bac <__aeabi_dadd+0x10c>
 8000b98:	230f      	movs	r3, #15
 8000b9a:	402b      	ands	r3, r5
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d005      	beq.n	8000bac <__aeabi_dadd+0x10c>
 8000ba0:	1d2b      	adds	r3, r5, #4
 8000ba2:	42ab      	cmp	r3, r5
 8000ba4:	41ad      	sbcs	r5, r5
 8000ba6:	426d      	negs	r5, r5
 8000ba8:	44a8      	add	r8, r5
 8000baa:	001d      	movs	r5, r3
 8000bac:	4643      	mov	r3, r8
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	d400      	bmi.n	8000bb4 <__aeabi_dadd+0x114>
 8000bb2:	e094      	b.n	8000cde <__aeabi_dadd+0x23e>
 8000bb4:	4b97      	ldr	r3, [pc, #604]	; (8000e14 <__aeabi_dadd+0x374>)
 8000bb6:	1c72      	adds	r2, r6, #1
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x11e>
 8000bbc:	e09d      	b.n	8000cfa <__aeabi_dadd+0x25a>
 8000bbe:	4641      	mov	r1, r8
 8000bc0:	4b95      	ldr	r3, [pc, #596]	; (8000e18 <__aeabi_dadd+0x378>)
 8000bc2:	08ed      	lsrs	r5, r5, #3
 8000bc4:	4019      	ands	r1, r3
 8000bc6:	000b      	movs	r3, r1
 8000bc8:	0552      	lsls	r2, r2, #21
 8000bca:	0749      	lsls	r1, r1, #29
 8000bcc:	025b      	lsls	r3, r3, #9
 8000bce:	4329      	orrs	r1, r5
 8000bd0:	0b1b      	lsrs	r3, r3, #12
 8000bd2:	0d52      	lsrs	r2, r2, #21
 8000bd4:	0512      	lsls	r2, r2, #20
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	07e4      	lsls	r4, r4, #31
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	0008      	movs	r0, r1
 8000bde:	0019      	movs	r1, r3
 8000be0:	bce0      	pop	{r5, r6, r7}
 8000be2:	46ba      	mov	sl, r7
 8000be4:	46b1      	mov	r9, r6
 8000be6:	46a8      	mov	r8, r5
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d043      	beq.n	8000c76 <__aeabi_dadd+0x1d6>
 8000bee:	1b8a      	subs	r2, r1, r6
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_dadd+0x156>
 8000bf4:	e12a      	b.n	8000e4c <__aeabi_dadd+0x3ac>
 8000bf6:	464c      	mov	r4, r9
 8000bf8:	431c      	orrs	r4, r3
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x15e>
 8000bfc:	e1d1      	b.n	8000fa2 <__aeabi_dadd+0x502>
 8000bfe:	1e54      	subs	r4, r2, #1
 8000c00:	2a01      	cmp	r2, #1
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x166>
 8000c04:	e21f      	b.n	8001046 <__aeabi_dadd+0x5a6>
 8000c06:	4d83      	ldr	r5, [pc, #524]	; (8000e14 <__aeabi_dadd+0x374>)
 8000c08:	42aa      	cmp	r2, r5
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x16e>
 8000c0c:	e272      	b.n	80010f4 <__aeabi_dadd+0x654>
 8000c0e:	0022      	movs	r2, r4
 8000c10:	e123      	b.n	8000e5a <__aeabi_dadd+0x3ba>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	dc00      	bgt.n	8000c18 <__aeabi_dadd+0x178>
 8000c16:	e098      	b.n	8000d4a <__aeabi_dadd+0x2aa>
 8000c18:	2900      	cmp	r1, #0
 8000c1a:	d042      	beq.n	8000ca2 <__aeabi_dadd+0x202>
 8000c1c:	497d      	ldr	r1, [pc, #500]	; (8000e14 <__aeabi_dadd+0x374>)
 8000c1e:	428e      	cmp	r6, r1
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x184>
 8000c22:	e0da      	b.n	8000dda <__aeabi_dadd+0x33a>
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	0028      	movs	r0, r5
 8000c28:	0409      	lsls	r1, r1, #16
 8000c2a:	4308      	orrs	r0, r1
 8000c2c:	4684      	mov	ip, r0
 8000c2e:	2a38      	cmp	r2, #56	; 0x38
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_dadd+0x194>
 8000c32:	e129      	b.n	8000e88 <__aeabi_dadd+0x3e8>
 8000c34:	2a1f      	cmp	r2, #31
 8000c36:	dc00      	bgt.n	8000c3a <__aeabi_dadd+0x19a>
 8000c38:	e187      	b.n	8000f4a <__aeabi_dadd+0x4aa>
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	4665      	mov	r5, ip
 8000c3e:	3920      	subs	r1, #32
 8000c40:	40cd      	lsrs	r5, r1
 8000c42:	2a20      	cmp	r2, #32
 8000c44:	d004      	beq.n	8000c50 <__aeabi_dadd+0x1b0>
 8000c46:	2040      	movs	r0, #64	; 0x40
 8000c48:	4661      	mov	r1, ip
 8000c4a:	1a82      	subs	r2, r0, r2
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	430f      	orrs	r7, r1
 8000c50:	0039      	movs	r1, r7
 8000c52:	1e4f      	subs	r7, r1, #1
 8000c54:	41b9      	sbcs	r1, r7
 8000c56:	430d      	orrs	r5, r1
 8000c58:	e11b      	b.n	8000e92 <__aeabi_dadd+0x3f2>
 8000c5a:	0029      	movs	r1, r5
 8000c5c:	4339      	orrs	r1, r7
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x1c2>
 8000c60:	e0b5      	b.n	8000dce <__aeabi_dadd+0x32e>
 8000c62:	1e51      	subs	r1, r2, #1
 8000c64:	2a01      	cmp	r2, #1
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x1ca>
 8000c68:	e1ab      	b.n	8000fc2 <__aeabi_dadd+0x522>
 8000c6a:	486a      	ldr	r0, [pc, #424]	; (8000e14 <__aeabi_dadd+0x374>)
 8000c6c:	4282      	cmp	r2, r0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x1d2>
 8000c70:	e1b2      	b.n	8000fd8 <__aeabi_dadd+0x538>
 8000c72:	000a      	movs	r2, r1
 8000c74:	e743      	b.n	8000afe <__aeabi_dadd+0x5e>
 8000c76:	4969      	ldr	r1, [pc, #420]	; (8000e1c <__aeabi_dadd+0x37c>)
 8000c78:	1c75      	adds	r5, r6, #1
 8000c7a:	420d      	tst	r5, r1
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_dadd+0x1e0>
 8000c7e:	e0cf      	b.n	8000e20 <__aeabi_dadd+0x380>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x1e6>
 8000c84:	e193      	b.n	8000fae <__aeabi_dadd+0x50e>
 8000c86:	4649      	mov	r1, r9
 8000c88:	4319      	orrs	r1, r3
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x1ee>
 8000c8c:	e1d1      	b.n	8001032 <__aeabi_dadd+0x592>
 8000c8e:	4661      	mov	r1, ip
 8000c90:	4339      	orrs	r1, r7
 8000c92:	d000      	beq.n	8000c96 <__aeabi_dadd+0x1f6>
 8000c94:	e1e3      	b.n	800105e <__aeabi_dadd+0x5be>
 8000c96:	4649      	mov	r1, r9
 8000c98:	0758      	lsls	r0, r3, #29
 8000c9a:	08c9      	lsrs	r1, r1, #3
 8000c9c:	4301      	orrs	r1, r0
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	e026      	b.n	8000cf0 <__aeabi_dadd+0x250>
 8000ca2:	0029      	movs	r1, r5
 8000ca4:	4339      	orrs	r1, r7
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x20a>
 8000ca8:	e091      	b.n	8000dce <__aeabi_dadd+0x32e>
 8000caa:	1e51      	subs	r1, r2, #1
 8000cac:	2a01      	cmp	r2, #1
 8000cae:	d005      	beq.n	8000cbc <__aeabi_dadd+0x21c>
 8000cb0:	4858      	ldr	r0, [pc, #352]	; (8000e14 <__aeabi_dadd+0x374>)
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x218>
 8000cb6:	e18f      	b.n	8000fd8 <__aeabi_dadd+0x538>
 8000cb8:	000a      	movs	r2, r1
 8000cba:	e7b8      	b.n	8000c2e <__aeabi_dadd+0x18e>
 8000cbc:	003d      	movs	r5, r7
 8000cbe:	444d      	add	r5, r9
 8000cc0:	454d      	cmp	r5, r9
 8000cc2:	4189      	sbcs	r1, r1
 8000cc4:	4463      	add	r3, ip
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	4249      	negs	r1, r1
 8000cca:	4488      	add	r8, r1
 8000ccc:	4643      	mov	r3, r8
 8000cce:	2602      	movs	r6, #2
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	d500      	bpl.n	8000cd6 <__aeabi_dadd+0x236>
 8000cd4:	e0eb      	b.n	8000eae <__aeabi_dadd+0x40e>
 8000cd6:	3e01      	subs	r6, #1
 8000cd8:	076b      	lsls	r3, r5, #29
 8000cda:	d000      	beq.n	8000cde <__aeabi_dadd+0x23e>
 8000cdc:	e75c      	b.n	8000b98 <__aeabi_dadd+0xf8>
 8000cde:	4643      	mov	r3, r8
 8000ce0:	08e9      	lsrs	r1, r5, #3
 8000ce2:	075a      	lsls	r2, r3, #29
 8000ce4:	4311      	orrs	r1, r2
 8000ce6:	0032      	movs	r2, r6
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	484a      	ldr	r0, [pc, #296]	; (8000e14 <__aeabi_dadd+0x374>)
 8000cec:	4282      	cmp	r2, r0
 8000cee:	d021      	beq.n	8000d34 <__aeabi_dadd+0x294>
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	0552      	lsls	r2, r2, #21
 8000cf4:	0b1b      	lsrs	r3, r3, #12
 8000cf6:	0d52      	lsrs	r2, r2, #21
 8000cf8:	e76c      	b.n	8000bd4 <__aeabi_dadd+0x134>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_dadd+0x134>
 8000d00:	002a      	movs	r2, r5
 8000d02:	433a      	orrs	r2, r7
 8000d04:	d069      	beq.n	8000dda <__aeabi_dadd+0x33a>
 8000d06:	464a      	mov	r2, r9
 8000d08:	0758      	lsls	r0, r3, #29
 8000d0a:	08d1      	lsrs	r1, r2, #3
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	031b      	lsls	r3, r3, #12
 8000d12:	4308      	orrs	r0, r1
 8000d14:	421a      	tst	r2, r3
 8000d16:	d007      	beq.n	8000d28 <__aeabi_dadd+0x288>
 8000d18:	0029      	movs	r1, r5
 8000d1a:	08ed      	lsrs	r5, r5, #3
 8000d1c:	421d      	tst	r5, r3
 8000d1e:	d103      	bne.n	8000d28 <__aeabi_dadd+0x288>
 8000d20:	002a      	movs	r2, r5
 8000d22:	08ff      	lsrs	r7, r7, #3
 8000d24:	0748      	lsls	r0, r1, #29
 8000d26:	4338      	orrs	r0, r7
 8000d28:	0f43      	lsrs	r3, r0, #29
 8000d2a:	00c1      	lsls	r1, r0, #3
 8000d2c:	075b      	lsls	r3, r3, #29
 8000d2e:	08c9      	lsrs	r1, r1, #3
 8000d30:	4319      	orrs	r1, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	000a      	movs	r2, r1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x29c>
 8000d3a:	e213      	b.n	8001164 <__aeabi_dadd+0x6c4>
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0312      	lsls	r2, r2, #12
 8000d40:	4313      	orrs	r3, r2
 8000d42:	031b      	lsls	r3, r3, #12
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <__aeabi_dadd+0x374>)
 8000d46:	0b1b      	lsrs	r3, r3, #12
 8000d48:	e744      	b.n	8000bd4 <__aeabi_dadd+0x134>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d04b      	beq.n	8000de6 <__aeabi_dadd+0x346>
 8000d4e:	1b8a      	subs	r2, r1, r6
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x2b6>
 8000d54:	e0e7      	b.n	8000f26 <__aeabi_dadd+0x486>
 8000d56:	482f      	ldr	r0, [pc, #188]	; (8000e14 <__aeabi_dadd+0x374>)
 8000d58:	4281      	cmp	r1, r0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x2be>
 8000d5c:	e195      	b.n	800108a <__aeabi_dadd+0x5ea>
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	0400      	lsls	r0, r0, #16
 8000d62:	4303      	orrs	r3, r0
 8000d64:	2a38      	cmp	r2, #56	; 0x38
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_dadd+0x2ca>
 8000d68:	e143      	b.n	8000ff2 <__aeabi_dadd+0x552>
 8000d6a:	2a1f      	cmp	r2, #31
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dadd+0x2d0>
 8000d6e:	e1db      	b.n	8001128 <__aeabi_dadd+0x688>
 8000d70:	2020      	movs	r0, #32
 8000d72:	001d      	movs	r5, r3
 8000d74:	464e      	mov	r6, r9
 8000d76:	1a80      	subs	r0, r0, r2
 8000d78:	4085      	lsls	r5, r0
 8000d7a:	40d6      	lsrs	r6, r2
 8000d7c:	4335      	orrs	r5, r6
 8000d7e:	464e      	mov	r6, r9
 8000d80:	4086      	lsls	r6, r0
 8000d82:	0030      	movs	r0, r6
 8000d84:	40d3      	lsrs	r3, r2
 8000d86:	1e46      	subs	r6, r0, #1
 8000d88:	41b0      	sbcs	r0, r6
 8000d8a:	449c      	add	ip, r3
 8000d8c:	4305      	orrs	r5, r0
 8000d8e:	19ed      	adds	r5, r5, r7
 8000d90:	42bd      	cmp	r5, r7
 8000d92:	419b      	sbcs	r3, r3
 8000d94:	425b      	negs	r3, r3
 8000d96:	4463      	add	r3, ip
 8000d98:	4698      	mov	r8, r3
 8000d9a:	000e      	movs	r6, r1
 8000d9c:	e07f      	b.n	8000e9e <__aeabi_dadd+0x3fe>
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <__aeabi_dadd+0x378>)
 8000da0:	1a76      	subs	r6, r6, r1
 8000da2:	4013      	ands	r3, r2
 8000da4:	4698      	mov	r8, r3
 8000da6:	e6f5      	b.n	8000b94 <__aeabi_dadd+0xf4>
 8000da8:	0028      	movs	r0, r5
 8000daa:	f001 fcbb 	bl	8002724 <__clzsi2>
 8000dae:	0001      	movs	r1, r0
 8000db0:	3118      	adds	r1, #24
 8000db2:	291f      	cmp	r1, #31
 8000db4:	dc00      	bgt.n	8000db8 <__aeabi_dadd+0x318>
 8000db6:	e6cf      	b.n	8000b58 <__aeabi_dadd+0xb8>
 8000db8:	002b      	movs	r3, r5
 8000dba:	3808      	subs	r0, #8
 8000dbc:	4083      	lsls	r3, r0
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	e6d2      	b.n	8000b68 <__aeabi_dadd+0xc8>
 8000dc2:	4662      	mov	r2, ip
 8000dc4:	433a      	orrs	r2, r7
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	1e4f      	subs	r7, r1, #1
 8000dca:	41b9      	sbcs	r1, r7
 8000dcc:	e6ac      	b.n	8000b28 <__aeabi_dadd+0x88>
 8000dce:	4649      	mov	r1, r9
 8000dd0:	0758      	lsls	r0, r3, #29
 8000dd2:	08c9      	lsrs	r1, r1, #3
 8000dd4:	4301      	orrs	r1, r0
 8000dd6:	08db      	lsrs	r3, r3, #3
 8000dd8:	e787      	b.n	8000cea <__aeabi_dadd+0x24a>
 8000dda:	4649      	mov	r1, r9
 8000ddc:	075a      	lsls	r2, r3, #29
 8000dde:	08c9      	lsrs	r1, r1, #3
 8000de0:	4311      	orrs	r1, r2
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	e7a6      	b.n	8000d34 <__aeabi_dadd+0x294>
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <__aeabi_dadd+0x37c>)
 8000de8:	1c70      	adds	r0, r6, #1
 8000dea:	4208      	tst	r0, r1
 8000dec:	d000      	beq.n	8000df0 <__aeabi_dadd+0x350>
 8000dee:	e0bb      	b.n	8000f68 <__aeabi_dadd+0x4c8>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d000      	beq.n	8000df6 <__aeabi_dadd+0x356>
 8000df4:	e114      	b.n	8001020 <__aeabi_dadd+0x580>
 8000df6:	4649      	mov	r1, r9
 8000df8:	4319      	orrs	r1, r3
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x35e>
 8000dfc:	e175      	b.n	80010ea <__aeabi_dadd+0x64a>
 8000dfe:	0029      	movs	r1, r5
 8000e00:	4339      	orrs	r1, r7
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dadd+0x366>
 8000e04:	e17e      	b.n	8001104 <__aeabi_dadd+0x664>
 8000e06:	4649      	mov	r1, r9
 8000e08:	0758      	lsls	r0, r3, #29
 8000e0a:	08c9      	lsrs	r1, r1, #3
 8000e0c:	4301      	orrs	r1, r0
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	e76e      	b.n	8000cf0 <__aeabi_dadd+0x250>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff
 8000e1c:	000007fe 	.word	0x000007fe
 8000e20:	4649      	mov	r1, r9
 8000e22:	1bcd      	subs	r5, r1, r7
 8000e24:	4661      	mov	r1, ip
 8000e26:	1a58      	subs	r0, r3, r1
 8000e28:	45a9      	cmp	r9, r5
 8000e2a:	4189      	sbcs	r1, r1
 8000e2c:	4249      	negs	r1, r1
 8000e2e:	4688      	mov	r8, r1
 8000e30:	0001      	movs	r1, r0
 8000e32:	4640      	mov	r0, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	4688      	mov	r8, r1
 8000e38:	0209      	lsls	r1, r1, #8
 8000e3a:	d500      	bpl.n	8000e3e <__aeabi_dadd+0x39e>
 8000e3c:	e0a6      	b.n	8000f8c <__aeabi_dadd+0x4ec>
 8000e3e:	4641      	mov	r1, r8
 8000e40:	4329      	orrs	r1, r5
 8000e42:	d000      	beq.n	8000e46 <__aeabi_dadd+0x3a6>
 8000e44:	e67f      	b.n	8000b46 <__aeabi_dadd+0xa6>
 8000e46:	2300      	movs	r3, #0
 8000e48:	2400      	movs	r4, #0
 8000e4a:	e751      	b.n	8000cf0 <__aeabi_dadd+0x250>
 8000e4c:	4cc7      	ldr	r4, [pc, #796]	; (800116c <__aeabi_dadd+0x6cc>)
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dadd+0x3b4>
 8000e52:	e0c7      	b.n	8000fe4 <__aeabi_dadd+0x544>
 8000e54:	2480      	movs	r4, #128	; 0x80
 8000e56:	0424      	lsls	r4, r4, #16
 8000e58:	4323      	orrs	r3, r4
 8000e5a:	2a38      	cmp	r2, #56	; 0x38
 8000e5c:	dc54      	bgt.n	8000f08 <__aeabi_dadd+0x468>
 8000e5e:	2a1f      	cmp	r2, #31
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_dadd+0x3c4>
 8000e62:	e0cc      	b.n	8000ffe <__aeabi_dadd+0x55e>
 8000e64:	2420      	movs	r4, #32
 8000e66:	4648      	mov	r0, r9
 8000e68:	1aa4      	subs	r4, r4, r2
 8000e6a:	001d      	movs	r5, r3
 8000e6c:	464e      	mov	r6, r9
 8000e6e:	40a0      	lsls	r0, r4
 8000e70:	40d6      	lsrs	r6, r2
 8000e72:	40a5      	lsls	r5, r4
 8000e74:	0004      	movs	r4, r0
 8000e76:	40d3      	lsrs	r3, r2
 8000e78:	4662      	mov	r2, ip
 8000e7a:	4335      	orrs	r5, r6
 8000e7c:	1e66      	subs	r6, r4, #1
 8000e7e:	41b4      	sbcs	r4, r6
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	469c      	mov	ip, r3
 8000e84:	4325      	orrs	r5, r4
 8000e86:	e044      	b.n	8000f12 <__aeabi_dadd+0x472>
 8000e88:	4662      	mov	r2, ip
 8000e8a:	433a      	orrs	r2, r7
 8000e8c:	0015      	movs	r5, r2
 8000e8e:	1e6f      	subs	r7, r5, #1
 8000e90:	41bd      	sbcs	r5, r7
 8000e92:	444d      	add	r5, r9
 8000e94:	454d      	cmp	r5, r9
 8000e96:	4189      	sbcs	r1, r1
 8000e98:	4249      	negs	r1, r1
 8000e9a:	4688      	mov	r8, r1
 8000e9c:	4498      	add	r8, r3
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	d400      	bmi.n	8000ea6 <__aeabi_dadd+0x406>
 8000ea4:	e718      	b.n	8000cd8 <__aeabi_dadd+0x238>
 8000ea6:	4bb1      	ldr	r3, [pc, #708]	; (800116c <__aeabi_dadd+0x6cc>)
 8000ea8:	3601      	adds	r6, #1
 8000eaa:	429e      	cmp	r6, r3
 8000eac:	d049      	beq.n	8000f42 <__aeabi_dadd+0x4a2>
 8000eae:	4642      	mov	r2, r8
 8000eb0:	4baf      	ldr	r3, [pc, #700]	; (8001170 <__aeabi_dadd+0x6d0>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	086a      	lsrs	r2, r5, #1
 8000eba:	400d      	ands	r5, r1
 8000ebc:	4315      	orrs	r5, r2
 8000ebe:	07d9      	lsls	r1, r3, #31
 8000ec0:	085b      	lsrs	r3, r3, #1
 8000ec2:	4698      	mov	r8, r3
 8000ec4:	430d      	orrs	r5, r1
 8000ec6:	e665      	b.n	8000b94 <__aeabi_dadd+0xf4>
 8000ec8:	0018      	movs	r0, r3
 8000eca:	3e1f      	subs	r6, #31
 8000ecc:	40f0      	lsrs	r0, r6
 8000ece:	2a20      	cmp	r2, #32
 8000ed0:	d003      	beq.n	8000eda <__aeabi_dadd+0x43a>
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	1a8a      	subs	r2, r1, r2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	431d      	orrs	r5, r3
 8000eda:	1e69      	subs	r1, r5, #1
 8000edc:	418d      	sbcs	r5, r1
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2600      	movs	r6, #0
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	4305      	orrs	r5, r0
 8000ee6:	e6f7      	b.n	8000cd8 <__aeabi_dadd+0x238>
 8000ee8:	0011      	movs	r1, r2
 8000eea:	4665      	mov	r5, ip
 8000eec:	3920      	subs	r1, #32
 8000eee:	40cd      	lsrs	r5, r1
 8000ef0:	2a20      	cmp	r2, #32
 8000ef2:	d004      	beq.n	8000efe <__aeabi_dadd+0x45e>
 8000ef4:	2040      	movs	r0, #64	; 0x40
 8000ef6:	4661      	mov	r1, ip
 8000ef8:	1a82      	subs	r2, r0, r2
 8000efa:	4091      	lsls	r1, r2
 8000efc:	430f      	orrs	r7, r1
 8000efe:	0039      	movs	r1, r7
 8000f00:	1e4f      	subs	r7, r1, #1
 8000f02:	41b9      	sbcs	r1, r7
 8000f04:	4329      	orrs	r1, r5
 8000f06:	e60f      	b.n	8000b28 <__aeabi_dadd+0x88>
 8000f08:	464a      	mov	r2, r9
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	001d      	movs	r5, r3
 8000f0e:	1e6b      	subs	r3, r5, #1
 8000f10:	419d      	sbcs	r5, r3
 8000f12:	1b7d      	subs	r5, r7, r5
 8000f14:	42af      	cmp	r7, r5
 8000f16:	419b      	sbcs	r3, r3
 8000f18:	4662      	mov	r2, ip
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4698      	mov	r8, r3
 8000f20:	4654      	mov	r4, sl
 8000f22:	000e      	movs	r6, r1
 8000f24:	e607      	b.n	8000b36 <__aeabi_dadd+0x96>
 8000f26:	4648      	mov	r0, r9
 8000f28:	4318      	orrs	r0, r3
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x48e>
 8000f2c:	e0b3      	b.n	8001096 <__aeabi_dadd+0x5f6>
 8000f2e:	1e50      	subs	r0, r2, #1
 8000f30:	2a01      	cmp	r2, #1
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dadd+0x496>
 8000f34:	e10d      	b.n	8001152 <__aeabi_dadd+0x6b2>
 8000f36:	4d8d      	ldr	r5, [pc, #564]	; (800116c <__aeabi_dadd+0x6cc>)
 8000f38:	42aa      	cmp	r2, r5
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x49e>
 8000f3c:	e0a5      	b.n	800108a <__aeabi_dadd+0x5ea>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	e710      	b.n	8000d64 <__aeabi_dadd+0x2c4>
 8000f42:	0032      	movs	r2, r6
 8000f44:	2300      	movs	r3, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	e644      	b.n	8000bd4 <__aeabi_dadd+0x134>
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	0038      	movs	r0, r7
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4665      	mov	r5, ip
 8000f52:	408f      	lsls	r7, r1
 8000f54:	408d      	lsls	r5, r1
 8000f56:	40d0      	lsrs	r0, r2
 8000f58:	1e79      	subs	r1, r7, #1
 8000f5a:	418f      	sbcs	r7, r1
 8000f5c:	4305      	orrs	r5, r0
 8000f5e:	433d      	orrs	r5, r7
 8000f60:	4667      	mov	r7, ip
 8000f62:	40d7      	lsrs	r7, r2
 8000f64:	19db      	adds	r3, r3, r7
 8000f66:	e794      	b.n	8000e92 <__aeabi_dadd+0x3f2>
 8000f68:	4a80      	ldr	r2, [pc, #512]	; (800116c <__aeabi_dadd+0x6cc>)
 8000f6a:	4290      	cmp	r0, r2
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dadd+0x4d0>
 8000f6e:	e0ec      	b.n	800114a <__aeabi_dadd+0x6aa>
 8000f70:	0039      	movs	r1, r7
 8000f72:	4449      	add	r1, r9
 8000f74:	4549      	cmp	r1, r9
 8000f76:	4192      	sbcs	r2, r2
 8000f78:	4463      	add	r3, ip
 8000f7a:	4252      	negs	r2, r2
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	07dd      	lsls	r5, r3, #31
 8000f80:	0849      	lsrs	r1, r1, #1
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	4698      	mov	r8, r3
 8000f86:	0006      	movs	r6, r0
 8000f88:	430d      	orrs	r5, r1
 8000f8a:	e6a5      	b.n	8000cd8 <__aeabi_dadd+0x238>
 8000f8c:	464a      	mov	r2, r9
 8000f8e:	1abd      	subs	r5, r7, r2
 8000f90:	42af      	cmp	r7, r5
 8000f92:	4189      	sbcs	r1, r1
 8000f94:	4662      	mov	r2, ip
 8000f96:	4249      	negs	r1, r1
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	1a5b      	subs	r3, r3, r1
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	4654      	mov	r4, sl
 8000fa0:	e5d1      	b.n	8000b46 <__aeabi_dadd+0xa6>
 8000fa2:	076c      	lsls	r4, r5, #29
 8000fa4:	08f9      	lsrs	r1, r7, #3
 8000fa6:	4321      	orrs	r1, r4
 8000fa8:	08eb      	lsrs	r3, r5, #3
 8000faa:	0004      	movs	r4, r0
 8000fac:	e69d      	b.n	8000cea <__aeabi_dadd+0x24a>
 8000fae:	464a      	mov	r2, r9
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	d175      	bne.n	80010a0 <__aeabi_dadd+0x600>
 8000fb4:	4661      	mov	r1, ip
 8000fb6:	4339      	orrs	r1, r7
 8000fb8:	d114      	bne.n	8000fe4 <__aeabi_dadd+0x544>
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	031b      	lsls	r3, r3, #12
 8000fc0:	e6bc      	b.n	8000d3c <__aeabi_dadd+0x29c>
 8000fc2:	464a      	mov	r2, r9
 8000fc4:	1bd5      	subs	r5, r2, r7
 8000fc6:	45a9      	cmp	r9, r5
 8000fc8:	4189      	sbcs	r1, r1
 8000fca:	4662      	mov	r2, ip
 8000fcc:	4249      	negs	r1, r1
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	2601      	movs	r6, #1
 8000fd6:	e5ae      	b.n	8000b36 <__aeabi_dadd+0x96>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	08d1      	lsrs	r1, r2, #3
 8000fdc:	075a      	lsls	r2, r3, #29
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	e6a7      	b.n	8000d34 <__aeabi_dadd+0x294>
 8000fe4:	4663      	mov	r3, ip
 8000fe6:	08f9      	lsrs	r1, r7, #3
 8000fe8:	075a      	lsls	r2, r3, #29
 8000fea:	4654      	mov	r4, sl
 8000fec:	4311      	orrs	r1, r2
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_dadd+0x294>
 8000ff2:	464a      	mov	r2, r9
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	001d      	movs	r5, r3
 8000ff8:	1e6b      	subs	r3, r5, #1
 8000ffa:	419d      	sbcs	r5, r3
 8000ffc:	e6c7      	b.n	8000d8e <__aeabi_dadd+0x2ee>
 8000ffe:	0014      	movs	r4, r2
 8001000:	001e      	movs	r6, r3
 8001002:	3c20      	subs	r4, #32
 8001004:	40e6      	lsrs	r6, r4
 8001006:	2a20      	cmp	r2, #32
 8001008:	d005      	beq.n	8001016 <__aeabi_dadd+0x576>
 800100a:	2440      	movs	r4, #64	; 0x40
 800100c:	1aa2      	subs	r2, r4, r2
 800100e:	4093      	lsls	r3, r2
 8001010:	464a      	mov	r2, r9
 8001012:	431a      	orrs	r2, r3
 8001014:	4691      	mov	r9, r2
 8001016:	464d      	mov	r5, r9
 8001018:	1e6b      	subs	r3, r5, #1
 800101a:	419d      	sbcs	r5, r3
 800101c:	4335      	orrs	r5, r6
 800101e:	e778      	b.n	8000f12 <__aeabi_dadd+0x472>
 8001020:	464a      	mov	r2, r9
 8001022:	431a      	orrs	r2, r3
 8001024:	d000      	beq.n	8001028 <__aeabi_dadd+0x588>
 8001026:	e66b      	b.n	8000d00 <__aeabi_dadd+0x260>
 8001028:	076b      	lsls	r3, r5, #29
 800102a:	08f9      	lsrs	r1, r7, #3
 800102c:	4319      	orrs	r1, r3
 800102e:	08eb      	lsrs	r3, r5, #3
 8001030:	e680      	b.n	8000d34 <__aeabi_dadd+0x294>
 8001032:	4661      	mov	r1, ip
 8001034:	4339      	orrs	r1, r7
 8001036:	d054      	beq.n	80010e2 <__aeabi_dadd+0x642>
 8001038:	4663      	mov	r3, ip
 800103a:	08f9      	lsrs	r1, r7, #3
 800103c:	075c      	lsls	r4, r3, #29
 800103e:	4321      	orrs	r1, r4
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	0004      	movs	r4, r0
 8001044:	e654      	b.n	8000cf0 <__aeabi_dadd+0x250>
 8001046:	464a      	mov	r2, r9
 8001048:	1abd      	subs	r5, r7, r2
 800104a:	42af      	cmp	r7, r5
 800104c:	4189      	sbcs	r1, r1
 800104e:	4662      	mov	r2, ip
 8001050:	4249      	negs	r1, r1
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	1a5b      	subs	r3, r3, r1
 8001056:	4698      	mov	r8, r3
 8001058:	0004      	movs	r4, r0
 800105a:	2601      	movs	r6, #1
 800105c:	e56b      	b.n	8000b36 <__aeabi_dadd+0x96>
 800105e:	464a      	mov	r2, r9
 8001060:	1bd5      	subs	r5, r2, r7
 8001062:	45a9      	cmp	r9, r5
 8001064:	4189      	sbcs	r1, r1
 8001066:	4662      	mov	r2, ip
 8001068:	4249      	negs	r1, r1
 800106a:	1a9a      	subs	r2, r3, r2
 800106c:	1a52      	subs	r2, r2, r1
 800106e:	4690      	mov	r8, r2
 8001070:	0212      	lsls	r2, r2, #8
 8001072:	d532      	bpl.n	80010da <__aeabi_dadd+0x63a>
 8001074:	464a      	mov	r2, r9
 8001076:	1abd      	subs	r5, r7, r2
 8001078:	42af      	cmp	r7, r5
 800107a:	4189      	sbcs	r1, r1
 800107c:	4662      	mov	r2, ip
 800107e:	4249      	negs	r1, r1
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	1a5b      	subs	r3, r3, r1
 8001084:	4698      	mov	r8, r3
 8001086:	0004      	movs	r4, r0
 8001088:	e584      	b.n	8000b94 <__aeabi_dadd+0xf4>
 800108a:	4663      	mov	r3, ip
 800108c:	08f9      	lsrs	r1, r7, #3
 800108e:	075a      	lsls	r2, r3, #29
 8001090:	4311      	orrs	r1, r2
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	e64e      	b.n	8000d34 <__aeabi_dadd+0x294>
 8001096:	08f9      	lsrs	r1, r7, #3
 8001098:	0768      	lsls	r0, r5, #29
 800109a:	4301      	orrs	r1, r0
 800109c:	08eb      	lsrs	r3, r5, #3
 800109e:	e624      	b.n	8000cea <__aeabi_dadd+0x24a>
 80010a0:	4662      	mov	r2, ip
 80010a2:	433a      	orrs	r2, r7
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dadd+0x608>
 80010a6:	e698      	b.n	8000dda <__aeabi_dadd+0x33a>
 80010a8:	464a      	mov	r2, r9
 80010aa:	08d1      	lsrs	r1, r2, #3
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	4311      	orrs	r1, r2
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	031b      	lsls	r3, r3, #12
 80010b6:	421a      	tst	r2, r3
 80010b8:	d008      	beq.n	80010cc <__aeabi_dadd+0x62c>
 80010ba:	4660      	mov	r0, ip
 80010bc:	08c5      	lsrs	r5, r0, #3
 80010be:	421d      	tst	r5, r3
 80010c0:	d104      	bne.n	80010cc <__aeabi_dadd+0x62c>
 80010c2:	4654      	mov	r4, sl
 80010c4:	002a      	movs	r2, r5
 80010c6:	08f9      	lsrs	r1, r7, #3
 80010c8:	0743      	lsls	r3, r0, #29
 80010ca:	4319      	orrs	r1, r3
 80010cc:	0f4b      	lsrs	r3, r1, #29
 80010ce:	00c9      	lsls	r1, r1, #3
 80010d0:	075b      	lsls	r3, r3, #29
 80010d2:	08c9      	lsrs	r1, r1, #3
 80010d4:	4319      	orrs	r1, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	e62c      	b.n	8000d34 <__aeabi_dadd+0x294>
 80010da:	4641      	mov	r1, r8
 80010dc:	4329      	orrs	r1, r5
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x642>
 80010e0:	e5fa      	b.n	8000cd8 <__aeabi_dadd+0x238>
 80010e2:	2300      	movs	r3, #0
 80010e4:	000a      	movs	r2, r1
 80010e6:	2400      	movs	r4, #0
 80010e8:	e602      	b.n	8000cf0 <__aeabi_dadd+0x250>
 80010ea:	076b      	lsls	r3, r5, #29
 80010ec:	08f9      	lsrs	r1, r7, #3
 80010ee:	4319      	orrs	r1, r3
 80010f0:	08eb      	lsrs	r3, r5, #3
 80010f2:	e5fd      	b.n	8000cf0 <__aeabi_dadd+0x250>
 80010f4:	4663      	mov	r3, ip
 80010f6:	08f9      	lsrs	r1, r7, #3
 80010f8:	075b      	lsls	r3, r3, #29
 80010fa:	4319      	orrs	r1, r3
 80010fc:	4663      	mov	r3, ip
 80010fe:	0004      	movs	r4, r0
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	e617      	b.n	8000d34 <__aeabi_dadd+0x294>
 8001104:	003d      	movs	r5, r7
 8001106:	444d      	add	r5, r9
 8001108:	4463      	add	r3, ip
 800110a:	454d      	cmp	r5, r9
 800110c:	4189      	sbcs	r1, r1
 800110e:	4698      	mov	r8, r3
 8001110:	4249      	negs	r1, r1
 8001112:	4488      	add	r8, r1
 8001114:	4643      	mov	r3, r8
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	d400      	bmi.n	800111c <__aeabi_dadd+0x67c>
 800111a:	e5dd      	b.n	8000cd8 <__aeabi_dadd+0x238>
 800111c:	4642      	mov	r2, r8
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <__aeabi_dadd+0x6d0>)
 8001120:	2601      	movs	r6, #1
 8001122:	401a      	ands	r2, r3
 8001124:	4690      	mov	r8, r2
 8001126:	e5d7      	b.n	8000cd8 <__aeabi_dadd+0x238>
 8001128:	0010      	movs	r0, r2
 800112a:	001e      	movs	r6, r3
 800112c:	3820      	subs	r0, #32
 800112e:	40c6      	lsrs	r6, r0
 8001130:	2a20      	cmp	r2, #32
 8001132:	d005      	beq.n	8001140 <__aeabi_dadd+0x6a0>
 8001134:	2040      	movs	r0, #64	; 0x40
 8001136:	1a82      	subs	r2, r0, r2
 8001138:	4093      	lsls	r3, r2
 800113a:	464a      	mov	r2, r9
 800113c:	431a      	orrs	r2, r3
 800113e:	4691      	mov	r9, r2
 8001140:	464d      	mov	r5, r9
 8001142:	1e6b      	subs	r3, r5, #1
 8001144:	419d      	sbcs	r5, r3
 8001146:	4335      	orrs	r5, r6
 8001148:	e621      	b.n	8000d8e <__aeabi_dadd+0x2ee>
 800114a:	0002      	movs	r2, r0
 800114c:	2300      	movs	r3, #0
 800114e:	2100      	movs	r1, #0
 8001150:	e540      	b.n	8000bd4 <__aeabi_dadd+0x134>
 8001152:	464a      	mov	r2, r9
 8001154:	19d5      	adds	r5, r2, r7
 8001156:	42bd      	cmp	r5, r7
 8001158:	4189      	sbcs	r1, r1
 800115a:	4463      	add	r3, ip
 800115c:	4698      	mov	r8, r3
 800115e:	4249      	negs	r1, r1
 8001160:	4488      	add	r8, r1
 8001162:	e5b3      	b.n	8000ccc <__aeabi_dadd+0x22c>
 8001164:	2100      	movs	r1, #0
 8001166:	4a01      	ldr	r2, [pc, #4]	; (800116c <__aeabi_dadd+0x6cc>)
 8001168:	000b      	movs	r3, r1
 800116a:	e533      	b.n	8000bd4 <__aeabi_dadd+0x134>
 800116c:	000007ff 	.word	0x000007ff
 8001170:	ff7fffff 	.word	0xff7fffff

08001174 <__aeabi_ddiv>:
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	4657      	mov	r7, sl
 8001178:	464e      	mov	r6, r9
 800117a:	4645      	mov	r5, r8
 800117c:	46de      	mov	lr, fp
 800117e:	b5e0      	push	{r5, r6, r7, lr}
 8001180:	4681      	mov	r9, r0
 8001182:	0005      	movs	r5, r0
 8001184:	030c      	lsls	r4, r1, #12
 8001186:	0048      	lsls	r0, r1, #1
 8001188:	4692      	mov	sl, r2
 800118a:	001f      	movs	r7, r3
 800118c:	b085      	sub	sp, #20
 800118e:	0b24      	lsrs	r4, r4, #12
 8001190:	0d40      	lsrs	r0, r0, #21
 8001192:	0fce      	lsrs	r6, r1, #31
 8001194:	2800      	cmp	r0, #0
 8001196:	d059      	beq.n	800124c <__aeabi_ddiv+0xd8>
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <__aeabi_ddiv+0x244>)
 800119a:	4298      	cmp	r0, r3
 800119c:	d100      	bne.n	80011a0 <__aeabi_ddiv+0x2c>
 800119e:	e098      	b.n	80012d2 <__aeabi_ddiv+0x15e>
 80011a0:	0f6b      	lsrs	r3, r5, #29
 80011a2:	00e4      	lsls	r4, r4, #3
 80011a4:	431c      	orrs	r4, r3
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	4323      	orrs	r3, r4
 80011ac:	4698      	mov	r8, r3
 80011ae:	4b83      	ldr	r3, [pc, #524]	; (80013bc <__aeabi_ddiv+0x248>)
 80011b0:	00ed      	lsls	r5, r5, #3
 80011b2:	469b      	mov	fp, r3
 80011b4:	2300      	movs	r3, #0
 80011b6:	4699      	mov	r9, r3
 80011b8:	4483      	add	fp, r0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	033c      	lsls	r4, r7, #12
 80011be:	007b      	lsls	r3, r7, #1
 80011c0:	4650      	mov	r0, sl
 80011c2:	0b24      	lsrs	r4, r4, #12
 80011c4:	0d5b      	lsrs	r3, r3, #21
 80011c6:	0fff      	lsrs	r7, r7, #31
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d067      	beq.n	800129c <__aeabi_ddiv+0x128>
 80011cc:	4a7a      	ldr	r2, [pc, #488]	; (80013b8 <__aeabi_ddiv+0x244>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d018      	beq.n	8001204 <__aeabi_ddiv+0x90>
 80011d2:	497a      	ldr	r1, [pc, #488]	; (80013bc <__aeabi_ddiv+0x248>)
 80011d4:	0f42      	lsrs	r2, r0, #29
 80011d6:	468c      	mov	ip, r1
 80011d8:	00e4      	lsls	r4, r4, #3
 80011da:	4659      	mov	r1, fp
 80011dc:	4314      	orrs	r4, r2
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	4463      	add	r3, ip
 80011e2:	0412      	lsls	r2, r2, #16
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4314      	orrs	r4, r2
 80011e8:	469b      	mov	fp, r3
 80011ea:	00c2      	lsls	r2, r0, #3
 80011ec:	2000      	movs	r0, #0
 80011ee:	0033      	movs	r3, r6
 80011f0:	407b      	eors	r3, r7
 80011f2:	469a      	mov	sl, r3
 80011f4:	464b      	mov	r3, r9
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d900      	bls.n	80011fc <__aeabi_ddiv+0x88>
 80011fa:	e0ef      	b.n	80013dc <__aeabi_ddiv+0x268>
 80011fc:	4970      	ldr	r1, [pc, #448]	; (80013c0 <__aeabi_ddiv+0x24c>)
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	58cb      	ldr	r3, [r1, r3]
 8001202:	469f      	mov	pc, r3
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <__aeabi_ddiv+0x250>)
 8001206:	4652      	mov	r2, sl
 8001208:	469c      	mov	ip, r3
 800120a:	4322      	orrs	r2, r4
 800120c:	44e3      	add	fp, ip
 800120e:	2a00      	cmp	r2, #0
 8001210:	d000      	beq.n	8001214 <__aeabi_ddiv+0xa0>
 8001212:	e095      	b.n	8001340 <__aeabi_ddiv+0x1cc>
 8001214:	4649      	mov	r1, r9
 8001216:	2302      	movs	r3, #2
 8001218:	4319      	orrs	r1, r3
 800121a:	4689      	mov	r9, r1
 800121c:	2400      	movs	r4, #0
 800121e:	2002      	movs	r0, #2
 8001220:	e7e5      	b.n	80011ee <__aeabi_ddiv+0x7a>
 8001222:	2300      	movs	r3, #0
 8001224:	2400      	movs	r4, #0
 8001226:	2500      	movs	r5, #0
 8001228:	4652      	mov	r2, sl
 800122a:	051b      	lsls	r3, r3, #20
 800122c:	4323      	orrs	r3, r4
 800122e:	07d2      	lsls	r2, r2, #31
 8001230:	4313      	orrs	r3, r2
 8001232:	0028      	movs	r0, r5
 8001234:	0019      	movs	r1, r3
 8001236:	b005      	add	sp, #20
 8001238:	bcf0      	pop	{r4, r5, r6, r7}
 800123a:	46bb      	mov	fp, r7
 800123c:	46b2      	mov	sl, r6
 800123e:	46a9      	mov	r9, r5
 8001240:	46a0      	mov	r8, r4
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	2400      	movs	r4, #0
 8001246:	2500      	movs	r5, #0
 8001248:	4b5b      	ldr	r3, [pc, #364]	; (80013b8 <__aeabi_ddiv+0x244>)
 800124a:	e7ed      	b.n	8001228 <__aeabi_ddiv+0xb4>
 800124c:	464b      	mov	r3, r9
 800124e:	4323      	orrs	r3, r4
 8001250:	4698      	mov	r8, r3
 8001252:	d100      	bne.n	8001256 <__aeabi_ddiv+0xe2>
 8001254:	e089      	b.n	800136a <__aeabi_ddiv+0x1f6>
 8001256:	2c00      	cmp	r4, #0
 8001258:	d100      	bne.n	800125c <__aeabi_ddiv+0xe8>
 800125a:	e1e0      	b.n	800161e <__aeabi_ddiv+0x4aa>
 800125c:	0020      	movs	r0, r4
 800125e:	f001 fa61 	bl	8002724 <__clzsi2>
 8001262:	0001      	movs	r1, r0
 8001264:	0002      	movs	r2, r0
 8001266:	390b      	subs	r1, #11
 8001268:	231d      	movs	r3, #29
 800126a:	1a5b      	subs	r3, r3, r1
 800126c:	4649      	mov	r1, r9
 800126e:	0010      	movs	r0, r2
 8001270:	40d9      	lsrs	r1, r3
 8001272:	3808      	subs	r0, #8
 8001274:	4084      	lsls	r4, r0
 8001276:	000b      	movs	r3, r1
 8001278:	464d      	mov	r5, r9
 800127a:	4323      	orrs	r3, r4
 800127c:	4698      	mov	r8, r3
 800127e:	4085      	lsls	r5, r0
 8001280:	4851      	ldr	r0, [pc, #324]	; (80013c8 <__aeabi_ddiv+0x254>)
 8001282:	033c      	lsls	r4, r7, #12
 8001284:	1a83      	subs	r3, r0, r2
 8001286:	469b      	mov	fp, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4699      	mov	r9, r3
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	007b      	lsls	r3, r7, #1
 8001290:	4650      	mov	r0, sl
 8001292:	0b24      	lsrs	r4, r4, #12
 8001294:	0d5b      	lsrs	r3, r3, #21
 8001296:	0fff      	lsrs	r7, r7, #31
 8001298:	2b00      	cmp	r3, #0
 800129a:	d197      	bne.n	80011cc <__aeabi_ddiv+0x58>
 800129c:	4652      	mov	r2, sl
 800129e:	4322      	orrs	r2, r4
 80012a0:	d055      	beq.n	800134e <__aeabi_ddiv+0x1da>
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_ddiv+0x134>
 80012a6:	e1ca      	b.n	800163e <__aeabi_ddiv+0x4ca>
 80012a8:	0020      	movs	r0, r4
 80012aa:	f001 fa3b 	bl	8002724 <__clzsi2>
 80012ae:	0002      	movs	r2, r0
 80012b0:	3a0b      	subs	r2, #11
 80012b2:	231d      	movs	r3, #29
 80012b4:	0001      	movs	r1, r0
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	4652      	mov	r2, sl
 80012ba:	3908      	subs	r1, #8
 80012bc:	40da      	lsrs	r2, r3
 80012be:	408c      	lsls	r4, r1
 80012c0:	4314      	orrs	r4, r2
 80012c2:	4652      	mov	r2, sl
 80012c4:	408a      	lsls	r2, r1
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <__aeabi_ddiv+0x258>)
 80012c8:	4458      	add	r0, fp
 80012ca:	469b      	mov	fp, r3
 80012cc:	4483      	add	fp, r0
 80012ce:	2000      	movs	r0, #0
 80012d0:	e78d      	b.n	80011ee <__aeabi_ddiv+0x7a>
 80012d2:	464b      	mov	r3, r9
 80012d4:	4323      	orrs	r3, r4
 80012d6:	4698      	mov	r8, r3
 80012d8:	d140      	bne.n	800135c <__aeabi_ddiv+0x1e8>
 80012da:	2308      	movs	r3, #8
 80012dc:	4699      	mov	r9, r3
 80012de:	3b06      	subs	r3, #6
 80012e0:	2500      	movs	r5, #0
 80012e2:	4683      	mov	fp, r0
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	e769      	b.n	80011bc <__aeabi_ddiv+0x48>
 80012e8:	46b2      	mov	sl, r6
 80012ea:	9b00      	ldr	r3, [sp, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d0a9      	beq.n	8001244 <__aeabi_ddiv+0xd0>
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d100      	bne.n	80012f6 <__aeabi_ddiv+0x182>
 80012f4:	e211      	b.n	800171a <__aeabi_ddiv+0x5a6>
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d093      	beq.n	8001222 <__aeabi_ddiv+0xae>
 80012fa:	4a35      	ldr	r2, [pc, #212]	; (80013d0 <__aeabi_ddiv+0x25c>)
 80012fc:	445a      	add	r2, fp
 80012fe:	2a00      	cmp	r2, #0
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x190>
 8001302:	e13c      	b.n	800157e <__aeabi_ddiv+0x40a>
 8001304:	076b      	lsls	r3, r5, #29
 8001306:	d000      	beq.n	800130a <__aeabi_ddiv+0x196>
 8001308:	e1a7      	b.n	800165a <__aeabi_ddiv+0x4e6>
 800130a:	08ed      	lsrs	r5, r5, #3
 800130c:	4643      	mov	r3, r8
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	d506      	bpl.n	8001320 <__aeabi_ddiv+0x1ac>
 8001312:	4642      	mov	r2, r8
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <__aeabi_ddiv+0x260>)
 8001316:	401a      	ands	r2, r3
 8001318:	4690      	mov	r8, r2
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	00d2      	lsls	r2, r2, #3
 800131e:	445a      	add	r2, fp
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <__aeabi_ddiv+0x264>)
 8001322:	429a      	cmp	r2, r3
 8001324:	dc8e      	bgt.n	8001244 <__aeabi_ddiv+0xd0>
 8001326:	4643      	mov	r3, r8
 8001328:	0552      	lsls	r2, r2, #21
 800132a:	0758      	lsls	r0, r3, #29
 800132c:	025c      	lsls	r4, r3, #9
 800132e:	4305      	orrs	r5, r0
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	0d53      	lsrs	r3, r2, #21
 8001334:	e778      	b.n	8001228 <__aeabi_ddiv+0xb4>
 8001336:	46ba      	mov	sl, r7
 8001338:	46a0      	mov	r8, r4
 800133a:	0015      	movs	r5, r2
 800133c:	9000      	str	r0, [sp, #0]
 800133e:	e7d4      	b.n	80012ea <__aeabi_ddiv+0x176>
 8001340:	464a      	mov	r2, r9
 8001342:	2303      	movs	r3, #3
 8001344:	431a      	orrs	r2, r3
 8001346:	4691      	mov	r9, r2
 8001348:	2003      	movs	r0, #3
 800134a:	4652      	mov	r2, sl
 800134c:	e74f      	b.n	80011ee <__aeabi_ddiv+0x7a>
 800134e:	4649      	mov	r1, r9
 8001350:	2301      	movs	r3, #1
 8001352:	4319      	orrs	r1, r3
 8001354:	4689      	mov	r9, r1
 8001356:	2400      	movs	r4, #0
 8001358:	2001      	movs	r0, #1
 800135a:	e748      	b.n	80011ee <__aeabi_ddiv+0x7a>
 800135c:	230c      	movs	r3, #12
 800135e:	4699      	mov	r9, r3
 8001360:	3b09      	subs	r3, #9
 8001362:	46a0      	mov	r8, r4
 8001364:	4683      	mov	fp, r0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	e728      	b.n	80011bc <__aeabi_ddiv+0x48>
 800136a:	2304      	movs	r3, #4
 800136c:	4699      	mov	r9, r3
 800136e:	2300      	movs	r3, #0
 8001370:	469b      	mov	fp, r3
 8001372:	3301      	adds	r3, #1
 8001374:	2500      	movs	r5, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	e720      	b.n	80011bc <__aeabi_ddiv+0x48>
 800137a:	2300      	movs	r3, #0
 800137c:	2480      	movs	r4, #128	; 0x80
 800137e:	469a      	mov	sl, r3
 8001380:	2500      	movs	r5, #0
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <__aeabi_ddiv+0x244>)
 8001384:	0324      	lsls	r4, r4, #12
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0xb4>
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	4641      	mov	r1, r8
 800138c:	031b      	lsls	r3, r3, #12
 800138e:	4219      	tst	r1, r3
 8001390:	d008      	beq.n	80013a4 <__aeabi_ddiv+0x230>
 8001392:	421c      	tst	r4, r3
 8001394:	d106      	bne.n	80013a4 <__aeabi_ddiv+0x230>
 8001396:	431c      	orrs	r4, r3
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	46ba      	mov	sl, r7
 800139c:	0015      	movs	r5, r2
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <__aeabi_ddiv+0x244>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e741      	b.n	8001228 <__aeabi_ddiv+0xb4>
 80013a4:	2480      	movs	r4, #128	; 0x80
 80013a6:	4643      	mov	r3, r8
 80013a8:	0324      	lsls	r4, r4, #12
 80013aa:	431c      	orrs	r4, r3
 80013ac:	0324      	lsls	r4, r4, #12
 80013ae:	46b2      	mov	sl, r6
 80013b0:	4b01      	ldr	r3, [pc, #4]	; (80013b8 <__aeabi_ddiv+0x244>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	e738      	b.n	8001228 <__aeabi_ddiv+0xb4>
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	000007ff 	.word	0x000007ff
 80013bc:	fffffc01 	.word	0xfffffc01
 80013c0:	0801148c 	.word	0x0801148c
 80013c4:	fffff801 	.word	0xfffff801
 80013c8:	fffffc0d 	.word	0xfffffc0d
 80013cc:	000003f3 	.word	0x000003f3
 80013d0:	000003ff 	.word	0x000003ff
 80013d4:	feffffff 	.word	0xfeffffff
 80013d8:	000007fe 	.word	0x000007fe
 80013dc:	4544      	cmp	r4, r8
 80013de:	d200      	bcs.n	80013e2 <__aeabi_ddiv+0x26e>
 80013e0:	e116      	b.n	8001610 <__aeabi_ddiv+0x49c>
 80013e2:	d100      	bne.n	80013e6 <__aeabi_ddiv+0x272>
 80013e4:	e111      	b.n	800160a <__aeabi_ddiv+0x496>
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	469c      	mov	ip, r3
 80013ec:	002e      	movs	r6, r5
 80013ee:	4640      	mov	r0, r8
 80013f0:	2500      	movs	r5, #0
 80013f2:	44e3      	add	fp, ip
 80013f4:	0223      	lsls	r3, r4, #8
 80013f6:	0e14      	lsrs	r4, r2, #24
 80013f8:	431c      	orrs	r4, r3
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	4699      	mov	r9, r3
 80013fe:	0423      	lsls	r3, r4, #16
 8001400:	0c1f      	lsrs	r7, r3, #16
 8001402:	0212      	lsls	r2, r2, #8
 8001404:	4649      	mov	r1, r9
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	9701      	str	r7, [sp, #4]
 800140a:	f7fe ff0d 	bl	8000228 <__aeabi_uidivmod>
 800140e:	0002      	movs	r2, r0
 8001410:	437a      	muls	r2, r7
 8001412:	040b      	lsls	r3, r1, #16
 8001414:	0c31      	lsrs	r1, r6, #16
 8001416:	4680      	mov	r8, r0
 8001418:	4319      	orrs	r1, r3
 800141a:	428a      	cmp	r2, r1
 800141c:	d90b      	bls.n	8001436 <__aeabi_ddiv+0x2c2>
 800141e:	2301      	movs	r3, #1
 8001420:	425b      	negs	r3, r3
 8001422:	469c      	mov	ip, r3
 8001424:	1909      	adds	r1, r1, r4
 8001426:	44e0      	add	r8, ip
 8001428:	428c      	cmp	r4, r1
 800142a:	d804      	bhi.n	8001436 <__aeabi_ddiv+0x2c2>
 800142c:	428a      	cmp	r2, r1
 800142e:	d902      	bls.n	8001436 <__aeabi_ddiv+0x2c2>
 8001430:	1e83      	subs	r3, r0, #2
 8001432:	4698      	mov	r8, r3
 8001434:	1909      	adds	r1, r1, r4
 8001436:	1a88      	subs	r0, r1, r2
 8001438:	4649      	mov	r1, r9
 800143a:	f7fe fef5 	bl	8000228 <__aeabi_uidivmod>
 800143e:	0409      	lsls	r1, r1, #16
 8001440:	468c      	mov	ip, r1
 8001442:	0431      	lsls	r1, r6, #16
 8001444:	4666      	mov	r6, ip
 8001446:	9a01      	ldr	r2, [sp, #4]
 8001448:	0c09      	lsrs	r1, r1, #16
 800144a:	4342      	muls	r2, r0
 800144c:	0003      	movs	r3, r0
 800144e:	4331      	orrs	r1, r6
 8001450:	428a      	cmp	r2, r1
 8001452:	d904      	bls.n	800145e <__aeabi_ddiv+0x2ea>
 8001454:	1909      	adds	r1, r1, r4
 8001456:	3b01      	subs	r3, #1
 8001458:	428c      	cmp	r4, r1
 800145a:	d800      	bhi.n	800145e <__aeabi_ddiv+0x2ea>
 800145c:	e111      	b.n	8001682 <__aeabi_ddiv+0x50e>
 800145e:	1a89      	subs	r1, r1, r2
 8001460:	4642      	mov	r2, r8
 8001462:	9e00      	ldr	r6, [sp, #0]
 8001464:	0412      	lsls	r2, r2, #16
 8001466:	431a      	orrs	r2, r3
 8001468:	0c33      	lsrs	r3, r6, #16
 800146a:	001f      	movs	r7, r3
 800146c:	0c10      	lsrs	r0, r2, #16
 800146e:	4690      	mov	r8, r2
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	0413      	lsls	r3, r2, #16
 8001474:	0432      	lsls	r2, r6, #16
 8001476:	0c16      	lsrs	r6, r2, #16
 8001478:	0032      	movs	r2, r6
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	435a      	muls	r2, r3
 800147e:	9603      	str	r6, [sp, #12]
 8001480:	437b      	muls	r3, r7
 8001482:	4346      	muls	r6, r0
 8001484:	4378      	muls	r0, r7
 8001486:	0c17      	lsrs	r7, r2, #16
 8001488:	46bc      	mov	ip, r7
 800148a:	199b      	adds	r3, r3, r6
 800148c:	4463      	add	r3, ip
 800148e:	429e      	cmp	r6, r3
 8001490:	d903      	bls.n	800149a <__aeabi_ddiv+0x326>
 8001492:	2680      	movs	r6, #128	; 0x80
 8001494:	0276      	lsls	r6, r6, #9
 8001496:	46b4      	mov	ip, r6
 8001498:	4460      	add	r0, ip
 800149a:	0c1e      	lsrs	r6, r3, #16
 800149c:	1830      	adds	r0, r6, r0
 800149e:	0416      	lsls	r6, r2, #16
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	0c36      	lsrs	r6, r6, #16
 80014a4:	199e      	adds	r6, r3, r6
 80014a6:	4281      	cmp	r1, r0
 80014a8:	d200      	bcs.n	80014ac <__aeabi_ddiv+0x338>
 80014aa:	e09c      	b.n	80015e6 <__aeabi_ddiv+0x472>
 80014ac:	d100      	bne.n	80014b0 <__aeabi_ddiv+0x33c>
 80014ae:	e097      	b.n	80015e0 <__aeabi_ddiv+0x46c>
 80014b0:	1bae      	subs	r6, r5, r6
 80014b2:	1a09      	subs	r1, r1, r0
 80014b4:	42b5      	cmp	r5, r6
 80014b6:	4180      	sbcs	r0, r0
 80014b8:	4240      	negs	r0, r0
 80014ba:	1a08      	subs	r0, r1, r0
 80014bc:	4284      	cmp	r4, r0
 80014be:	d100      	bne.n	80014c2 <__aeabi_ddiv+0x34e>
 80014c0:	e111      	b.n	80016e6 <__aeabi_ddiv+0x572>
 80014c2:	4649      	mov	r1, r9
 80014c4:	f7fe feb0 	bl	8000228 <__aeabi_uidivmod>
 80014c8:	9a01      	ldr	r2, [sp, #4]
 80014ca:	040b      	lsls	r3, r1, #16
 80014cc:	4342      	muls	r2, r0
 80014ce:	0c31      	lsrs	r1, r6, #16
 80014d0:	0005      	movs	r5, r0
 80014d2:	4319      	orrs	r1, r3
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d907      	bls.n	80014e8 <__aeabi_ddiv+0x374>
 80014d8:	1909      	adds	r1, r1, r4
 80014da:	3d01      	subs	r5, #1
 80014dc:	428c      	cmp	r4, r1
 80014de:	d803      	bhi.n	80014e8 <__aeabi_ddiv+0x374>
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d901      	bls.n	80014e8 <__aeabi_ddiv+0x374>
 80014e4:	1e85      	subs	r5, r0, #2
 80014e6:	1909      	adds	r1, r1, r4
 80014e8:	1a88      	subs	r0, r1, r2
 80014ea:	4649      	mov	r1, r9
 80014ec:	f7fe fe9c 	bl	8000228 <__aeabi_uidivmod>
 80014f0:	0409      	lsls	r1, r1, #16
 80014f2:	468c      	mov	ip, r1
 80014f4:	0431      	lsls	r1, r6, #16
 80014f6:	4666      	mov	r6, ip
 80014f8:	9a01      	ldr	r2, [sp, #4]
 80014fa:	0c09      	lsrs	r1, r1, #16
 80014fc:	4342      	muls	r2, r0
 80014fe:	0003      	movs	r3, r0
 8001500:	4331      	orrs	r1, r6
 8001502:	428a      	cmp	r2, r1
 8001504:	d907      	bls.n	8001516 <__aeabi_ddiv+0x3a2>
 8001506:	1909      	adds	r1, r1, r4
 8001508:	3b01      	subs	r3, #1
 800150a:	428c      	cmp	r4, r1
 800150c:	d803      	bhi.n	8001516 <__aeabi_ddiv+0x3a2>
 800150e:	428a      	cmp	r2, r1
 8001510:	d901      	bls.n	8001516 <__aeabi_ddiv+0x3a2>
 8001512:	1e83      	subs	r3, r0, #2
 8001514:	1909      	adds	r1, r1, r4
 8001516:	9e03      	ldr	r6, [sp, #12]
 8001518:	1a89      	subs	r1, r1, r2
 800151a:	0032      	movs	r2, r6
 800151c:	042d      	lsls	r5, r5, #16
 800151e:	431d      	orrs	r5, r3
 8001520:	9f02      	ldr	r7, [sp, #8]
 8001522:	042b      	lsls	r3, r5, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	435a      	muls	r2, r3
 8001528:	437b      	muls	r3, r7
 800152a:	469c      	mov	ip, r3
 800152c:	0c28      	lsrs	r0, r5, #16
 800152e:	4346      	muls	r6, r0
 8001530:	0c13      	lsrs	r3, r2, #16
 8001532:	44b4      	add	ip, r6
 8001534:	4463      	add	r3, ip
 8001536:	4378      	muls	r0, r7
 8001538:	429e      	cmp	r6, r3
 800153a:	d903      	bls.n	8001544 <__aeabi_ddiv+0x3d0>
 800153c:	2680      	movs	r6, #128	; 0x80
 800153e:	0276      	lsls	r6, r6, #9
 8001540:	46b4      	mov	ip, r6
 8001542:	4460      	add	r0, ip
 8001544:	0c1e      	lsrs	r6, r3, #16
 8001546:	0412      	lsls	r2, r2, #16
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	0c12      	lsrs	r2, r2, #16
 800154c:	1830      	adds	r0, r6, r0
 800154e:	189b      	adds	r3, r3, r2
 8001550:	4281      	cmp	r1, r0
 8001552:	d306      	bcc.n	8001562 <__aeabi_ddiv+0x3ee>
 8001554:	d002      	beq.n	800155c <__aeabi_ddiv+0x3e8>
 8001556:	2301      	movs	r3, #1
 8001558:	431d      	orrs	r5, r3
 800155a:	e6ce      	b.n	80012fa <__aeabi_ddiv+0x186>
 800155c:	2b00      	cmp	r3, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_ddiv+0x3ee>
 8001560:	e6cb      	b.n	80012fa <__aeabi_ddiv+0x186>
 8001562:	1861      	adds	r1, r4, r1
 8001564:	1e6e      	subs	r6, r5, #1
 8001566:	42a1      	cmp	r1, r4
 8001568:	d200      	bcs.n	800156c <__aeabi_ddiv+0x3f8>
 800156a:	e0a4      	b.n	80016b6 <__aeabi_ddiv+0x542>
 800156c:	4281      	cmp	r1, r0
 800156e:	d200      	bcs.n	8001572 <__aeabi_ddiv+0x3fe>
 8001570:	e0c9      	b.n	8001706 <__aeabi_ddiv+0x592>
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0x402>
 8001574:	e0d9      	b.n	800172a <__aeabi_ddiv+0x5b6>
 8001576:	0035      	movs	r5, r6
 8001578:	e7ed      	b.n	8001556 <__aeabi_ddiv+0x3e2>
 800157a:	2501      	movs	r5, #1
 800157c:	426d      	negs	r5, r5
 800157e:	2101      	movs	r1, #1
 8001580:	1a89      	subs	r1, r1, r2
 8001582:	2938      	cmp	r1, #56	; 0x38
 8001584:	dd00      	ble.n	8001588 <__aeabi_ddiv+0x414>
 8001586:	e64c      	b.n	8001222 <__aeabi_ddiv+0xae>
 8001588:	291f      	cmp	r1, #31
 800158a:	dc00      	bgt.n	800158e <__aeabi_ddiv+0x41a>
 800158c:	e07f      	b.n	800168e <__aeabi_ddiv+0x51a>
 800158e:	231f      	movs	r3, #31
 8001590:	425b      	negs	r3, r3
 8001592:	1a9a      	subs	r2, r3, r2
 8001594:	4643      	mov	r3, r8
 8001596:	40d3      	lsrs	r3, r2
 8001598:	2920      	cmp	r1, #32
 800159a:	d004      	beq.n	80015a6 <__aeabi_ddiv+0x432>
 800159c:	4644      	mov	r4, r8
 800159e:	4a65      	ldr	r2, [pc, #404]	; (8001734 <__aeabi_ddiv+0x5c0>)
 80015a0:	445a      	add	r2, fp
 80015a2:	4094      	lsls	r4, r2
 80015a4:	4325      	orrs	r5, r4
 80015a6:	1e6a      	subs	r2, r5, #1
 80015a8:	4195      	sbcs	r5, r2
 80015aa:	2207      	movs	r2, #7
 80015ac:	432b      	orrs	r3, r5
 80015ae:	0015      	movs	r5, r2
 80015b0:	2400      	movs	r4, #0
 80015b2:	401d      	ands	r5, r3
 80015b4:	421a      	tst	r2, r3
 80015b6:	d100      	bne.n	80015ba <__aeabi_ddiv+0x446>
 80015b8:	e0a1      	b.n	80016fe <__aeabi_ddiv+0x58a>
 80015ba:	220f      	movs	r2, #15
 80015bc:	2400      	movs	r4, #0
 80015be:	401a      	ands	r2, r3
 80015c0:	2a04      	cmp	r2, #4
 80015c2:	d100      	bne.n	80015c6 <__aeabi_ddiv+0x452>
 80015c4:	e098      	b.n	80016f8 <__aeabi_ddiv+0x584>
 80015c6:	1d1a      	adds	r2, r3, #4
 80015c8:	429a      	cmp	r2, r3
 80015ca:	419b      	sbcs	r3, r3
 80015cc:	425b      	negs	r3, r3
 80015ce:	18e4      	adds	r4, r4, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	0222      	lsls	r2, r4, #8
 80015d4:	d400      	bmi.n	80015d8 <__aeabi_ddiv+0x464>
 80015d6:	e08f      	b.n	80016f8 <__aeabi_ddiv+0x584>
 80015d8:	2301      	movs	r3, #1
 80015da:	2400      	movs	r4, #0
 80015dc:	2500      	movs	r5, #0
 80015de:	e623      	b.n	8001228 <__aeabi_ddiv+0xb4>
 80015e0:	42b5      	cmp	r5, r6
 80015e2:	d300      	bcc.n	80015e6 <__aeabi_ddiv+0x472>
 80015e4:	e764      	b.n	80014b0 <__aeabi_ddiv+0x33c>
 80015e6:	4643      	mov	r3, r8
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	9b00      	ldr	r3, [sp, #0]
 80015ec:	469c      	mov	ip, r3
 80015ee:	4465      	add	r5, ip
 80015f0:	001f      	movs	r7, r3
 80015f2:	429d      	cmp	r5, r3
 80015f4:	419b      	sbcs	r3, r3
 80015f6:	425b      	negs	r3, r3
 80015f8:	191b      	adds	r3, r3, r4
 80015fa:	18c9      	adds	r1, r1, r3
 80015fc:	428c      	cmp	r4, r1
 80015fe:	d23a      	bcs.n	8001676 <__aeabi_ddiv+0x502>
 8001600:	4288      	cmp	r0, r1
 8001602:	d863      	bhi.n	80016cc <__aeabi_ddiv+0x558>
 8001604:	d060      	beq.n	80016c8 <__aeabi_ddiv+0x554>
 8001606:	4690      	mov	r8, r2
 8001608:	e752      	b.n	80014b0 <__aeabi_ddiv+0x33c>
 800160a:	42aa      	cmp	r2, r5
 800160c:	d900      	bls.n	8001610 <__aeabi_ddiv+0x49c>
 800160e:	e6ea      	b.n	80013e6 <__aeabi_ddiv+0x272>
 8001610:	4643      	mov	r3, r8
 8001612:	07de      	lsls	r6, r3, #31
 8001614:	0858      	lsrs	r0, r3, #1
 8001616:	086b      	lsrs	r3, r5, #1
 8001618:	431e      	orrs	r6, r3
 800161a:	07ed      	lsls	r5, r5, #31
 800161c:	e6ea      	b.n	80013f4 <__aeabi_ddiv+0x280>
 800161e:	4648      	mov	r0, r9
 8001620:	f001 f880 	bl	8002724 <__clzsi2>
 8001624:	0001      	movs	r1, r0
 8001626:	0002      	movs	r2, r0
 8001628:	3115      	adds	r1, #21
 800162a:	3220      	adds	r2, #32
 800162c:	291c      	cmp	r1, #28
 800162e:	dc00      	bgt.n	8001632 <__aeabi_ddiv+0x4be>
 8001630:	e61a      	b.n	8001268 <__aeabi_ddiv+0xf4>
 8001632:	464b      	mov	r3, r9
 8001634:	3808      	subs	r0, #8
 8001636:	4083      	lsls	r3, r0
 8001638:	2500      	movs	r5, #0
 800163a:	4698      	mov	r8, r3
 800163c:	e620      	b.n	8001280 <__aeabi_ddiv+0x10c>
 800163e:	f001 f871 	bl	8002724 <__clzsi2>
 8001642:	0003      	movs	r3, r0
 8001644:	001a      	movs	r2, r3
 8001646:	3215      	adds	r2, #21
 8001648:	3020      	adds	r0, #32
 800164a:	2a1c      	cmp	r2, #28
 800164c:	dc00      	bgt.n	8001650 <__aeabi_ddiv+0x4dc>
 800164e:	e630      	b.n	80012b2 <__aeabi_ddiv+0x13e>
 8001650:	4654      	mov	r4, sl
 8001652:	3b08      	subs	r3, #8
 8001654:	2200      	movs	r2, #0
 8001656:	409c      	lsls	r4, r3
 8001658:	e635      	b.n	80012c6 <__aeabi_ddiv+0x152>
 800165a:	230f      	movs	r3, #15
 800165c:	402b      	ands	r3, r5
 800165e:	2b04      	cmp	r3, #4
 8001660:	d100      	bne.n	8001664 <__aeabi_ddiv+0x4f0>
 8001662:	e652      	b.n	800130a <__aeabi_ddiv+0x196>
 8001664:	2305      	movs	r3, #5
 8001666:	425b      	negs	r3, r3
 8001668:	42ab      	cmp	r3, r5
 800166a:	419b      	sbcs	r3, r3
 800166c:	3504      	adds	r5, #4
 800166e:	425b      	negs	r3, r3
 8001670:	08ed      	lsrs	r5, r5, #3
 8001672:	4498      	add	r8, r3
 8001674:	e64a      	b.n	800130c <__aeabi_ddiv+0x198>
 8001676:	428c      	cmp	r4, r1
 8001678:	d1c5      	bne.n	8001606 <__aeabi_ddiv+0x492>
 800167a:	42af      	cmp	r7, r5
 800167c:	d9c0      	bls.n	8001600 <__aeabi_ddiv+0x48c>
 800167e:	4690      	mov	r8, r2
 8001680:	e716      	b.n	80014b0 <__aeabi_ddiv+0x33c>
 8001682:	428a      	cmp	r2, r1
 8001684:	d800      	bhi.n	8001688 <__aeabi_ddiv+0x514>
 8001686:	e6ea      	b.n	800145e <__aeabi_ddiv+0x2ea>
 8001688:	1e83      	subs	r3, r0, #2
 800168a:	1909      	adds	r1, r1, r4
 800168c:	e6e7      	b.n	800145e <__aeabi_ddiv+0x2ea>
 800168e:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <__aeabi_ddiv+0x5c4>)
 8001690:	0028      	movs	r0, r5
 8001692:	445a      	add	r2, fp
 8001694:	4643      	mov	r3, r8
 8001696:	4095      	lsls	r5, r2
 8001698:	4093      	lsls	r3, r2
 800169a:	40c8      	lsrs	r0, r1
 800169c:	1e6a      	subs	r2, r5, #1
 800169e:	4195      	sbcs	r5, r2
 80016a0:	4644      	mov	r4, r8
 80016a2:	4303      	orrs	r3, r0
 80016a4:	432b      	orrs	r3, r5
 80016a6:	40cc      	lsrs	r4, r1
 80016a8:	075a      	lsls	r2, r3, #29
 80016aa:	d092      	beq.n	80015d2 <__aeabi_ddiv+0x45e>
 80016ac:	220f      	movs	r2, #15
 80016ae:	401a      	ands	r2, r3
 80016b0:	2a04      	cmp	r2, #4
 80016b2:	d188      	bne.n	80015c6 <__aeabi_ddiv+0x452>
 80016b4:	e78d      	b.n	80015d2 <__aeabi_ddiv+0x45e>
 80016b6:	0035      	movs	r5, r6
 80016b8:	4281      	cmp	r1, r0
 80016ba:	d000      	beq.n	80016be <__aeabi_ddiv+0x54a>
 80016bc:	e74b      	b.n	8001556 <__aeabi_ddiv+0x3e2>
 80016be:	9a00      	ldr	r2, [sp, #0]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d000      	beq.n	80016c6 <__aeabi_ddiv+0x552>
 80016c4:	e747      	b.n	8001556 <__aeabi_ddiv+0x3e2>
 80016c6:	e618      	b.n	80012fa <__aeabi_ddiv+0x186>
 80016c8:	42ae      	cmp	r6, r5
 80016ca:	d99c      	bls.n	8001606 <__aeabi_ddiv+0x492>
 80016cc:	2302      	movs	r3, #2
 80016ce:	425b      	negs	r3, r3
 80016d0:	469c      	mov	ip, r3
 80016d2:	9b00      	ldr	r3, [sp, #0]
 80016d4:	44e0      	add	r8, ip
 80016d6:	469c      	mov	ip, r3
 80016d8:	4465      	add	r5, ip
 80016da:	429d      	cmp	r5, r3
 80016dc:	419b      	sbcs	r3, r3
 80016de:	425b      	negs	r3, r3
 80016e0:	191b      	adds	r3, r3, r4
 80016e2:	18c9      	adds	r1, r1, r3
 80016e4:	e6e4      	b.n	80014b0 <__aeabi_ddiv+0x33c>
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <__aeabi_ddiv+0x5c8>)
 80016e8:	445a      	add	r2, fp
 80016ea:	2a00      	cmp	r2, #0
 80016ec:	dc00      	bgt.n	80016f0 <__aeabi_ddiv+0x57c>
 80016ee:	e744      	b.n	800157a <__aeabi_ddiv+0x406>
 80016f0:	2301      	movs	r3, #1
 80016f2:	2500      	movs	r5, #0
 80016f4:	4498      	add	r8, r3
 80016f6:	e609      	b.n	800130c <__aeabi_ddiv+0x198>
 80016f8:	0765      	lsls	r5, r4, #29
 80016fa:	0264      	lsls	r4, r4, #9
 80016fc:	0b24      	lsrs	r4, r4, #12
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	431d      	orrs	r5, r3
 8001702:	2300      	movs	r3, #0
 8001704:	e590      	b.n	8001228 <__aeabi_ddiv+0xb4>
 8001706:	9e00      	ldr	r6, [sp, #0]
 8001708:	3d02      	subs	r5, #2
 800170a:	0072      	lsls	r2, r6, #1
 800170c:	42b2      	cmp	r2, r6
 800170e:	41bf      	sbcs	r7, r7
 8001710:	427f      	negs	r7, r7
 8001712:	193c      	adds	r4, r7, r4
 8001714:	1909      	adds	r1, r1, r4
 8001716:	9200      	str	r2, [sp, #0]
 8001718:	e7ce      	b.n	80016b8 <__aeabi_ddiv+0x544>
 800171a:	2480      	movs	r4, #128	; 0x80
 800171c:	4643      	mov	r3, r8
 800171e:	0324      	lsls	r4, r4, #12
 8001720:	431c      	orrs	r4, r3
 8001722:	0324      	lsls	r4, r4, #12
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <__aeabi_ddiv+0x5cc>)
 8001726:	0b24      	lsrs	r4, r4, #12
 8001728:	e57e      	b.n	8001228 <__aeabi_ddiv+0xb4>
 800172a:	9a00      	ldr	r2, [sp, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3ea      	bcc.n	8001706 <__aeabi_ddiv+0x592>
 8001730:	0035      	movs	r5, r6
 8001732:	e7c4      	b.n	80016be <__aeabi_ddiv+0x54a>
 8001734:	0000043e 	.word	0x0000043e
 8001738:	0000041e 	.word	0x0000041e
 800173c:	000003ff 	.word	0x000003ff
 8001740:	000007ff 	.word	0x000007ff

08001744 <__eqdf2>:
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	464f      	mov	r7, r9
 8001748:	4646      	mov	r6, r8
 800174a:	46d6      	mov	lr, sl
 800174c:	4694      	mov	ip, r2
 800174e:	4691      	mov	r9, r2
 8001750:	031a      	lsls	r2, r3, #12
 8001752:	0b12      	lsrs	r2, r2, #12
 8001754:	4d18      	ldr	r5, [pc, #96]	; (80017b8 <__eqdf2+0x74>)
 8001756:	b5c0      	push	{r6, r7, lr}
 8001758:	004c      	lsls	r4, r1, #1
 800175a:	030f      	lsls	r7, r1, #12
 800175c:	4692      	mov	sl, r2
 800175e:	005a      	lsls	r2, r3, #1
 8001760:	0006      	movs	r6, r0
 8001762:	4680      	mov	r8, r0
 8001764:	0b3f      	lsrs	r7, r7, #12
 8001766:	2001      	movs	r0, #1
 8001768:	0d64      	lsrs	r4, r4, #21
 800176a:	0fc9      	lsrs	r1, r1, #31
 800176c:	0d52      	lsrs	r2, r2, #21
 800176e:	0fdb      	lsrs	r3, r3, #31
 8001770:	42ac      	cmp	r4, r5
 8001772:	d00a      	beq.n	800178a <__eqdf2+0x46>
 8001774:	42aa      	cmp	r2, r5
 8001776:	d003      	beq.n	8001780 <__eqdf2+0x3c>
 8001778:	4294      	cmp	r4, r2
 800177a:	d101      	bne.n	8001780 <__eqdf2+0x3c>
 800177c:	4557      	cmp	r7, sl
 800177e:	d00d      	beq.n	800179c <__eqdf2+0x58>
 8001780:	bce0      	pop	{r5, r6, r7}
 8001782:	46ba      	mov	sl, r7
 8001784:	46b1      	mov	r9, r6
 8001786:	46a8      	mov	r8, r5
 8001788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178a:	003d      	movs	r5, r7
 800178c:	4335      	orrs	r5, r6
 800178e:	d1f7      	bne.n	8001780 <__eqdf2+0x3c>
 8001790:	42a2      	cmp	r2, r4
 8001792:	d1f5      	bne.n	8001780 <__eqdf2+0x3c>
 8001794:	4652      	mov	r2, sl
 8001796:	4665      	mov	r5, ip
 8001798:	432a      	orrs	r2, r5
 800179a:	d1f1      	bne.n	8001780 <__eqdf2+0x3c>
 800179c:	2001      	movs	r0, #1
 800179e:	45c8      	cmp	r8, r9
 80017a0:	d1ee      	bne.n	8001780 <__eqdf2+0x3c>
 80017a2:	4299      	cmp	r1, r3
 80017a4:	d006      	beq.n	80017b4 <__eqdf2+0x70>
 80017a6:	2c00      	cmp	r4, #0
 80017a8:	d1ea      	bne.n	8001780 <__eqdf2+0x3c>
 80017aa:	433e      	orrs	r6, r7
 80017ac:	0030      	movs	r0, r6
 80017ae:	1e46      	subs	r6, r0, #1
 80017b0:	41b0      	sbcs	r0, r6
 80017b2:	e7e5      	b.n	8001780 <__eqdf2+0x3c>
 80017b4:	2000      	movs	r0, #0
 80017b6:	e7e3      	b.n	8001780 <__eqdf2+0x3c>
 80017b8:	000007ff 	.word	0x000007ff

080017bc <__gedf2>:
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	464e      	mov	r6, r9
 80017c0:	4645      	mov	r5, r8
 80017c2:	4657      	mov	r7, sl
 80017c4:	46de      	mov	lr, fp
 80017c6:	0004      	movs	r4, r0
 80017c8:	0018      	movs	r0, r3
 80017ca:	b5e0      	push	{r5, r6, r7, lr}
 80017cc:	0016      	movs	r6, r2
 80017ce:	031b      	lsls	r3, r3, #12
 80017d0:	0b1b      	lsrs	r3, r3, #12
 80017d2:	4d32      	ldr	r5, [pc, #200]	; (800189c <__gedf2+0xe0>)
 80017d4:	030f      	lsls	r7, r1, #12
 80017d6:	004a      	lsls	r2, r1, #1
 80017d8:	4699      	mov	r9, r3
 80017da:	0043      	lsls	r3, r0, #1
 80017dc:	46a4      	mov	ip, r4
 80017de:	46b0      	mov	r8, r6
 80017e0:	0b3f      	lsrs	r7, r7, #12
 80017e2:	0d52      	lsrs	r2, r2, #21
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	0d5b      	lsrs	r3, r3, #21
 80017e8:	0fc0      	lsrs	r0, r0, #31
 80017ea:	42aa      	cmp	r2, r5
 80017ec:	d029      	beq.n	8001842 <__gedf2+0x86>
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	d018      	beq.n	8001824 <__gedf2+0x68>
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d12a      	bne.n	800184c <__gedf2+0x90>
 80017f6:	433c      	orrs	r4, r7
 80017f8:	46a3      	mov	fp, r4
 80017fa:	4265      	negs	r5, r4
 80017fc:	4165      	adcs	r5, r4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <__gedf2+0x4c>
 8001802:	464c      	mov	r4, r9
 8001804:	4326      	orrs	r6, r4
 8001806:	d027      	beq.n	8001858 <__gedf2+0x9c>
 8001808:	2d00      	cmp	r5, #0
 800180a:	d115      	bne.n	8001838 <__gedf2+0x7c>
 800180c:	4281      	cmp	r1, r0
 800180e:	d028      	beq.n	8001862 <__gedf2+0xa6>
 8001810:	2002      	movs	r0, #2
 8001812:	3901      	subs	r1, #1
 8001814:	4008      	ands	r0, r1
 8001816:	3801      	subs	r0, #1
 8001818:	bcf0      	pop	{r4, r5, r6, r7}
 800181a:	46bb      	mov	fp, r7
 800181c:	46b2      	mov	sl, r6
 800181e:	46a9      	mov	r9, r5
 8001820:	46a0      	mov	r8, r4
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001824:	464d      	mov	r5, r9
 8001826:	432e      	orrs	r6, r5
 8001828:	d12f      	bne.n	800188a <__gedf2+0xce>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d1ee      	bne.n	800180c <__gedf2+0x50>
 800182e:	433c      	orrs	r4, r7
 8001830:	4265      	negs	r5, r4
 8001832:	4165      	adcs	r5, r4
 8001834:	2d00      	cmp	r5, #0
 8001836:	d0e9      	beq.n	800180c <__gedf2+0x50>
 8001838:	2800      	cmp	r0, #0
 800183a:	d1ed      	bne.n	8001818 <__gedf2+0x5c>
 800183c:	2001      	movs	r0, #1
 800183e:	4240      	negs	r0, r0
 8001840:	e7ea      	b.n	8001818 <__gedf2+0x5c>
 8001842:	003d      	movs	r5, r7
 8001844:	4325      	orrs	r5, r4
 8001846:	d120      	bne.n	800188a <__gedf2+0xce>
 8001848:	4293      	cmp	r3, r2
 800184a:	d0eb      	beq.n	8001824 <__gedf2+0x68>
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1dd      	bne.n	800180c <__gedf2+0x50>
 8001850:	464c      	mov	r4, r9
 8001852:	4326      	orrs	r6, r4
 8001854:	d1da      	bne.n	800180c <__gedf2+0x50>
 8001856:	e7db      	b.n	8001810 <__gedf2+0x54>
 8001858:	465b      	mov	r3, fp
 800185a:	2000      	movs	r0, #0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0db      	beq.n	8001818 <__gedf2+0x5c>
 8001860:	e7d6      	b.n	8001810 <__gedf2+0x54>
 8001862:	429a      	cmp	r2, r3
 8001864:	dc0a      	bgt.n	800187c <__gedf2+0xc0>
 8001866:	dbe7      	blt.n	8001838 <__gedf2+0x7c>
 8001868:	454f      	cmp	r7, r9
 800186a:	d8d1      	bhi.n	8001810 <__gedf2+0x54>
 800186c:	d010      	beq.n	8001890 <__gedf2+0xd4>
 800186e:	2000      	movs	r0, #0
 8001870:	454f      	cmp	r7, r9
 8001872:	d2d1      	bcs.n	8001818 <__gedf2+0x5c>
 8001874:	2900      	cmp	r1, #0
 8001876:	d0e1      	beq.n	800183c <__gedf2+0x80>
 8001878:	0008      	movs	r0, r1
 800187a:	e7cd      	b.n	8001818 <__gedf2+0x5c>
 800187c:	4243      	negs	r3, r0
 800187e:	4158      	adcs	r0, r3
 8001880:	2302      	movs	r3, #2
 8001882:	4240      	negs	r0, r0
 8001884:	4018      	ands	r0, r3
 8001886:	3801      	subs	r0, #1
 8001888:	e7c6      	b.n	8001818 <__gedf2+0x5c>
 800188a:	2002      	movs	r0, #2
 800188c:	4240      	negs	r0, r0
 800188e:	e7c3      	b.n	8001818 <__gedf2+0x5c>
 8001890:	45c4      	cmp	ip, r8
 8001892:	d8bd      	bhi.n	8001810 <__gedf2+0x54>
 8001894:	2000      	movs	r0, #0
 8001896:	45c4      	cmp	ip, r8
 8001898:	d2be      	bcs.n	8001818 <__gedf2+0x5c>
 800189a:	e7eb      	b.n	8001874 <__gedf2+0xb8>
 800189c:	000007ff 	.word	0x000007ff

080018a0 <__ledf2>:
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	464e      	mov	r6, r9
 80018a4:	4645      	mov	r5, r8
 80018a6:	4657      	mov	r7, sl
 80018a8:	46de      	mov	lr, fp
 80018aa:	0004      	movs	r4, r0
 80018ac:	0018      	movs	r0, r3
 80018ae:	b5e0      	push	{r5, r6, r7, lr}
 80018b0:	0016      	movs	r6, r2
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	0b1b      	lsrs	r3, r3, #12
 80018b6:	4d31      	ldr	r5, [pc, #196]	; (800197c <__ledf2+0xdc>)
 80018b8:	030f      	lsls	r7, r1, #12
 80018ba:	004a      	lsls	r2, r1, #1
 80018bc:	4699      	mov	r9, r3
 80018be:	0043      	lsls	r3, r0, #1
 80018c0:	46a4      	mov	ip, r4
 80018c2:	46b0      	mov	r8, r6
 80018c4:	0b3f      	lsrs	r7, r7, #12
 80018c6:	0d52      	lsrs	r2, r2, #21
 80018c8:	0fc9      	lsrs	r1, r1, #31
 80018ca:	0d5b      	lsrs	r3, r3, #21
 80018cc:	0fc0      	lsrs	r0, r0, #31
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d011      	beq.n	80018f6 <__ledf2+0x56>
 80018d2:	42ab      	cmp	r3, r5
 80018d4:	d014      	beq.n	8001900 <__ledf2+0x60>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d12f      	bne.n	800193a <__ledf2+0x9a>
 80018da:	433c      	orrs	r4, r7
 80018dc:	46a3      	mov	fp, r4
 80018de:	4265      	negs	r5, r4
 80018e0:	4165      	adcs	r5, r4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d114      	bne.n	8001910 <__ledf2+0x70>
 80018e6:	464c      	mov	r4, r9
 80018e8:	4326      	orrs	r6, r4
 80018ea:	d111      	bne.n	8001910 <__ledf2+0x70>
 80018ec:	465b      	mov	r3, fp
 80018ee:	2000      	movs	r0, #0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d017      	beq.n	8001924 <__ledf2+0x84>
 80018f4:	e010      	b.n	8001918 <__ledf2+0x78>
 80018f6:	003d      	movs	r5, r7
 80018f8:	4325      	orrs	r5, r4
 80018fa:	d112      	bne.n	8001922 <__ledf2+0x82>
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d11c      	bne.n	800193a <__ledf2+0x9a>
 8001900:	464d      	mov	r5, r9
 8001902:	432e      	orrs	r6, r5
 8001904:	d10d      	bne.n	8001922 <__ledf2+0x82>
 8001906:	2a00      	cmp	r2, #0
 8001908:	d104      	bne.n	8001914 <__ledf2+0x74>
 800190a:	433c      	orrs	r4, r7
 800190c:	4265      	negs	r5, r4
 800190e:	4165      	adcs	r5, r4
 8001910:	2d00      	cmp	r5, #0
 8001912:	d10d      	bne.n	8001930 <__ledf2+0x90>
 8001914:	4281      	cmp	r1, r0
 8001916:	d016      	beq.n	8001946 <__ledf2+0xa6>
 8001918:	2002      	movs	r0, #2
 800191a:	3901      	subs	r1, #1
 800191c:	4008      	ands	r0, r1
 800191e:	3801      	subs	r0, #1
 8001920:	e000      	b.n	8001924 <__ledf2+0x84>
 8001922:	2002      	movs	r0, #2
 8001924:	bcf0      	pop	{r4, r5, r6, r7}
 8001926:	46bb      	mov	fp, r7
 8001928:	46b2      	mov	sl, r6
 800192a:	46a9      	mov	r9, r5
 800192c:	46a0      	mov	r8, r4
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001930:	2800      	cmp	r0, #0
 8001932:	d1f7      	bne.n	8001924 <__ledf2+0x84>
 8001934:	2001      	movs	r0, #1
 8001936:	4240      	negs	r0, r0
 8001938:	e7f4      	b.n	8001924 <__ledf2+0x84>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ea      	bne.n	8001914 <__ledf2+0x74>
 800193e:	464c      	mov	r4, r9
 8001940:	4326      	orrs	r6, r4
 8001942:	d1e7      	bne.n	8001914 <__ledf2+0x74>
 8001944:	e7e8      	b.n	8001918 <__ledf2+0x78>
 8001946:	429a      	cmp	r2, r3
 8001948:	dd06      	ble.n	8001958 <__ledf2+0xb8>
 800194a:	4243      	negs	r3, r0
 800194c:	4158      	adcs	r0, r3
 800194e:	2302      	movs	r3, #2
 8001950:	4240      	negs	r0, r0
 8001952:	4018      	ands	r0, r3
 8001954:	3801      	subs	r0, #1
 8001956:	e7e5      	b.n	8001924 <__ledf2+0x84>
 8001958:	429a      	cmp	r2, r3
 800195a:	dbe9      	blt.n	8001930 <__ledf2+0x90>
 800195c:	454f      	cmp	r7, r9
 800195e:	d8db      	bhi.n	8001918 <__ledf2+0x78>
 8001960:	d006      	beq.n	8001970 <__ledf2+0xd0>
 8001962:	2000      	movs	r0, #0
 8001964:	454f      	cmp	r7, r9
 8001966:	d2dd      	bcs.n	8001924 <__ledf2+0x84>
 8001968:	2900      	cmp	r1, #0
 800196a:	d0e3      	beq.n	8001934 <__ledf2+0x94>
 800196c:	0008      	movs	r0, r1
 800196e:	e7d9      	b.n	8001924 <__ledf2+0x84>
 8001970:	45c4      	cmp	ip, r8
 8001972:	d8d1      	bhi.n	8001918 <__ledf2+0x78>
 8001974:	2000      	movs	r0, #0
 8001976:	45c4      	cmp	ip, r8
 8001978:	d2d4      	bcs.n	8001924 <__ledf2+0x84>
 800197a:	e7f5      	b.n	8001968 <__ledf2+0xc8>
 800197c:	000007ff 	.word	0x000007ff

08001980 <__aeabi_dmul>:
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	4657      	mov	r7, sl
 8001984:	464e      	mov	r6, r9
 8001986:	4645      	mov	r5, r8
 8001988:	46de      	mov	lr, fp
 800198a:	b5e0      	push	{r5, r6, r7, lr}
 800198c:	4698      	mov	r8, r3
 800198e:	030c      	lsls	r4, r1, #12
 8001990:	004b      	lsls	r3, r1, #1
 8001992:	0006      	movs	r6, r0
 8001994:	4692      	mov	sl, r2
 8001996:	b087      	sub	sp, #28
 8001998:	0b24      	lsrs	r4, r4, #12
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	0fcf      	lsrs	r7, r1, #31
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06c      	beq.n	8001a7c <__aeabi_dmul+0xfc>
 80019a2:	4add      	ldr	r2, [pc, #884]	; (8001d18 <__aeabi_dmul+0x398>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d100      	bne.n	80019aa <__aeabi_dmul+0x2a>
 80019a8:	e086      	b.n	8001ab8 <__aeabi_dmul+0x138>
 80019aa:	0f42      	lsrs	r2, r0, #29
 80019ac:	00e4      	lsls	r4, r4, #3
 80019ae:	4314      	orrs	r4, r2
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	0412      	lsls	r2, r2, #16
 80019b4:	4314      	orrs	r4, r2
 80019b6:	4ad9      	ldr	r2, [pc, #868]	; (8001d1c <__aeabi_dmul+0x39c>)
 80019b8:	00c5      	lsls	r5, r0, #3
 80019ba:	4694      	mov	ip, r2
 80019bc:	4463      	add	r3, ip
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	4699      	mov	r9, r3
 80019c4:	469b      	mov	fp, r3
 80019c6:	4643      	mov	r3, r8
 80019c8:	4642      	mov	r2, r8
 80019ca:	031e      	lsls	r6, r3, #12
 80019cc:	0fd2      	lsrs	r2, r2, #31
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4650      	mov	r0, sl
 80019d2:	4690      	mov	r8, r2
 80019d4:	0b36      	lsrs	r6, r6, #12
 80019d6:	0d5b      	lsrs	r3, r3, #21
 80019d8:	d100      	bne.n	80019dc <__aeabi_dmul+0x5c>
 80019da:	e078      	b.n	8001ace <__aeabi_dmul+0x14e>
 80019dc:	4ace      	ldr	r2, [pc, #824]	; (8001d18 <__aeabi_dmul+0x398>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01d      	beq.n	8001a1e <__aeabi_dmul+0x9e>
 80019e2:	49ce      	ldr	r1, [pc, #824]	; (8001d1c <__aeabi_dmul+0x39c>)
 80019e4:	0f42      	lsrs	r2, r0, #29
 80019e6:	468c      	mov	ip, r1
 80019e8:	9900      	ldr	r1, [sp, #0]
 80019ea:	4463      	add	r3, ip
 80019ec:	00f6      	lsls	r6, r6, #3
 80019ee:	468c      	mov	ip, r1
 80019f0:	4316      	orrs	r6, r2
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	449c      	add	ip, r3
 80019f6:	0412      	lsls	r2, r2, #16
 80019f8:	4663      	mov	r3, ip
 80019fa:	4316      	orrs	r6, r2
 80019fc:	00c2      	lsls	r2, r0, #3
 80019fe:	2000      	movs	r0, #0
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	9900      	ldr	r1, [sp, #0]
 8001a04:	4643      	mov	r3, r8
 8001a06:	3101      	adds	r1, #1
 8001a08:	468c      	mov	ip, r1
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	407b      	eors	r3, r7
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	290f      	cmp	r1, #15
 8001a12:	d900      	bls.n	8001a16 <__aeabi_dmul+0x96>
 8001a14:	e07e      	b.n	8001b14 <__aeabi_dmul+0x194>
 8001a16:	4bc2      	ldr	r3, [pc, #776]	; (8001d20 <__aeabi_dmul+0x3a0>)
 8001a18:	0089      	lsls	r1, r1, #2
 8001a1a:	5859      	ldr	r1, [r3, r1]
 8001a1c:	468f      	mov	pc, r1
 8001a1e:	4652      	mov	r2, sl
 8001a20:	9b00      	ldr	r3, [sp, #0]
 8001a22:	4332      	orrs	r2, r6
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dmul+0xa8>
 8001a26:	e156      	b.n	8001cd6 <__aeabi_dmul+0x356>
 8001a28:	49bb      	ldr	r1, [pc, #748]	; (8001d18 <__aeabi_dmul+0x398>)
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	468c      	mov	ip, r1
 8001a2e:	4463      	add	r3, ip
 8001a30:	4649      	mov	r1, r9
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2302      	movs	r3, #2
 8001a36:	4319      	orrs	r1, r3
 8001a38:	4689      	mov	r9, r1
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	e7e1      	b.n	8001a02 <__aeabi_dmul+0x82>
 8001a3e:	4643      	mov	r3, r8
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	0034      	movs	r4, r6
 8001a44:	0015      	movs	r5, r2
 8001a46:	4683      	mov	fp, r0
 8001a48:	465b      	mov	r3, fp
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d05e      	beq.n	8001b0c <__aeabi_dmul+0x18c>
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dmul+0xd4>
 8001a52:	e1f3      	b.n	8001e3c <__aeabi_dmul+0x4bc>
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d000      	beq.n	8001a5a <__aeabi_dmul+0xda>
 8001a58:	e118      	b.n	8001c8c <__aeabi_dmul+0x30c>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2500      	movs	r5, #0
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	0512      	lsls	r2, r2, #20
 8001a64:	4322      	orrs	r2, r4
 8001a66:	07db      	lsls	r3, r3, #31
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	0028      	movs	r0, r5
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	b007      	add	sp, #28
 8001a70:	bcf0      	pop	{r4, r5, r6, r7}
 8001a72:	46bb      	mov	fp, r7
 8001a74:	46b2      	mov	sl, r6
 8001a76:	46a9      	mov	r9, r5
 8001a78:	46a0      	mov	r8, r4
 8001a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7c:	0025      	movs	r5, r4
 8001a7e:	4305      	orrs	r5, r0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dmul+0x104>
 8001a82:	e141      	b.n	8001d08 <__aeabi_dmul+0x388>
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dmul+0x10a>
 8001a88:	e1ad      	b.n	8001de6 <__aeabi_dmul+0x466>
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f000 fe4a 	bl	8002724 <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	0002      	movs	r2, r0
 8001a94:	390b      	subs	r1, #11
 8001a96:	231d      	movs	r3, #29
 8001a98:	0010      	movs	r0, r2
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	0031      	movs	r1, r6
 8001a9e:	0035      	movs	r5, r6
 8001aa0:	3808      	subs	r0, #8
 8001aa2:	4084      	lsls	r4, r0
 8001aa4:	40d9      	lsrs	r1, r3
 8001aa6:	4085      	lsls	r5, r0
 8001aa8:	430c      	orrs	r4, r1
 8001aaa:	489e      	ldr	r0, [pc, #632]	; (8001d24 <__aeabi_dmul+0x3a4>)
 8001aac:	1a83      	subs	r3, r0, r2
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	469b      	mov	fp, r3
 8001ab6:	e786      	b.n	80019c6 <__aeabi_dmul+0x46>
 8001ab8:	0005      	movs	r5, r0
 8001aba:	4325      	orrs	r5, r4
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_dmul+0x140>
 8001abe:	e11c      	b.n	8001cfa <__aeabi_dmul+0x37a>
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	4691      	mov	r9, r2
 8001aca:	469b      	mov	fp, r3
 8001acc:	e77b      	b.n	80019c6 <__aeabi_dmul+0x46>
 8001ace:	4652      	mov	r2, sl
 8001ad0:	4332      	orrs	r2, r6
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dmul+0x156>
 8001ad4:	e10a      	b.n	8001cec <__aeabi_dmul+0x36c>
 8001ad6:	2e00      	cmp	r6, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0x15c>
 8001ada:	e176      	b.n	8001dca <__aeabi_dmul+0x44a>
 8001adc:	0030      	movs	r0, r6
 8001ade:	f000 fe21 	bl	8002724 <__clzsi2>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	3a0b      	subs	r2, #11
 8001ae6:	231d      	movs	r3, #29
 8001ae8:	0001      	movs	r1, r0
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	4652      	mov	r2, sl
 8001aee:	3908      	subs	r1, #8
 8001af0:	40da      	lsrs	r2, r3
 8001af2:	408e      	lsls	r6, r1
 8001af4:	4316      	orrs	r6, r2
 8001af6:	4652      	mov	r2, sl
 8001af8:	408a      	lsls	r2, r1
 8001afa:	9b00      	ldr	r3, [sp, #0]
 8001afc:	4989      	ldr	r1, [pc, #548]	; (8001d24 <__aeabi_dmul+0x3a4>)
 8001afe:	1a18      	subs	r0, r3, r0
 8001b00:	0003      	movs	r3, r0
 8001b02:	468c      	mov	ip, r1
 8001b04:	4463      	add	r3, ip
 8001b06:	2000      	movs	r0, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	e77a      	b.n	8001a02 <__aeabi_dmul+0x82>
 8001b0c:	2400      	movs	r4, #0
 8001b0e:	2500      	movs	r5, #0
 8001b10:	4a81      	ldr	r2, [pc, #516]	; (8001d18 <__aeabi_dmul+0x398>)
 8001b12:	e7a5      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001b14:	0c2f      	lsrs	r7, r5, #16
 8001b16:	042d      	lsls	r5, r5, #16
 8001b18:	0c2d      	lsrs	r5, r5, #16
 8001b1a:	002b      	movs	r3, r5
 8001b1c:	0c11      	lsrs	r1, r2, #16
 8001b1e:	0412      	lsls	r2, r2, #16
 8001b20:	0c12      	lsrs	r2, r2, #16
 8001b22:	4353      	muls	r3, r2
 8001b24:	4698      	mov	r8, r3
 8001b26:	0013      	movs	r3, r2
 8001b28:	0028      	movs	r0, r5
 8001b2a:	437b      	muls	r3, r7
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	4348      	muls	r0, r1
 8001b30:	4448      	add	r0, r9
 8001b32:	4683      	mov	fp, r0
 8001b34:	4640      	mov	r0, r8
 8001b36:	000b      	movs	r3, r1
 8001b38:	0c00      	lsrs	r0, r0, #16
 8001b3a:	4682      	mov	sl, r0
 8001b3c:	4658      	mov	r0, fp
 8001b3e:	437b      	muls	r3, r7
 8001b40:	4450      	add	r0, sl
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	4581      	cmp	r9, r0
 8001b46:	d906      	bls.n	8001b56 <__aeabi_dmul+0x1d6>
 8001b48:	469a      	mov	sl, r3
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	025b      	lsls	r3, r3, #9
 8001b4e:	4699      	mov	r9, r3
 8001b50:	44ca      	add	sl, r9
 8001b52:	4653      	mov	r3, sl
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	0c03      	lsrs	r3, r0, #16
 8001b58:	469b      	mov	fp, r3
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	041b      	lsls	r3, r3, #16
 8001b5e:	0400      	lsls	r0, r0, #16
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	4698      	mov	r8, r3
 8001b64:	0003      	movs	r3, r0
 8001b66:	4443      	add	r3, r8
 8001b68:	9304      	str	r3, [sp, #16]
 8001b6a:	0c33      	lsrs	r3, r6, #16
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	002b      	movs	r3, r5
 8001b70:	0436      	lsls	r6, r6, #16
 8001b72:	0c36      	lsrs	r6, r6, #16
 8001b74:	4373      	muls	r3, r6
 8001b76:	4698      	mov	r8, r3
 8001b78:	0033      	movs	r3, r6
 8001b7a:	437b      	muls	r3, r7
 8001b7c:	469a      	mov	sl, r3
 8001b7e:	464b      	mov	r3, r9
 8001b80:	435d      	muls	r5, r3
 8001b82:	435f      	muls	r7, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	4455      	add	r5, sl
 8001b88:	0c18      	lsrs	r0, r3, #16
 8001b8a:	1940      	adds	r0, r0, r5
 8001b8c:	4582      	cmp	sl, r0
 8001b8e:	d903      	bls.n	8001b98 <__aeabi_dmul+0x218>
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	025b      	lsls	r3, r3, #9
 8001b94:	469a      	mov	sl, r3
 8001b96:	4457      	add	r7, sl
 8001b98:	0c05      	lsrs	r5, r0, #16
 8001b9a:	19eb      	adds	r3, r5, r7
 8001b9c:	9305      	str	r3, [sp, #20]
 8001b9e:	4643      	mov	r3, r8
 8001ba0:	041d      	lsls	r5, r3, #16
 8001ba2:	0c2d      	lsrs	r5, r5, #16
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	1940      	adds	r0, r0, r5
 8001ba8:	0c25      	lsrs	r5, r4, #16
 8001baa:	0424      	lsls	r4, r4, #16
 8001bac:	0c24      	lsrs	r4, r4, #16
 8001bae:	0027      	movs	r7, r4
 8001bb0:	4357      	muls	r7, r2
 8001bb2:	436a      	muls	r2, r5
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	002a      	movs	r2, r5
 8001bb8:	0c3b      	lsrs	r3, r7, #16
 8001bba:	469a      	mov	sl, r3
 8001bbc:	434a      	muls	r2, r1
 8001bbe:	4361      	muls	r1, r4
 8001bc0:	4441      	add	r1, r8
 8001bc2:	4451      	add	r1, sl
 8001bc4:	4483      	add	fp, r0
 8001bc6:	4588      	cmp	r8, r1
 8001bc8:	d903      	bls.n	8001bd2 <__aeabi_dmul+0x252>
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	4698      	mov	r8, r3
 8001bd0:	4442      	add	r2, r8
 8001bd2:	043f      	lsls	r7, r7, #16
 8001bd4:	0c0b      	lsrs	r3, r1, #16
 8001bd6:	0c3f      	lsrs	r7, r7, #16
 8001bd8:	0409      	lsls	r1, r1, #16
 8001bda:	19c9      	adds	r1, r1, r7
 8001bdc:	0027      	movs	r7, r4
 8001bde:	4698      	mov	r8, r3
 8001be0:	464b      	mov	r3, r9
 8001be2:	4377      	muls	r7, r6
 8001be4:	435c      	muls	r4, r3
 8001be6:	436e      	muls	r6, r5
 8001be8:	435d      	muls	r5, r3
 8001bea:	0c3b      	lsrs	r3, r7, #16
 8001bec:	4699      	mov	r9, r3
 8001bee:	19a4      	adds	r4, r4, r6
 8001bf0:	444c      	add	r4, r9
 8001bf2:	4442      	add	r2, r8
 8001bf4:	9503      	str	r5, [sp, #12]
 8001bf6:	42a6      	cmp	r6, r4
 8001bf8:	d904      	bls.n	8001c04 <__aeabi_dmul+0x284>
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	025b      	lsls	r3, r3, #9
 8001bfe:	4698      	mov	r8, r3
 8001c00:	4445      	add	r5, r8
 8001c02:	9503      	str	r5, [sp, #12]
 8001c04:	9b02      	ldr	r3, [sp, #8]
 8001c06:	043f      	lsls	r7, r7, #16
 8001c08:	445b      	add	r3, fp
 8001c0a:	001e      	movs	r6, r3
 8001c0c:	4283      	cmp	r3, r0
 8001c0e:	4180      	sbcs	r0, r0
 8001c10:	0423      	lsls	r3, r4, #16
 8001c12:	4698      	mov	r8, r3
 8001c14:	9b05      	ldr	r3, [sp, #20]
 8001c16:	0c3f      	lsrs	r7, r7, #16
 8001c18:	4447      	add	r7, r8
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	1876      	adds	r6, r6, r1
 8001c1e:	428e      	cmp	r6, r1
 8001c20:	4189      	sbcs	r1, r1
 8001c22:	4447      	add	r7, r8
 8001c24:	4240      	negs	r0, r0
 8001c26:	183d      	adds	r5, r7, r0
 8001c28:	46a8      	mov	r8, r5
 8001c2a:	4693      	mov	fp, r2
 8001c2c:	4249      	negs	r1, r1
 8001c2e:	468a      	mov	sl, r1
 8001c30:	44c3      	add	fp, r8
 8001c32:	429f      	cmp	r7, r3
 8001c34:	41bf      	sbcs	r7, r7
 8001c36:	4580      	cmp	r8, r0
 8001c38:	4180      	sbcs	r0, r0
 8001c3a:	9b03      	ldr	r3, [sp, #12]
 8001c3c:	44da      	add	sl, fp
 8001c3e:	4698      	mov	r8, r3
 8001c40:	4653      	mov	r3, sl
 8001c42:	4240      	negs	r0, r0
 8001c44:	427f      	negs	r7, r7
 8001c46:	4307      	orrs	r7, r0
 8001c48:	0c24      	lsrs	r4, r4, #16
 8001c4a:	4593      	cmp	fp, r2
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	458a      	cmp	sl, r1
 8001c50:	4189      	sbcs	r1, r1
 8001c52:	193f      	adds	r7, r7, r4
 8001c54:	0ddc      	lsrs	r4, r3, #23
 8001c56:	9b04      	ldr	r3, [sp, #16]
 8001c58:	0275      	lsls	r5, r6, #9
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	1e68      	subs	r0, r5, #1
 8001c5e:	4185      	sbcs	r5, r0
 8001c60:	4653      	mov	r3, sl
 8001c62:	4252      	negs	r2, r2
 8001c64:	4249      	negs	r1, r1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	18bf      	adds	r7, r7, r2
 8001c6a:	4447      	add	r7, r8
 8001c6c:	0df6      	lsrs	r6, r6, #23
 8001c6e:	027f      	lsls	r7, r7, #9
 8001c70:	4335      	orrs	r5, r6
 8001c72:	025a      	lsls	r2, r3, #9
 8001c74:	433c      	orrs	r4, r7
 8001c76:	4315      	orrs	r5, r2
 8001c78:	01fb      	lsls	r3, r7, #7
 8001c7a:	d400      	bmi.n	8001c7e <__aeabi_dmul+0x2fe>
 8001c7c:	e0c1      	b.n	8001e02 <__aeabi_dmul+0x482>
 8001c7e:	2101      	movs	r1, #1
 8001c80:	086a      	lsrs	r2, r5, #1
 8001c82:	400d      	ands	r5, r1
 8001c84:	4315      	orrs	r5, r2
 8001c86:	07e2      	lsls	r2, r4, #31
 8001c88:	4315      	orrs	r5, r2
 8001c8a:	0864      	lsrs	r4, r4, #1
 8001c8c:	4926      	ldr	r1, [pc, #152]	; (8001d28 <__aeabi_dmul+0x3a8>)
 8001c8e:	4461      	add	r1, ip
 8001c90:	2900      	cmp	r1, #0
 8001c92:	dd56      	ble.n	8001d42 <__aeabi_dmul+0x3c2>
 8001c94:	076b      	lsls	r3, r5, #29
 8001c96:	d009      	beq.n	8001cac <__aeabi_dmul+0x32c>
 8001c98:	220f      	movs	r2, #15
 8001c9a:	402a      	ands	r2, r5
 8001c9c:	2a04      	cmp	r2, #4
 8001c9e:	d005      	beq.n	8001cac <__aeabi_dmul+0x32c>
 8001ca0:	1d2a      	adds	r2, r5, #4
 8001ca2:	42aa      	cmp	r2, r5
 8001ca4:	41ad      	sbcs	r5, r5
 8001ca6:	426d      	negs	r5, r5
 8001ca8:	1964      	adds	r4, r4, r5
 8001caa:	0015      	movs	r5, r2
 8001cac:	01e3      	lsls	r3, r4, #7
 8001cae:	d504      	bpl.n	8001cba <__aeabi_dmul+0x33a>
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <__aeabi_dmul+0x3ac>)
 8001cb4:	00c9      	lsls	r1, r1, #3
 8001cb6:	4014      	ands	r4, r2
 8001cb8:	4461      	add	r1, ip
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <__aeabi_dmul+0x3b0>)
 8001cbc:	4291      	cmp	r1, r2
 8001cbe:	dd00      	ble.n	8001cc2 <__aeabi_dmul+0x342>
 8001cc0:	e724      	b.n	8001b0c <__aeabi_dmul+0x18c>
 8001cc2:	0762      	lsls	r2, r4, #29
 8001cc4:	08ed      	lsrs	r5, r5, #3
 8001cc6:	0264      	lsls	r4, r4, #9
 8001cc8:	0549      	lsls	r1, r1, #21
 8001cca:	4315      	orrs	r5, r2
 8001ccc:	0b24      	lsrs	r4, r4, #12
 8001cce:	0d4a      	lsrs	r2, r1, #21
 8001cd0:	e6c6      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001cd2:	9701      	str	r7, [sp, #4]
 8001cd4:	e6b8      	b.n	8001a48 <__aeabi_dmul+0xc8>
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <__aeabi_dmul+0x398>)
 8001cd8:	2003      	movs	r0, #3
 8001cda:	4694      	mov	ip, r2
 8001cdc:	4463      	add	r3, ip
 8001cde:	464a      	mov	r2, r9
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	4691      	mov	r9, r2
 8001ce8:	4652      	mov	r2, sl
 8001cea:	e68a      	b.n	8001a02 <__aeabi_dmul+0x82>
 8001cec:	4649      	mov	r1, r9
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4319      	orrs	r1, r3
 8001cf2:	4689      	mov	r9, r1
 8001cf4:	2600      	movs	r6, #0
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	e683      	b.n	8001a02 <__aeabi_dmul+0x82>
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2303      	movs	r3, #3
 8001d00:	0005      	movs	r5, r0
 8001d02:	4691      	mov	r9, r2
 8001d04:	469b      	mov	fp, r3
 8001d06:	e65e      	b.n	80019c6 <__aeabi_dmul+0x46>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	2400      	movs	r4, #0
 8001d14:	469b      	mov	fp, r3
 8001d16:	e656      	b.n	80019c6 <__aeabi_dmul+0x46>
 8001d18:	000007ff 	.word	0x000007ff
 8001d1c:	fffffc01 	.word	0xfffffc01
 8001d20:	080114cc 	.word	0x080114cc
 8001d24:	fffffc0d 	.word	0xfffffc0d
 8001d28:	000003ff 	.word	0x000003ff
 8001d2c:	feffffff 	.word	0xfeffffff
 8001d30:	000007fe 	.word	0x000007fe
 8001d34:	2300      	movs	r3, #0
 8001d36:	2480      	movs	r4, #128	; 0x80
 8001d38:	2500      	movs	r5, #0
 8001d3a:	4a44      	ldr	r2, [pc, #272]	; (8001e4c <__aeabi_dmul+0x4cc>)
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	0324      	lsls	r4, r4, #12
 8001d40:	e68e      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001d42:	2001      	movs	r0, #1
 8001d44:	1a40      	subs	r0, r0, r1
 8001d46:	2838      	cmp	r0, #56	; 0x38
 8001d48:	dd00      	ble.n	8001d4c <__aeabi_dmul+0x3cc>
 8001d4a:	e686      	b.n	8001a5a <__aeabi_dmul+0xda>
 8001d4c:	281f      	cmp	r0, #31
 8001d4e:	dd5b      	ble.n	8001e08 <__aeabi_dmul+0x488>
 8001d50:	221f      	movs	r2, #31
 8001d52:	0023      	movs	r3, r4
 8001d54:	4252      	negs	r2, r2
 8001d56:	1a51      	subs	r1, r2, r1
 8001d58:	40cb      	lsrs	r3, r1
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	2820      	cmp	r0, #32
 8001d5e:	d003      	beq.n	8001d68 <__aeabi_dmul+0x3e8>
 8001d60:	4a3b      	ldr	r2, [pc, #236]	; (8001e50 <__aeabi_dmul+0x4d0>)
 8001d62:	4462      	add	r2, ip
 8001d64:	4094      	lsls	r4, r2
 8001d66:	4325      	orrs	r5, r4
 8001d68:	1e6a      	subs	r2, r5, #1
 8001d6a:	4195      	sbcs	r5, r2
 8001d6c:	002a      	movs	r2, r5
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	2107      	movs	r1, #7
 8001d72:	000d      	movs	r5, r1
 8001d74:	2400      	movs	r4, #0
 8001d76:	4015      	ands	r5, r2
 8001d78:	4211      	tst	r1, r2
 8001d7a:	d05b      	beq.n	8001e34 <__aeabi_dmul+0x4b4>
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	2400      	movs	r4, #0
 8001d80:	4011      	ands	r1, r2
 8001d82:	2904      	cmp	r1, #4
 8001d84:	d053      	beq.n	8001e2e <__aeabi_dmul+0x4ae>
 8001d86:	1d11      	adds	r1, r2, #4
 8001d88:	4291      	cmp	r1, r2
 8001d8a:	4192      	sbcs	r2, r2
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	18a4      	adds	r4, r4, r2
 8001d90:	000a      	movs	r2, r1
 8001d92:	0223      	lsls	r3, r4, #8
 8001d94:	d54b      	bpl.n	8001e2e <__aeabi_dmul+0x4ae>
 8001d96:	2201      	movs	r2, #1
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2500      	movs	r5, #0
 8001d9c:	e660      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	031b      	lsls	r3, r3, #12
 8001da2:	421c      	tst	r4, r3
 8001da4:	d009      	beq.n	8001dba <__aeabi_dmul+0x43a>
 8001da6:	421e      	tst	r6, r3
 8001da8:	d107      	bne.n	8001dba <__aeabi_dmul+0x43a>
 8001daa:	4333      	orrs	r3, r6
 8001dac:	031c      	lsls	r4, r3, #12
 8001dae:	4643      	mov	r3, r8
 8001db0:	0015      	movs	r5, r2
 8001db2:	0b24      	lsrs	r4, r4, #12
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <__aeabi_dmul+0x4cc>)
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	e652      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0312      	lsls	r2, r2, #12
 8001dbe:	4314      	orrs	r4, r2
 8001dc0:	0324      	lsls	r4, r4, #12
 8001dc2:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <__aeabi_dmul+0x4cc>)
 8001dc4:	0b24      	lsrs	r4, r4, #12
 8001dc6:	9701      	str	r7, [sp, #4]
 8001dc8:	e64a      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001dca:	f000 fcab 	bl	8002724 <__clzsi2>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	3215      	adds	r2, #21
 8001dd4:	3020      	adds	r0, #32
 8001dd6:	2a1c      	cmp	r2, #28
 8001dd8:	dc00      	bgt.n	8001ddc <__aeabi_dmul+0x45c>
 8001dda:	e684      	b.n	8001ae6 <__aeabi_dmul+0x166>
 8001ddc:	4656      	mov	r6, sl
 8001dde:	3b08      	subs	r3, #8
 8001de0:	2200      	movs	r2, #0
 8001de2:	409e      	lsls	r6, r3
 8001de4:	e689      	b.n	8001afa <__aeabi_dmul+0x17a>
 8001de6:	f000 fc9d 	bl	8002724 <__clzsi2>
 8001dea:	0001      	movs	r1, r0
 8001dec:	0002      	movs	r2, r0
 8001dee:	3115      	adds	r1, #21
 8001df0:	3220      	adds	r2, #32
 8001df2:	291c      	cmp	r1, #28
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dmul+0x478>
 8001df6:	e64e      	b.n	8001a96 <__aeabi_dmul+0x116>
 8001df8:	0034      	movs	r4, r6
 8001dfa:	3808      	subs	r0, #8
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	4084      	lsls	r4, r0
 8001e00:	e653      	b.n	8001aaa <__aeabi_dmul+0x12a>
 8001e02:	9b00      	ldr	r3, [sp, #0]
 8001e04:	469c      	mov	ip, r3
 8001e06:	e741      	b.n	8001c8c <__aeabi_dmul+0x30c>
 8001e08:	4912      	ldr	r1, [pc, #72]	; (8001e54 <__aeabi_dmul+0x4d4>)
 8001e0a:	0022      	movs	r2, r4
 8001e0c:	4461      	add	r1, ip
 8001e0e:	002e      	movs	r6, r5
 8001e10:	408d      	lsls	r5, r1
 8001e12:	408a      	lsls	r2, r1
 8001e14:	40c6      	lsrs	r6, r0
 8001e16:	1e69      	subs	r1, r5, #1
 8001e18:	418d      	sbcs	r5, r1
 8001e1a:	4332      	orrs	r2, r6
 8001e1c:	432a      	orrs	r2, r5
 8001e1e:	40c4      	lsrs	r4, r0
 8001e20:	0753      	lsls	r3, r2, #29
 8001e22:	d0b6      	beq.n	8001d92 <__aeabi_dmul+0x412>
 8001e24:	210f      	movs	r1, #15
 8001e26:	4011      	ands	r1, r2
 8001e28:	2904      	cmp	r1, #4
 8001e2a:	d1ac      	bne.n	8001d86 <__aeabi_dmul+0x406>
 8001e2c:	e7b1      	b.n	8001d92 <__aeabi_dmul+0x412>
 8001e2e:	0765      	lsls	r5, r4, #29
 8001e30:	0264      	lsls	r4, r4, #9
 8001e32:	0b24      	lsrs	r4, r4, #12
 8001e34:	08d2      	lsrs	r2, r2, #3
 8001e36:	4315      	orrs	r5, r2
 8001e38:	2200      	movs	r2, #0
 8001e3a:	e611      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	0312      	lsls	r2, r2, #12
 8001e40:	4314      	orrs	r4, r2
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4a01      	ldr	r2, [pc, #4]	; (8001e4c <__aeabi_dmul+0x4cc>)
 8001e46:	0b24      	lsrs	r4, r4, #12
 8001e48:	e60a      	b.n	8001a60 <__aeabi_dmul+0xe0>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	0000043e 	.word	0x0000043e
 8001e54:	0000041e 	.word	0x0000041e

08001e58 <__aeabi_dsub>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	4657      	mov	r7, sl
 8001e5c:	464e      	mov	r6, r9
 8001e5e:	4645      	mov	r5, r8
 8001e60:	46de      	mov	lr, fp
 8001e62:	0004      	movs	r4, r0
 8001e64:	b5e0      	push	{r5, r6, r7, lr}
 8001e66:	001f      	movs	r7, r3
 8001e68:	0010      	movs	r0, r2
 8001e6a:	030b      	lsls	r3, r1, #12
 8001e6c:	0f62      	lsrs	r2, r4, #29
 8001e6e:	004e      	lsls	r6, r1, #1
 8001e70:	0fcd      	lsrs	r5, r1, #31
 8001e72:	0a5b      	lsrs	r3, r3, #9
 8001e74:	0339      	lsls	r1, r7, #12
 8001e76:	4313      	orrs	r3, r2
 8001e78:	0a49      	lsrs	r1, r1, #9
 8001e7a:	00e2      	lsls	r2, r4, #3
 8001e7c:	0f44      	lsrs	r4, r0, #29
 8001e7e:	4321      	orrs	r1, r4
 8001e80:	4cc2      	ldr	r4, [pc, #776]	; (800218c <__aeabi_dsub+0x334>)
 8001e82:	4691      	mov	r9, r2
 8001e84:	4692      	mov	sl, r2
 8001e86:	00c0      	lsls	r0, r0, #3
 8001e88:	007a      	lsls	r2, r7, #1
 8001e8a:	4680      	mov	r8, r0
 8001e8c:	0d76      	lsrs	r6, r6, #21
 8001e8e:	0d52      	lsrs	r2, r2, #21
 8001e90:	0fff      	lsrs	r7, r7, #31
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x40>
 8001e96:	e0b4      	b.n	8002002 <__aeabi_dsub+0x1aa>
 8001e98:	2401      	movs	r4, #1
 8001e9a:	4067      	eors	r7, r4
 8001e9c:	46bb      	mov	fp, r7
 8001e9e:	42bd      	cmp	r5, r7
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x4c>
 8001ea2:	e088      	b.n	8001fb6 <__aeabi_dsub+0x15e>
 8001ea4:	1ab4      	subs	r4, r6, r2
 8001ea6:	46a4      	mov	ip, r4
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	dc00      	bgt.n	8001eae <__aeabi_dsub+0x56>
 8001eac:	e0b2      	b.n	8002014 <__aeabi_dsub+0x1bc>
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x5c>
 8001eb2:	e0c5      	b.n	8002040 <__aeabi_dsub+0x1e8>
 8001eb4:	4ab5      	ldr	r2, [pc, #724]	; (800218c <__aeabi_dsub+0x334>)
 8001eb6:	4296      	cmp	r6, r2
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x64>
 8001eba:	e28b      	b.n	80023d4 <__aeabi_dsub+0x57c>
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	0412      	lsls	r2, r2, #16
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	4662      	mov	r2, ip
 8001ec4:	2a38      	cmp	r2, #56	; 0x38
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dsub+0x72>
 8001ec8:	e1a1      	b.n	800220e <__aeabi_dsub+0x3b6>
 8001eca:	2a1f      	cmp	r2, #31
 8001ecc:	dd00      	ble.n	8001ed0 <__aeabi_dsub+0x78>
 8001ece:	e216      	b.n	80022fe <__aeabi_dsub+0x4a6>
 8001ed0:	2720      	movs	r7, #32
 8001ed2:	000c      	movs	r4, r1
 8001ed4:	1abf      	subs	r7, r7, r2
 8001ed6:	40bc      	lsls	r4, r7
 8001ed8:	0002      	movs	r2, r0
 8001eda:	46a0      	mov	r8, r4
 8001edc:	4664      	mov	r4, ip
 8001ede:	40b8      	lsls	r0, r7
 8001ee0:	40e2      	lsrs	r2, r4
 8001ee2:	4644      	mov	r4, r8
 8001ee4:	4314      	orrs	r4, r2
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	1e50      	subs	r0, r2, #1
 8001eea:	4182      	sbcs	r2, r0
 8001eec:	4660      	mov	r0, ip
 8001eee:	40c1      	lsrs	r1, r0
 8001ef0:	4322      	orrs	r2, r4
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	1a8c      	subs	r4, r1, r2
 8001ef8:	45a1      	cmp	r9, r4
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4252      	negs	r2, r2
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	4698      	mov	r8, r3
 8001f02:	4643      	mov	r3, r8
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	d400      	bmi.n	8001f0a <__aeabi_dsub+0xb2>
 8001f08:	e117      	b.n	800213a <__aeabi_dsub+0x2e2>
 8001f0a:	4643      	mov	r3, r8
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	0a5b      	lsrs	r3, r3, #9
 8001f10:	4698      	mov	r8, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0xc2>
 8001f18:	e16c      	b.n	80021f4 <__aeabi_dsub+0x39c>
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f000 fc02 	bl	8002724 <__clzsi2>
 8001f20:	0002      	movs	r2, r0
 8001f22:	3a08      	subs	r2, #8
 8001f24:	2120      	movs	r1, #32
 8001f26:	0020      	movs	r0, r4
 8001f28:	4643      	mov	r3, r8
 8001f2a:	1a89      	subs	r1, r1, r2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	40c8      	lsrs	r0, r1
 8001f30:	4094      	lsls	r4, r2
 8001f32:	4303      	orrs	r3, r0
 8001f34:	4296      	cmp	r6, r2
 8001f36:	dd00      	ble.n	8001f3a <__aeabi_dsub+0xe2>
 8001f38:	e157      	b.n	80021ea <__aeabi_dsub+0x392>
 8001f3a:	1b96      	subs	r6, r2, r6
 8001f3c:	1c71      	adds	r1, r6, #1
 8001f3e:	291f      	cmp	r1, #31
 8001f40:	dd00      	ble.n	8001f44 <__aeabi_dsub+0xec>
 8001f42:	e1cb      	b.n	80022dc <__aeabi_dsub+0x484>
 8001f44:	2220      	movs	r2, #32
 8001f46:	0018      	movs	r0, r3
 8001f48:	0026      	movs	r6, r4
 8001f4a:	1a52      	subs	r2, r2, r1
 8001f4c:	4094      	lsls	r4, r2
 8001f4e:	4090      	lsls	r0, r2
 8001f50:	40ce      	lsrs	r6, r1
 8001f52:	40cb      	lsrs	r3, r1
 8001f54:	1e62      	subs	r2, r4, #1
 8001f56:	4194      	sbcs	r4, r2
 8001f58:	4330      	orrs	r0, r6
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	4304      	orrs	r4, r0
 8001f60:	0763      	lsls	r3, r4, #29
 8001f62:	d009      	beq.n	8001f78 <__aeabi_dsub+0x120>
 8001f64:	230f      	movs	r3, #15
 8001f66:	4023      	ands	r3, r4
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x120>
 8001f6c:	1d23      	adds	r3, r4, #4
 8001f6e:	42a3      	cmp	r3, r4
 8001f70:	41a4      	sbcs	r4, r4
 8001f72:	4264      	negs	r4, r4
 8001f74:	44a0      	add	r8, r4
 8001f76:	001c      	movs	r4, r3
 8001f78:	4643      	mov	r3, r8
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	d400      	bmi.n	8001f80 <__aeabi_dsub+0x128>
 8001f7e:	e0df      	b.n	8002140 <__aeabi_dsub+0x2e8>
 8001f80:	4b82      	ldr	r3, [pc, #520]	; (800218c <__aeabi_dsub+0x334>)
 8001f82:	3601      	adds	r6, #1
 8001f84:	429e      	cmp	r6, r3
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x132>
 8001f88:	e0fb      	b.n	8002182 <__aeabi_dsub+0x32a>
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	4b80      	ldr	r3, [pc, #512]	; (8002190 <__aeabi_dsub+0x338>)
 8001f8e:	08e4      	lsrs	r4, r4, #3
 8001f90:	401a      	ands	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	0571      	lsls	r1, r6, #21
 8001f96:	0752      	lsls	r2, r2, #29
 8001f98:	025b      	lsls	r3, r3, #9
 8001f9a:	4322      	orrs	r2, r4
 8001f9c:	0b1b      	lsrs	r3, r3, #12
 8001f9e:	0d49      	lsrs	r1, r1, #21
 8001fa0:	0509      	lsls	r1, r1, #20
 8001fa2:	07ed      	lsls	r5, r5, #31
 8001fa4:	4319      	orrs	r1, r3
 8001fa6:	4329      	orrs	r1, r5
 8001fa8:	0010      	movs	r0, r2
 8001faa:	bcf0      	pop	{r4, r5, r6, r7}
 8001fac:	46bb      	mov	fp, r7
 8001fae:	46b2      	mov	sl, r6
 8001fb0:	46a9      	mov	r9, r5
 8001fb2:	46a0      	mov	r8, r4
 8001fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb6:	1ab4      	subs	r4, r6, r2
 8001fb8:	46a4      	mov	ip, r4
 8001fba:	2c00      	cmp	r4, #0
 8001fbc:	dd58      	ble.n	8002070 <__aeabi_dsub+0x218>
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x16c>
 8001fc2:	e09e      	b.n	8002102 <__aeabi_dsub+0x2aa>
 8001fc4:	4a71      	ldr	r2, [pc, #452]	; (800218c <__aeabi_dsub+0x334>)
 8001fc6:	4296      	cmp	r6, r2
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x174>
 8001fca:	e13b      	b.n	8002244 <__aeabi_dsub+0x3ec>
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0412      	lsls	r2, r2, #16
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	4662      	mov	r2, ip
 8001fd4:	2a38      	cmp	r2, #56	; 0x38
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dsub+0x182>
 8001fd8:	e0c1      	b.n	800215e <__aeabi_dsub+0x306>
 8001fda:	2a1f      	cmp	r2, #31
 8001fdc:	dc00      	bgt.n	8001fe0 <__aeabi_dsub+0x188>
 8001fde:	e1bb      	b.n	8002358 <__aeabi_dsub+0x500>
 8001fe0:	000c      	movs	r4, r1
 8001fe2:	3a20      	subs	r2, #32
 8001fe4:	40d4      	lsrs	r4, r2
 8001fe6:	0022      	movs	r2, r4
 8001fe8:	4664      	mov	r4, ip
 8001fea:	2c20      	cmp	r4, #32
 8001fec:	d004      	beq.n	8001ff8 <__aeabi_dsub+0x1a0>
 8001fee:	2740      	movs	r7, #64	; 0x40
 8001ff0:	1b3f      	subs	r7, r7, r4
 8001ff2:	40b9      	lsls	r1, r7
 8001ff4:	4308      	orrs	r0, r1
 8001ff6:	4680      	mov	r8, r0
 8001ff8:	4644      	mov	r4, r8
 8001ffa:	1e61      	subs	r1, r4, #1
 8001ffc:	418c      	sbcs	r4, r1
 8001ffe:	4314      	orrs	r4, r2
 8002000:	e0b1      	b.n	8002166 <__aeabi_dsub+0x30e>
 8002002:	000c      	movs	r4, r1
 8002004:	4304      	orrs	r4, r0
 8002006:	d02a      	beq.n	800205e <__aeabi_dsub+0x206>
 8002008:	46bb      	mov	fp, r7
 800200a:	42bd      	cmp	r5, r7
 800200c:	d02d      	beq.n	800206a <__aeabi_dsub+0x212>
 800200e:	4c61      	ldr	r4, [pc, #388]	; (8002194 <__aeabi_dsub+0x33c>)
 8002010:	46a4      	mov	ip, r4
 8002012:	44b4      	add	ip, r6
 8002014:	4664      	mov	r4, ip
 8002016:	2c00      	cmp	r4, #0
 8002018:	d05c      	beq.n	80020d4 <__aeabi_dsub+0x27c>
 800201a:	1b94      	subs	r4, r2, r6
 800201c:	46a4      	mov	ip, r4
 800201e:	2e00      	cmp	r6, #0
 8002020:	d000      	beq.n	8002024 <__aeabi_dsub+0x1cc>
 8002022:	e115      	b.n	8002250 <__aeabi_dsub+0x3f8>
 8002024:	464d      	mov	r5, r9
 8002026:	431d      	orrs	r5, r3
 8002028:	d100      	bne.n	800202c <__aeabi_dsub+0x1d4>
 800202a:	e1c3      	b.n	80023b4 <__aeabi_dsub+0x55c>
 800202c:	1e65      	subs	r5, r4, #1
 800202e:	2c01      	cmp	r4, #1
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x1dc>
 8002032:	e20c      	b.n	800244e <__aeabi_dsub+0x5f6>
 8002034:	4e55      	ldr	r6, [pc, #340]	; (800218c <__aeabi_dsub+0x334>)
 8002036:	42b4      	cmp	r4, r6
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x1e4>
 800203a:	e1f8      	b.n	800242e <__aeabi_dsub+0x5d6>
 800203c:	46ac      	mov	ip, r5
 800203e:	e10e      	b.n	800225e <__aeabi_dsub+0x406>
 8002040:	000a      	movs	r2, r1
 8002042:	4302      	orrs	r2, r0
 8002044:	d100      	bne.n	8002048 <__aeabi_dsub+0x1f0>
 8002046:	e136      	b.n	80022b6 <__aeabi_dsub+0x45e>
 8002048:	0022      	movs	r2, r4
 800204a:	3a01      	subs	r2, #1
 800204c:	2c01      	cmp	r4, #1
 800204e:	d100      	bne.n	8002052 <__aeabi_dsub+0x1fa>
 8002050:	e1c6      	b.n	80023e0 <__aeabi_dsub+0x588>
 8002052:	4c4e      	ldr	r4, [pc, #312]	; (800218c <__aeabi_dsub+0x334>)
 8002054:	45a4      	cmp	ip, r4
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x202>
 8002058:	e0f4      	b.n	8002244 <__aeabi_dsub+0x3ec>
 800205a:	4694      	mov	ip, r2
 800205c:	e731      	b.n	8001ec2 <__aeabi_dsub+0x6a>
 800205e:	2401      	movs	r4, #1
 8002060:	4067      	eors	r7, r4
 8002062:	46bb      	mov	fp, r7
 8002064:	42bd      	cmp	r5, r7
 8002066:	d000      	beq.n	800206a <__aeabi_dsub+0x212>
 8002068:	e71c      	b.n	8001ea4 <__aeabi_dsub+0x4c>
 800206a:	4c4a      	ldr	r4, [pc, #296]	; (8002194 <__aeabi_dsub+0x33c>)
 800206c:	46a4      	mov	ip, r4
 800206e:	44b4      	add	ip, r6
 8002070:	4664      	mov	r4, ip
 8002072:	2c00      	cmp	r4, #0
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x220>
 8002076:	e0cf      	b.n	8002218 <__aeabi_dsub+0x3c0>
 8002078:	1b94      	subs	r4, r2, r6
 800207a:	46a4      	mov	ip, r4
 800207c:	2e00      	cmp	r6, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x22a>
 8002080:	e15c      	b.n	800233c <__aeabi_dsub+0x4e4>
 8002082:	4e42      	ldr	r6, [pc, #264]	; (800218c <__aeabi_dsub+0x334>)
 8002084:	42b2      	cmp	r2, r6
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x232>
 8002088:	e1ec      	b.n	8002464 <__aeabi_dsub+0x60c>
 800208a:	2680      	movs	r6, #128	; 0x80
 800208c:	0436      	lsls	r6, r6, #16
 800208e:	4333      	orrs	r3, r6
 8002090:	4664      	mov	r4, ip
 8002092:	2c38      	cmp	r4, #56	; 0x38
 8002094:	dd00      	ble.n	8002098 <__aeabi_dsub+0x240>
 8002096:	e1b3      	b.n	8002400 <__aeabi_dsub+0x5a8>
 8002098:	2c1f      	cmp	r4, #31
 800209a:	dd00      	ble.n	800209e <__aeabi_dsub+0x246>
 800209c:	e238      	b.n	8002510 <__aeabi_dsub+0x6b8>
 800209e:	2620      	movs	r6, #32
 80020a0:	1b36      	subs	r6, r6, r4
 80020a2:	001c      	movs	r4, r3
 80020a4:	40b4      	lsls	r4, r6
 80020a6:	464f      	mov	r7, r9
 80020a8:	46a0      	mov	r8, r4
 80020aa:	4664      	mov	r4, ip
 80020ac:	40e7      	lsrs	r7, r4
 80020ae:	4644      	mov	r4, r8
 80020b0:	433c      	orrs	r4, r7
 80020b2:	464f      	mov	r7, r9
 80020b4:	40b7      	lsls	r7, r6
 80020b6:	003e      	movs	r6, r7
 80020b8:	1e77      	subs	r7, r6, #1
 80020ba:	41be      	sbcs	r6, r7
 80020bc:	4334      	orrs	r4, r6
 80020be:	4666      	mov	r6, ip
 80020c0:	40f3      	lsrs	r3, r6
 80020c2:	18c9      	adds	r1, r1, r3
 80020c4:	1824      	adds	r4, r4, r0
 80020c6:	4284      	cmp	r4, r0
 80020c8:	419b      	sbcs	r3, r3
 80020ca:	425b      	negs	r3, r3
 80020cc:	4698      	mov	r8, r3
 80020ce:	0016      	movs	r6, r2
 80020d0:	4488      	add	r8, r1
 80020d2:	e04e      	b.n	8002172 <__aeabi_dsub+0x31a>
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <__aeabi_dsub+0x340>)
 80020d6:	1c74      	adds	r4, r6, #1
 80020d8:	4214      	tst	r4, r2
 80020da:	d000      	beq.n	80020de <__aeabi_dsub+0x286>
 80020dc:	e0d6      	b.n	800228c <__aeabi_dsub+0x434>
 80020de:	464a      	mov	r2, r9
 80020e0:	431a      	orrs	r2, r3
 80020e2:	2e00      	cmp	r6, #0
 80020e4:	d000      	beq.n	80020e8 <__aeabi_dsub+0x290>
 80020e6:	e15b      	b.n	80023a0 <__aeabi_dsub+0x548>
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x296>
 80020ec:	e1a5      	b.n	800243a <__aeabi_dsub+0x5e2>
 80020ee:	000a      	movs	r2, r1
 80020f0:	4302      	orrs	r2, r0
 80020f2:	d000      	beq.n	80020f6 <__aeabi_dsub+0x29e>
 80020f4:	e1bb      	b.n	800246e <__aeabi_dsub+0x616>
 80020f6:	464a      	mov	r2, r9
 80020f8:	0759      	lsls	r1, r3, #29
 80020fa:	08d2      	lsrs	r2, r2, #3
 80020fc:	430a      	orrs	r2, r1
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	e027      	b.n	8002152 <__aeabi_dsub+0x2fa>
 8002102:	000a      	movs	r2, r1
 8002104:	4302      	orrs	r2, r0
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x2b2>
 8002108:	e174      	b.n	80023f4 <__aeabi_dsub+0x59c>
 800210a:	0022      	movs	r2, r4
 800210c:	3a01      	subs	r2, #1
 800210e:	2c01      	cmp	r4, #1
 8002110:	d005      	beq.n	800211e <__aeabi_dsub+0x2c6>
 8002112:	4c1e      	ldr	r4, [pc, #120]	; (800218c <__aeabi_dsub+0x334>)
 8002114:	45a4      	cmp	ip, r4
 8002116:	d100      	bne.n	800211a <__aeabi_dsub+0x2c2>
 8002118:	e094      	b.n	8002244 <__aeabi_dsub+0x3ec>
 800211a:	4694      	mov	ip, r2
 800211c:	e759      	b.n	8001fd2 <__aeabi_dsub+0x17a>
 800211e:	4448      	add	r0, r9
 8002120:	4548      	cmp	r0, r9
 8002122:	4192      	sbcs	r2, r2
 8002124:	185b      	adds	r3, r3, r1
 8002126:	4698      	mov	r8, r3
 8002128:	0004      	movs	r4, r0
 800212a:	4252      	negs	r2, r2
 800212c:	4490      	add	r8, r2
 800212e:	4643      	mov	r3, r8
 8002130:	2602      	movs	r6, #2
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	d500      	bpl.n	8002138 <__aeabi_dsub+0x2e0>
 8002136:	e0c4      	b.n	80022c2 <__aeabi_dsub+0x46a>
 8002138:	3e01      	subs	r6, #1
 800213a:	0763      	lsls	r3, r4, #29
 800213c:	d000      	beq.n	8002140 <__aeabi_dsub+0x2e8>
 800213e:	e711      	b.n	8001f64 <__aeabi_dsub+0x10c>
 8002140:	4643      	mov	r3, r8
 8002142:	46b4      	mov	ip, r6
 8002144:	0759      	lsls	r1, r3, #29
 8002146:	08e2      	lsrs	r2, r4, #3
 8002148:	430a      	orrs	r2, r1
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	490f      	ldr	r1, [pc, #60]	; (800218c <__aeabi_dsub+0x334>)
 800214e:	458c      	cmp	ip, r1
 8002150:	d040      	beq.n	80021d4 <__aeabi_dsub+0x37c>
 8002152:	4661      	mov	r1, ip
 8002154:	031b      	lsls	r3, r3, #12
 8002156:	0549      	lsls	r1, r1, #21
 8002158:	0b1b      	lsrs	r3, r3, #12
 800215a:	0d49      	lsrs	r1, r1, #21
 800215c:	e720      	b.n	8001fa0 <__aeabi_dsub+0x148>
 800215e:	4301      	orrs	r1, r0
 8002160:	000c      	movs	r4, r1
 8002162:	1e61      	subs	r1, r4, #1
 8002164:	418c      	sbcs	r4, r1
 8002166:	444c      	add	r4, r9
 8002168:	454c      	cmp	r4, r9
 800216a:	4192      	sbcs	r2, r2
 800216c:	4252      	negs	r2, r2
 800216e:	4690      	mov	r8, r2
 8002170:	4498      	add	r8, r3
 8002172:	4643      	mov	r3, r8
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	d5e0      	bpl.n	800213a <__aeabi_dsub+0x2e2>
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__aeabi_dsub+0x334>)
 800217a:	3601      	adds	r6, #1
 800217c:	429e      	cmp	r6, r3
 800217e:	d000      	beq.n	8002182 <__aeabi_dsub+0x32a>
 8002180:	e09f      	b.n	80022c2 <__aeabi_dsub+0x46a>
 8002182:	0031      	movs	r1, r6
 8002184:	2300      	movs	r3, #0
 8002186:	2200      	movs	r2, #0
 8002188:	e70a      	b.n	8001fa0 <__aeabi_dsub+0x148>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff
 8002190:	ff7fffff 	.word	0xff7fffff
 8002194:	fffff801 	.word	0xfffff801
 8002198:	000007fe 	.word	0x000007fe
 800219c:	2a00      	cmp	r2, #0
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x34a>
 80021a0:	e160      	b.n	8002464 <__aeabi_dsub+0x60c>
 80021a2:	000a      	movs	r2, r1
 80021a4:	4302      	orrs	r2, r0
 80021a6:	d04d      	beq.n	8002244 <__aeabi_dsub+0x3ec>
 80021a8:	464a      	mov	r2, r9
 80021aa:	075c      	lsls	r4, r3, #29
 80021ac:	08d2      	lsrs	r2, r2, #3
 80021ae:	4322      	orrs	r2, r4
 80021b0:	2480      	movs	r4, #128	; 0x80
 80021b2:	08db      	lsrs	r3, r3, #3
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	4223      	tst	r3, r4
 80021b8:	d007      	beq.n	80021ca <__aeabi_dsub+0x372>
 80021ba:	08ce      	lsrs	r6, r1, #3
 80021bc:	4226      	tst	r6, r4
 80021be:	d104      	bne.n	80021ca <__aeabi_dsub+0x372>
 80021c0:	465d      	mov	r5, fp
 80021c2:	0033      	movs	r3, r6
 80021c4:	08c2      	lsrs	r2, r0, #3
 80021c6:	0749      	lsls	r1, r1, #29
 80021c8:	430a      	orrs	r2, r1
 80021ca:	0f51      	lsrs	r1, r2, #29
 80021cc:	00d2      	lsls	r2, r2, #3
 80021ce:	08d2      	lsrs	r2, r2, #3
 80021d0:	0749      	lsls	r1, r1, #29
 80021d2:	430a      	orrs	r2, r1
 80021d4:	0011      	movs	r1, r2
 80021d6:	4319      	orrs	r1, r3
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x384>
 80021da:	e1c8      	b.n	800256e <__aeabi_dsub+0x716>
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	0309      	lsls	r1, r1, #12
 80021e0:	430b      	orrs	r3, r1
 80021e2:	031b      	lsls	r3, r3, #12
 80021e4:	49d5      	ldr	r1, [pc, #852]	; (800253c <__aeabi_dsub+0x6e4>)
 80021e6:	0b1b      	lsrs	r3, r3, #12
 80021e8:	e6da      	b.n	8001fa0 <__aeabi_dsub+0x148>
 80021ea:	49d5      	ldr	r1, [pc, #852]	; (8002540 <__aeabi_dsub+0x6e8>)
 80021ec:	1ab6      	subs	r6, r6, r2
 80021ee:	400b      	ands	r3, r1
 80021f0:	4698      	mov	r8, r3
 80021f2:	e6b5      	b.n	8001f60 <__aeabi_dsub+0x108>
 80021f4:	0020      	movs	r0, r4
 80021f6:	f000 fa95 	bl	8002724 <__clzsi2>
 80021fa:	0002      	movs	r2, r0
 80021fc:	3218      	adds	r2, #24
 80021fe:	2a1f      	cmp	r2, #31
 8002200:	dc00      	bgt.n	8002204 <__aeabi_dsub+0x3ac>
 8002202:	e68f      	b.n	8001f24 <__aeabi_dsub+0xcc>
 8002204:	0023      	movs	r3, r4
 8002206:	3808      	subs	r0, #8
 8002208:	4083      	lsls	r3, r0
 800220a:	2400      	movs	r4, #0
 800220c:	e692      	b.n	8001f34 <__aeabi_dsub+0xdc>
 800220e:	4308      	orrs	r0, r1
 8002210:	0002      	movs	r2, r0
 8002212:	1e50      	subs	r0, r2, #1
 8002214:	4182      	sbcs	r2, r0
 8002216:	e66d      	b.n	8001ef4 <__aeabi_dsub+0x9c>
 8002218:	4cca      	ldr	r4, [pc, #808]	; (8002544 <__aeabi_dsub+0x6ec>)
 800221a:	1c72      	adds	r2, r6, #1
 800221c:	4222      	tst	r2, r4
 800221e:	d000      	beq.n	8002222 <__aeabi_dsub+0x3ca>
 8002220:	e0ad      	b.n	800237e <__aeabi_dsub+0x526>
 8002222:	464a      	mov	r2, r9
 8002224:	431a      	orrs	r2, r3
 8002226:	2e00      	cmp	r6, #0
 8002228:	d1b8      	bne.n	800219c <__aeabi_dsub+0x344>
 800222a:	2a00      	cmp	r2, #0
 800222c:	d100      	bne.n	8002230 <__aeabi_dsub+0x3d8>
 800222e:	e158      	b.n	80024e2 <__aeabi_dsub+0x68a>
 8002230:	000a      	movs	r2, r1
 8002232:	4302      	orrs	r2, r0
 8002234:	d000      	beq.n	8002238 <__aeabi_dsub+0x3e0>
 8002236:	e159      	b.n	80024ec <__aeabi_dsub+0x694>
 8002238:	464a      	mov	r2, r9
 800223a:	0759      	lsls	r1, r3, #29
 800223c:	08d2      	lsrs	r2, r2, #3
 800223e:	430a      	orrs	r2, r1
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	e786      	b.n	8002152 <__aeabi_dsub+0x2fa>
 8002244:	464a      	mov	r2, r9
 8002246:	0759      	lsls	r1, r3, #29
 8002248:	08d2      	lsrs	r2, r2, #3
 800224a:	430a      	orrs	r2, r1
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	e7c1      	b.n	80021d4 <__aeabi_dsub+0x37c>
 8002250:	4dba      	ldr	r5, [pc, #744]	; (800253c <__aeabi_dsub+0x6e4>)
 8002252:	42aa      	cmp	r2, r5
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x400>
 8002256:	e11e      	b.n	8002496 <__aeabi_dsub+0x63e>
 8002258:	2580      	movs	r5, #128	; 0x80
 800225a:	042d      	lsls	r5, r5, #16
 800225c:	432b      	orrs	r3, r5
 800225e:	4664      	mov	r4, ip
 8002260:	2c38      	cmp	r4, #56	; 0x38
 8002262:	dc5d      	bgt.n	8002320 <__aeabi_dsub+0x4c8>
 8002264:	2c1f      	cmp	r4, #31
 8002266:	dd00      	ble.n	800226a <__aeabi_dsub+0x412>
 8002268:	e0d0      	b.n	800240c <__aeabi_dsub+0x5b4>
 800226a:	2520      	movs	r5, #32
 800226c:	4667      	mov	r7, ip
 800226e:	1b2d      	subs	r5, r5, r4
 8002270:	464e      	mov	r6, r9
 8002272:	001c      	movs	r4, r3
 8002274:	40fe      	lsrs	r6, r7
 8002276:	40ac      	lsls	r4, r5
 8002278:	4334      	orrs	r4, r6
 800227a:	464e      	mov	r6, r9
 800227c:	40ae      	lsls	r6, r5
 800227e:	0035      	movs	r5, r6
 8002280:	40fb      	lsrs	r3, r7
 8002282:	1e6e      	subs	r6, r5, #1
 8002284:	41b5      	sbcs	r5, r6
 8002286:	1ac9      	subs	r1, r1, r3
 8002288:	432c      	orrs	r4, r5
 800228a:	e04e      	b.n	800232a <__aeabi_dsub+0x4d2>
 800228c:	464a      	mov	r2, r9
 800228e:	1a14      	subs	r4, r2, r0
 8002290:	45a1      	cmp	r9, r4
 8002292:	4192      	sbcs	r2, r2
 8002294:	4252      	negs	r2, r2
 8002296:	4690      	mov	r8, r2
 8002298:	1a5f      	subs	r7, r3, r1
 800229a:	003a      	movs	r2, r7
 800229c:	4647      	mov	r7, r8
 800229e:	1bd2      	subs	r2, r2, r7
 80022a0:	4690      	mov	r8, r2
 80022a2:	0212      	lsls	r2, r2, #8
 80022a4:	d500      	bpl.n	80022a8 <__aeabi_dsub+0x450>
 80022a6:	e08b      	b.n	80023c0 <__aeabi_dsub+0x568>
 80022a8:	4642      	mov	r2, r8
 80022aa:	4322      	orrs	r2, r4
 80022ac:	d000      	beq.n	80022b0 <__aeabi_dsub+0x458>
 80022ae:	e630      	b.n	8001f12 <__aeabi_dsub+0xba>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2500      	movs	r5, #0
 80022b4:	e74d      	b.n	8002152 <__aeabi_dsub+0x2fa>
 80022b6:	464a      	mov	r2, r9
 80022b8:	0759      	lsls	r1, r3, #29
 80022ba:	08d2      	lsrs	r2, r2, #3
 80022bc:	430a      	orrs	r2, r1
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	e744      	b.n	800214c <__aeabi_dsub+0x2f4>
 80022c2:	4642      	mov	r2, r8
 80022c4:	4b9e      	ldr	r3, [pc, #632]	; (8002540 <__aeabi_dsub+0x6e8>)
 80022c6:	0861      	lsrs	r1, r4, #1
 80022c8:	401a      	ands	r2, r3
 80022ca:	0013      	movs	r3, r2
 80022cc:	2201      	movs	r2, #1
 80022ce:	4014      	ands	r4, r2
 80022d0:	430c      	orrs	r4, r1
 80022d2:	07da      	lsls	r2, r3, #31
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	4698      	mov	r8, r3
 80022d8:	4314      	orrs	r4, r2
 80022da:	e641      	b.n	8001f60 <__aeabi_dsub+0x108>
 80022dc:	001a      	movs	r2, r3
 80022de:	3e1f      	subs	r6, #31
 80022e0:	40f2      	lsrs	r2, r6
 80022e2:	0016      	movs	r6, r2
 80022e4:	2920      	cmp	r1, #32
 80022e6:	d003      	beq.n	80022f0 <__aeabi_dsub+0x498>
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	1a51      	subs	r1, r2, r1
 80022ec:	408b      	lsls	r3, r1
 80022ee:	431c      	orrs	r4, r3
 80022f0:	1e62      	subs	r2, r4, #1
 80022f2:	4194      	sbcs	r4, r2
 80022f4:	2300      	movs	r3, #0
 80022f6:	4334      	orrs	r4, r6
 80022f8:	4698      	mov	r8, r3
 80022fa:	2600      	movs	r6, #0
 80022fc:	e71d      	b.n	800213a <__aeabi_dsub+0x2e2>
 80022fe:	000c      	movs	r4, r1
 8002300:	3a20      	subs	r2, #32
 8002302:	40d4      	lsrs	r4, r2
 8002304:	0022      	movs	r2, r4
 8002306:	4664      	mov	r4, ip
 8002308:	2c20      	cmp	r4, #32
 800230a:	d004      	beq.n	8002316 <__aeabi_dsub+0x4be>
 800230c:	2740      	movs	r7, #64	; 0x40
 800230e:	1b3f      	subs	r7, r7, r4
 8002310:	40b9      	lsls	r1, r7
 8002312:	4308      	orrs	r0, r1
 8002314:	4680      	mov	r8, r0
 8002316:	4644      	mov	r4, r8
 8002318:	1e61      	subs	r1, r4, #1
 800231a:	418c      	sbcs	r4, r1
 800231c:	4322      	orrs	r2, r4
 800231e:	e5e9      	b.n	8001ef4 <__aeabi_dsub+0x9c>
 8002320:	464c      	mov	r4, r9
 8002322:	4323      	orrs	r3, r4
 8002324:	001c      	movs	r4, r3
 8002326:	1e63      	subs	r3, r4, #1
 8002328:	419c      	sbcs	r4, r3
 800232a:	1b04      	subs	r4, r0, r4
 800232c:	42a0      	cmp	r0, r4
 800232e:	419b      	sbcs	r3, r3
 8002330:	425b      	negs	r3, r3
 8002332:	1acb      	subs	r3, r1, r3
 8002334:	4698      	mov	r8, r3
 8002336:	465d      	mov	r5, fp
 8002338:	0016      	movs	r6, r2
 800233a:	e5e2      	b.n	8001f02 <__aeabi_dsub+0xaa>
 800233c:	464e      	mov	r6, r9
 800233e:	431e      	orrs	r6, r3
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x4ec>
 8002342:	e0ae      	b.n	80024a2 <__aeabi_dsub+0x64a>
 8002344:	1e66      	subs	r6, r4, #1
 8002346:	2c01      	cmp	r4, #1
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x4f4>
 800234a:	e0fd      	b.n	8002548 <__aeabi_dsub+0x6f0>
 800234c:	4f7b      	ldr	r7, [pc, #492]	; (800253c <__aeabi_dsub+0x6e4>)
 800234e:	42bc      	cmp	r4, r7
 8002350:	d100      	bne.n	8002354 <__aeabi_dsub+0x4fc>
 8002352:	e107      	b.n	8002564 <__aeabi_dsub+0x70c>
 8002354:	46b4      	mov	ip, r6
 8002356:	e69b      	b.n	8002090 <__aeabi_dsub+0x238>
 8002358:	4664      	mov	r4, ip
 800235a:	2220      	movs	r2, #32
 800235c:	1b12      	subs	r2, r2, r4
 800235e:	000c      	movs	r4, r1
 8002360:	4094      	lsls	r4, r2
 8002362:	0007      	movs	r7, r0
 8002364:	4090      	lsls	r0, r2
 8002366:	46a0      	mov	r8, r4
 8002368:	4664      	mov	r4, ip
 800236a:	1e42      	subs	r2, r0, #1
 800236c:	4190      	sbcs	r0, r2
 800236e:	4662      	mov	r2, ip
 8002370:	40e7      	lsrs	r7, r4
 8002372:	4644      	mov	r4, r8
 8002374:	40d1      	lsrs	r1, r2
 8002376:	433c      	orrs	r4, r7
 8002378:	4304      	orrs	r4, r0
 800237a:	185b      	adds	r3, r3, r1
 800237c:	e6f3      	b.n	8002166 <__aeabi_dsub+0x30e>
 800237e:	4c6f      	ldr	r4, [pc, #444]	; (800253c <__aeabi_dsub+0x6e4>)
 8002380:	42a2      	cmp	r2, r4
 8002382:	d100      	bne.n	8002386 <__aeabi_dsub+0x52e>
 8002384:	e0d5      	b.n	8002532 <__aeabi_dsub+0x6da>
 8002386:	4448      	add	r0, r9
 8002388:	185b      	adds	r3, r3, r1
 800238a:	4548      	cmp	r0, r9
 800238c:	4189      	sbcs	r1, r1
 800238e:	4249      	negs	r1, r1
 8002390:	185b      	adds	r3, r3, r1
 8002392:	07dc      	lsls	r4, r3, #31
 8002394:	0840      	lsrs	r0, r0, #1
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	4698      	mov	r8, r3
 800239a:	0016      	movs	r6, r2
 800239c:	4304      	orrs	r4, r0
 800239e:	e6cc      	b.n	800213a <__aeabi_dsub+0x2e2>
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d000      	beq.n	80023a6 <__aeabi_dsub+0x54e>
 80023a4:	e082      	b.n	80024ac <__aeabi_dsub+0x654>
 80023a6:	000a      	movs	r2, r1
 80023a8:	4302      	orrs	r2, r0
 80023aa:	d140      	bne.n	800242e <__aeabi_dsub+0x5d6>
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	2500      	movs	r5, #0
 80023b0:	031b      	lsls	r3, r3, #12
 80023b2:	e713      	b.n	80021dc <__aeabi_dsub+0x384>
 80023b4:	074b      	lsls	r3, r1, #29
 80023b6:	08c2      	lsrs	r2, r0, #3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	465d      	mov	r5, fp
 80023bc:	08cb      	lsrs	r3, r1, #3
 80023be:	e6c5      	b.n	800214c <__aeabi_dsub+0x2f4>
 80023c0:	464a      	mov	r2, r9
 80023c2:	1a84      	subs	r4, r0, r2
 80023c4:	42a0      	cmp	r0, r4
 80023c6:	4192      	sbcs	r2, r2
 80023c8:	1acb      	subs	r3, r1, r3
 80023ca:	4252      	negs	r2, r2
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	4698      	mov	r8, r3
 80023d0:	465d      	mov	r5, fp
 80023d2:	e59e      	b.n	8001f12 <__aeabi_dsub+0xba>
 80023d4:	464a      	mov	r2, r9
 80023d6:	0759      	lsls	r1, r3, #29
 80023d8:	08d2      	lsrs	r2, r2, #3
 80023da:	430a      	orrs	r2, r1
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	e6f9      	b.n	80021d4 <__aeabi_dsub+0x37c>
 80023e0:	464a      	mov	r2, r9
 80023e2:	1a14      	subs	r4, r2, r0
 80023e4:	45a1      	cmp	r9, r4
 80023e6:	4192      	sbcs	r2, r2
 80023e8:	1a5b      	subs	r3, r3, r1
 80023ea:	4252      	negs	r2, r2
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	4698      	mov	r8, r3
 80023f0:	2601      	movs	r6, #1
 80023f2:	e586      	b.n	8001f02 <__aeabi_dsub+0xaa>
 80023f4:	464a      	mov	r2, r9
 80023f6:	0759      	lsls	r1, r3, #29
 80023f8:	08d2      	lsrs	r2, r2, #3
 80023fa:	430a      	orrs	r2, r1
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	e6a5      	b.n	800214c <__aeabi_dsub+0x2f4>
 8002400:	464c      	mov	r4, r9
 8002402:	4323      	orrs	r3, r4
 8002404:	001c      	movs	r4, r3
 8002406:	1e63      	subs	r3, r4, #1
 8002408:	419c      	sbcs	r4, r3
 800240a:	e65b      	b.n	80020c4 <__aeabi_dsub+0x26c>
 800240c:	4665      	mov	r5, ip
 800240e:	001e      	movs	r6, r3
 8002410:	3d20      	subs	r5, #32
 8002412:	40ee      	lsrs	r6, r5
 8002414:	2c20      	cmp	r4, #32
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0x5cc>
 8002418:	2540      	movs	r5, #64	; 0x40
 800241a:	1b2d      	subs	r5, r5, r4
 800241c:	40ab      	lsls	r3, r5
 800241e:	464c      	mov	r4, r9
 8002420:	431c      	orrs	r4, r3
 8002422:	46a2      	mov	sl, r4
 8002424:	4654      	mov	r4, sl
 8002426:	1e63      	subs	r3, r4, #1
 8002428:	419c      	sbcs	r4, r3
 800242a:	4334      	orrs	r4, r6
 800242c:	e77d      	b.n	800232a <__aeabi_dsub+0x4d2>
 800242e:	074b      	lsls	r3, r1, #29
 8002430:	08c2      	lsrs	r2, r0, #3
 8002432:	431a      	orrs	r2, r3
 8002434:	465d      	mov	r5, fp
 8002436:	08cb      	lsrs	r3, r1, #3
 8002438:	e6cc      	b.n	80021d4 <__aeabi_dsub+0x37c>
 800243a:	000a      	movs	r2, r1
 800243c:	4302      	orrs	r2, r0
 800243e:	d100      	bne.n	8002442 <__aeabi_dsub+0x5ea>
 8002440:	e736      	b.n	80022b0 <__aeabi_dsub+0x458>
 8002442:	074b      	lsls	r3, r1, #29
 8002444:	08c2      	lsrs	r2, r0, #3
 8002446:	431a      	orrs	r2, r3
 8002448:	465d      	mov	r5, fp
 800244a:	08cb      	lsrs	r3, r1, #3
 800244c:	e681      	b.n	8002152 <__aeabi_dsub+0x2fa>
 800244e:	464a      	mov	r2, r9
 8002450:	1a84      	subs	r4, r0, r2
 8002452:	42a0      	cmp	r0, r4
 8002454:	4192      	sbcs	r2, r2
 8002456:	1acb      	subs	r3, r1, r3
 8002458:	4252      	negs	r2, r2
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	4698      	mov	r8, r3
 800245e:	465d      	mov	r5, fp
 8002460:	2601      	movs	r6, #1
 8002462:	e54e      	b.n	8001f02 <__aeabi_dsub+0xaa>
 8002464:	074b      	lsls	r3, r1, #29
 8002466:	08c2      	lsrs	r2, r0, #3
 8002468:	431a      	orrs	r2, r3
 800246a:	08cb      	lsrs	r3, r1, #3
 800246c:	e6b2      	b.n	80021d4 <__aeabi_dsub+0x37c>
 800246e:	464a      	mov	r2, r9
 8002470:	1a14      	subs	r4, r2, r0
 8002472:	45a1      	cmp	r9, r4
 8002474:	4192      	sbcs	r2, r2
 8002476:	1a5f      	subs	r7, r3, r1
 8002478:	4252      	negs	r2, r2
 800247a:	1aba      	subs	r2, r7, r2
 800247c:	4690      	mov	r8, r2
 800247e:	0212      	lsls	r2, r2, #8
 8002480:	d56b      	bpl.n	800255a <__aeabi_dsub+0x702>
 8002482:	464a      	mov	r2, r9
 8002484:	1a84      	subs	r4, r0, r2
 8002486:	42a0      	cmp	r0, r4
 8002488:	4192      	sbcs	r2, r2
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	4252      	negs	r2, r2
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	4698      	mov	r8, r3
 8002492:	465d      	mov	r5, fp
 8002494:	e564      	b.n	8001f60 <__aeabi_dsub+0x108>
 8002496:	074b      	lsls	r3, r1, #29
 8002498:	08c2      	lsrs	r2, r0, #3
 800249a:	431a      	orrs	r2, r3
 800249c:	465d      	mov	r5, fp
 800249e:	08cb      	lsrs	r3, r1, #3
 80024a0:	e698      	b.n	80021d4 <__aeabi_dsub+0x37c>
 80024a2:	074b      	lsls	r3, r1, #29
 80024a4:	08c2      	lsrs	r2, r0, #3
 80024a6:	431a      	orrs	r2, r3
 80024a8:	08cb      	lsrs	r3, r1, #3
 80024aa:	e64f      	b.n	800214c <__aeabi_dsub+0x2f4>
 80024ac:	000a      	movs	r2, r1
 80024ae:	4302      	orrs	r2, r0
 80024b0:	d090      	beq.n	80023d4 <__aeabi_dsub+0x57c>
 80024b2:	464a      	mov	r2, r9
 80024b4:	075c      	lsls	r4, r3, #29
 80024b6:	08d2      	lsrs	r2, r2, #3
 80024b8:	4314      	orrs	r4, r2
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	08db      	lsrs	r3, r3, #3
 80024be:	0312      	lsls	r2, r2, #12
 80024c0:	4213      	tst	r3, r2
 80024c2:	d008      	beq.n	80024d6 <__aeabi_dsub+0x67e>
 80024c4:	08ce      	lsrs	r6, r1, #3
 80024c6:	4216      	tst	r6, r2
 80024c8:	d105      	bne.n	80024d6 <__aeabi_dsub+0x67e>
 80024ca:	08c0      	lsrs	r0, r0, #3
 80024cc:	0749      	lsls	r1, r1, #29
 80024ce:	4308      	orrs	r0, r1
 80024d0:	0004      	movs	r4, r0
 80024d2:	465d      	mov	r5, fp
 80024d4:	0033      	movs	r3, r6
 80024d6:	0f61      	lsrs	r1, r4, #29
 80024d8:	00e2      	lsls	r2, r4, #3
 80024da:	0749      	lsls	r1, r1, #29
 80024dc:	08d2      	lsrs	r2, r2, #3
 80024de:	430a      	orrs	r2, r1
 80024e0:	e678      	b.n	80021d4 <__aeabi_dsub+0x37c>
 80024e2:	074b      	lsls	r3, r1, #29
 80024e4:	08c2      	lsrs	r2, r0, #3
 80024e6:	431a      	orrs	r2, r3
 80024e8:	08cb      	lsrs	r3, r1, #3
 80024ea:	e632      	b.n	8002152 <__aeabi_dsub+0x2fa>
 80024ec:	4448      	add	r0, r9
 80024ee:	185b      	adds	r3, r3, r1
 80024f0:	4548      	cmp	r0, r9
 80024f2:	4192      	sbcs	r2, r2
 80024f4:	4698      	mov	r8, r3
 80024f6:	4252      	negs	r2, r2
 80024f8:	4490      	add	r8, r2
 80024fa:	4643      	mov	r3, r8
 80024fc:	0004      	movs	r4, r0
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	d400      	bmi.n	8002504 <__aeabi_dsub+0x6ac>
 8002502:	e61a      	b.n	800213a <__aeabi_dsub+0x2e2>
 8002504:	4642      	mov	r2, r8
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <__aeabi_dsub+0x6e8>)
 8002508:	2601      	movs	r6, #1
 800250a:	401a      	ands	r2, r3
 800250c:	4690      	mov	r8, r2
 800250e:	e614      	b.n	800213a <__aeabi_dsub+0x2e2>
 8002510:	4666      	mov	r6, ip
 8002512:	001f      	movs	r7, r3
 8002514:	3e20      	subs	r6, #32
 8002516:	40f7      	lsrs	r7, r6
 8002518:	2c20      	cmp	r4, #32
 800251a:	d005      	beq.n	8002528 <__aeabi_dsub+0x6d0>
 800251c:	2640      	movs	r6, #64	; 0x40
 800251e:	1b36      	subs	r6, r6, r4
 8002520:	40b3      	lsls	r3, r6
 8002522:	464c      	mov	r4, r9
 8002524:	431c      	orrs	r4, r3
 8002526:	46a2      	mov	sl, r4
 8002528:	4654      	mov	r4, sl
 800252a:	1e63      	subs	r3, r4, #1
 800252c:	419c      	sbcs	r4, r3
 800252e:	433c      	orrs	r4, r7
 8002530:	e5c8      	b.n	80020c4 <__aeabi_dsub+0x26c>
 8002532:	0011      	movs	r1, r2
 8002534:	2300      	movs	r3, #0
 8002536:	2200      	movs	r2, #0
 8002538:	e532      	b.n	8001fa0 <__aeabi_dsub+0x148>
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	000007ff 	.word	0x000007ff
 8002540:	ff7fffff 	.word	0xff7fffff
 8002544:	000007fe 	.word	0x000007fe
 8002548:	464a      	mov	r2, r9
 800254a:	1814      	adds	r4, r2, r0
 800254c:	4284      	cmp	r4, r0
 800254e:	4192      	sbcs	r2, r2
 8002550:	185b      	adds	r3, r3, r1
 8002552:	4698      	mov	r8, r3
 8002554:	4252      	negs	r2, r2
 8002556:	4490      	add	r8, r2
 8002558:	e5e9      	b.n	800212e <__aeabi_dsub+0x2d6>
 800255a:	4642      	mov	r2, r8
 800255c:	4322      	orrs	r2, r4
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x70a>
 8002560:	e6a6      	b.n	80022b0 <__aeabi_dsub+0x458>
 8002562:	e5ea      	b.n	800213a <__aeabi_dsub+0x2e2>
 8002564:	074b      	lsls	r3, r1, #29
 8002566:	08c2      	lsrs	r2, r0, #3
 8002568:	431a      	orrs	r2, r3
 800256a:	08cb      	lsrs	r3, r1, #3
 800256c:	e632      	b.n	80021d4 <__aeabi_dsub+0x37c>
 800256e:	2200      	movs	r2, #0
 8002570:	4901      	ldr	r1, [pc, #4]	; (8002578 <__aeabi_dsub+0x720>)
 8002572:	0013      	movs	r3, r2
 8002574:	e514      	b.n	8001fa0 <__aeabi_dsub+0x148>
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	000007ff 	.word	0x000007ff

0800257c <__aeabi_d2iz>:
 800257c:	000a      	movs	r2, r1
 800257e:	b530      	push	{r4, r5, lr}
 8002580:	4c13      	ldr	r4, [pc, #76]	; (80025d0 <__aeabi_d2iz+0x54>)
 8002582:	0053      	lsls	r3, r2, #1
 8002584:	0309      	lsls	r1, r1, #12
 8002586:	0005      	movs	r5, r0
 8002588:	0b09      	lsrs	r1, r1, #12
 800258a:	2000      	movs	r0, #0
 800258c:	0d5b      	lsrs	r3, r3, #21
 800258e:	0fd2      	lsrs	r2, r2, #31
 8002590:	42a3      	cmp	r3, r4
 8002592:	dd04      	ble.n	800259e <__aeabi_d2iz+0x22>
 8002594:	480f      	ldr	r0, [pc, #60]	; (80025d4 <__aeabi_d2iz+0x58>)
 8002596:	4283      	cmp	r3, r0
 8002598:	dd02      	ble.n	80025a0 <__aeabi_d2iz+0x24>
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <__aeabi_d2iz+0x5c>)
 800259c:	18d0      	adds	r0, r2, r3
 800259e:	bd30      	pop	{r4, r5, pc}
 80025a0:	2080      	movs	r0, #128	; 0x80
 80025a2:	0340      	lsls	r0, r0, #13
 80025a4:	4301      	orrs	r1, r0
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <__aeabi_d2iz+0x60>)
 80025a8:	1ac0      	subs	r0, r0, r3
 80025aa:	281f      	cmp	r0, #31
 80025ac:	dd08      	ble.n	80025c0 <__aeabi_d2iz+0x44>
 80025ae:	480c      	ldr	r0, [pc, #48]	; (80025e0 <__aeabi_d2iz+0x64>)
 80025b0:	1ac3      	subs	r3, r0, r3
 80025b2:	40d9      	lsrs	r1, r3
 80025b4:	000b      	movs	r3, r1
 80025b6:	4258      	negs	r0, r3
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d1f0      	bne.n	800259e <__aeabi_d2iz+0x22>
 80025bc:	0018      	movs	r0, r3
 80025be:	e7ee      	b.n	800259e <__aeabi_d2iz+0x22>
 80025c0:	4c08      	ldr	r4, [pc, #32]	; (80025e4 <__aeabi_d2iz+0x68>)
 80025c2:	40c5      	lsrs	r5, r0
 80025c4:	46a4      	mov	ip, r4
 80025c6:	4463      	add	r3, ip
 80025c8:	4099      	lsls	r1, r3
 80025ca:	000b      	movs	r3, r1
 80025cc:	432b      	orrs	r3, r5
 80025ce:	e7f2      	b.n	80025b6 <__aeabi_d2iz+0x3a>
 80025d0:	000003fe 	.word	0x000003fe
 80025d4:	0000041d 	.word	0x0000041d
 80025d8:	7fffffff 	.word	0x7fffffff
 80025dc:	00000433 	.word	0x00000433
 80025e0:	00000413 	.word	0x00000413
 80025e4:	fffffbed 	.word	0xfffffbed

080025e8 <__aeabi_i2d>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d016      	beq.n	800261c <__aeabi_i2d+0x34>
 80025ee:	17c3      	asrs	r3, r0, #31
 80025f0:	18c5      	adds	r5, r0, r3
 80025f2:	405d      	eors	r5, r3
 80025f4:	0fc4      	lsrs	r4, r0, #31
 80025f6:	0028      	movs	r0, r5
 80025f8:	f000 f894 	bl	8002724 <__clzsi2>
 80025fc:	4a11      	ldr	r2, [pc, #68]	; (8002644 <__aeabi_i2d+0x5c>)
 80025fe:	1a12      	subs	r2, r2, r0
 8002600:	280a      	cmp	r0, #10
 8002602:	dc16      	bgt.n	8002632 <__aeabi_i2d+0x4a>
 8002604:	0003      	movs	r3, r0
 8002606:	002e      	movs	r6, r5
 8002608:	3315      	adds	r3, #21
 800260a:	409e      	lsls	r6, r3
 800260c:	230b      	movs	r3, #11
 800260e:	1a18      	subs	r0, r3, r0
 8002610:	40c5      	lsrs	r5, r0
 8002612:	0553      	lsls	r3, r2, #21
 8002614:	032d      	lsls	r5, r5, #12
 8002616:	0b2d      	lsrs	r5, r5, #12
 8002618:	0d5b      	lsrs	r3, r3, #21
 800261a:	e003      	b.n	8002624 <__aeabi_i2d+0x3c>
 800261c:	2400      	movs	r4, #0
 800261e:	2300      	movs	r3, #0
 8002620:	2500      	movs	r5, #0
 8002622:	2600      	movs	r6, #0
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	432b      	orrs	r3, r5
 8002628:	07e4      	lsls	r4, r4, #31
 800262a:	4323      	orrs	r3, r4
 800262c:	0030      	movs	r0, r6
 800262e:	0019      	movs	r1, r3
 8002630:	bd70      	pop	{r4, r5, r6, pc}
 8002632:	380b      	subs	r0, #11
 8002634:	4085      	lsls	r5, r0
 8002636:	0553      	lsls	r3, r2, #21
 8002638:	032d      	lsls	r5, r5, #12
 800263a:	2600      	movs	r6, #0
 800263c:	0b2d      	lsrs	r5, r5, #12
 800263e:	0d5b      	lsrs	r3, r3, #21
 8002640:	e7f0      	b.n	8002624 <__aeabi_i2d+0x3c>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	0000041e 	.word	0x0000041e

08002648 <__aeabi_ui2d>:
 8002648:	b510      	push	{r4, lr}
 800264a:	1e04      	subs	r4, r0, #0
 800264c:	d010      	beq.n	8002670 <__aeabi_ui2d+0x28>
 800264e:	f000 f869 	bl	8002724 <__clzsi2>
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <__aeabi_ui2d+0x48>)
 8002654:	1a1b      	subs	r3, r3, r0
 8002656:	280a      	cmp	r0, #10
 8002658:	dc11      	bgt.n	800267e <__aeabi_ui2d+0x36>
 800265a:	220b      	movs	r2, #11
 800265c:	0021      	movs	r1, r4
 800265e:	1a12      	subs	r2, r2, r0
 8002660:	40d1      	lsrs	r1, r2
 8002662:	3015      	adds	r0, #21
 8002664:	030a      	lsls	r2, r1, #12
 8002666:	055b      	lsls	r3, r3, #21
 8002668:	4084      	lsls	r4, r0
 800266a:	0b12      	lsrs	r2, r2, #12
 800266c:	0d5b      	lsrs	r3, r3, #21
 800266e:	e001      	b.n	8002674 <__aeabi_ui2d+0x2c>
 8002670:	2300      	movs	r3, #0
 8002672:	2200      	movs	r2, #0
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	4313      	orrs	r3, r2
 8002678:	0020      	movs	r0, r4
 800267a:	0019      	movs	r1, r3
 800267c:	bd10      	pop	{r4, pc}
 800267e:	0022      	movs	r2, r4
 8002680:	380b      	subs	r0, #11
 8002682:	4082      	lsls	r2, r0
 8002684:	055b      	lsls	r3, r3, #21
 8002686:	0312      	lsls	r2, r2, #12
 8002688:	2400      	movs	r4, #0
 800268a:	0b12      	lsrs	r2, r2, #12
 800268c:	0d5b      	lsrs	r3, r3, #21
 800268e:	e7f1      	b.n	8002674 <__aeabi_ui2d+0x2c>
 8002690:	0000041e 	.word	0x0000041e

08002694 <__aeabi_f2d>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	0043      	lsls	r3, r0, #1
 8002698:	0246      	lsls	r6, r0, #9
 800269a:	0fc4      	lsrs	r4, r0, #31
 800269c:	20fe      	movs	r0, #254	; 0xfe
 800269e:	0e1b      	lsrs	r3, r3, #24
 80026a0:	1c59      	adds	r1, r3, #1
 80026a2:	0a75      	lsrs	r5, r6, #9
 80026a4:	4208      	tst	r0, r1
 80026a6:	d00c      	beq.n	80026c2 <__aeabi_f2d+0x2e>
 80026a8:	22e0      	movs	r2, #224	; 0xe0
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4694      	mov	ip, r2
 80026ae:	076d      	lsls	r5, r5, #29
 80026b0:	0b36      	lsrs	r6, r6, #12
 80026b2:	4463      	add	r3, ip
 80026b4:	051b      	lsls	r3, r3, #20
 80026b6:	4333      	orrs	r3, r6
 80026b8:	07e4      	lsls	r4, r4, #31
 80026ba:	4323      	orrs	r3, r4
 80026bc:	0028      	movs	r0, r5
 80026be:	0019      	movs	r1, r3
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d114      	bne.n	80026f0 <__aeabi_f2d+0x5c>
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	d01b      	beq.n	8002702 <__aeabi_f2d+0x6e>
 80026ca:	0028      	movs	r0, r5
 80026cc:	f000 f82a 	bl	8002724 <__clzsi2>
 80026d0:	280a      	cmp	r0, #10
 80026d2:	dc1c      	bgt.n	800270e <__aeabi_f2d+0x7a>
 80026d4:	230b      	movs	r3, #11
 80026d6:	002a      	movs	r2, r5
 80026d8:	1a1b      	subs	r3, r3, r0
 80026da:	40da      	lsrs	r2, r3
 80026dc:	0003      	movs	r3, r0
 80026de:	3315      	adds	r3, #21
 80026e0:	409d      	lsls	r5, r3
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <__aeabi_f2d+0x88>)
 80026e4:	0312      	lsls	r2, r2, #12
 80026e6:	1a1b      	subs	r3, r3, r0
 80026e8:	055b      	lsls	r3, r3, #21
 80026ea:	0b16      	lsrs	r6, r2, #12
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	e7e1      	b.n	80026b4 <__aeabi_f2d+0x20>
 80026f0:	2d00      	cmp	r5, #0
 80026f2:	d009      	beq.n	8002708 <__aeabi_f2d+0x74>
 80026f4:	0b32      	lsrs	r2, r6, #12
 80026f6:	2680      	movs	r6, #128	; 0x80
 80026f8:	0336      	lsls	r6, r6, #12
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <__aeabi_f2d+0x8c>)
 80026fc:	076d      	lsls	r5, r5, #29
 80026fe:	4316      	orrs	r6, r2
 8002700:	e7d8      	b.n	80026b4 <__aeabi_f2d+0x20>
 8002702:	2300      	movs	r3, #0
 8002704:	2600      	movs	r6, #0
 8002706:	e7d5      	b.n	80026b4 <__aeabi_f2d+0x20>
 8002708:	2600      	movs	r6, #0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <__aeabi_f2d+0x8c>)
 800270c:	e7d2      	b.n	80026b4 <__aeabi_f2d+0x20>
 800270e:	0003      	movs	r3, r0
 8002710:	002a      	movs	r2, r5
 8002712:	3b0b      	subs	r3, #11
 8002714:	409a      	lsls	r2, r3
 8002716:	2500      	movs	r5, #0
 8002718:	e7e3      	b.n	80026e2 <__aeabi_f2d+0x4e>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	00000389 	.word	0x00000389
 8002720:	000007ff 	.word	0x000007ff

08002724 <__clzsi2>:
 8002724:	211c      	movs	r1, #28
 8002726:	2301      	movs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	4298      	cmp	r0, r3
 800272c:	d301      	bcc.n	8002732 <__clzsi2+0xe>
 800272e:	0c00      	lsrs	r0, r0, #16
 8002730:	3910      	subs	r1, #16
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	4298      	cmp	r0, r3
 8002736:	d301      	bcc.n	800273c <__clzsi2+0x18>
 8002738:	0a00      	lsrs	r0, r0, #8
 800273a:	3908      	subs	r1, #8
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	4298      	cmp	r0, r3
 8002740:	d301      	bcc.n	8002746 <__clzsi2+0x22>
 8002742:	0900      	lsrs	r0, r0, #4
 8002744:	3904      	subs	r1, #4
 8002746:	a202      	add	r2, pc, #8	; (adr r2, 8002750 <__clzsi2+0x2c>)
 8002748:	5c10      	ldrb	r0, [r2, r0]
 800274a:	1840      	adds	r0, r0, r1
 800274c:	4770      	bx	lr
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	02020304 	.word	0x02020304
 8002754:	01010101 	.word	0x01010101
	...

08002760 <__clzdi2>:
 8002760:	b510      	push	{r4, lr}
 8002762:	2900      	cmp	r1, #0
 8002764:	d103      	bne.n	800276e <__clzdi2+0xe>
 8002766:	f7ff ffdd 	bl	8002724 <__clzsi2>
 800276a:	3020      	adds	r0, #32
 800276c:	e002      	b.n	8002774 <__clzdi2+0x14>
 800276e:	1c08      	adds	r0, r1, #0
 8002770:	f7ff ffd8 	bl	8002724 <__clzsi2>
 8002774:	bd10      	pop	{r4, pc}
 8002776:	46c0      	nop			; (mov r8, r8)

08002778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800277a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800277c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800277e:	e003      	b.n	8002788 <LoopCopyDataInit>

08002780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002786:	3104      	adds	r1, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <LoopForever+0xe>)
  adds  r2, r0, r1
 800278c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800278e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002790:	d3f6      	bcc.n	8002780 <CopyDataInit>
  ldr  r2, =_sbss
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002794:	e002      	b.n	800279c <LoopFillZerobss>

08002796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002796:	2300      	movs	r3, #0
  str  r3, [r2]
 8002798:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279a:	3204      	adds	r2, #4

0800279c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <LoopForever+0x16>)
  cmp  r2, r3
 800279e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027a0:	d3f9      	bcc.n	8002796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027a2:	f001 fea7 	bl	80044f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a6:	f00d fbc9 	bl	800ff3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027aa:	f00c ffdd 	bl	800f768 <main>

080027ae <LoopForever>:

LoopForever:
    b LoopForever
 80027ae:	e7fe      	b.n	80027ae <LoopForever>
   ldr   r0, =_estack
 80027b0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80027b4:	08011bec 	.word	0x08011bec
  ldr  r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027bc:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80027c0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80027c4:	20001674 	.word	0x20001674

080027c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC1_COMP_IRQHandler>
	...

080027cc <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80027cc:	b500      	push	{lr}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 80027d0:	2802      	cmp	r0, #2
 80027d2:	d035      	beq.n	8002840 <BSP_LED_Init+0x74>
 80027d4:	d80d      	bhi.n	80027f2 <BSP_LED_Init+0x26>
 80027d6:	2800      	cmp	r0, #0
 80027d8:	d017      	beq.n	800280a <BSP_LED_Init+0x3e>
 80027da:	2801      	cmp	r0, #1
 80027dc:	d11e      	bne.n	800281c <BSP_LED_Init+0x50>
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <BSP_LED_Init+0x88>)
 80027e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027e2:	2301      	movs	r3, #1
 80027e4:	4319      	orrs	r1, r3
 80027e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ea:	4013      	ands	r3, r2
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	9b02      	ldr	r3, [sp, #8]
 80027f0:	e014      	b.n	800281c <BSP_LED_Init+0x50>
 80027f2:	2803      	cmp	r0, #3
 80027f4:	d112      	bne.n	800281c <BSP_LED_Init+0x50>
 80027f6:	4a17      	ldr	r2, [pc, #92]	; (8002854 <BSP_LED_Init+0x88>)
 80027f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027fa:	2302      	movs	r3, #2
 80027fc:	4319      	orrs	r1, r3
 80027fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002800:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002802:	4013      	ands	r3, r2
 8002804:	9304      	str	r3, [sp, #16]
 8002806:	9b04      	ldr	r3, [sp, #16]
 8002808:	e008      	b.n	800281c <BSP_LED_Init+0x50>
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <BSP_LED_Init+0x88>)
 800280c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800280e:	2302      	movs	r3, #2
 8002810:	4319      	orrs	r1, r3
 8002812:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002814:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002816:	4013      	ands	r3, r2
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800281c:	0042      	lsls	r2, r0, #1
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <BSP_LED_Init+0x8c>)
 8002820:	5ad3      	ldrh	r3, [r2, r3]
 8002822:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	3303      	adds	r3, #3
 800282e:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002830:	0080      	lsls	r0, r0, #2
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <BSP_LED_Init+0x90>)
 8002834:	58c0      	ldr	r0, [r0, r3]
 8002836:	a905      	add	r1, sp, #20
 8002838:	f002 fab8 	bl	8004dac <HAL_GPIO_Init>
}
 800283c:	b00b      	add	sp, #44	; 0x2c
 800283e:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <BSP_LED_Init+0x88>)
 8002842:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002844:	2302      	movs	r3, #2
 8002846:	4319      	orrs	r1, r3
 8002848:	62d1      	str	r1, [r2, #44]	; 0x2c
 800284a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800284c:	4013      	ands	r3, r2
 800284e:	9303      	str	r3, [sp, #12]
 8002850:	9b03      	ldr	r3, [sp, #12]
 8002852:	e7e3      	b.n	800281c <BSP_LED_Init+0x50>
 8002854:	40021000 	.word	0x40021000
 8002858:	08010b74 	.word	0x08010b74
 800285c:	20000000 	.word	0x20000000

08002860 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002860:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8002862:	0042      	lsls	r2, r0, #1
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <BSP_LED_On+0x18>)
 8002866:	5ad1      	ldrh	r1, [r2, r3]
 8002868:	0080      	lsls	r0, r0, #2
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <BSP_LED_On+0x1c>)
 800286c:	58c0      	ldr	r0, [r0, r3]
 800286e:	2201      	movs	r2, #1
 8002870:	f002 fb6a 	bl	8004f48 <HAL_GPIO_WritePin>
}
 8002874:	bd10      	pop	{r4, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	08010b74 	.word	0x08010b74
 800287c:	20000000 	.word	0x20000000

08002880 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002880:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8002882:	0042      	lsls	r2, r0, #1
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <BSP_LED_Off+0x18>)
 8002886:	5ad1      	ldrh	r1, [r2, r3]
 8002888:	0080      	lsls	r0, r0, #2
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <BSP_LED_Off+0x1c>)
 800288c:	58c0      	ldr	r0, [r0, r3]
 800288e:	2200      	movs	r2, #0
 8002890:	f002 fb5a 	bl	8004f48 <HAL_GPIO_WritePin>
}
 8002894:	bd10      	pop	{r4, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	08010b74 	.word	0x08010b74
 800289c:	20000000 	.word	0x20000000

080028a0 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80028a0:	2005      	movs	r0, #5
 80028a2:	4770      	bx	lr

080028a4 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80028a4:	2001      	movs	r0, #1
 80028a6:	4770      	bx	lr

080028a8 <SX1276SetAntSw>:
{
 80028a8:	b510      	push	{r4, lr}
 80028aa:	0004      	movs	r4, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80028ac:	2009      	movs	r0, #9
 80028ae:	f000 fa6a 	bl	8002d86 <SX1276Read>
    switch( opMode )
 80028b2:	2c03      	cmp	r4, #3
 80028b4:	d110      	bne.n	80028d8 <SX1276SetAntSw+0x30>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80028b6:	0603      	lsls	r3, r0, #24
 80028b8:	d408      	bmi.n	80028cc <SX1276SetAntSw+0x24>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 80028ba:	2201      	movs	r2, #1
 80028bc:	2104      	movs	r1, #4
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <SX1276SetAntSw+0x44>)
 80028c0:	f00c fb40 	bl	800ef44 <HW_GPIO_Write>
      SX1276.RxTx = 1;
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <SX1276SetAntSw+0x48>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
}
 80028ca:	bd10      	pop	{r4, pc}
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 80028cc:	2201      	movs	r2, #1
 80028ce:	2102      	movs	r1, #2
 80028d0:	4806      	ldr	r0, [pc, #24]	; (80028ec <SX1276SetAntSw+0x44>)
 80028d2:	f00c fb37 	bl	800ef44 <HW_GPIO_Write>
 80028d6:	e7f5      	b.n	80028c4 <SX1276SetAntSw+0x1c>
     SX1276.RxTx = 0;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <SX1276SetAntSw+0x48>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80028de:	20a0      	movs	r0, #160	; 0xa0
 80028e0:	3201      	adds	r2, #1
 80028e2:	2102      	movs	r1, #2
 80028e4:	05c0      	lsls	r0, r0, #23
 80028e6:	f00c fb2d 	bl	800ef44 <HW_GPIO_Write>
}
 80028ea:	e7ee      	b.n	80028ca <SX1276SetAntSw+0x22>
 80028ec:	50000800 	.word	0x50000800
 80028f0:	20001544 	.word	0x20001544

080028f4 <SX1276SetXO>:
{
 80028f4:	b510      	push	{r4, lr}
  if (state == SET )
 80028f6:	2801      	cmp	r0, #1
 80028f8:	d007      	beq.n	800290a <SX1276SetXO+0x16>
    TCXO_OFF(); 
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	20a0      	movs	r0, #160	; 0xa0
 80028fe:	2200      	movs	r2, #0
 8002900:	0149      	lsls	r1, r1, #5
 8002902:	05c0      	lsls	r0, r0, #23
 8002904:	f00c fb1e 	bl	800ef44 <HW_GPIO_Write>
}
 8002908:	bd10      	pop	{r4, pc}
    TCXO_ON(); 
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	309f      	adds	r0, #159	; 0x9f
 800290e:	2201      	movs	r2, #1
 8002910:	0149      	lsls	r1, r1, #5
 8002912:	05c0      	lsls	r0, r0, #23
 8002914:	f00c fb16 	bl	800ef44 <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8002918:	2005      	movs	r0, #5
 800291a:	f00c ff97 	bl	800f84c <HAL_Delay>
 800291e:	e7f3      	b.n	8002908 <SX1276SetXO+0x14>

08002920 <SX1276IoInit>:
{
 8002920:	b510      	push	{r4, lr}
 8002922:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8002924:	2214      	movs	r2, #20
 8002926:	2100      	movs	r1, #0
 8002928:	a801      	add	r0, sp, #4
 800292a:	f00d fb2b 	bl	800ff84 <memset>
  SX1276BoardInit( &BoardCallbacks );
 800292e:	4816      	ldr	r0, [pc, #88]	; (8002988 <SX1276IoInit+0x68>)
 8002930:	f000 f97e 	bl	8002c30 <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <SX1276IoInit+0x6c>)
 8002936:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8002938:	2302      	movs	r3, #2
 800293a:	9303      	str	r3, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800293c:	3301      	adds	r3, #1
 800293e:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002940:	4c13      	ldr	r4, [pc, #76]	; (8002990 <SX1276IoInit+0x70>)
 8002942:	aa01      	add	r2, sp, #4
 8002944:	2110      	movs	r1, #16
 8002946:	0020      	movs	r0, r4
 8002948:	f00c fa7e 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800294c:	aa01      	add	r2, sp, #4
 800294e:	2102      	movs	r1, #2
 8002950:	0020      	movs	r0, r4
 8002952:	f00c fa79 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8002956:	aa01      	add	r2, sp, #4
 8002958:	2101      	movs	r1, #1
 800295a:	0020      	movs	r0, r4
 800295c:	f00c fa74 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	aa01      	add	r2, sp, #4
 8002964:	0189      	lsls	r1, r1, #6
 8002966:	480b      	ldr	r0, [pc, #44]	; (8002994 <SX1276IoInit+0x74>)
 8002968:	f00c fa6e 	bl	800ee48 <HW_GPIO_Init>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800296c:	2301      	movs	r3, #1
 800296e:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 8002970:	2300      	movs	r3, #0
 8002972:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	20a0      	movs	r0, #160	; 0xa0
 8002978:	aa01      	add	r2, sp, #4
 800297a:	0149      	lsls	r1, r1, #5
 800297c:	05c0      	lsls	r0, r0, #23
 800297e:	f00c fa63 	bl	800ee48 <HW_GPIO_Init>
}
 8002982:	b006      	add	sp, #24
 8002984:	bd10      	pop	{r4, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000014 	.word	0x20000014
 800298c:	10110000 	.word	0x10110000
 8002990:	50000400 	.word	0x50000400
 8002994:	50000800 	.word	0x50000800

08002998 <SX1276IoDeInit>:
{
 8002998:	b510      	push	{r4, lr}
 800299a:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 800299c:	2214      	movs	r2, #20
 800299e:	2100      	movs	r1, #0
 80029a0:	a801      	add	r0, sp, #4
 80029a2:	f00d faef 	bl	800ff84 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <SX1276IoDeInit+0x48>)
 80029a8:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 80029aa:	2302      	movs	r3, #2
 80029ac:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80029ae:	4c0d      	ldr	r4, [pc, #52]	; (80029e4 <SX1276IoDeInit+0x4c>)
 80029b0:	aa01      	add	r2, sp, #4
 80029b2:	2110      	movs	r1, #16
 80029b4:	0020      	movs	r0, r4
 80029b6:	f00c fa47 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80029ba:	aa01      	add	r2, sp, #4
 80029bc:	2102      	movs	r1, #2
 80029be:	0020      	movs	r0, r4
 80029c0:	f00c fa42 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80029c4:	aa01      	add	r2, sp, #4
 80029c6:	2101      	movs	r1, #1
 80029c8:	0020      	movs	r0, r4
 80029ca:	f00c fa3d 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	aa01      	add	r2, sp, #4
 80029d2:	0189      	lsls	r1, r1, #6
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <SX1276IoDeInit+0x50>)
 80029d6:	f00c fa37 	bl	800ee48 <HW_GPIO_Init>
}
 80029da:	b006      	add	sp, #24
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	10110000 	.word	0x10110000
 80029e4:	50000400 	.word	0x50000400
 80029e8:	50000800 	.word	0x50000800

080029ec <SX1276AntSwInit>:
{
 80029ec:	b510      	push	{r4, lr}
 80029ee:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80029f0:	2214      	movs	r2, #20
 80029f2:	2100      	movs	r1, #0
 80029f4:	a801      	add	r0, sp, #4
 80029f6:	f00d fac5 	bl	800ff84 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80029fe:	3302      	adds	r3, #2
 8002a00:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8002a02:	24a0      	movs	r4, #160	; 0xa0
 8002a04:	05e4      	lsls	r4, r4, #23
 8002a06:	aa01      	add	r2, sp, #4
 8002a08:	2102      	movs	r1, #2
 8002a0a:	0020      	movs	r0, r4
 8002a0c:	f00c fa1c 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2102      	movs	r1, #2
 8002a14:	0020      	movs	r0, r4
 8002a16:	f00c fa95 	bl	800ef44 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8002a1a:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <SX1276AntSwInit+0x5c>)
 8002a1c:	aa01      	add	r2, sp, #4
 8002a1e:	2102      	movs	r1, #2
 8002a20:	0020      	movs	r0, r4
 8002a22:	f00c fa11 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2102      	movs	r1, #2
 8002a2a:	0020      	movs	r0, r4
 8002a2c:	f00c fa8a 	bl	800ef44 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8002a30:	aa01      	add	r2, sp, #4
 8002a32:	2104      	movs	r1, #4
 8002a34:	0020      	movs	r0, r4
 8002a36:	f00c fa07 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	0020      	movs	r0, r4
 8002a40:	f00c fa80 	bl	800ef44 <HW_GPIO_Write>
}
 8002a44:	b006      	add	sp, #24
 8002a46:	bd10      	pop	{r4, pc}
 8002a48:	50000800 	.word	0x50000800

08002a4c <SX1276AntSwDeInit>:
{
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8002a50:	2214      	movs	r2, #20
 8002a52:	2100      	movs	r1, #0
 8002a54:	a801      	add	r0, sp, #4
 8002a56:	f00d fa95 	bl	800ff84 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002a5e:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8002a60:	24a0      	movs	r4, #160	; 0xa0
 8002a62:	05e4      	lsls	r4, r4, #23
 8002a64:	aa01      	add	r2, sp, #4
 8002a66:	2102      	movs	r1, #2
 8002a68:	0020      	movs	r0, r4
 8002a6a:	f00c f9ed 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2102      	movs	r1, #2
 8002a72:	0020      	movs	r0, r4
 8002a74:	f00c fa66 	bl	800ef44 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8002a78:	4c0b      	ldr	r4, [pc, #44]	; (8002aa8 <SX1276AntSwDeInit+0x5c>)
 8002a7a:	aa01      	add	r2, sp, #4
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	0020      	movs	r0, r4
 8002a80:	f00c f9e2 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2102      	movs	r1, #2
 8002a88:	0020      	movs	r0, r4
 8002a8a:	f00c fa5b 	bl	800ef44 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8002a8e:	aa01      	add	r2, sp, #4
 8002a90:	2104      	movs	r1, #4
 8002a92:	0020      	movs	r0, r4
 8002a94:	f00c f9d8 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	0020      	movs	r0, r4
 8002a9e:	f00c fa51 	bl	800ef44 <HW_GPIO_Write>
}
 8002aa2:	b006      	add	sp, #24
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	50000800 	.word	0x50000800

08002aac <SX1276SetAntSwLowPower>:
{
 8002aac:	b510      	push	{r4, lr}
    if( status == false )
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d102      	bne.n	8002ab8 <SX1276SetAntSwLowPower+0xc>
      SX1276AntSwInit( );
 8002ab2:	f7ff ff9b 	bl	80029ec <SX1276AntSwInit>
}
 8002ab6:	bd10      	pop	{r4, pc}
      SX1276AntSwDeInit( );
 8002ab8:	f7ff ffc8 	bl	8002a4c <SX1276AntSwDeInit>
}
 8002abc:	e7fb      	b.n	8002ab6 <SX1276SetAntSwLowPower+0xa>
	...

08002ac0 <SX1276IoIrqInit>:
{
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8002ac4:	4d0d      	ldr	r5, [pc, #52]	; (8002afc <SX1276IoIrqInit+0x3c>)
 8002ac6:	6803      	ldr	r3, [r0, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2110      	movs	r1, #16
 8002acc:	0028      	movs	r0, r5
 8002ace:	f00c fa0b 	bl	800eee8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8002ad2:	6863      	ldr	r3, [r4, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	0028      	movs	r0, r5
 8002ada:	f00c fa05 	bl	800eee8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8002ade:	68a3      	ldr	r3, [r4, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	0028      	movs	r0, r5
 8002ae6:	f00c f9ff 	bl	800eee8 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8002aea:	68e3      	ldr	r3, [r4, #12]
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	2200      	movs	r2, #0
 8002af0:	0189      	lsls	r1, r1, #6
 8002af2:	4803      	ldr	r0, [pc, #12]	; (8002b00 <SX1276IoIrqInit+0x40>)
 8002af4:	f00c f9f8 	bl	800eee8 <HW_GPIO_SetIrq>
}
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	50000400 	.word	0x50000400
 8002b00:	50000800 	.word	0x50000800

08002b04 <SX1276GetPaSelect>:
    if (power >14)
 8002b04:	280e      	cmp	r0, #14
 8002b06:	dc01      	bgt.n	8002b0c <SX1276GetPaSelect+0x8>
        return RF_PACONFIG_PASELECT_RFO;
 8002b08:	2000      	movs	r0, #0
}
 8002b0a:	4770      	bx	lr
        return RF_PACONFIG_PASELECT_PABOOST;
 8002b0c:	2080      	movs	r0, #128	; 0x80
 8002b0e:	e7fc      	b.n	8002b0a <SX1276GetPaSelect+0x6>

08002b10 <SX1276SetRfTxPower>:
{
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8002b14:	2009      	movs	r0, #9
 8002b16:	f000 f936 	bl	8002d86 <SX1276Read>
 8002b1a:	0007      	movs	r7, r0
    paDac = SX1276Read( REG_PADAC );
 8002b1c:	204d      	movs	r0, #77	; 0x4d
 8002b1e:	f000 f932 	bl	8002d86 <SX1276Read>
 8002b22:	0006      	movs	r6, r0
 8002b24:	0004      	movs	r4, r0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8002b26:	217f      	movs	r1, #127	; 0x7f
 8002b28:	400f      	ands	r7, r1
 8002b2a:	0028      	movs	r0, r5
 8002b2c:	f7ff ffea 	bl	8002b04 <SX1276GetPaSelect>
 8002b30:	b240      	sxtb	r0, r0
 8002b32:	4307      	orrs	r7, r0
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8002b34:	2800      	cmp	r0, #0
 8002b36:	db14      	blt.n	8002b62 <SX1276SetRfTxPower+0x52>
        if( power > 0 )
 8002b38:	2d00      	cmp	r5, #0
 8002b3a:	dd44      	ble.n	8002bc6 <SX1276SetRfTxPower+0xb6>
            if( power > 15 )
 8002b3c:	2d0f      	cmp	r5, #15
 8002b3e:	dd00      	ble.n	8002b42 <SX1276SetRfTxPower+0x32>
                power = 15;
 8002b40:	250f      	movs	r5, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8002b42:	237f      	movs	r3, #127	; 0x7f
 8002b44:	0039      	movs	r1, r7
 8002b46:	4399      	bics	r1, r3
 8002b48:	2070      	movs	r0, #112	; 0x70
 8002b4a:	4301      	orrs	r1, r0
 8002b4c:	b249      	sxtb	r1, r1
 8002b4e:	4329      	orrs	r1, r5
 8002b50:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8002b52:	2009      	movs	r0, #9
 8002b54:	f000 f8c1 	bl	8002cda <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8002b58:	0021      	movs	r1, r4
 8002b5a:	204d      	movs	r0, #77	; 0x4d
 8002b5c:	f000 f8bd 	bl	8002cda <SX1276Write>
}
 8002b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( power > 17 )
 8002b62:	2d11      	cmp	r5, #17
 8002b64:	dd0c      	ble.n	8002b80 <SX1276SetRfTxPower+0x70>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8002b66:	2407      	movs	r4, #7
 8002b68:	4334      	orrs	r4, r6
 8002b6a:	b2e4      	uxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	4023      	ands	r3, r4
 8002b70:	2b07      	cmp	r3, #7
 8002b72:	d00c      	beq.n	8002b8e <SX1276SetRfTxPower+0x7e>
            if( power < 2 )
 8002b74:	2d01      	cmp	r5, #1
 8002b76:	dd1b      	ble.n	8002bb0 <SX1276SetRfTxPower+0xa0>
            if( power > 17 )
 8002b78:	2d11      	cmp	r5, #17
 8002b7a:	dd1a      	ble.n	8002bb2 <SX1276SetRfTxPower+0xa2>
                power = 17;
 8002b7c:	2511      	movs	r5, #17
 8002b7e:	e018      	b.n	8002bb2 <SX1276SetRfTxPower+0xa2>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8002b80:	2307      	movs	r3, #7
 8002b82:	439e      	bics	r6, r3
 8002b84:	b274      	sxtb	r4, r6
 8002b86:	2604      	movs	r6, #4
 8002b88:	4334      	orrs	r4, r6
 8002b8a:	b2e4      	uxtb	r4, r4
 8002b8c:	e7ee      	b.n	8002b6c <SX1276SetRfTxPower+0x5c>
            if( power < 5 )
 8002b8e:	2d04      	cmp	r5, #4
 8002b90:	dd03      	ble.n	8002b9a <SX1276SetRfTxPower+0x8a>
            if( power > 20 )
 8002b92:	2d14      	cmp	r5, #20
 8002b94:	dd02      	ble.n	8002b9c <SX1276SetRfTxPower+0x8c>
                power = 20;
 8002b96:	2514      	movs	r5, #20
 8002b98:	e000      	b.n	8002b9c <SX1276SetRfTxPower+0x8c>
                power = 5;
 8002b9a:	2505      	movs	r5, #5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	0039      	movs	r1, r7
 8002ba0:	4399      	bics	r1, r3
 8002ba2:	3d05      	subs	r5, #5
 8002ba4:	b268      	sxtb	r0, r5
 8002ba6:	250f      	movs	r5, #15
 8002ba8:	4005      	ands	r5, r0
 8002baa:	4329      	orrs	r1, r5
 8002bac:	b2c9      	uxtb	r1, r1
 8002bae:	e7d0      	b.n	8002b52 <SX1276SetRfTxPower+0x42>
                power = 2;
 8002bb0:	2502      	movs	r5, #2
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	0039      	movs	r1, r7
 8002bb6:	4399      	bics	r1, r3
 8002bb8:	3d02      	subs	r5, #2
 8002bba:	b268      	sxtb	r0, r5
 8002bbc:	250f      	movs	r5, #15
 8002bbe:	4005      	ands	r5, r0
 8002bc0:	4329      	orrs	r1, r5
 8002bc2:	b2c9      	uxtb	r1, r1
 8002bc4:	e7c5      	b.n	8002b52 <SX1276SetRfTxPower+0x42>
            if( power < -4 )
 8002bc6:	1d2b      	adds	r3, r5, #4
 8002bc8:	da01      	bge.n	8002bce <SX1276SetRfTxPower+0xbe>
                power = -4;
 8002bca:	2504      	movs	r5, #4
 8002bcc:	426d      	negs	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8002bce:	237f      	movs	r3, #127	; 0x7f
 8002bd0:	0039      	movs	r1, r7
 8002bd2:	4399      	bics	r1, r3
 8002bd4:	1d28      	adds	r0, r5, #4
 8002bd6:	b240      	sxtb	r0, r0
 8002bd8:	4301      	orrs	r1, r0
 8002bda:	b2c9      	uxtb	r1, r1
 8002bdc:	e7b9      	b.n	8002b52 <SX1276SetRfTxPower+0x42>
	...

08002be0 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002be0:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002be2:	2300      	movs	r3, #0
 8002be4:	e001      	b.n	8002bea <GetFskBandwidthRegValue+0xa>
 8002be6:	3301      	adds	r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b14      	cmp	r3, #20
 8002bec:	d80d      	bhi.n	8002c0a <GetFskBandwidthRegValue+0x2a>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002bee:	00da      	lsls	r2, r3, #3
 8002bf0:	4c06      	ldr	r4, [pc, #24]	; (8002c0c <GetFskBandwidthRegValue+0x2c>)
 8002bf2:	5912      	ldr	r2, [r2, r4]
 8002bf4:	4282      	cmp	r2, r0
 8002bf6:	d8f6      	bhi.n	8002be6 <GetFskBandwidthRegValue+0x6>
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	00d2      	lsls	r2, r2, #3
 8002bfc:	5912      	ldr	r2, [r2, r4]
 8002bfe:	4282      	cmp	r2, r0
 8002c00:	d9f1      	bls.n	8002be6 <GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8002c02:	00d9      	lsls	r1, r3, #3
 8002c04:	1861      	adds	r1, r4, r1
 8002c06:	7908      	ldrb	r0, [r1, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8002c08:	bd10      	pop	{r4, pc}
    while( 1 );
 8002c0a:	e7fe      	b.n	8002c0a <GetFskBandwidthRegValue+0x2a>
 8002c0c:	08010c4c 	.word	0x08010c4c

08002c10 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <SX1276OnDio4Irq+0x1c>)
 8002c12:	795b      	ldrb	r3, [r3, #5]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <SX1276OnDio4Irq+0x1c>)
 8002c1a:	3330      	adds	r3, #48	; 0x30
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8002c22:	3330      	adds	r3, #48	; 0x30
 8002c24:	2101      	movs	r1, #1
 8002c26:	54d1      	strb	r1, [r2, r3]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002c28:	4770      	bx	lr
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	20001544 	.word	0x20001544

08002c30 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <SX1276BoardInit+0x8>)
 8002c32:	6018      	str	r0, [r3, #0]
}
 8002c34:	4770      	bx	lr
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	2000020c 	.word	0x2000020c

08002c3c <SX1276GetStatus>:
    return SX1276.Settings.State;
 8002c3c:	4b01      	ldr	r3, [pc, #4]	; (8002c44 <SX1276GetStatus+0x8>)
 8002c3e:	7918      	ldrb	r0, [r3, #4]
}
 8002c40:	4770      	bx	lr
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	20001544 	.word	0x20001544

08002c48 <SX1276Reset>:
{
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	b086      	sub	sp, #24
    GPIO_InitTypeDef initStruct = { 0 };
 8002c4c:	2214      	movs	r2, #20
 8002c4e:	2100      	movs	r1, #0
 8002c50:	a801      	add	r0, sp, #4
 8002c52:	f00d f997 	bl	800ff84 <memset>
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	9302      	str	r3, [sp, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	9304      	str	r3, [sp, #16]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002c5e:	4c0d      	ldr	r4, [pc, #52]	; (8002c94 <SX1276Reset+0x4c>)
 8002c60:	aa01      	add	r2, sp, #4
 8002c62:	2101      	movs	r1, #1
 8002c64:	0020      	movs	r0, r4
 8002c66:	f00c f8ef 	bl	800ee48 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	0020      	movs	r0, r4
 8002c70:	f00c f968 	bl	800ef44 <HW_GPIO_Write>
    DelayMs( 1 );
 8002c74:	2001      	movs	r0, #1
 8002c76:	f00c fde9 	bl	800f84c <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002c7e:	aa01      	add	r2, sp, #4
 8002c80:	2101      	movs	r1, #1
 8002c82:	0020      	movs	r0, r4
 8002c84:	f00c f8e0 	bl	800ee48 <HW_GPIO_Init>
    DelayMs( 6 );
 8002c88:	2006      	movs	r0, #6
 8002c8a:	f00c fddf 	bl	800f84c <HAL_Delay>
}
 8002c8e:	b006      	add	sp, #24
 8002c90:	bd10      	pop	{r4, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	50000800 	.word	0x50000800

08002c98 <SX1276WriteBuffer>:
{
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	0004      	movs	r4, r0
 8002c9c:	000e      	movs	r6, r1
 8002c9e:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	20a0      	movs	r0, #160	; 0xa0
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	0209      	lsls	r1, r1, #8
 8002ca8:	05c0      	lsls	r0, r0, #23
 8002caa:	f00c f94b 	bl	800ef44 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8002cae:	2080      	movs	r0, #128	; 0x80
 8002cb0:	4320      	orrs	r0, r4
 8002cb2:	b280      	uxth	r0, r0
 8002cb4:	f00c fc70 	bl	800f598 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8002cb8:	2400      	movs	r4, #0
 8002cba:	42ac      	cmp	r4, r5
 8002cbc:	d205      	bcs.n	8002cca <SX1276WriteBuffer+0x32>
        HW_SPI_InOut( buffer[i] );
 8002cbe:	5d30      	ldrb	r0, [r6, r4]
 8002cc0:	f00c fc6a 	bl	800f598 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8002cc4:	3401      	adds	r4, #1
 8002cc6:	b2e4      	uxtb	r4, r4
 8002cc8:	e7f7      	b.n	8002cba <SX1276WriteBuffer+0x22>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	20a0      	movs	r0, #160	; 0xa0
 8002cce:	2201      	movs	r2, #1
 8002cd0:	0209      	lsls	r1, r1, #8
 8002cd2:	05c0      	lsls	r0, r0, #23
 8002cd4:	f00c f936 	bl	800ef44 <HW_GPIO_Write>
}
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}

08002cda <SX1276Write>:
{
 8002cda:	b500      	push	{lr}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	466b      	mov	r3, sp
 8002ce0:	71d9      	strb	r1, [r3, #7]
 8002ce2:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	f7ff ffd6 	bl	8002c98 <SX1276WriteBuffer>
}
 8002cec:	b003      	add	sp, #12
 8002cee:	bd00      	pop	{pc}

08002cf0 <SX1276SetChannel>:
{
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	0005      	movs	r5, r0
    SX1276.Settings.Channel = freq;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <SX1276SetChannel+0x48>)
 8002cf6:	6098      	str	r0, [r3, #8]
    SX_FREQ_TO_CHANNEL( channel, freq );
 8002cf8:	4910      	ldr	r1, [pc, #64]	; (8002d3c <SX1276SetChannel+0x4c>)
 8002cfa:	f7fd fa0f 	bl	800011c <__udivsi3>
 8002cfe:	0204      	lsls	r4, r0, #8
 8002d00:	490e      	ldr	r1, [pc, #56]	; (8002d3c <SX1276SetChannel+0x4c>)
 8002d02:	0028      	movs	r0, r5
 8002d04:	f7fd fa90 	bl	8000228 <__aeabi_uidivmod>
 8002d08:	0208      	lsls	r0, r1, #8
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <SX1276SetChannel+0x50>)
 8002d0c:	469c      	mov	ip, r3
 8002d0e:	4460      	add	r0, ip
 8002d10:	490a      	ldr	r1, [pc, #40]	; (8002d3c <SX1276SetChannel+0x4c>)
 8002d12:	f7fd fa03 	bl	800011c <__udivsi3>
 8002d16:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002d18:	0c21      	lsrs	r1, r4, #16
 8002d1a:	b2c9      	uxtb	r1, r1
 8002d1c:	2006      	movs	r0, #6
 8002d1e:	f7ff ffdc 	bl	8002cda <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002d22:	0a21      	lsrs	r1, r4, #8
 8002d24:	b2c9      	uxtb	r1, r1
 8002d26:	2007      	movs	r0, #7
 8002d28:	f7ff ffd7 	bl	8002cda <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002d2c:	b2e1      	uxtb	r1, r4
 8002d2e:	2008      	movs	r0, #8
 8002d30:	f7ff ffd3 	bl	8002cda <SX1276Write>
}
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	20001544 	.word	0x20001544
 8002d3c:	00003d09 	.word	0x00003d09
 8002d40:	00001e84 	.word	0x00001e84

08002d44 <SX1276ReadBuffer>:
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	0004      	movs	r4, r0
 8002d48:	000e      	movs	r6, r1
 8002d4a:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	20a0      	movs	r0, #160	; 0xa0
 8002d50:	2200      	movs	r2, #0
 8002d52:	0209      	lsls	r1, r1, #8
 8002d54:	05c0      	lsls	r0, r0, #23
 8002d56:	f00c f8f5 	bl	800ef44 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8002d5a:	207f      	movs	r0, #127	; 0x7f
 8002d5c:	4020      	ands	r0, r4
 8002d5e:	f00c fc1b 	bl	800f598 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8002d62:	2400      	movs	r4, #0
 8002d64:	42ac      	cmp	r4, r5
 8002d66:	d206      	bcs.n	8002d76 <SX1276ReadBuffer+0x32>
        buffer[i] = HW_SPI_InOut( 0 );
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f00c fc15 	bl	800f598 <HW_SPI_InOut>
 8002d6e:	5530      	strb	r0, [r6, r4]
    for( i = 0; i < size; i++ )
 8002d70:	3401      	adds	r4, #1
 8002d72:	b2e4      	uxtb	r4, r4
 8002d74:	e7f6      	b.n	8002d64 <SX1276ReadBuffer+0x20>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	20a0      	movs	r0, #160	; 0xa0
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	0209      	lsls	r1, r1, #8
 8002d7e:	05c0      	lsls	r0, r0, #23
 8002d80:	f00c f8e0 	bl	800ef44 <HW_GPIO_Write>
}
 8002d84:	bd70      	pop	{r4, r5, r6, pc}

08002d86 <SX1276Read>:
{
 8002d86:	b510      	push	{r4, lr}
 8002d88:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 8002d8a:	466b      	mov	r3, sp
 8002d8c:	1ddc      	adds	r4, r3, #7
 8002d8e:	2201      	movs	r2, #1
 8002d90:	0021      	movs	r1, r4
 8002d92:	f7ff ffd7 	bl	8002d44 <SX1276ReadBuffer>
    return data;
 8002d96:	7820      	ldrb	r0, [r4, #0]
}
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd10      	pop	{r4, pc}

08002d9c <RxChainCalibration>:
{
 8002d9c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8002d9e:	2009      	movs	r0, #9
 8002da0:	f7ff fff1 	bl	8002d86 <SX1276Read>
 8002da4:	0004      	movs	r4, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002da6:	2006      	movs	r0, #6
 8002da8:	f7ff ffed 	bl	8002d86 <SX1276Read>
 8002dac:	0405      	lsls	r5, r0, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002dae:	2007      	movs	r0, #7
 8002db0:	f7ff ffe9 	bl	8002d86 <SX1276Read>
 8002db4:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002db6:	4305      	orrs	r5, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002db8:	2008      	movs	r0, #8
 8002dba:	f7ff ffe4 	bl	8002d86 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002dbe:	4328      	orrs	r0, r5
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002dc0:	0a03      	lsrs	r3, r0, #8
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	1ac9      	subs	r1, r1, r3
 8002dc6:	018d      	lsls	r5, r1, #6
 8002dc8:	1a6d      	subs	r5, r5, r1
 8002dca:	00ed      	lsls	r5, r5, #3
 8002dcc:	18ed      	adds	r5, r5, r3
 8002dce:	23ff      	movs	r3, #255	; 0xff
 8002dd0:	4018      	ands	r0, r3
 8002dd2:	0143      	lsls	r3, r0, #5
 8002dd4:	1a1b      	subs	r3, r3, r0
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	181b      	adds	r3, r3, r0
 8002dde:	3380      	adds	r3, #128	; 0x80
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	18ed      	adds	r5, r5, r3
    SX1276Write( REG_PACONFIG, 0x00 );
 8002de4:	2100      	movs	r1, #0
 8002de6:	2009      	movs	r0, #9
 8002de8:	f7ff ff77 	bl	8002cda <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002dec:	203b      	movs	r0, #59	; 0x3b
 8002dee:	f7ff ffca 	bl	8002d86 <SX1276Read>
 8002df2:	2140      	movs	r1, #64	; 0x40
 8002df4:	4301      	orrs	r1, r0
 8002df6:	b2c9      	uxtb	r1, r1
 8002df8:	203b      	movs	r0, #59	; 0x3b
 8002dfa:	f7ff ff6e 	bl	8002cda <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002dfe:	203b      	movs	r0, #59	; 0x3b
 8002e00:	f7ff ffc1 	bl	8002d86 <SX1276Read>
 8002e04:	0683      	lsls	r3, r0, #26
 8002e06:	d4fa      	bmi.n	8002dfe <RxChainCalibration+0x62>
    SX1276SetChannel( 868000000 );
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <RxChainCalibration+0xa0>)
 8002e0a:	f7ff ff71 	bl	8002cf0 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002e0e:	203b      	movs	r0, #59	; 0x3b
 8002e10:	f7ff ffb9 	bl	8002d86 <SX1276Read>
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	4301      	orrs	r1, r0
 8002e18:	b2c9      	uxtb	r1, r1
 8002e1a:	203b      	movs	r0, #59	; 0x3b
 8002e1c:	f7ff ff5d 	bl	8002cda <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002e20:	203b      	movs	r0, #59	; 0x3b
 8002e22:	f7ff ffb0 	bl	8002d86 <SX1276Read>
 8002e26:	0683      	lsls	r3, r0, #26
 8002e28:	d4fa      	bmi.n	8002e20 <RxChainCalibration+0x84>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	2009      	movs	r0, #9
 8002e2e:	f7ff ff54 	bl	8002cda <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002e32:	0028      	movs	r0, r5
 8002e34:	f7ff ff5c 	bl	8002cf0 <SX1276SetChannel>
}
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	33bca100 	.word	0x33bca100

08002e40 <SX1276GetTimeOnAir>:
{
 8002e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e42:	46c6      	mov	lr, r8
 8002e44:	b500      	push	{lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	000c      	movs	r4, r1
    switch( modem )
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d006      	beq.n	8002e5c <SX1276GetTimeOnAir+0x1c>
 8002e4e:	2801      	cmp	r0, #1
 8002e50:	d05a      	beq.n	8002f08 <SX1276GetTimeOnAir+0xc8>
 8002e52:	2000      	movs	r0, #0
}
 8002e54:	b002      	add	sp, #8
 8002e56:	bc80      	pop	{r7}
 8002e58:	46b8      	mov	r8, r7
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002e5c:	4e78      	ldr	r6, [pc, #480]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002e5e:	8c35      	ldrh	r5, [r6, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e60:	2027      	movs	r0, #39	; 0x27
 8002e62:	f7ff ff90 	bl	8002d86 <SX1276Read>
 8002e66:	23f8      	movs	r3, #248	; 0xf8
 8002e68:	4398      	bics	r0, r3
 8002e6a:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002e6c:	1828      	adds	r0, r5, r0
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e6e:	f7ff fbbb 	bl	80025e8 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002e72:	2322      	movs	r3, #34	; 0x22
 8002e74:	5cf3      	ldrb	r3, [r6, r3]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d03d      	beq.n	8002ef6 <SX1276GetTimeOnAir+0xb6>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2300      	movs	r3, #0
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002e7e:	f7fd fe0f 	bl	8000aa0 <__aeabi_dadd>
 8002e82:	0006      	movs	r6, r0
 8002e84:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002e86:	2030      	movs	r0, #48	; 0x30
 8002e88:	f7ff ff7d 	bl	8002d86 <SX1276Read>
 8002e8c:	23f9      	movs	r3, #249	; 0xf9
 8002e8e:	4398      	bics	r0, r3
 8002e90:	d034      	beq.n	8002efc <SX1276GetTimeOnAir+0xbc>
 8002e92:	2200      	movs	r2, #0
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <SX1276GetTimeOnAir+0x204>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002e96:	0030      	movs	r0, r6
 8002e98:	0039      	movs	r1, r7
 8002e9a:	f7fd fe01 	bl	8000aa0 <__aeabi_dadd>
 8002e9e:	0006      	movs	r6, r0
 8002ea0:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002ea2:	0020      	movs	r0, r4
 8002ea4:	f7ff fba0 	bl	80025e8 <__aeabi_i2d>
 8002ea8:	0032      	movs	r2, r6
 8002eaa:	003b      	movs	r3, r7
 8002eac:	f7fd fdf8 	bl	8000aa0 <__aeabi_dadd>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002eb0:	4a63      	ldr	r2, [pc, #396]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002eb2:	2324      	movs	r3, #36	; 0x24
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d023      	beq.n	8002f02 <SX1276GetTimeOnAir+0xc2>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	05db      	lsls	r3, r3, #23
                                     pktLen +
 8002ec0:	f7fd fdee 	bl	8000aa0 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4b60      	ldr	r3, [pc, #384]	; (8003048 <SX1276GetTimeOnAir+0x208>)
 8002ec8:	f7fe fd5a 	bl	8001980 <__aeabi_dmul>
 8002ecc:	0004      	movs	r4, r0
 8002ece:	000d      	movs	r5, r1
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 8002ed0:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002ed2:	69d8      	ldr	r0, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002ed4:	f7ff fbb8 	bl	8002648 <__aeabi_ui2d>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	000b      	movs	r3, r1
 8002edc:	0020      	movs	r0, r4
 8002ede:	0029      	movs	r1, r5
 8002ee0:	f7fe f948 	bl	8001174 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4b59      	ldr	r3, [pc, #356]	; (800304c <SX1276GetTimeOnAir+0x20c>)
 8002ee8:	f7fe fd4a 	bl	8001980 <__aeabi_dmul>
 8002eec:	f00d fdd8 	bl	8010aa0 <round>
 8002ef0:	f7fd fae8 	bl	80004c4 <__aeabi_d2uiz>
        break;
 8002ef4:	e7ae      	b.n	8002e54 <SX1276GetTimeOnAir+0x14>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4b52      	ldr	r3, [pc, #328]	; (8003044 <SX1276GetTimeOnAir+0x204>)
 8002efa:	e7c0      	b.n	8002e7e <SX1276GetTimeOnAir+0x3e>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002efc:	2200      	movs	r2, #0
 8002efe:	2300      	movs	r3, #0
 8002f00:	e7c9      	b.n	8002e96 <SX1276GetTimeOnAir+0x56>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002f02:	2200      	movs	r2, #0
 8002f04:	2300      	movs	r3, #0
 8002f06:	e7db      	b.n	8002ec0 <SX1276GetTimeOnAir+0x80>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d100      	bne.n	8002f12 <SX1276GetTimeOnAir+0xd2>
 8002f10:	e088      	b.n	8003024 <SX1276GetTimeOnAir+0x1e4>
 8002f12:	2b09      	cmp	r3, #9
 8002f14:	d100      	bne.n	8002f18 <SX1276GetTimeOnAir+0xd8>
 8002f16:	e088      	b.n	800302a <SX1276GetTimeOnAir+0x1ea>
 8002f18:	2b07      	cmp	r3, #7
 8002f1a:	d100      	bne.n	8002f1e <SX1276GetTimeOnAir+0xde>
 8002f1c:	e07f      	b.n	800301e <SX1276GetTimeOnAir+0x1de>
 8002f1e:	2600      	movs	r6, #0
 8002f20:	2700      	movs	r7, #0
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002f22:	4d47      	ldr	r5, [pc, #284]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002f24:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002f26:	4698      	mov	r8, r3
 8002f28:	2001      	movs	r0, #1
 8002f2a:	4098      	lsls	r0, r3
 8002f2c:	f7ff fb5c 	bl	80025e8 <__aeabi_i2d>
 8002f30:	0002      	movs	r2, r0
 8002f32:	000b      	movs	r3, r1
 8002f34:	0030      	movs	r0, r6
 8002f36:	0039      	movs	r1, r7
 8002f38:	f7fe f91c 	bl	8001174 <__aeabi_ddiv>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8002f40:	2000      	movs	r0, #0
 8002f42:	4940      	ldr	r1, [pc, #256]	; (8003044 <SX1276GetTimeOnAir+0x204>)
 8002f44:	f7fe f916 	bl	8001174 <__aeabi_ddiv>
 8002f48:	0006      	movs	r6, r0
 8002f4a:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002f4c:	234e      	movs	r3, #78	; 0x4e
 8002f4e:	5ae8      	ldrh	r0, [r5, r3]
 8002f50:	f7ff fb4a 	bl	80025e8 <__aeabi_i2d>
 8002f54:	2200      	movs	r2, #0
 8002f56:	4b3e      	ldr	r3, [pc, #248]	; (8003050 <SX1276GetTimeOnAir+0x210>)
 8002f58:	f7fd fda2 	bl	8000aa0 <__aeabi_dadd>
 8002f5c:	0032      	movs	r2, r6
 8002f5e:	003b      	movs	r3, r7
 8002f60:	f7fe fd0e 	bl	8001980 <__aeabi_dmul>
 8002f64:	9000      	str	r0, [sp, #0]
 8002f66:	9101      	str	r1, [sp, #4]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002f68:	00e4      	lsls	r4, r4, #3
 8002f6a:	4643      	mov	r3, r8
 8002f6c:	0098      	lsls	r0, r3, #2
 8002f6e:	1a24      	subs	r4, r4, r0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002f70:	2352      	movs	r3, #82	; 0x52
 8002f72:	5ce8      	ldrb	r0, [r5, r3]
 8002f74:	0100      	lsls	r0, r0, #4
 8002f76:	1900      	adds	r0, r0, r4
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002f78:	3b02      	subs	r3, #2
 8002f7a:	5ceb      	ldrb	r3, [r5, r3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d057      	beq.n	8003030 <SX1276GetTimeOnAir+0x1f0>
 8002f80:	2414      	movs	r4, #20
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002f82:	1b00      	subs	r0, r0, r4
 8002f84:	301c      	adds	r0, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002f86:	f7ff fb5f 	bl	8002648 <__aeabi_ui2d>
 8002f8a:	0004      	movs	r4, r0
 8002f8c:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002f90:	234c      	movs	r3, #76	; 0x4c
 8002f92:	5cd3      	ldrb	r3, [r2, r3]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d04d      	beq.n	8003034 <SX1276GetTimeOnAir+0x1f4>
 8002f98:	2002      	movs	r0, #2
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002f9a:	4643      	mov	r3, r8
 8002f9c:	1a18      	subs	r0, r3, r0
 8002f9e:	0080      	lsls	r0, r0, #2
 8002fa0:	f7ff fb52 	bl	8002648 <__aeabi_ui2d>
 8002fa4:	0002      	movs	r2, r0
 8002fa6:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002fa8:	0020      	movs	r0, r4
 8002faa:	0029      	movs	r1, r5
 8002fac:	f7fe f8e2 	bl	8001174 <__aeabi_ddiv>
 8002fb0:	f00d fc62 	bl	8010878 <ceil>
 8002fb4:	0004      	movs	r4, r0
 8002fb6:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <SX1276GetTimeOnAir+0x200>)
 8002fba:	234d      	movs	r3, #77	; 0x4d
 8002fbc:	5cd0      	ldrb	r0, [r2, r3]
 8002fbe:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002fc0:	f7ff fb12 	bl	80025e8 <__aeabi_i2d>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002fc8:	0020      	movs	r0, r4
 8002fca:	0029      	movs	r1, r5
 8002fcc:	f7fe fcd8 	bl	8001980 <__aeabi_dmul>
 8002fd0:	0004      	movs	r4, r0
 8002fd2:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f7fd fa40 	bl	800045c <__aeabi_dcmpgt>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d02b      	beq.n	8003038 <SX1276GetTimeOnAir+0x1f8>
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <SX1276GetTimeOnAir+0x208>)
 8002fe4:	0020      	movs	r0, r4
 8002fe6:	0029      	movs	r1, r5
 8002fe8:	f7fd fd5a 	bl	8000aa0 <__aeabi_dadd>
 8002fec:	0002      	movs	r2, r0
 8002fee:	000b      	movs	r3, r1
            double tPayload = nPayload * ts;
 8002ff0:	0030      	movs	r0, r6
 8002ff2:	0039      	movs	r1, r7
 8002ff4:	f7fe fcc4 	bl	8001980 <__aeabi_dmul>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	000b      	movs	r3, r1
            double tOnAir = tPreamble + tPayload;
 8002ffc:	9800      	ldr	r0, [sp, #0]
 8002ffe:	9901      	ldr	r1, [sp, #4]
 8003000:	f7fd fd4e 	bl	8000aa0 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8003004:	2200      	movs	r2, #0
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <SX1276GetTimeOnAir+0x20c>)
 8003008:	f7fe fcba 	bl	8001980 <__aeabi_dmul>
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <SX1276GetTimeOnAir+0x214>)
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <SX1276GetTimeOnAir+0x218>)
 8003010:	f7fd fd46 	bl	8000aa0 <__aeabi_dadd>
 8003014:	f00d fcba 	bl	801098c <floor>
 8003018:	f7fd fa54 	bl	80004c4 <__aeabi_d2uiz>
    return airTime;
 800301c:	e71a      	b.n	8002e54 <SX1276GetTimeOnAir+0x14>
                bw = 125000;
 800301e:	2600      	movs	r6, #0
 8003020:	4f0e      	ldr	r7, [pc, #56]	; (800305c <SX1276GetTimeOnAir+0x21c>)
 8003022:	e77e      	b.n	8002f22 <SX1276GetTimeOnAir+0xe2>
                bw = 250000;
 8003024:	2600      	movs	r6, #0
 8003026:	4f0e      	ldr	r7, [pc, #56]	; (8003060 <SX1276GetTimeOnAir+0x220>)
 8003028:	e77b      	b.n	8002f22 <SX1276GetTimeOnAir+0xe2>
                bw = 500000;
 800302a:	2600      	movs	r6, #0
 800302c:	4f0d      	ldr	r7, [pc, #52]	; (8003064 <SX1276GetTimeOnAir+0x224>)
 800302e:	e778      	b.n	8002f22 <SX1276GetTimeOnAir+0xe2>
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8003030:	2400      	movs	r4, #0
 8003032:	e7a6      	b.n	8002f82 <SX1276GetTimeOnAir+0x142>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003034:	2000      	movs	r0, #0
 8003036:	e7b0      	b.n	8002f9a <SX1276GetTimeOnAir+0x15a>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8003038:	2400      	movs	r4, #0
 800303a:	2500      	movs	r5, #0
 800303c:	e7d0      	b.n	8002fe0 <SX1276GetTimeOnAir+0x1a0>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	20001544 	.word	0x20001544
 8003044:	3ff00000 	.word	0x3ff00000
 8003048:	40200000 	.word	0x40200000
 800304c:	408f4000 	.word	0x408f4000
 8003050:	40110000 	.word	0x40110000
 8003054:	d916872b 	.word	0xd916872b
 8003058:	3feff7ce 	.word	0x3feff7ce
 800305c:	40fe8480 	.word	0x40fe8480
 8003060:	410e8480 	.word	0x410e8480
 8003064:	411e8480 	.word	0x411e8480

08003068 <SX1276ReadRssi>:
{
 8003068:	b510      	push	{r4, lr}
    switch( modem )
 800306a:	2800      	cmp	r0, #0
 800306c:	d004      	beq.n	8003078 <SX1276ReadRssi+0x10>
 800306e:	2801      	cmp	r0, #1
 8003070:	d00a      	beq.n	8003088 <SX1276ReadRssi+0x20>
 8003072:	2001      	movs	r0, #1
 8003074:	4240      	negs	r0, r0
}
 8003076:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003078:	2011      	movs	r0, #17
 800307a:	f7ff fe84 	bl	8002d86 <SX1276Read>
 800307e:	0840      	lsrs	r0, r0, #1
 8003080:	b2c0      	uxtb	r0, r0
 8003082:	4240      	negs	r0, r0
 8003084:	b200      	sxth	r0, r0
        break;
 8003086:	e7f6      	b.n	8003076 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <SX1276ReadRssi+0x48>)
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <SX1276ReadRssi+0x4c>)
 800308e:	429a      	cmp	r2, r3
 8003090:	d906      	bls.n	80030a0 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003092:	201b      	movs	r0, #27
 8003094:	f7ff fe77 	bl	8002d86 <SX1276Read>
 8003098:	b280      	uxth	r0, r0
 800309a:	389d      	subs	r0, #157	; 0x9d
 800309c:	b200      	sxth	r0, r0
 800309e:	e7ea      	b.n	8003076 <SX1276ReadRssi+0xe>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80030a0:	201b      	movs	r0, #27
 80030a2:	f7ff fe70 	bl	8002d86 <SX1276Read>
 80030a6:	b280      	uxth	r0, r0
 80030a8:	38a4      	subs	r0, #164	; 0xa4
 80030aa:	b200      	sxth	r0, r0
 80030ac:	e7e3      	b.n	8003076 <SX1276ReadRssi+0xe>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20001544 	.word	0x20001544
 80030b4:	1f4add40 	.word	0x1f4add40

080030b8 <SX1276SetOpMode>:
{
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 80030bc:	d018      	beq.n	80030f0 <SX1276SetOpMode+0x38>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80030be:	4d17      	ldr	r5, [pc, #92]	; (800311c <SX1276SetOpMode+0x64>)
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2001      	movs	r0, #1
 80030c6:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2000      	movs	r0, #0
 80030ce:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	0020      	movs	r0, r4
 80030d6:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80030d8:	2001      	movs	r0, #1
 80030da:	f7ff fe54 	bl	8002d86 <SX1276Read>
 80030de:	b241      	sxtb	r1, r0
 80030e0:	2307      	movs	r3, #7
 80030e2:	4399      	bics	r1, r3
 80030e4:	4321      	orrs	r1, r4
 80030e6:	b2c9      	uxtb	r1, r1
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7ff fdf6 	bl	8002cda <SX1276Write>
}
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff fe48 	bl	8002d86 <SX1276Read>
 80030f6:	b240      	sxtb	r0, r0
 80030f8:	2307      	movs	r3, #7
 80030fa:	4398      	bics	r0, r3
 80030fc:	4320      	orrs	r0, r4
 80030fe:	b2c1      	uxtb	r1, r0
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff fdea 	bl	8002cda <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8003106:	4c05      	ldr	r4, [pc, #20]	; (800311c <SX1276SetOpMode+0x64>)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2001      	movs	r0, #1
 800310e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2000      	movs	r0, #0
 8003116:	4798      	blx	r3
 8003118:	e7e9      	b.n	80030ee <SX1276SetOpMode+0x36>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	2000020c 	.word	0x2000020c

08003120 <SX1276SetSleep>:
{
 8003120:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003122:	480a      	ldr	r0, [pc, #40]	; (800314c <SX1276SetSleep+0x2c>)
 8003124:	f00b fcf2 	bl	800eb0c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <SX1276SetSleep+0x30>)
 800312a:	f00b fcef 	bl	800eb0c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800312e:	4809      	ldr	r0, [pc, #36]	; (8003154 <SX1276SetSleep+0x34>)
 8003130:	f00b fcec 	bl	800eb0c <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003134:	2000      	movs	r0, #0
 8003136:	f7ff ffbf 	bl	80030b8 <SX1276SetOpMode>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <SX1276SetSleep+0x38>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2000      	movs	r0, #0
 8003142:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SX1276SetSleep+0x3c>)
 8003146:	2200      	movs	r2, #0
 8003148:	711a      	strb	r2, [r3, #4]
}
 800314a:	bd10      	pop	{r4, pc}
 800314c:	200015ac 	.word	0x200015ac
 8003150:	20001514 	.word	0x20001514
 8003154:	2000152c 	.word	0x2000152c
 8003158:	2000020c 	.word	0x2000020c
 800315c:	20001544 	.word	0x20001544

08003160 <SX1276SetStby>:
{
 8003160:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003162:	4808      	ldr	r0, [pc, #32]	; (8003184 <SX1276SetStby+0x24>)
 8003164:	f00b fcd2 	bl	800eb0c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003168:	4807      	ldr	r0, [pc, #28]	; (8003188 <SX1276SetStby+0x28>)
 800316a:	f00b fccf 	bl	800eb0c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800316e:	4807      	ldr	r0, [pc, #28]	; (800318c <SX1276SetStby+0x2c>)
 8003170:	f00b fccc 	bl	800eb0c <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8003174:	2001      	movs	r0, #1
 8003176:	f7ff ff9f 	bl	80030b8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SX1276SetStby+0x30>)
 800317c:	2200      	movs	r2, #0
 800317e:	711a      	strb	r2, [r3, #4]
}
 8003180:	bd10      	pop	{r4, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	200015ac 	.word	0x200015ac
 8003188:	20001514 	.word	0x20001514
 800318c:	2000152c 	.word	0x2000152c
 8003190:	20001544 	.word	0x20001544

08003194 <SX1276SetRx>:
{
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	0004      	movs	r4, r0
    TimerStop( &TxTimeoutTimer );
 8003198:	4896      	ldr	r0, [pc, #600]	; (80033f4 <SX1276SetRx+0x260>)
 800319a:	f00b fcb7 	bl	800eb0c <TimerStop>
    switch( SX1276.Settings.Modem )
 800319e:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <SX1276SetRx+0x264>)
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01a      	beq.n	80031dc <SX1276SetRx+0x48>
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d045      	beq.n	8003236 <SX1276SetRx+0xa2>
 80031aa:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0052      	lsls	r2, r2, #1
 80031b0:	2100      	movs	r1, #0
 80031b2:	4892      	ldr	r0, [pc, #584]	; (80033fc <SX1276SetRx+0x268>)
 80031b4:	f00c fee6 	bl	800ff84 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80031b8:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <SX1276SetRx+0x264>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d000      	beq.n	80031c4 <SX1276SetRx+0x30>
 80031c2:	e0fd      	b.n	80033c0 <SX1276SetRx+0x22c>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80031c4:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <SX1276SetRx+0x264>)
 80031c6:	795b      	ldrb	r3, [r3, #5]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d100      	bne.n	80031ce <SX1276SetRx+0x3a>
 80031cc:	e101      	b.n	80033d2 <SX1276SetRx+0x23e>
        if( rxContinuous == true )
 80031ce:	2e00      	cmp	r6, #0
 80031d0:	d100      	bne.n	80031d4 <SX1276SetRx+0x40>
 80031d2:	e10b      	b.n	80033ec <SX1276SetRx+0x258>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80031d4:	2005      	movs	r0, #5
 80031d6:	f7ff ff6f 	bl	80030b8 <SX1276SetOpMode>
}
 80031da:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80031dc:	4d86      	ldr	r5, [pc, #536]	; (80033f8 <SX1276SetRx+0x264>)
 80031de:	2326      	movs	r3, #38	; 0x26
 80031e0:	5cee      	ldrb	r6, [r5, r3]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80031e2:	2040      	movs	r0, #64	; 0x40
 80031e4:	f7ff fdcf 	bl	8002d86 <SX1276Read>
 80031e8:	b240      	sxtb	r0, r0
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80031ea:	2103      	movs	r1, #3
 80031ec:	4001      	ands	r1, r0
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80031ee:	200c      	movs	r0, #12
 80031f0:	4301      	orrs	r1, r0
 80031f2:	b249      	sxtb	r1, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80031f4:	b2c9      	uxtb	r1, r1
 80031f6:	2040      	movs	r0, #64	; 0x40
 80031f8:	f7ff fd6f 	bl	8002cda <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80031fc:	2041      	movs	r0, #65	; 0x41
 80031fe:	f7ff fdc2 	bl	8002d86 <SX1276Read>
 8003202:	213f      	movs	r1, #63	; 0x3f
 8003204:	4249      	negs	r1, r1
 8003206:	4301      	orrs	r1, r0
 8003208:	b2c9      	uxtb	r1, r1
 800320a:	2041      	movs	r0, #65	; 0x41
 800320c:	f7ff fd65 	bl	8002cda <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003210:	2035      	movs	r0, #53	; 0x35
 8003212:	f7ff fdb8 	bl	8002d86 <SX1276Read>
 8003216:	233f      	movs	r3, #63	; 0x3f
 8003218:	4003      	ands	r3, r0
 800321a:	223e      	movs	r2, #62	; 0x3e
 800321c:	54ab      	strb	r3, [r5, r2]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800321e:	211e      	movs	r1, #30
 8003220:	200d      	movs	r0, #13
 8003222:	f7ff fd5a 	bl	8002cda <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003226:	2300      	movs	r3, #0
 8003228:	2230      	movs	r2, #48	; 0x30
 800322a:	54ab      	strb	r3, [r5, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800322c:	3201      	adds	r2, #1
 800322e:	54ab      	strb	r3, [r5, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003230:	87ab      	strh	r3, [r5, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003232:	876b      	strh	r3, [r5, #58]	; 0x3a
        break;
 8003234:	e7ba      	b.n	80031ac <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003236:	4a70      	ldr	r2, [pc, #448]	; (80033f8 <SX1276SetRx+0x264>)
 8003238:	2355      	movs	r3, #85	; 0x55
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d024      	beq.n	800328a <SX1276SetRx+0xf6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003240:	2033      	movs	r0, #51	; 0x33
 8003242:	f7ff fda0 	bl	8002d86 <SX1276Read>
 8003246:	2141      	movs	r1, #65	; 0x41
 8003248:	4301      	orrs	r1, r0
 800324a:	b2c9      	uxtb	r1, r1
 800324c:	2033      	movs	r0, #51	; 0x33
 800324e:	f7ff fd44 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003252:	2119      	movs	r1, #25
 8003254:	203b      	movs	r0, #59	; 0x3b
 8003256:	f7ff fd40 	bl	8002cda <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <SX1276SetRx+0x264>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	2b08      	cmp	r3, #8
 8003260:	d87b      	bhi.n	800335a <SX1276SetRx+0x1c6>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003262:	2031      	movs	r0, #49	; 0x31
 8003264:	f7ff fd8f 	bl	8002d86 <SX1276Read>
 8003268:	217f      	movs	r1, #127	; 0x7f
 800326a:	4001      	ands	r1, r0
 800326c:	2031      	movs	r0, #49	; 0x31
 800326e:	f7ff fd34 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8003272:	2100      	movs	r1, #0
 8003274:	2030      	movs	r0, #48	; 0x30
 8003276:	f7ff fd30 	bl	8002cda <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <SX1276SetRx+0x264>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	2b08      	cmp	r3, #8
 8003280:	d875      	bhi.n	800336e <SX1276SetRx+0x1da>
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4a5e      	ldr	r2, [pc, #376]	; (8003400 <SX1276SetRx+0x26c>)
 8003286:	58d3      	ldr	r3, [r2, r3]
 8003288:	469f      	mov	pc, r3
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800328a:	2033      	movs	r0, #51	; 0x33
 800328c:	f7ff fd7b 	bl	8002d86 <SX1276Read>
 8003290:	b241      	sxtb	r1, r0
 8003292:	2341      	movs	r3, #65	; 0x41
 8003294:	4399      	bics	r1, r3
 8003296:	2001      	movs	r0, #1
 8003298:	4301      	orrs	r1, r0
 800329a:	b2c9      	uxtb	r1, r1
 800329c:	2033      	movs	r0, #51	; 0x33
 800329e:	f7ff fd1c 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80032a2:	211d      	movs	r1, #29
 80032a4:	203b      	movs	r0, #59	; 0x3b
 80032a6:	f7ff fd18 	bl	8002cda <SX1276Write>
 80032aa:	e7d6      	b.n	800325a <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80032ac:	2148      	movs	r1, #72	; 0x48
 80032ae:	202f      	movs	r0, #47	; 0x2f
 80032b0:	f7ff fd13 	bl	8002cda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80032b4:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <SX1276SetRx+0x264>)
 80032b6:	6898      	ldr	r0, [r3, #8]
 80032b8:	4b52      	ldr	r3, [pc, #328]	; (8003404 <SX1276SetRx+0x270>)
 80032ba:	469c      	mov	ip, r3
 80032bc:	4460      	add	r0, ip
 80032be:	f7ff fd17 	bl	8002cf0 <SX1276SetChannel>
                    break;
 80032c2:	e054      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80032c4:	2144      	movs	r1, #68	; 0x44
 80032c6:	202f      	movs	r0, #47	; 0x2f
 80032c8:	f7ff fd07 	bl	8002cda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80032cc:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <SX1276SetRx+0x264>)
 80032ce:	6898      	ldr	r0, [r3, #8]
 80032d0:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <SX1276SetRx+0x274>)
 80032d2:	469c      	mov	ip, r3
 80032d4:	4460      	add	r0, ip
 80032d6:	f7ff fd0b 	bl	8002cf0 <SX1276SetChannel>
                    break;
 80032da:	e048      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80032dc:	2144      	movs	r1, #68	; 0x44
 80032de:	202f      	movs	r0, #47	; 0x2f
 80032e0:	f7ff fcfb 	bl	8002cda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80032e4:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <SX1276SetRx+0x264>)
 80032e6:	6898      	ldr	r0, [r3, #8]
 80032e8:	4b48      	ldr	r3, [pc, #288]	; (800340c <SX1276SetRx+0x278>)
 80032ea:	469c      	mov	ip, r3
 80032ec:	4460      	add	r0, ip
 80032ee:	f7ff fcff 	bl	8002cf0 <SX1276SetChannel>
                    break;
 80032f2:	e03c      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80032f4:	2144      	movs	r1, #68	; 0x44
 80032f6:	202f      	movs	r0, #47	; 0x2f
 80032f8:	f7ff fcef 	bl	8002cda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <SX1276SetRx+0x264>)
 80032fe:	6898      	ldr	r0, [r3, #8]
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <SX1276SetRx+0x27c>)
 8003302:	469c      	mov	ip, r3
 8003304:	4460      	add	r0, ip
 8003306:	f7ff fcf3 	bl	8002cf0 <SX1276SetChannel>
                    break;
 800330a:	e030      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800330c:	2144      	movs	r1, #68	; 0x44
 800330e:	202f      	movs	r0, #47	; 0x2f
 8003310:	f7ff fce3 	bl	8002cda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <SX1276SetRx+0x264>)
 8003316:	6898      	ldr	r0, [r3, #8]
 8003318:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <SX1276SetRx+0x280>)
 800331a:	469c      	mov	ip, r3
 800331c:	4460      	add	r0, ip
 800331e:	f7ff fce7 	bl	8002cf0 <SX1276SetChannel>
                    break;
 8003322:	e024      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003324:	2144      	movs	r1, #68	; 0x44
 8003326:	202f      	movs	r0, #47	; 0x2f
 8003328:	f7ff fcd7 	bl	8002cda <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <SX1276SetRx+0x264>)
 800332e:	6898      	ldr	r0, [r3, #8]
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <SX1276SetRx+0x284>)
 8003332:	469c      	mov	ip, r3
 8003334:	4460      	add	r0, ip
 8003336:	f7ff fcdb 	bl	8002cf0 <SX1276SetChannel>
                    break;
 800333a:	e018      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	202f      	movs	r0, #47	; 0x2f
 8003340:	f7ff fccb 	bl	8002cda <SX1276Write>
                    break;
 8003344:	e013      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8003346:	2140      	movs	r1, #64	; 0x40
 8003348:	202f      	movs	r0, #47	; 0x2f
 800334a:	f7ff fcc6 	bl	8002cda <SX1276Write>
                    break;
 800334e:	e00e      	b.n	800336e <SX1276SetRx+0x1da>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	202f      	movs	r0, #47	; 0x2f
 8003354:	f7ff fcc1 	bl	8002cda <SX1276Write>
                    break;
 8003358:	e009      	b.n	800336e <SX1276SetRx+0x1da>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800335a:	2031      	movs	r0, #49	; 0x31
 800335c:	f7ff fd13 	bl	8002d86 <SX1276Read>
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	4249      	negs	r1, r1
 8003364:	4301      	orrs	r1, r0
 8003366:	b2c9      	uxtb	r1, r1
 8003368:	2031      	movs	r0, #49	; 0x31
 800336a:	f7ff fcb6 	bl	8002cda <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <SX1276SetRx+0x264>)
 8003370:	2256      	movs	r2, #86	; 0x56
 8003372:	5c9e      	ldrb	r6, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003374:	3a03      	subs	r2, #3
 8003376:	5c9b      	ldrb	r3, [r3, r2]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d014      	beq.n	80033a6 <SX1276SetRx+0x212>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800337c:	211d      	movs	r1, #29
 800337e:	2011      	movs	r0, #17
 8003380:	f7ff fcab 	bl	8002cda <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003384:	2040      	movs	r0, #64	; 0x40
 8003386:	f7ff fcfe 	bl	8002d86 <SX1276Read>
 800338a:	2133      	movs	r1, #51	; 0x33
 800338c:	4001      	ands	r1, r0
 800338e:	2040      	movs	r0, #64	; 0x40
 8003390:	f7ff fca3 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8003394:	2100      	movs	r1, #0
 8003396:	200f      	movs	r0, #15
 8003398:	f7ff fc9f 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800339c:	2100      	movs	r1, #0
 800339e:	200d      	movs	r0, #13
 80033a0:	f7ff fc9b 	bl	8002cda <SX1276Write>
        break;
 80033a4:	e702      	b.n	80031ac <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80033a6:	211f      	movs	r1, #31
 80033a8:	2011      	movs	r0, #17
 80033aa:	f7ff fc96 	bl	8002cda <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80033ae:	2040      	movs	r0, #64	; 0x40
 80033b0:	f7ff fce9 	bl	8002d86 <SX1276Read>
 80033b4:	213f      	movs	r1, #63	; 0x3f
 80033b6:	4001      	ands	r1, r0
 80033b8:	2040      	movs	r0, #64	; 0x40
 80033ba:	f7ff fc8e 	bl	8002cda <SX1276Write>
 80033be:	e7e9      	b.n	8003394 <SX1276SetRx+0x200>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80033c0:	4d16      	ldr	r5, [pc, #88]	; (800341c <SX1276SetRx+0x288>)
 80033c2:	0021      	movs	r1, r4
 80033c4:	0028      	movs	r0, r5
 80033c6:	f00b fbe3 	bl	800eb90 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80033ca:	0028      	movs	r0, r5
 80033cc:	f00b fb1e 	bl	800ea0c <TimerStart>
 80033d0:	e6f8      	b.n	80031c4 <SX1276SetRx+0x30>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80033d2:	2005      	movs	r0, #5
 80033d4:	f7ff fe70 	bl	80030b8 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <SX1276SetRx+0x264>)
 80033da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033dc:	4c10      	ldr	r4, [pc, #64]	; (8003420 <SX1276SetRx+0x28c>)
 80033de:	0020      	movs	r0, r4
 80033e0:	f00b fbd6 	bl	800eb90 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 80033e4:	0020      	movs	r0, r4
 80033e6:	f00b fb11 	bl	800ea0c <TimerStart>
 80033ea:	e6f6      	b.n	80031da <SX1276SetRx+0x46>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80033ec:	2006      	movs	r0, #6
 80033ee:	f7ff fe63 	bl	80030b8 <SX1276SetOpMode>
}
 80033f2:	e6f2      	b.n	80031da <SX1276SetRx+0x46>
 80033f4:	20001514 	.word	0x20001514
 80033f8:	20001544 	.word	0x20001544
 80033fc:	20000214 	.word	0x20000214
 8003400:	08010bf8 	.word	0x08010bf8
 8003404:	00001e82 	.word	0x00001e82
 8003408:	000028b4 	.word	0x000028b4
 800340c:	00003d04 	.word	0x00003d04
 8003410:	0000515e 	.word	0x0000515e
 8003414:	00007a12 	.word	0x00007a12
 8003418:	0000a2c6 	.word	0x0000a2c6
 800341c:	200015ac 	.word	0x200015ac
 8003420:	2000152c 	.word	0x2000152c

08003424 <SX1276SetTx>:
{
 8003424:	b510      	push	{r4, lr}
 8003426:	0004      	movs	r4, r0
    TimerStop( &RxTimeoutTimer );
 8003428:	482e      	ldr	r0, [pc, #184]	; (80034e4 <SX1276SetTx+0xc0>)
 800342a:	f00b fb6f 	bl	800eb0c <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800342e:	0021      	movs	r1, r4
 8003430:	482d      	ldr	r0, [pc, #180]	; (80034e8 <SX1276SetTx+0xc4>)
 8003432:	f00b fbad 	bl	800eb90 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <SX1276SetTx+0xc8>)
 8003438:	795b      	ldrb	r3, [r3, #5]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <SX1276SetTx+0x32>
 800343e:	2b01      	cmp	r3, #1
 8003440:	d027      	beq.n	8003492 <SX1276SetTx+0x6e>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <SX1276SetTx+0xc8>)
 8003444:	2202      	movs	r2, #2
 8003446:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003448:	4827      	ldr	r0, [pc, #156]	; (80034e8 <SX1276SetTx+0xc4>)
 800344a:	f00b fadf 	bl	800ea0c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800344e:	2003      	movs	r0, #3
 8003450:	f7ff fe32 	bl	80030b8 <SX1276SetOpMode>
}
 8003454:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003456:	2040      	movs	r0, #64	; 0x40
 8003458:	f7ff fc95 	bl	8002d86 <SX1276Read>
 800345c:	b240      	sxtb	r0, r0
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800345e:	2103      	movs	r1, #3
 8003460:	4001      	ands	r1, r0
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003462:	2010      	movs	r0, #16
 8003464:	4301      	orrs	r1, r0
 8003466:	b249      	sxtb	r1, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003468:	b2c9      	uxtb	r1, r1
 800346a:	2040      	movs	r0, #64	; 0x40
 800346c:	f7ff fc35 	bl	8002cda <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003470:	2041      	movs	r0, #65	; 0x41
 8003472:	f7ff fc88 	bl	8002d86 <SX1276Read>
 8003476:	213e      	movs	r1, #62	; 0x3e
 8003478:	4001      	ands	r1, r0
 800347a:	2041      	movs	r0, #65	; 0x41
 800347c:	f7ff fc2d 	bl	8002cda <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003480:	2035      	movs	r0, #53	; 0x35
 8003482:	f7ff fc80 	bl	8002d86 <SX1276Read>
 8003486:	233f      	movs	r3, #63	; 0x3f
 8003488:	4003      	ands	r3, r0
 800348a:	223e      	movs	r2, #62	; 0x3e
 800348c:	4917      	ldr	r1, [pc, #92]	; (80034ec <SX1276SetTx+0xc8>)
 800348e:	548b      	strb	r3, [r1, r2]
        break;
 8003490:	e7d7      	b.n	8003442 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <SX1276SetTx+0xc8>)
 8003494:	2353      	movs	r3, #83	; 0x53
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d011      	beq.n	80034c0 <SX1276SetTx+0x9c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800349c:	21f5      	movs	r1, #245	; 0xf5
 800349e:	2011      	movs	r0, #17
 80034a0:	f7ff fc1b 	bl	8002cda <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80034a4:	2040      	movs	r0, #64	; 0x40
 80034a6:	f7ff fc6e 	bl	8002d86 <SX1276Read>
 80034aa:	b240      	sxtb	r0, r0
 80034ac:	2133      	movs	r1, #51	; 0x33
 80034ae:	4001      	ands	r1, r0
 80034b0:	2040      	movs	r0, #64	; 0x40
 80034b2:	4301      	orrs	r1, r0
 80034b4:	b249      	sxtb	r1, r1
 80034b6:	b2c9      	uxtb	r1, r1
 80034b8:	2040      	movs	r0, #64	; 0x40
 80034ba:	f7ff fc0e 	bl	8002cda <SX1276Write>
 80034be:	e7c0      	b.n	8003442 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80034c0:	21f7      	movs	r1, #247	; 0xf7
 80034c2:	2011      	movs	r0, #17
 80034c4:	f7ff fc09 	bl	8002cda <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80034c8:	2040      	movs	r0, #64	; 0x40
 80034ca:	f7ff fc5c 	bl	8002d86 <SX1276Read>
 80034ce:	b240      	sxtb	r0, r0
 80034d0:	213f      	movs	r1, #63	; 0x3f
 80034d2:	4001      	ands	r1, r0
 80034d4:	2040      	movs	r0, #64	; 0x40
 80034d6:	4301      	orrs	r1, r0
 80034d8:	b249      	sxtb	r1, r1
 80034da:	b2c9      	uxtb	r1, r1
 80034dc:	2040      	movs	r0, #64	; 0x40
 80034de:	f7ff fbfc 	bl	8002cda <SX1276Write>
 80034e2:	e7ae      	b.n	8003442 <SX1276SetTx+0x1e>
 80034e4:	200015ac 	.word	0x200015ac
 80034e8:	20001514 	.word	0x20001514
 80034ec:	20001544 	.word	0x20001544

080034f0 <SX1276StartCad>:
{
 80034f0:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <SX1276StartCad+0x34>)
 80034f4:	795b      	ldrb	r3, [r3, #5]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d000      	beq.n	80034fc <SX1276StartCad+0xc>
}
 80034fa:	bd10      	pop	{r4, pc}
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80034fc:	21fa      	movs	r1, #250	; 0xfa
 80034fe:	2011      	movs	r0, #17
 8003500:	f7ff fbeb 	bl	8002cda <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003504:	2040      	movs	r0, #64	; 0x40
 8003506:	f7ff fc3e 	bl	8002d86 <SX1276Read>
 800350a:	2403      	movs	r4, #3
 800350c:	43a0      	bics	r0, r4
 800350e:	b2c1      	uxtb	r1, r0
 8003510:	2040      	movs	r0, #64	; 0x40
 8003512:	f7ff fbe2 	bl	8002cda <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8003516:	4b03      	ldr	r3, [pc, #12]	; (8003524 <SX1276StartCad+0x34>)
 8003518:	711c      	strb	r4, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800351a:	2007      	movs	r0, #7
 800351c:	f7ff fdcc 	bl	80030b8 <SX1276SetOpMode>
}
 8003520:	e7eb      	b.n	80034fa <SX1276StartCad+0xa>
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	20001544 	.word	0x20001544

08003528 <SX1276SetModem>:
{
 8003528:	b510      	push	{r4, lr}
 800352a:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800352c:	2001      	movs	r0, #1
 800352e:	f7ff fc2a 	bl	8002d86 <SX1276Read>
 8003532:	0603      	lsls	r3, r0, #24
 8003534:	d41e      	bmi.n	8003574 <SX1276SetModem+0x4c>
        SX1276.Settings.Modem = MODEM_FSK;
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <SX1276SetModem+0x80>)
 8003538:	2200      	movs	r2, #0
 800353a:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <SX1276SetModem+0x80>)
 800353e:	795b      	ldrb	r3, [r3, #5]
 8003540:	42a3      	cmp	r3, r4
 8003542:	d016      	beq.n	8003572 <SX1276SetModem+0x4a>
    SX1276.Settings.Modem = modem;
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <SX1276SetModem+0x80>)
 8003546:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8003548:	2c01      	cmp	r4, #1
 800354a:	d017      	beq.n	800357c <SX1276SetModem+0x54>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800354c:	2000      	movs	r0, #0
 800354e:	f7ff fdb3 	bl	80030b8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003552:	2001      	movs	r0, #1
 8003554:	f7ff fc17 	bl	8002d86 <SX1276Read>
 8003558:	217f      	movs	r1, #127	; 0x7f
 800355a:	4001      	ands	r1, r0
 800355c:	2001      	movs	r0, #1
 800355e:	f7ff fbbc 	bl	8002cda <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003562:	2100      	movs	r1, #0
 8003564:	2040      	movs	r0, #64	; 0x40
 8003566:	f7ff fbb8 	bl	8002cda <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800356a:	2130      	movs	r1, #48	; 0x30
 800356c:	2041      	movs	r0, #65	; 0x41
 800356e:	f7ff fbb4 	bl	8002cda <SX1276Write>
}
 8003572:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <SX1276SetModem+0x80>)
 8003576:	2201      	movs	r2, #1
 8003578:	715a      	strb	r2, [r3, #5]
 800357a:	e7df      	b.n	800353c <SX1276SetModem+0x14>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800357c:	2000      	movs	r0, #0
 800357e:	f7ff fd9b 	bl	80030b8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff fbff 	bl	8002d86 <SX1276Read>
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	4249      	negs	r1, r1
 800358c:	4301      	orrs	r1, r0
 800358e:	b2c9      	uxtb	r1, r1
 8003590:	2001      	movs	r0, #1
 8003592:	f7ff fba2 	bl	8002cda <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003596:	2100      	movs	r1, #0
 8003598:	2040      	movs	r0, #64	; 0x40
 800359a:	f7ff fb9e 	bl	8002cda <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800359e:	2100      	movs	r1, #0
 80035a0:	2041      	movs	r0, #65	; 0x41
 80035a2:	f7ff fb9a 	bl	8002cda <SX1276Write>
        break;
 80035a6:	e7e4      	b.n	8003572 <SX1276SetModem+0x4a>
 80035a8:	20001544 	.word	0x20001544

080035ac <SX1276Init>:
{
 80035ac:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 80035ae:	4c1d      	ldr	r4, [pc, #116]	; (8003624 <SX1276Init+0x78>)
 80035b0:	6060      	str	r0, [r4, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80035b2:	4d1d      	ldr	r5, [pc, #116]	; (8003628 <SX1276Init+0x7c>)
 80035b4:	0029      	movs	r1, r5
 80035b6:	481d      	ldr	r0, [pc, #116]	; (800362c <SX1276Init+0x80>)
 80035b8:	f00b fa1e 	bl	800e9f8 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80035bc:	0029      	movs	r1, r5
 80035be:	481c      	ldr	r0, [pc, #112]	; (8003630 <SX1276Init+0x84>)
 80035c0:	f00b fa1a 	bl	800e9f8 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80035c4:	0029      	movs	r1, r5
 80035c6:	481b      	ldr	r0, [pc, #108]	; (8003634 <SX1276Init+0x88>)
 80035c8:	f00b fa16 	bl	800e9f8 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2001      	movs	r0, #1
 80035d2:	4798      	blx	r3
    SX1276Reset( );
 80035d4:	f7ff fb38 	bl	8002c48 <SX1276Reset>
    RxChainCalibration( );
 80035d8:	f7ff fbe0 	bl	8002d9c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80035dc:	2000      	movs	r0, #0
 80035de:	f7ff fd6b 	bl	80030b8 <SX1276SetOpMode>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4814      	ldr	r0, [pc, #80]	; (8003638 <SX1276Init+0x8c>)
 80035e8:	4798      	blx	r3
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80035ea:	2400      	movs	r4, #0
 80035ec:	2c0f      	cmp	r4, #15
 80035ee:	d80d      	bhi.n	800360c <SX1276Init+0x60>
        SX1276SetModem( RadioRegsInit[i].Modem );
 80035f0:	4d12      	ldr	r5, [pc, #72]	; (800363c <SX1276Init+0x90>)
 80035f2:	0066      	lsls	r6, r4, #1
 80035f4:	1936      	adds	r6, r6, r4
 80035f6:	5d70      	ldrb	r0, [r6, r5]
 80035f8:	f7ff ff96 	bl	8003528 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80035fc:	19ad      	adds	r5, r5, r6
 80035fe:	78a9      	ldrb	r1, [r5, #2]
 8003600:	7868      	ldrb	r0, [r5, #1]
 8003602:	f7ff fb6a 	bl	8002cda <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003606:	3401      	adds	r4, #1
 8003608:	b2e4      	uxtb	r4, r4
 800360a:	e7ef      	b.n	80035ec <SX1276Init+0x40>
    SX1276SetModem( MODEM_FSK );
 800360c:	2000      	movs	r0, #0
 800360e:	f7ff ff8b 	bl	8003528 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <SX1276Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003618:	4b02      	ldr	r3, [pc, #8]	; (8003624 <SX1276Init+0x78>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4798      	blx	r3
 8003620:	3002      	adds	r0, #2
}
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	2000020c 	.word	0x2000020c
 8003628:	08004401 	.word	0x08004401
 800362c:	20001514 	.word	0x20001514
 8003630:	200015ac 	.word	0x200015ac
 8003634:	2000152c 	.word	0x2000152c
 8003638:	2000002c 	.word	0x2000002c
 800363c:	08010c1c 	.word	0x08010c1c
 8003640:	20001544 	.word	0x20001544

08003644 <SX1276IsChannelFree>:
{
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	0004      	movs	r4, r0
 8003648:	000f      	movs	r7, r1
 800364a:	0016      	movs	r6, r2
 800364c:	001d      	movs	r5, r3
    if( SX1276GetStatus( ) != RF_IDLE )
 800364e:	f7ff faf5 	bl	8002c3c <SX1276GetStatus>
 8003652:	2800      	cmp	r0, #0
 8003654:	d002      	beq.n	800365c <SX1276IsChannelFree+0x18>
        return false;
 8003656:	2400      	movs	r4, #0
}
 8003658:	0020      	movs	r0, r4
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SX1276SetModem( modem );
 800365c:	0020      	movs	r0, r4
 800365e:	f7ff ff63 	bl	8003528 <SX1276SetModem>
    SX1276SetChannel( freq );
 8003662:	0038      	movs	r0, r7
 8003664:	f7ff fb44 	bl	8002cf0 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003668:	2005      	movs	r0, #5
 800366a:	f7ff fd25 	bl	80030b8 <SX1276SetOpMode>
    DelayMs( 1 );
 800366e:	2001      	movs	r0, #1
 8003670:	f00c f8ec 	bl	800f84c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8003674:	f00b fa9d 	bl	800ebb2 <TimerGetCurrentTime>
 8003678:	0007      	movs	r7, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800367a:	0038      	movs	r0, r7
 800367c:	f00b fa9f 	bl	800ebbe <TimerGetElapsedTime>
 8003680:	42a8      	cmp	r0, r5
 8003682:	d206      	bcs.n	8003692 <SX1276IsChannelFree+0x4e>
        rssi = SX1276ReadRssi( modem );
 8003684:	0020      	movs	r0, r4
 8003686:	f7ff fcef 	bl	8003068 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800368a:	42b0      	cmp	r0, r6
 800368c:	ddf5      	ble.n	800367a <SX1276IsChannelFree+0x36>
            status = false;
 800368e:	2400      	movs	r4, #0
 8003690:	e000      	b.n	8003694 <SX1276IsChannelFree+0x50>
    bool status = true;
 8003692:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8003694:	f7ff fd44 	bl	8003120 <SX1276SetSleep>
    return status;
 8003698:	e7de      	b.n	8003658 <SX1276IsChannelFree+0x14>

0800369a <SX1276Random>:
{
 800369a:	b570      	push	{r4, r5, r6, lr}
    SX1276SetModem( MODEM_LORA );
 800369c:	2001      	movs	r0, #1
 800369e:	f7ff ff43 	bl	8003528 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80036a2:	21ff      	movs	r1, #255	; 0xff
 80036a4:	2011      	movs	r0, #17
 80036a6:	f7ff fb18 	bl	8002cda <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80036aa:	2005      	movs	r0, #5
 80036ac:	f7ff fd04 	bl	80030b8 <SX1276SetOpMode>
    uint32_t rnd = 0;
 80036b0:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 80036b2:	2400      	movs	r4, #0
 80036b4:	2c1f      	cmp	r4, #31
 80036b6:	d80c      	bhi.n	80036d2 <SX1276Random+0x38>
        DelayMs( 1 );
 80036b8:	2001      	movs	r0, #1
 80036ba:	f00c f8c7 	bl	800f84c <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80036be:	202c      	movs	r0, #44	; 0x2c
 80036c0:	f7ff fb61 	bl	8002d86 <SX1276Read>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4003      	ands	r3, r0
 80036c8:	40a3      	lsls	r3, r4
 80036ca:	431d      	orrs	r5, r3
    for( i = 0; i < 32; i++ )
 80036cc:	3401      	adds	r4, #1
 80036ce:	b2e4      	uxtb	r4, r4
 80036d0:	e7f0      	b.n	80036b4 <SX1276Random+0x1a>
    SX1276SetSleep( );
 80036d2:	f7ff fd25 	bl	8003120 <SX1276SetSleep>
}
 80036d6:	0028      	movs	r0, r5
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080036dc <SX1276SetRxConfig>:
{
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	46de      	mov	lr, fp
 80036e0:	4657      	mov	r7, sl
 80036e2:	464e      	mov	r6, r9
 80036e4:	4645      	mov	r5, r8
 80036e6:	b5e0      	push	{r5, r6, r7, lr}
 80036e8:	b089      	sub	sp, #36	; 0x24
 80036ea:	0004      	movs	r4, r0
 80036ec:	9101      	str	r1, [sp, #4]
 80036ee:	0016      	movs	r6, r2
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	ab12      	add	r3, sp, #72	; 0x48
 80036f4:	cb04      	ldmia	r3!, {r2}
 80036f6:	9204      	str	r2, [sp, #16]
 80036f8:	881d      	ldrh	r5, [r3, #0]
 80036fa:	ab14      	add	r3, sp, #80	; 0x50
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	ab15      	add	r3, sp, #84	; 0x54
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	469a      	mov	sl, r3
 8003706:	ab16      	add	r3, sp, #88	; 0x58
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	469b      	mov	fp, r3
 800370c:	ab17      	add	r3, sp, #92	; 0x5c
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4698      	mov	r8, r3
 8003712:	ab18      	add	r3, sp, #96	; 0x60
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	9307      	str	r3, [sp, #28]
 8003718:	ab19      	add	r3, sp, #100	; 0x64
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4699      	mov	r9, r3
 800371e:	ab1a      	add	r3, sp, #104	; 0x68
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	9306      	str	r3, [sp, #24]
 8003724:	ab1b      	add	r3, sp, #108	; 0x6c
 8003726:	781f      	ldrb	r7, [r3, #0]
    SX1276SetModem( modem );
 8003728:	f7ff fefe 	bl	8003528 <SX1276SetModem>
    switch( modem )
 800372c:	2c00      	cmp	r4, #0
 800372e:	d009      	beq.n	8003744 <SX1276SetRxConfig+0x68>
 8003730:	2c01      	cmp	r4, #1
 8003732:	d100      	bne.n	8003736 <SX1276SetRxConfig+0x5a>
 8003734:	e08c      	b.n	8003850 <SX1276SetRxConfig+0x174>
}
 8003736:	b009      	add	sp, #36	; 0x24
 8003738:	bcf0      	pop	{r4, r5, r6, r7}
 800373a:	46bb      	mov	fp, r7
 800373c:	46b2      	mov	sl, r6
 800373e:	46a9      	mov	r9, r5
 8003740:	46a0      	mov	r8, r4
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003744:	4cb0      	ldr	r4, [pc, #704]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 8003746:	9b01      	ldr	r3, [sp, #4]
 8003748:	6163      	str	r3, [r4, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800374a:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800374c:	9a04      	ldr	r2, [sp, #16]
 800374e:	61a2      	str	r2, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003750:	2322      	movs	r3, #34	; 0x22
 8003752:	4651      	mov	r1, sl
 8003754:	54e1      	strb	r1, [r4, r3]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8003756:	3301      	adds	r3, #1
 8003758:	4659      	mov	r1, fp
 800375a:	54e1      	strb	r1, [r4, r3]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800375c:	3301      	adds	r3, #1
 800375e:	4641      	mov	r1, r8
 8003760:	54e1      	strb	r1, [r4, r3]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003762:	3301      	adds	r3, #1
 8003764:	9906      	ldr	r1, [sp, #24]
 8003766:	54e1      	strb	r1, [r4, r3]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003768:	3301      	adds	r3, #1
 800376a:	54e7      	strb	r7, [r4, r3]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800376c:	8425      	strh	r5, [r4, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800376e:	0030      	movs	r0, r6
 8003770:	f7fe ff6a 	bl	8002648 <__aeabi_ui2d>
 8003774:	0006      	movs	r6, r0
 8003776:	000f      	movs	r7, r1
 8003778:	0002      	movs	r2, r0
 800377a:	000b      	movs	r3, r1
 800377c:	2000      	movs	r0, #0
 800377e:	49a3      	ldr	r1, [pc, #652]	; (8003a0c <SX1276SetRxConfig+0x330>)
 8003780:	f7fd fcf8 	bl	8001174 <__aeabi_ddiv>
 8003784:	2200      	movs	r2, #0
 8003786:	4ba2      	ldr	r3, [pc, #648]	; (8003a10 <SX1276SetRxConfig+0x334>)
 8003788:	f7fe f8fa 	bl	8001980 <__aeabi_dmul>
 800378c:	9002      	str	r0, [sp, #8]
 800378e:	9103      	str	r1, [sp, #12]
 8003790:	9805      	ldr	r0, [sp, #20]
 8003792:	f7fe ff29 	bl	80025e8 <__aeabi_i2d>
 8003796:	9a02      	ldr	r2, [sp, #8]
 8003798:	9b03      	ldr	r3, [sp, #12]
 800379a:	f7fe f8f1 	bl	8001980 <__aeabi_dmul>
 800379e:	2200      	movs	r2, #0
 80037a0:	4b9c      	ldr	r3, [pc, #624]	; (8003a14 <SX1276SetRxConfig+0x338>)
 80037a2:	f7fe f8ed 	bl	8001980 <__aeabi_dmul>
 80037a6:	f7fc fe8d 	bl	80004c4 <__aeabi_d2uiz>
 80037aa:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80037ac:	0032      	movs	r2, r6
 80037ae:	003b      	movs	r3, r7
 80037b0:	2000      	movs	r0, #0
 80037b2:	4999      	ldr	r1, [pc, #612]	; (8003a18 <SX1276SetRxConfig+0x33c>)
 80037b4:	f7fd fcde 	bl	8001174 <__aeabi_ddiv>
 80037b8:	f7fc fe84 	bl	80004c4 <__aeabi_d2uiz>
 80037bc:	b286      	uxth	r6, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80037be:	0a31      	lsrs	r1, r6, #8
 80037c0:	2002      	movs	r0, #2
 80037c2:	f7ff fa8a 	bl	8002cda <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80037c6:	b2f1      	uxtb	r1, r6
 80037c8:	2003      	movs	r0, #3
 80037ca:	f7ff fa86 	bl	8002cda <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80037ce:	9801      	ldr	r0, [sp, #4]
 80037d0:	f7ff fa06 	bl	8002be0 <GetFskBandwidthRegValue>
 80037d4:	0001      	movs	r1, r0
 80037d6:	2012      	movs	r0, #18
 80037d8:	f7ff fa7f 	bl	8002cda <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80037dc:	9804      	ldr	r0, [sp, #16]
 80037de:	f7ff f9ff 	bl	8002be0 <GetFskBandwidthRegValue>
 80037e2:	0001      	movs	r1, r0
 80037e4:	2013      	movs	r0, #19
 80037e6:	f7ff fa78 	bl	8002cda <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80037ea:	0a29      	lsrs	r1, r5, #8
 80037ec:	2025      	movs	r0, #37	; 0x25
 80037ee:	f7ff fa74 	bl	8002cda <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80037f2:	b2e9      	uxtb	r1, r5
 80037f4:	2026      	movs	r0, #38	; 0x26
 80037f6:	f7ff fa70 	bl	8002cda <SX1276Write>
            if( fixLen == 1 )
 80037fa:	4653      	mov	r3, sl
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01f      	beq.n	8003840 <SX1276SetRxConfig+0x164>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003800:	4659      	mov	r1, fp
 8003802:	2032      	movs	r0, #50	; 0x32
 8003804:	f7ff fa69 	bl	8002cda <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003808:	2030      	movs	r0, #48	; 0x30
 800380a:	f7ff fabc 	bl	8002d86 <SX1276Read>
 800380e:	b240      	sxtb	r0, r0
                           RF_PACKETCONFIG1_CRC_MASK &
 8003810:	216f      	movs	r1, #111	; 0x6f
 8003812:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003814:	4653      	mov	r3, sl
 8003816:	2b00      	cmp	r3, #0
 8003818:	d017      	beq.n	800384a <SX1276SetRxConfig+0x16e>
 800381a:	2300      	movs	r3, #0
 800381c:	4319      	orrs	r1, r3
                           ( crcOn << 4 ) );
 800381e:	4643      	mov	r3, r8
 8003820:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003822:	4319      	orrs	r1, r3
            SX1276Write( REG_PACKETCONFIG1,
 8003824:	b2c9      	uxtb	r1, r1
 8003826:	2030      	movs	r0, #48	; 0x30
 8003828:	f7ff fa57 	bl	8002cda <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800382c:	2031      	movs	r0, #49	; 0x31
 800382e:	f7ff faaa 	bl	8002d86 <SX1276Read>
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	4301      	orrs	r1, r0
 8003836:	b2c9      	uxtb	r1, r1
 8003838:	2031      	movs	r0, #49	; 0x31
 800383a:	f7ff fa4e 	bl	8002cda <SX1276Write>
        break;
 800383e:	e77a      	b.n	8003736 <SX1276SetRxConfig+0x5a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003840:	21ff      	movs	r1, #255	; 0xff
 8003842:	2032      	movs	r0, #50	; 0x32
 8003844:	f7ff fa49 	bl	8002cda <SX1276Write>
 8003848:	e7de      	b.n	8003808 <SX1276SetRxConfig+0x12c>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	425b      	negs	r3, r3
 800384e:	e7e5      	b.n	800381c <SX1276SetRxConfig+0x140>
            if( bandwidth > 2 )
 8003850:	9b01      	ldr	r3, [sp, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d900      	bls.n	8003858 <SX1276SetRxConfig+0x17c>
                while( 1 );
 8003856:	e7fe      	b.n	8003856 <SX1276SetRxConfig+0x17a>
            bandwidth += 7;
 8003858:	9c01      	ldr	r4, [sp, #4]
 800385a:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 800385e:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8003860:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8003862:	224d      	movs	r2, #77	; 0x4d
 8003864:	9902      	ldr	r1, [sp, #8]
 8003866:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003868:	3201      	adds	r2, #1
 800386a:	529d      	strh	r5, [r3, r2]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800386c:	3202      	adds	r2, #2
 800386e:	4651      	mov	r1, sl
 8003870:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8003872:	3201      	adds	r2, #1
 8003874:	4659      	mov	r1, fp
 8003876:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003878:	3201      	adds	r2, #1
 800387a:	4641      	mov	r1, r8
 800387c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800387e:	3201      	adds	r2, #1
 8003880:	9907      	ldr	r1, [sp, #28]
 8003882:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003884:	3201      	adds	r2, #1
 8003886:	4649      	mov	r1, r9
 8003888:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800388a:	3201      	adds	r2, #1
 800388c:	9906      	ldr	r1, [sp, #24]
 800388e:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003890:	3201      	adds	r2, #1
 8003892:	549f      	strb	r7, [r3, r2]
            if( datarate > 12 )
 8003894:	2e0c      	cmp	r6, #12
 8003896:	d803      	bhi.n	80038a0 <SX1276SetRxConfig+0x1c4>
            else if( datarate < 6 )
 8003898:	2e05      	cmp	r6, #5
 800389a:	d802      	bhi.n	80038a2 <SX1276SetRxConfig+0x1c6>
                datarate = 6;
 800389c:	2606      	movs	r6, #6
 800389e:	e000      	b.n	80038a2 <SX1276SetRxConfig+0x1c6>
                datarate = 12;
 80038a0:	260c      	movs	r6, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80038a2:	2c07      	cmp	r4, #7
 80038a4:	d065      	beq.n	8003972 <SX1276SetRxConfig+0x296>
 80038a6:	2c08      	cmp	r4, #8
 80038a8:	d06c      	beq.n	8003984 <SX1276SetRxConfig+0x2a8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80038aa:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 80038ac:	234c      	movs	r3, #76	; 0x4c
 80038ae:	2100      	movs	r1, #0
 80038b0:	54d1      	strb	r1, [r2, r3]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80038b2:	201d      	movs	r0, #29
 80038b4:	f7ff fa67 	bl	8002d86 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80038b8:	0121      	lsls	r1, r4, #4
 80038ba:	b2c9      	uxtb	r1, r1
 80038bc:	9b02      	ldr	r3, [sp, #8]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4319      	orrs	r1, r3
 80038c4:	4653      	mov	r3, sl
 80038c6:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80038c8:	201d      	movs	r0, #29
 80038ca:	f7ff fa06 	bl	8002cda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80038ce:	201e      	movs	r0, #30
 80038d0:	f7ff fa59 	bl	8002d86 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80038d4:	2108      	movs	r1, #8
 80038d6:	4001      	ands	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80038d8:	0133      	lsls	r3, r6, #4
 80038da:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80038dc:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80038de:	4643      	mov	r3, r8
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4319      	orrs	r1, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80038e6:	9f05      	ldr	r7, [sp, #20]
 80038e8:	0a3a      	lsrs	r2, r7, #8
 80038ea:	2303      	movs	r3, #3
 80038ec:	4013      	ands	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80038ee:	4319      	orrs	r1, r3
 80038f0:	201e      	movs	r0, #30
 80038f2:	f7ff f9f2 	bl	8002cda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80038f6:	2026      	movs	r0, #38	; 0x26
 80038f8:	f7ff fa45 	bl	8002d86 <SX1276Read>
 80038fc:	b241      	sxtb	r1, r0
 80038fe:	2308      	movs	r3, #8
 8003900:	4399      	bics	r1, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003902:	4a41      	ldr	r2, [pc, #260]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 8003904:	3344      	adds	r3, #68	; 0x44
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800390a:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800390c:	b2c9      	uxtb	r1, r1
 800390e:	2026      	movs	r0, #38	; 0x26
 8003910:	f7ff f9e3 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003914:	b2f9      	uxtb	r1, r7
 8003916:	201f      	movs	r0, #31
 8003918:	f7ff f9df 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800391c:	0a29      	lsrs	r1, r5, #8
 800391e:	2020      	movs	r0, #32
 8003920:	f7ff f9db 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003924:	b2e9      	uxtb	r1, r5
 8003926:	2021      	movs	r0, #33	; 0x21
 8003928:	f7ff f9d7 	bl	8002cda <SX1276Write>
            if( fixLen == 1 )
 800392c:	4653      	mov	r3, sl
 800392e:	2b00      	cmp	r3, #0
 8003930:	d12b      	bne.n	800398a <SX1276SetRxConfig+0x2ae>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003932:	4a35      	ldr	r2, [pc, #212]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 8003934:	2353      	movs	r3, #83	; 0x53
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d12b      	bne.n	8003994 <SX1276SetRxConfig+0x2b8>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800393c:	2c09      	cmp	r4, #9
 800393e:	d03a      	beq.n	80039b6 <SX1276SetRxConfig+0x2da>
            else if( bandwidth == 9 )
 8003940:	2c09      	cmp	r4, #9
 8003942:	d046      	beq.n	80039d2 <SX1276SetRxConfig+0x2f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8003944:	2103      	movs	r1, #3
 8003946:	2036      	movs	r0, #54	; 0x36
 8003948:	f7ff f9c7 	bl	8002cda <SX1276Write>
            if( datarate == 6 )
 800394c:	2e06      	cmp	r6, #6
 800394e:	d049      	beq.n	80039e4 <SX1276SetRxConfig+0x308>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003950:	2031      	movs	r0, #49	; 0x31
 8003952:	f7ff fa18 	bl	8002d86 <SX1276Read>
 8003956:	b241      	sxtb	r1, r0
 8003958:	2307      	movs	r3, #7
 800395a:	4399      	bics	r1, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800395c:	2303      	movs	r3, #3
 800395e:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	2031      	movs	r0, #49	; 0x31
 8003964:	f7ff f9b9 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003968:	210a      	movs	r1, #10
 800396a:	2037      	movs	r0, #55	; 0x37
 800396c:	f7ff f9b5 	bl	8002cda <SX1276Write>
}
 8003970:	e6e1      	b.n	8003736 <SX1276SetRxConfig+0x5a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003972:	0033      	movs	r3, r6
 8003974:	3b0b      	subs	r3, #11
 8003976:	2b01      	cmp	r3, #1
 8003978:	d895      	bhi.n	80038a6 <SX1276SetRxConfig+0x1ca>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800397a:	4a23      	ldr	r2, [pc, #140]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 800397c:	234c      	movs	r3, #76	; 0x4c
 800397e:	2101      	movs	r1, #1
 8003980:	54d1      	strb	r1, [r2, r3]
 8003982:	e796      	b.n	80038b2 <SX1276SetRxConfig+0x1d6>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003984:	2e0c      	cmp	r6, #12
 8003986:	d190      	bne.n	80038aa <SX1276SetRxConfig+0x1ce>
 8003988:	e7f7      	b.n	800397a <SX1276SetRxConfig+0x29e>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800398a:	4659      	mov	r1, fp
 800398c:	2022      	movs	r0, #34	; 0x22
 800398e:	f7ff f9a4 	bl	8002cda <SX1276Write>
 8003992:	e7ce      	b.n	8003932 <SX1276SetRxConfig+0x256>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003994:	2044      	movs	r0, #68	; 0x44
 8003996:	f7ff f9f6 	bl	8002d86 <SX1276Read>
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	425b      	negs	r3, r3
 800399e:	4303      	orrs	r3, r0
 80039a0:	b2d9      	uxtb	r1, r3
 80039a2:	2044      	movs	r0, #68	; 0x44
 80039a4:	f7ff f999 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 80039aa:	2354      	movs	r3, #84	; 0x54
 80039ac:	5cd1      	ldrb	r1, [r2, r3]
 80039ae:	2024      	movs	r0, #36	; 0x24
 80039b0:	f7ff f993 	bl	8002cda <SX1276Write>
 80039b4:	e7c2      	b.n	800393c <SX1276SetRxConfig+0x260>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <SX1276SetRxConfig+0x32c>)
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <SX1276SetRxConfig+0x340>)
 80039bc:	429a      	cmp	r2, r3
 80039be:	d9bf      	bls.n	8003940 <SX1276SetRxConfig+0x264>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80039c0:	2102      	movs	r1, #2
 80039c2:	2036      	movs	r0, #54	; 0x36
 80039c4:	f7ff f989 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80039c8:	2164      	movs	r1, #100	; 0x64
 80039ca:	203a      	movs	r0, #58	; 0x3a
 80039cc:	f7ff f985 	bl	8002cda <SX1276Write>
 80039d0:	e7bc      	b.n	800394c <SX1276SetRxConfig+0x270>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80039d2:	2102      	movs	r1, #2
 80039d4:	2036      	movs	r0, #54	; 0x36
 80039d6:	f7ff f980 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80039da:	217f      	movs	r1, #127	; 0x7f
 80039dc:	203a      	movs	r0, #58	; 0x3a
 80039de:	f7ff f97c 	bl	8002cda <SX1276Write>
 80039e2:	e7b3      	b.n	800394c <SX1276SetRxConfig+0x270>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80039e4:	2031      	movs	r0, #49	; 0x31
 80039e6:	f7ff f9ce 	bl	8002d86 <SX1276Read>
 80039ea:	b241      	sxtb	r1, r0
 80039ec:	2307      	movs	r3, #7
 80039ee:	4399      	bics	r1, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80039f0:	2305      	movs	r3, #5
 80039f2:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80039f4:	b2c9      	uxtb	r1, r1
 80039f6:	2031      	movs	r0, #49	; 0x31
 80039f8:	f7ff f96f 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80039fc:	210c      	movs	r1, #12
 80039fe:	2037      	movs	r0, #55	; 0x37
 8003a00:	f7ff f96b 	bl	8002cda <SX1276Write>
 8003a04:	e697      	b.n	8003736 <SX1276SetRxConfig+0x5a>
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	20001544 	.word	0x20001544
 8003a0c:	3ff00000 	.word	0x3ff00000
 8003a10:	40200000 	.word	0x40200000
 8003a14:	408f4000 	.word	0x408f4000
 8003a18:	417e8480 	.word	0x417e8480
 8003a1c:	1f4add40 	.word	0x1f4add40

08003a20 <SX1276SetTxConfig>:
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	46de      	mov	lr, fp
 8003a24:	4657      	mov	r7, sl
 8003a26:	464e      	mov	r6, r9
 8003a28:	4645      	mov	r5, r8
 8003a2a:	b5e0      	push	{r5, r6, r7, lr}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	9100      	str	r1, [sp, #0]
 8003a30:	9202      	str	r2, [sp, #8]
 8003a32:	001c      	movs	r4, r3
 8003a34:	ab0e      	add	r3, sp, #56	; 0x38
 8003a36:	cb20      	ldmia	r3!, {r5}
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	ab10      	add	r3, sp, #64	; 0x40
 8003a3e:	881e      	ldrh	r6, [r3, #0]
 8003a40:	ab11      	add	r3, sp, #68	; 0x44
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	4691      	mov	r9, r2
 8003a46:	ab12      	add	r3, sp, #72	; 0x48
 8003a48:	781f      	ldrb	r7, [r3, #0]
 8003a4a:	ab13      	add	r3, sp, #76	; 0x4c
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	4692      	mov	sl, r2
 8003a50:	ab14      	add	r3, sp, #80	; 0x50
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	9203      	str	r2, [sp, #12]
 8003a56:	ab15      	add	r3, sp, #84	; 0x54
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	4693      	mov	fp, r2
    SX1276SetModem( modem );
 8003a5c:	9001      	str	r0, [sp, #4]
 8003a5e:	f7ff fd63 	bl	8003528 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8003a62:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <SX1276SetTxConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	9800      	ldr	r0, [sp, #0]
 8003a6a:	4798      	blx	r3
    switch( modem )
 8003a6c:	9b01      	ldr	r3, [sp, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <SX1276SetTxConfig+0x64>
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d063      	beq.n	8003b3e <SX1276SetTxConfig+0x11e>
}
 8003a76:	b005      	add	sp, #20
 8003a78:	bcf0      	pop	{r4, r5, r6, r7}
 8003a7a:	46bb      	mov	fp, r7
 8003a7c:	46b2      	mov	sl, r6
 8003a7e:	46a9      	mov	r9, r5
 8003a80:	46a0      	mov	r8, r4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
 8003a84:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003a86:	9a00      	ldr	r2, [sp, #0]
 8003a88:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8003a8a:	9802      	ldr	r0, [sp, #8]
 8003a8c:	6118      	str	r0, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003a8e:	615c      	str	r4, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8003a90:	61dd      	str	r5, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003a92:	841e      	strh	r6, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003a94:	2222      	movs	r2, #34	; 0x22
 8003a96:	4649      	mov	r1, r9
 8003a98:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003a9a:	3202      	adds	r2, #2
 8003a9c:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003a9e:	3201      	adds	r2, #1
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003aa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8003aa8:	f7fe fdce 	bl	8002648 <__aeabi_ui2d>
 8003aac:	2200      	movs	r2, #0
 8003aae:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <SX1276SetTxConfig+0x274>)
 8003ab0:	f7fd fb60 	bl	8001174 <__aeabi_ddiv>
 8003ab4:	f7fc fd06 	bl	80004c4 <__aeabi_d2uiz>
 8003ab8:	b284      	uxth	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8003aba:	0a21      	lsrs	r1, r4, #8
 8003abc:	2004      	movs	r0, #4
 8003abe:	f7ff f90c 	bl	8002cda <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003ac2:	b2e1      	uxtb	r1, r4
 8003ac4:	2005      	movs	r0, #5
 8003ac6:	f7ff f908 	bl	8002cda <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003aca:	0028      	movs	r0, r5
 8003acc:	f7fe fdbc 	bl	8002648 <__aeabi_ui2d>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	000b      	movs	r3, r1
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	4970      	ldr	r1, [pc, #448]	; (8003c98 <SX1276SetTxConfig+0x278>)
 8003ad8:	f7fd fb4c 	bl	8001174 <__aeabi_ddiv>
 8003adc:	f7fc fcf2 	bl	80004c4 <__aeabi_d2uiz>
 8003ae0:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003ae2:	0a21      	lsrs	r1, r4, #8
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f7ff f8f8 	bl	8002cda <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003aea:	b2e1      	uxtb	r1, r4
 8003aec:	2003      	movs	r0, #3
 8003aee:	f7ff f8f4 	bl	8002cda <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003af2:	0a31      	lsrs	r1, r6, #8
 8003af4:	2025      	movs	r0, #37	; 0x25
 8003af6:	f7ff f8f0 	bl	8002cda <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8003afa:	b2f1      	uxtb	r1, r6
 8003afc:	2026      	movs	r0, #38	; 0x26
 8003afe:	f7ff f8ec 	bl	8002cda <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003b02:	2030      	movs	r0, #48	; 0x30
 8003b04:	f7ff f93f 	bl	8002d86 <SX1276Read>
 8003b08:	b240      	sxtb	r0, r0
                           RF_PACKETCONFIG1_CRC_MASK &
 8003b0a:	216f      	movs	r1, #111	; 0x6f
 8003b0c:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003b0e:	464b      	mov	r3, r9
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <SX1276SetTxConfig+0x118>
 8003b14:	2300      	movs	r3, #0
 8003b16:	4319      	orrs	r1, r3
                           ( crcOn << 4 ) );
 8003b18:	013f      	lsls	r7, r7, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003b1a:	4339      	orrs	r1, r7
            SX1276Write( REG_PACKETCONFIG1,
 8003b1c:	b2c9      	uxtb	r1, r1
 8003b1e:	2030      	movs	r0, #48	; 0x30
 8003b20:	f7ff f8db 	bl	8002cda <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003b24:	2031      	movs	r0, #49	; 0x31
 8003b26:	f7ff f92e 	bl	8002d86 <SX1276Read>
 8003b2a:	2140      	movs	r1, #64	; 0x40
 8003b2c:	4301      	orrs	r1, r0
 8003b2e:	b2c9      	uxtb	r1, r1
 8003b30:	2031      	movs	r0, #49	; 0x31
 8003b32:	f7ff f8d2 	bl	8002cda <SX1276Write>
        break;
 8003b36:	e79e      	b.n	8003a76 <SX1276SetTxConfig+0x56>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	425b      	negs	r3, r3
 8003b3c:	e7eb      	b.n	8003b16 <SX1276SetTxConfig+0xf6>
            SX1276.Settings.LoRa.Power = power;
 8003b3e:	4a54      	ldr	r2, [pc, #336]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003b40:	2340      	movs	r3, #64	; 0x40
 8003b42:	9900      	ldr	r1, [sp, #0]
 8003b44:	54d1      	strb	r1, [r2, r3]
            if( bandwidth > 2 )
 8003b46:	2c02      	cmp	r4, #2
 8003b48:	d900      	bls.n	8003b4c <SX1276SetTxConfig+0x12c>
                while( 1 );
 8003b4a:	e7fe      	b.n	8003b4a <SX1276SetTxConfig+0x12a>
            bandwidth += 7;
 8003b4c:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003b4e:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003b50:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8003b52:	649d      	str	r5, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8003b54:	224d      	movs	r2, #77	; 0x4d
 8003b56:	4641      	mov	r1, r8
 8003b58:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003b5a:	3201      	adds	r2, #1
 8003b5c:	529e      	strh	r6, [r3, r2]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003b5e:	3202      	adds	r2, #2
 8003b60:	4649      	mov	r1, r9
 8003b62:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003b64:	3203      	adds	r2, #3
 8003b66:	4651      	mov	r1, sl
 8003b68:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003b6a:	3201      	adds	r2, #1
 8003b6c:	9903      	ldr	r1, [sp, #12]
 8003b6e:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003b70:	3a02      	subs	r2, #2
 8003b72:	549f      	strb	r7, [r3, r2]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003b74:	3203      	adds	r2, #3
 8003b76:	4659      	mov	r1, fp
 8003b78:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8003b7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b7c:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8003b7e:	2d0c      	cmp	r5, #12
 8003b80:	d803      	bhi.n	8003b8a <SX1276SetTxConfig+0x16a>
            else if( datarate < 6 )
 8003b82:	2d05      	cmp	r5, #5
 8003b84:	d802      	bhi.n	8003b8c <SX1276SetTxConfig+0x16c>
                datarate = 6;
 8003b86:	2506      	movs	r5, #6
 8003b88:	e000      	b.n	8003b8c <SX1276SetTxConfig+0x16c>
                datarate = 12;
 8003b8a:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003b8c:	2c07      	cmp	r4, #7
 8003b8e:	d04e      	beq.n	8003c2e <SX1276SetTxConfig+0x20e>
 8003b90:	2c08      	cmp	r4, #8
 8003b92:	d055      	beq.n	8003c40 <SX1276SetTxConfig+0x220>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003b94:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003b96:	234c      	movs	r3, #76	; 0x4c
 8003b98:	2100      	movs	r1, #0
 8003b9a:	54d1      	strb	r1, [r2, r3]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003b9c:	4653      	mov	r3, sl
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d151      	bne.n	8003c46 <SX1276SetTxConfig+0x226>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003ba2:	201d      	movs	r0, #29
 8003ba4:	f7ff f8ef 	bl	8002d86 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003ba8:	0121      	lsls	r1, r4, #4
 8003baa:	b2c9      	uxtb	r1, r1
 8003bac:	4643      	mov	r3, r8
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	4319      	orrs	r1, r3
 8003bb4:	464b      	mov	r3, r9
 8003bb6:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003bb8:	201d      	movs	r0, #29
 8003bba:	f7ff f88e 	bl	8002cda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003bbe:	201e      	movs	r0, #30
 8003bc0:	f7ff f8e1 	bl	8002d86 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003bc4:	230b      	movs	r3, #11
 8003bc6:	4003      	ands	r3, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8003bc8:	0129      	lsls	r1, r5, #4
 8003bca:	b2c9      	uxtb	r1, r1
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8003bcc:	430b      	orrs	r3, r1
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8003bce:	00bf      	lsls	r7, r7, #2
 8003bd0:	b2f9      	uxtb	r1, r7
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003bd2:	4319      	orrs	r1, r3
 8003bd4:	201e      	movs	r0, #30
 8003bd6:	f7ff f880 	bl	8002cda <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003bda:	2026      	movs	r0, #38	; 0x26
 8003bdc:	f7ff f8d3 	bl	8002d86 <SX1276Read>
 8003be0:	b241      	sxtb	r1, r0
 8003be2:	2308      	movs	r3, #8
 8003be4:	4399      	bics	r1, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003be6:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003be8:	3344      	adds	r3, #68	; 0x44
 8003bea:	5cd3      	ldrb	r3, [r2, r3]
 8003bec:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003bee:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003bf0:	b2c9      	uxtb	r1, r1
 8003bf2:	2026      	movs	r0, #38	; 0x26
 8003bf4:	f7ff f871 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003bf8:	0a31      	lsrs	r1, r6, #8
 8003bfa:	2020      	movs	r0, #32
 8003bfc:	f7ff f86d 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8003c00:	b2f1      	uxtb	r1, r6
 8003c02:	2021      	movs	r0, #33	; 0x21
 8003c04:	f7ff f869 	bl	8002cda <SX1276Write>
            if( datarate == 6 )
 8003c08:	2d06      	cmp	r5, #6
 8003c0a:	d02d      	beq.n	8003c68 <SX1276SetTxConfig+0x248>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003c0c:	2031      	movs	r0, #49	; 0x31
 8003c0e:	f7ff f8ba 	bl	8002d86 <SX1276Read>
 8003c12:	b241      	sxtb	r1, r0
 8003c14:	2307      	movs	r3, #7
 8003c16:	4399      	bics	r1, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003c18:	2303      	movs	r3, #3
 8003c1a:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003c1c:	b2c9      	uxtb	r1, r1
 8003c1e:	2031      	movs	r0, #49	; 0x31
 8003c20:	f7ff f85b 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003c24:	210a      	movs	r1, #10
 8003c26:	2037      	movs	r0, #55	; 0x37
 8003c28:	f7ff f857 	bl	8002cda <SX1276Write>
}
 8003c2c:	e723      	b.n	8003a76 <SX1276SetTxConfig+0x56>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003c2e:	002b      	movs	r3, r5
 8003c30:	3b0b      	subs	r3, #11
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d8ac      	bhi.n	8003b90 <SX1276SetTxConfig+0x170>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003c38:	234c      	movs	r3, #76	; 0x4c
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	54d1      	strb	r1, [r2, r3]
 8003c3e:	e7ad      	b.n	8003b9c <SX1276SetTxConfig+0x17c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003c40:	2d0c      	cmp	r5, #12
 8003c42:	d1a7      	bne.n	8003b94 <SX1276SetTxConfig+0x174>
 8003c44:	e7f7      	b.n	8003c36 <SX1276SetTxConfig+0x216>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003c46:	2044      	movs	r0, #68	; 0x44
 8003c48:	f7ff f89d 	bl	8002d86 <SX1276Read>
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	425b      	negs	r3, r3
 8003c50:	4303      	orrs	r3, r0
 8003c52:	b2d9      	uxtb	r1, r3
 8003c54:	2044      	movs	r0, #68	; 0x44
 8003c56:	f7ff f840 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003c5a:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <SX1276SetTxConfig+0x270>)
 8003c5c:	2354      	movs	r3, #84	; 0x54
 8003c5e:	5cd1      	ldrb	r1, [r2, r3]
 8003c60:	2024      	movs	r0, #36	; 0x24
 8003c62:	f7ff f83a 	bl	8002cda <SX1276Write>
 8003c66:	e79c      	b.n	8003ba2 <SX1276SetTxConfig+0x182>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003c68:	2031      	movs	r0, #49	; 0x31
 8003c6a:	f7ff f88c 	bl	8002d86 <SX1276Read>
 8003c6e:	b241      	sxtb	r1, r0
 8003c70:	2307      	movs	r3, #7
 8003c72:	4399      	bics	r1, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003c74:	2305      	movs	r3, #5
 8003c76:	4319      	orrs	r1, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003c78:	b2c9      	uxtb	r1, r1
 8003c7a:	2031      	movs	r0, #49	; 0x31
 8003c7c:	f7ff f82d 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003c80:	210c      	movs	r1, #12
 8003c82:	2037      	movs	r0, #55	; 0x37
 8003c84:	f7ff f829 	bl	8002cda <SX1276Write>
 8003c88:	e6f5      	b.n	8003a76 <SX1276SetTxConfig+0x56>
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	2000020c 	.word	0x2000020c
 8003c90:	20001544 	.word	0x20001544
 8003c94:	404e8480 	.word	0x404e8480
 8003c98:	417e8480 	.word	0x417e8480

08003c9c <SX1276SetTxContinuousWave>:
{
 8003c9c:	b530      	push	{r4, r5, lr}
 8003c9e:	b08b      	sub	sp, #44	; 0x2c
 8003ca0:	000d      	movs	r5, r1
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8003ca2:	0154      	lsls	r4, r2, #5
 8003ca4:	1aa4      	subs	r4, r4, r2
 8003ca6:	00a4      	lsls	r4, r4, #2
 8003ca8:	18a4      	adds	r4, r4, r2
 8003caa:	00e4      	lsls	r4, r4, #3
    SX1276SetChannel( freq );
 8003cac:	f7ff f820 	bl	8002cf0 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003cb0:	9408      	str	r4, [sp, #32]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9307      	str	r3, [sp, #28]
 8003cb6:	9306      	str	r3, [sp, #24]
 8003cb8:	9305      	str	r3, [sp, #20]
 8003cba:	9304      	str	r3, [sp, #16]
 8003cbc:	9303      	str	r3, [sp, #12]
 8003cbe:	2205      	movs	r2, #5
 8003cc0:	9202      	str	r2, [sp, #8]
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	2396      	movs	r3, #150	; 0x96
 8003cc6:	015b      	lsls	r3, r3, #5
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2200      	movs	r2, #0
 8003cce:	0029      	movs	r1, r5
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7ff fea5 	bl	8003a20 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003cd6:	2031      	movs	r0, #49	; 0x31
 8003cd8:	f7ff f855 	bl	8002d86 <SX1276Read>
 8003cdc:	2340      	movs	r3, #64	; 0x40
 8003cde:	4398      	bics	r0, r3
 8003ce0:	b2c1      	uxtb	r1, r0
 8003ce2:	2031      	movs	r0, #49	; 0x31
 8003ce4:	f7fe fff9 	bl	8002cda <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003ce8:	21f0      	movs	r1, #240	; 0xf0
 8003cea:	2040      	movs	r0, #64	; 0x40
 8003cec:	f7fe fff5 	bl	8002cda <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003cf0:	21a0      	movs	r1, #160	; 0xa0
 8003cf2:	2041      	movs	r0, #65	; 0x41
 8003cf4:	f7fe fff1 	bl	8002cda <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003cf8:	4d07      	ldr	r5, [pc, #28]	; (8003d18 <SX1276SetTxContinuousWave+0x7c>)
 8003cfa:	0021      	movs	r1, r4
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f00a ff47 	bl	800eb90 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <SX1276SetTxContinuousWave+0x80>)
 8003d04:	2202      	movs	r2, #2
 8003d06:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003d08:	0028      	movs	r0, r5
 8003d0a:	f00a fe7f 	bl	800ea0c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003d0e:	2003      	movs	r0, #3
 8003d10:	f7ff f9d2 	bl	80030b8 <SX1276SetOpMode>
}
 8003d14:	b00b      	add	sp, #44	; 0x2c
 8003d16:	bd30      	pop	{r4, r5, pc}
 8003d18:	20001514 	.word	0x20001514
 8003d1c:	20001544 	.word	0x20001544

08003d20 <SX1276OnDio2Irq>:
{
 8003d20:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003d22:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003d24:	791b      	ldrb	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <SX1276OnDio2Irq+0x10>
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d054      	beq.n	8003dd8 <SX1276OnDio2Irq+0xb8>
}
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003d32:	795b      	ldrb	r3, [r3, #5]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d018      	beq.n	8003d6a <SX1276OnDio2Irq+0x4a>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d1f8      	bne.n	8003d2e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003d3c:	4a34      	ldr	r2, [pc, #208]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003d3e:	2353      	movs	r3, #83	; 0x53
 8003d40:	5cd3      	ldrb	r3, [r2, r3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f3      	beq.n	8003d2e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003d46:	2102      	movs	r1, #2
 8003d48:	2012      	movs	r0, #18
 8003d4a:	f7fe ffc6 	bl	8002cda <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <SX1276OnDio2Irq+0xf4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0eb      	beq.n	8003d2e <SX1276OnDio2Irq+0xe>
 8003d56:	695c      	ldr	r4, [r3, #20]
 8003d58:	2c00      	cmp	r4, #0
 8003d5a:	d0e8      	beq.n	8003d2e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003d5c:	201c      	movs	r0, #28
 8003d5e:	f7ff f812 	bl	8002d86 <SX1276Read>
 8003d62:	233f      	movs	r3, #63	; 0x3f
 8003d64:	4018      	ands	r0, r3
 8003d66:	47a0      	blx	r4
 8003d68:	e7e1      	b.n	8003d2e <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003d6c:	2230      	movs	r2, #48	; 0x30
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003d72:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d1da      	bne.n	8003d2e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003d78:	4827      	ldr	r0, [pc, #156]	; (8003e18 <SX1276OnDio2Irq+0xf8>)
 8003d7a:	f00a fec7 	bl	800eb0c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003d7e:	4c24      	ldr	r4, [pc, #144]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003d80:	2331      	movs	r3, #49	; 0x31
 8003d82:	2201      	movs	r2, #1
 8003d84:	54e2      	strb	r2, [r4, r3]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003d86:	2011      	movs	r0, #17
 8003d88:	f7fe fffd 	bl	8002d86 <SX1276Read>
 8003d8c:	0840      	lsrs	r0, r0, #1
 8003d8e:	4240      	negs	r0, r0
 8003d90:	2232      	movs	r2, #50	; 0x32
 8003d92:	54a0      	strb	r0, [r4, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003d94:	201b      	movs	r0, #27
 8003d96:	f7fe fff6 	bl	8002d86 <SX1276Read>
 8003d9a:	0205      	lsls	r5, r0, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003d9c:	201c      	movs	r0, #28
 8003d9e:	f7fe fff2 	bl	8002d86 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003da2:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003da4:	0a01      	lsrs	r1, r0, #8
 8003da6:	014d      	lsls	r5, r1, #5
 8003da8:	1a6d      	subs	r5, r5, r1
 8003daa:	01ab      	lsls	r3, r5, #6
 8003dac:	1b5b      	subs	r3, r3, r5
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1859      	adds	r1, r3, r1
 8003db2:	25ff      	movs	r5, #255	; 0xff
 8003db4:	4005      	ands	r5, r0
 8003db6:	0168      	lsls	r0, r5, #5
 8003db8:	1b40      	subs	r0, r0, r5
 8003dba:	0183      	lsls	r3, r0, #6
 8003dbc:	1a1b      	subs	r3, r3, r0
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	195b      	adds	r3, r3, r5
 8003dc2:	3380      	adds	r3, #128	; 0x80
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	18cb      	adds	r3, r1, r3
 8003dc8:	6363      	str	r3, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003dca:	200c      	movs	r0, #12
 8003dcc:	f7fe ffdb 	bl	8002d86 <SX1276Read>
 8003dd0:	0940      	lsrs	r0, r0, #5
 8003dd2:	2338      	movs	r3, #56	; 0x38
 8003dd4:	54e0      	strb	r0, [r4, r3]
 8003dd6:	e7aa      	b.n	8003d2e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003dda:	795b      	ldrb	r3, [r3, #5]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d1a6      	bne.n	8003d2e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <SX1276OnDio2Irq+0xf0>)
 8003de2:	3352      	adds	r3, #82	; 0x52
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0a1      	beq.n	8003d2e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003dea:	2102      	movs	r1, #2
 8003dec:	2012      	movs	r0, #18
 8003dee:	f7fe ff74 	bl	8002cda <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <SX1276OnDio2Irq+0xf4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d099      	beq.n	8003d2e <SX1276OnDio2Irq+0xe>
 8003dfa:	695c      	ldr	r4, [r3, #20]
 8003dfc:	2c00      	cmp	r4, #0
 8003dfe:	d096      	beq.n	8003d2e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003e00:	201c      	movs	r0, #28
 8003e02:	f7fe ffc0 	bl	8002d86 <SX1276Read>
 8003e06:	233f      	movs	r3, #63	; 0x3f
 8003e08:	4018      	ands	r0, r3
 8003e0a:	47a0      	blx	r4
}
 8003e0c:	e78f      	b.n	8003d2e <SX1276OnDio2Irq+0xe>
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	20001544 	.word	0x20001544
 8003e14:	2000020c 	.word	0x2000020c
 8003e18:	2000152c 	.word	0x2000152c

08003e1c <SX1276OnDio3Irq>:
{
 8003e1c:	b510      	push	{r4, lr}
    switch( SX1276.Settings.Modem )
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <SX1276OnDio3Irq+0x50>)
 8003e20:	795b      	ldrb	r3, [r3, #5]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d000      	beq.n	8003e28 <SX1276OnDio3Irq+0xc>
}
 8003e26:	bd10      	pop	{r4, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003e28:	2012      	movs	r0, #18
 8003e2a:	f7fe ffac 	bl	8002d86 <SX1276Read>
 8003e2e:	07c3      	lsls	r3, r0, #31
 8003e30:	d50d      	bpl.n	8003e4e <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003e32:	2105      	movs	r1, #5
 8003e34:	2012      	movs	r0, #18
 8003e36:	f7fe ff50 	bl	8002cda <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <SX1276OnDio3Irq+0x54>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f1      	beq.n	8003e26 <SX1276OnDio3Irq+0xa>
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ee      	beq.n	8003e26 <SX1276OnDio3Irq+0xa>
                RadioEvents->CadDone( true );
 8003e48:	2001      	movs	r0, #1
 8003e4a:	4798      	blx	r3
 8003e4c:	e7eb      	b.n	8003e26 <SX1276OnDio3Irq+0xa>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003e4e:	2104      	movs	r1, #4
 8003e50:	2012      	movs	r0, #18
 8003e52:	f7fe ff42 	bl	8002cda <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <SX1276OnDio3Irq+0x54>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0e3      	beq.n	8003e26 <SX1276OnDio3Irq+0xa>
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0e0      	beq.n	8003e26 <SX1276OnDio3Irq+0xa>
                RadioEvents->CadDone( false );
 8003e64:	2000      	movs	r0, #0
 8003e66:	4798      	blx	r3
}
 8003e68:	e7dd      	b.n	8003e26 <SX1276OnDio3Irq+0xa>
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	20001544 	.word	0x20001544
 8003e70:	2000020c 	.word	0x2000020c

08003e74 <SX1276WriteFifo>:
{
 8003e74:	b510      	push	{r4, lr}
 8003e76:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8003e78:	0001      	movs	r1, r0
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7fe ff0c 	bl	8002c98 <SX1276WriteBuffer>
}
 8003e80:	bd10      	pop	{r4, pc}
	...

08003e84 <SX1276Send>:
{
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	0004      	movs	r4, r0
 8003e8a:	466b      	mov	r3, sp
 8003e8c:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <SX1276Send+0x114>)
 8003e90:	795b      	ldrb	r3, [r3, #5]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d006      	beq.n	8003ea4 <SX1276Send+0x20>
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d036      	beq.n	8003f08 <SX1276Send+0x84>
 8003e9a:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8003e9c:	f7ff fac2 	bl	8003424 <SX1276SetTx>
}
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <SX1276Send+0x114>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8003eaa:	466a      	mov	r2, sp
 8003eac:	79d1      	ldrb	r1, [r2, #7]
 8003eae:	8759      	strh	r1, [r3, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8003eb0:	2222      	movs	r2, #34	; 0x22
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d119      	bne.n	8003eec <SX1276Send+0x68>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003eb8:	2101      	movs	r1, #1
 8003eba:	466b      	mov	r3, sp
 8003ebc:	1dd8      	adds	r0, r3, #7
 8003ebe:	f7ff ffd9 	bl	8003e74 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8003ec2:	466b      	mov	r3, sp
 8003ec4:	79da      	ldrb	r2, [r3, #7]
 8003ec6:	1e53      	subs	r3, r2, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b3f      	cmp	r3, #63	; 0x3f
 8003ecc:	d812      	bhi.n	8003ef4 <SX1276Send+0x70>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8003ece:	4932      	ldr	r1, [pc, #200]	; (8003f98 <SX1276Send+0x114>)
 8003ed0:	233f      	movs	r3, #63	; 0x3f
 8003ed2:	54ca      	strb	r2, [r1, r3]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003ed4:	4d30      	ldr	r5, [pc, #192]	; (8003f98 <SX1276Send+0x114>)
 8003ed6:	263f      	movs	r6, #63	; 0x3f
 8003ed8:	5da9      	ldrb	r1, [r5, r6]
 8003eda:	0020      	movs	r0, r4
 8003edc:	f7ff ffca 	bl	8003e74 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003ee0:	5dab      	ldrb	r3, [r5, r6]
 8003ee2:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	87ab      	strh	r3, [r5, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8003ee8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
        break;
 8003eea:	e7d7      	b.n	8003e9c <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8003eec:	2032      	movs	r0, #50	; 0x32
 8003eee:	f7fe fef4 	bl	8002cda <SX1276Write>
 8003ef2:	e7e6      	b.n	8003ec2 <SX1276Send+0x3e>
                memcpy1( RxTxBuffer, buffer, size );
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	0021      	movs	r1, r4
 8003ef8:	4828      	ldr	r0, [pc, #160]	; (8003f9c <SX1276Send+0x118>)
 8003efa:	f00a ff14 	bl	800ed26 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003efe:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <SX1276Send+0x114>)
 8003f00:	233f      	movs	r3, #63	; 0x3f
 8003f02:	2120      	movs	r1, #32
 8003f04:	54d1      	strb	r1, [r2, r3]
 8003f06:	e7e5      	b.n	8003ed4 <SX1276Send+0x50>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <SX1276Send+0x114>)
 8003f0a:	2355      	movs	r3, #85	; 0x55
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02a      	beq.n	8003f68 <SX1276Send+0xe4>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003f12:	2033      	movs	r0, #51	; 0x33
 8003f14:	f7fe ff37 	bl	8002d86 <SX1276Read>
 8003f18:	2341      	movs	r3, #65	; 0x41
 8003f1a:	4398      	bics	r0, r3
 8003f1c:	b2c1      	uxtb	r1, r0
 8003f1e:	2033      	movs	r0, #51	; 0x33
 8003f20:	f7fe fedb 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003f24:	2119      	movs	r1, #25
 8003f26:	203b      	movs	r0, #59	; 0x3b
 8003f28:	f7fe fed7 	bl	8002cda <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003f2c:	466b      	mov	r3, sp
 8003f2e:	79d9      	ldrb	r1, [r3, #7]
 8003f30:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <SX1276Send+0x114>)
 8003f32:	2364      	movs	r3, #100	; 0x64
 8003f34:	54d1      	strb	r1, [r2, r3]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003f36:	2022      	movs	r0, #34	; 0x22
 8003f38:	f7fe fecf 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	200e      	movs	r0, #14
 8003f40:	f7fe fecb 	bl	8002cda <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003f44:	2100      	movs	r1, #0
 8003f46:	200d      	movs	r0, #13
 8003f48:	f7fe fec7 	bl	8002cda <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f7fe ff1a 	bl	8002d86 <SX1276Read>
 8003f52:	23f8      	movs	r3, #248	; 0xf8
 8003f54:	4398      	bics	r0, r3
 8003f56:	d018      	beq.n	8003f8a <SX1276Send+0x106>
            SX1276WriteFifo( buffer, size );
 8003f58:	466b      	mov	r3, sp
 8003f5a:	79d9      	ldrb	r1, [r3, #7]
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f7ff ff89 	bl	8003e74 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <SX1276Send+0x114>)
 8003f64:	6d98      	ldr	r0, [r3, #88]	; 0x58
        break;
 8003f66:	e799      	b.n	8003e9c <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003f68:	2033      	movs	r0, #51	; 0x33
 8003f6a:	f7fe ff0c 	bl	8002d86 <SX1276Read>
 8003f6e:	b241      	sxtb	r1, r0
 8003f70:	2341      	movs	r3, #65	; 0x41
 8003f72:	4399      	bics	r1, r3
 8003f74:	2001      	movs	r0, #1
 8003f76:	4301      	orrs	r1, r0
 8003f78:	b2c9      	uxtb	r1, r1
 8003f7a:	2033      	movs	r0, #51	; 0x33
 8003f7c:	f7fe fead 	bl	8002cda <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003f80:	211d      	movs	r1, #29
 8003f82:	203b      	movs	r0, #59	; 0x3b
 8003f84:	f7fe fea9 	bl	8002cda <SX1276Write>
 8003f88:	e7d0      	b.n	8003f2c <SX1276Send+0xa8>
                SX1276SetStby( );
 8003f8a:	f7ff f8e9 	bl	8003160 <SX1276SetStby>
                DelayMs( 1 );
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f00b fc5c 	bl	800f84c <HAL_Delay>
 8003f94:	e7e0      	b.n	8003f58 <SX1276Send+0xd4>
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	20001544 	.word	0x20001544
 8003f9c:	20000214 	.word	0x20000214

08003fa0 <SX1276ReadFifo>:
{
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8003fa4:	0001      	movs	r1, r0
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7fe fecc 	bl	8002d44 <SX1276ReadBuffer>
}
 8003fac:	bd10      	pop	{r4, pc}
	...

08003fb0 <SX1276OnDio0Irq>:
{
 8003fb0:	b530      	push	{r4, r5, lr}
 8003fb2:	b083      	sub	sp, #12
    volatile uint8_t irqFlags = 0;
 8003fb4:	466b      	mov	r3, sp
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	71da      	strb	r2, [r3, #7]
    switch( SX1276.Settings.State )
 8003fba:	4bac      	ldr	r3, [pc, #688]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8003fbc:	791b      	ldrb	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d004      	beq.n	8003fcc <SX1276OnDio0Irq+0x1c>
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d100      	bne.n	8003fc8 <SX1276OnDio0Irq+0x18>
 8003fc6:	e136      	b.n	8004236 <SX1276OnDio0Irq+0x286>
}
 8003fc8:	b003      	add	sp, #12
 8003fca:	bd30      	pop	{r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8003fcc:	4ba7      	ldr	r3, [pc, #668]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8003fce:	795b      	ldrb	r3, [r3, #5]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d027      	beq.n	8004024 <SX1276OnDio0Irq+0x74>
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d1f7      	bne.n	8003fc8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	2012      	movs	r0, #18
 8003fdc:	f7fe fe7d 	bl	8002cda <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003fe0:	2012      	movs	r0, #18
 8003fe2:	f7fe fed0 	bl	8002d86 <SX1276Read>
 8003fe6:	466b      	mov	r3, sp
 8003fe8:	71d8      	strb	r0, [r3, #7]
 8003fea:	3307      	adds	r3, #7
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	d400      	bmi.n	8003ff4 <SX1276OnDio0Irq+0x44>
 8003ff2:	e0b7      	b.n	8004164 <SX1276OnDio0Irq+0x1b4>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	2012      	movs	r0, #18
 8003ff8:	f7fe fe6f 	bl	8002cda <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8003ffc:	4a9b      	ldr	r2, [pc, #620]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8003ffe:	2356      	movs	r3, #86	; 0x56
 8004000:	5cd3      	ldrb	r3, [r2, r3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <SX1276OnDio0Irq+0x5c>
                            SX1276.Settings.State = RF_IDLE;
 8004006:	0013      	movs	r3, r2
 8004008:	2200      	movs	r2, #0
 800400a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 800400c:	4898      	ldr	r0, [pc, #608]	; (8004270 <SX1276OnDio0Irq+0x2c0>)
 800400e:	f00a fd7d 	bl	800eb0c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004012:	4b98      	ldr	r3, [pc, #608]	; (8004274 <SX1276OnDio0Irq+0x2c4>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0d6      	beq.n	8003fc8 <SX1276OnDio0Irq+0x18>
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0d3      	beq.n	8003fc8 <SX1276OnDio0Irq+0x18>
                            RadioEvents->RxError( );
 8004020:	4798      	blx	r3
 8004022:	e7d1      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8004024:	4a91      	ldr	r2, [pc, #580]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004026:	2324      	movs	r3, #36	; 0x24
 8004028:	5cd3      	ldrb	r3, [r2, r3]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11b      	bne.n	8004066 <SX1276OnDio0Irq+0xb6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800402e:	4b8f      	ldr	r3, [pc, #572]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004030:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8004032:	2900      	cmp	r1, #0
 8004034:	d15a      	bne.n	80040ec <SX1276OnDio0Irq+0x13c>
 8004036:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d157      	bne.n	80040ec <SX1276OnDio0Irq+0x13c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800403c:	4a8b      	ldr	r2, [pc, #556]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 800403e:	3322      	adds	r3, #34	; 0x22
 8004040:	5cd3      	ldrb	r3, [r2, r3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14c      	bne.n	80040e0 <SX1276OnDio0Irq+0x130>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004046:	3101      	adds	r1, #1
 8004048:	488b      	ldr	r0, [pc, #556]	; (8004278 <SX1276OnDio0Irq+0x2c8>)
 800404a:	f7ff ffa9 	bl	8003fa0 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800404e:	4c87      	ldr	r4, [pc, #540]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004050:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8004052:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8004054:	1a09      	subs	r1, r1, r0
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	4b88      	ldr	r3, [pc, #544]	; (800427c <SX1276OnDio0Irq+0x2cc>)
 800405a:	18c0      	adds	r0, r0, r3
 800405c:	f7ff ffa0 	bl	8003fa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004060:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004062:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8004064:	e04c      	b.n	8004100 <SX1276OnDio0Irq+0x150>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8004066:	203f      	movs	r0, #63	; 0x3f
 8004068:	f7fe fe8d 	bl	8002d86 <SX1276Read>
 800406c:	466b      	mov	r3, sp
 800406e:	71d8      	strb	r0, [r3, #7]
 8004070:	3307      	adds	r3, #7
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	079b      	lsls	r3, r3, #30
 8004076:	d4da      	bmi.n	800402e <SX1276OnDio0Irq+0x7e>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004078:	210b      	movs	r1, #11
 800407a:	203e      	movs	r0, #62	; 0x3e
 800407c:	f7fe fe2d 	bl	8002cda <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004080:	2110      	movs	r1, #16
 8004082:	203f      	movs	r0, #63	; 0x3f
 8004084:	f7fe fe29 	bl	8002cda <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8004088:	4879      	ldr	r0, [pc, #484]	; (8004270 <SX1276OnDio0Irq+0x2c0>)
 800408a:	f00a fd3f 	bl	800eb0c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800408e:	4a77      	ldr	r2, [pc, #476]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004090:	2326      	movs	r3, #38	; 0x26
 8004092:	5cd3      	ldrb	r3, [r2, r3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d116      	bne.n	80040c6 <SX1276OnDio0Irq+0x116>
                            TimerStop( &RxTimeoutSyncWord );
 8004098:	4879      	ldr	r0, [pc, #484]	; (8004280 <SX1276OnDio0Irq+0x2d0>)
 800409a:	f00a fd37 	bl	800eb0c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800409e:	4b73      	ldr	r3, [pc, #460]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	711a      	strb	r2, [r3, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80040a4:	4b73      	ldr	r3, [pc, #460]	; (8004274 <SX1276OnDio0Irq+0x2c4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <SX1276OnDio0Irq+0x104>
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d000      	beq.n	80040b4 <SX1276OnDio0Irq+0x104>
                            RadioEvents->RxError( );
 80040b2:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80040b4:	4b6d      	ldr	r3, [pc, #436]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	2130      	movs	r1, #48	; 0x30
 80040ba:	545a      	strb	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80040bc:	3101      	adds	r1, #1
 80040be:	545a      	strb	r2, [r3, r1]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80040c0:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80040c2:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 80040c4:	e780      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80040c6:	200d      	movs	r0, #13
 80040c8:	f7fe fe5d 	bl	8002d86 <SX1276Read>
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	4301      	orrs	r1, r0
 80040d0:	b2c9      	uxtb	r1, r1
 80040d2:	200d      	movs	r0, #13
 80040d4:	f7fe fe01 	bl	8002cda <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80040d8:	4869      	ldr	r0, [pc, #420]	; (8004280 <SX1276OnDio0Irq+0x2d0>)
 80040da:	f00a fc97 	bl	800ea0c <TimerStart>
 80040de:	e7e1      	b.n	80040a4 <SX1276OnDio0Irq+0xf4>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80040e0:	2032      	movs	r0, #50	; 0x32
 80040e2:	f7fe fe50 	bl	8002d86 <SX1276Read>
 80040e6:	4b61      	ldr	r3, [pc, #388]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80040e8:	8758      	strh	r0, [r3, #58]	; 0x3a
 80040ea:	e7b0      	b.n	800404e <SX1276OnDio0Irq+0x9e>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80040ec:	4c5f      	ldr	r4, [pc, #380]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80040ee:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80040f0:	1a09      	subs	r1, r1, r0
 80040f2:	b2c9      	uxtb	r1, r1
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <SX1276OnDio0Irq+0x2cc>)
 80040f6:	18c0      	adds	r0, r0, r3
 80040f8:	f7ff ff52 	bl	8003fa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80040fc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80040fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8004100:	485b      	ldr	r0, [pc, #364]	; (8004270 <SX1276OnDio0Irq+0x2c0>)
 8004102:	f00a fd03 	bl	800eb0c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004106:	4a59      	ldr	r2, [pc, #356]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004108:	2326      	movs	r3, #38	; 0x26
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11c      	bne.n	800414a <SX1276OnDio0Irq+0x19a>
                    SX1276.Settings.State = RF_IDLE;
 8004110:	0013      	movs	r3, r2
 8004112:	2200      	movs	r2, #0
 8004114:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004116:	485a      	ldr	r0, [pc, #360]	; (8004280 <SX1276OnDio0Irq+0x2d0>)
 8004118:	f00a fcf8 	bl	800eb0c <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800411c:	4b55      	ldr	r3, [pc, #340]	; (8004274 <SX1276OnDio0Irq+0x2c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <SX1276OnDio0Irq+0x188>
 8004124:	689c      	ldr	r4, [r3, #8]
 8004126:	2c00      	cmp	r4, #0
 8004128:	d006      	beq.n	8004138 <SX1276OnDio0Irq+0x188>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800412a:	4b50      	ldr	r3, [pc, #320]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 800412c:	2232      	movs	r2, #50	; 0x32
 800412e:	569a      	ldrsb	r2, [r3, r2]
 8004130:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8004132:	2300      	movs	r3, #0
 8004134:	4851      	ldr	r0, [pc, #324]	; (800427c <SX1276OnDio0Irq+0x2cc>)
 8004136:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004138:	4b4c      	ldr	r3, [pc, #304]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 800413a:	2200      	movs	r2, #0
 800413c:	2130      	movs	r1, #48	; 0x30
 800413e:	545a      	strb	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004140:	3101      	adds	r1, #1
 8004142:	545a      	strb	r2, [r3, r1]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004144:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8004146:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8004148:	e73e      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800414a:	200d      	movs	r0, #13
 800414c:	f7fe fe1b 	bl	8002d86 <SX1276Read>
 8004150:	2140      	movs	r1, #64	; 0x40
 8004152:	4301      	orrs	r1, r0
 8004154:	b2c9      	uxtb	r1, r1
 8004156:	200d      	movs	r0, #13
 8004158:	f7fe fdbf 	bl	8002cda <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800415c:	4848      	ldr	r0, [pc, #288]	; (8004280 <SX1276OnDio0Irq+0x2d0>)
 800415e:	f00a fc55 	bl	800ea0c <TimerStart>
 8004162:	e7db      	b.n	800411c <SX1276OnDio0Irq+0x16c>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004164:	2019      	movs	r0, #25
 8004166:	f7fe fe0e 	bl	8002d86 <SX1276Read>
 800416a:	b240      	sxtb	r0, r0
 800416c:	3002      	adds	r0, #2
 800416e:	1080      	asrs	r0, r0, #2
 8004170:	4d3e      	ldr	r5, [pc, #248]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004172:	2460      	movs	r4, #96	; 0x60
 8004174:	5528      	strb	r0, [r5, r4]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004176:	201a      	movs	r0, #26
 8004178:	f7fe fe05 	bl	8002d86 <SX1276Read>
 800417c:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800417e:	572a      	ldrsb	r2, [r5, r4]
 8004180:	2a00      	cmp	r2, #0
 8004182:	db38      	blt.n	80041f6 <SX1276OnDio0Irq+0x246>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004184:	4a39      	ldr	r2, [pc, #228]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004186:	6891      	ldr	r1, [r2, #8]
 8004188:	4a3e      	ldr	r2, [pc, #248]	; (8004284 <SX1276OnDio0Irq+0x2d4>)
 800418a:	4291      	cmp	r1, r2
 800418c:	d94c      	bls.n	8004228 <SX1276OnDio0Irq+0x278>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800418e:	111b      	asrs	r3, r3, #4
 8004190:	181b      	adds	r3, r3, r0
 8004192:	3b9d      	subs	r3, #157	; 0x9d
 8004194:	4935      	ldr	r1, [pc, #212]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004196:	2262      	movs	r2, #98	; 0x62
 8004198:	528b      	strh	r3, [r1, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800419a:	2013      	movs	r0, #19
 800419c:	f7fe fdf3 	bl	8002d86 <SX1276Read>
 80041a0:	4c32      	ldr	r4, [pc, #200]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80041a2:	2564      	movs	r5, #100	; 0x64
 80041a4:	5560      	strb	r0, [r4, r5]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80041a6:	2010      	movs	r0, #16
 80041a8:	f7fe fded 	bl	8002d86 <SX1276Read>
 80041ac:	0001      	movs	r1, r0
 80041ae:	200d      	movs	r0, #13
 80041b0:	f7fe fd93 	bl	8002cda <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80041b4:	5d61      	ldrb	r1, [r4, r5]
 80041b6:	4831      	ldr	r0, [pc, #196]	; (800427c <SX1276OnDio0Irq+0x2cc>)
 80041b8:	f7ff fef2 	bl	8003fa0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80041bc:	2356      	movs	r3, #86	; 0x56
 80041be:	5ce3      	ldrb	r3, [r4, r3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <SX1276OnDio0Irq+0x21a>
                        SX1276.Settings.State = RF_IDLE;
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80041ca:	4829      	ldr	r0, [pc, #164]	; (8004270 <SX1276OnDio0Irq+0x2c0>)
 80041cc:	f00a fc9e 	bl	800eb0c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <SX1276OnDio0Irq+0x2c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d100      	bne.n	80041da <SX1276OnDio0Irq+0x22a>
 80041d8:	e6f6      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
 80041da:	689c      	ldr	r4, [r3, #8]
 80041dc:	2c00      	cmp	r4, #0
 80041de:	d100      	bne.n	80041e2 <SX1276OnDio0Irq+0x232>
 80041e0:	e6f2      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80041e2:	4922      	ldr	r1, [pc, #136]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80041e4:	2360      	movs	r3, #96	; 0x60
 80041e6:	56cb      	ldrsb	r3, [r1, r3]
 80041e8:	2262      	movs	r2, #98	; 0x62
 80041ea:	5e8a      	ldrsh	r2, [r1, r2]
 80041ec:	2064      	movs	r0, #100	; 0x64
 80041ee:	5c09      	ldrb	r1, [r1, r0]
 80041f0:	4822      	ldr	r0, [pc, #136]	; (800427c <SX1276OnDio0Irq+0x2cc>)
 80041f2:	47a0      	blx	r4
 80041f4:	e6e8      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80041f6:	491d      	ldr	r1, [pc, #116]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 80041f8:	688c      	ldr	r4, [r1, #8]
 80041fa:	4922      	ldr	r1, [pc, #136]	; (8004284 <SX1276OnDio0Irq+0x2d4>)
 80041fc:	428c      	cmp	r4, r1
 80041fe:	d909      	bls.n	8004214 <SX1276OnDio0Irq+0x264>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004200:	111b      	asrs	r3, r3, #4
 8004202:	181b      	adds	r3, r3, r0
 8004204:	b29b      	uxth	r3, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8004206:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004208:	189b      	adds	r3, r3, r2
 800420a:	3b9d      	subs	r3, #157	; 0x9d
 800420c:	4917      	ldr	r1, [pc, #92]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 800420e:	2262      	movs	r2, #98	; 0x62
 8004210:	528b      	strh	r3, [r1, r2]
 8004212:	e7c2      	b.n	800419a <SX1276OnDio0Irq+0x1ea>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004214:	111b      	asrs	r3, r3, #4
 8004216:	181b      	adds	r3, r3, r0
 8004218:	b29b      	uxth	r3, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800421a:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800421c:	189b      	adds	r3, r3, r2
 800421e:	3ba4      	subs	r3, #164	; 0xa4
 8004220:	4912      	ldr	r1, [pc, #72]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004222:	2262      	movs	r2, #98	; 0x62
 8004224:	528b      	strh	r3, [r1, r2]
 8004226:	e7b8      	b.n	800419a <SX1276OnDio0Irq+0x1ea>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004228:	111b      	asrs	r3, r3, #4
 800422a:	181b      	adds	r3, r3, r0
 800422c:	3ba4      	subs	r3, #164	; 0xa4
 800422e:	490f      	ldr	r1, [pc, #60]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004230:	2262      	movs	r2, #98	; 0x62
 8004232:	528b      	strh	r3, [r1, r2]
 8004234:	e7b1      	b.n	800419a <SX1276OnDio0Irq+0x1ea>
            TimerStop( &TxTimeoutTimer );
 8004236:	4814      	ldr	r0, [pc, #80]	; (8004288 <SX1276OnDio0Irq+0x2d8>)
 8004238:	f00a fc68 	bl	800eb0c <TimerStop>
            switch( SX1276.Settings.Modem )
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 800423e:	795b      	ldrb	r3, [r3, #5]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d00d      	beq.n	8004260 <SX1276OnDio0Irq+0x2b0>
                SX1276.Settings.State = RF_IDLE;
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <SX1276OnDio0Irq+0x2bc>)
 8004246:	2200      	movs	r2, #0
 8004248:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <SX1276OnDio0Irq+0x2c4>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d100      	bne.n	8004254 <SX1276OnDio0Irq+0x2a4>
 8004252:	e6b9      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d100      	bne.n	800425c <SX1276OnDio0Irq+0x2ac>
 800425a:	e6b5      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800425c:	4798      	blx	r3
}
 800425e:	e6b3      	b.n	8003fc8 <SX1276OnDio0Irq+0x18>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004260:	2108      	movs	r1, #8
 8004262:	2012      	movs	r0, #18
 8004264:	f7fe fd39 	bl	8002cda <SX1276Write>
 8004268:	e7ec      	b.n	8004244 <SX1276OnDio0Irq+0x294>
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	20001544 	.word	0x20001544
 8004270:	200015ac 	.word	0x200015ac
 8004274:	2000020c 	.word	0x2000020c
 8004278:	2000157e 	.word	0x2000157e
 800427c:	20000214 	.word	0x20000214
 8004280:	2000152c 	.word	0x2000152c
 8004284:	1f4add40 	.word	0x1f4add40
 8004288:	20001514 	.word	0x20001514

0800428c <SX1276OnDio1Irq>:
{
 800428c:	b510      	push	{r4, lr}
    switch( SX1276.Settings.State )
 800428e:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 8004290:	791b      	ldrb	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d002      	beq.n	800429c <SX1276OnDio1Irq+0x10>
 8004296:	2b02      	cmp	r3, #2
 8004298:	d053      	beq.n	8004342 <SX1276OnDio1Irq+0xb6>
}
 800429a:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800429c:	4b39      	ldr	r3, [pc, #228]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 800429e:	795b      	ldrb	r3, [r3, #5]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d014      	beq.n	80042ce <SX1276OnDio1Irq+0x42>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d1f8      	bne.n	800429a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 80042a8:	4837      	ldr	r0, [pc, #220]	; (8004388 <SX1276OnDio1Irq+0xfc>)
 80042aa:	f00a fc2f 	bl	800eb0c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	2012      	movs	r0, #18
 80042b2:	f7fe fd12 	bl	8002cda <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80042b6:	4b33      	ldr	r3, [pc, #204]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80042bc:	4b33      	ldr	r3, [pc, #204]	; (800438c <SX1276OnDio1Irq+0x100>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ea      	beq.n	800429a <SX1276OnDio1Irq+0xe>
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0e7      	beq.n	800429a <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 80042ca:	4798      	blx	r3
 80042cc:	e7e5      	b.n	800429a <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80042ce:	4830      	ldr	r0, [pc, #192]	; (8004390 <SX1276OnDio1Irq+0x104>)
 80042d0:	f00a fc1c 	bl	800eb0c <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 80042d6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10c      	bne.n	80042f6 <SX1276OnDio1Irq+0x6a>
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 80042de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <SX1276OnDio1Irq+0x6a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 80042e6:	3322      	adds	r3, #34	; 0x22
 80042e8:	5cd3      	ldrb	r3, [r2, r3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d119      	bne.n	8004322 <SX1276OnDio1Irq+0x96>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80042ee:	2101      	movs	r1, #1
 80042f0:	4828      	ldr	r0, [pc, #160]	; (8004394 <SX1276OnDio1Irq+0x108>)
 80042f2:	f7ff fe55 	bl	8003fa0 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80042f6:	4a23      	ldr	r2, [pc, #140]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 80042f8:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 80042fa:	8f90      	ldrh	r0, [r2, #60]	; 0x3c
 80042fc:	1a1c      	subs	r4, r3, r0
 80042fe:	213e      	movs	r1, #62	; 0x3e
 8004300:	5c51      	ldrb	r1, [r2, r1]
 8004302:	428c      	cmp	r4, r1
 8004304:	db13      	blt.n	800432e <SX1276OnDio1Irq+0xa2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004306:	3901      	subs	r1, #1
 8004308:	b2c9      	uxtb	r1, r1
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <SX1276OnDio1Irq+0x10c>)
 800430c:	18c0      	adds	r0, r0, r3
 800430e:	f7ff fe47 	bl	8003fa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 8004314:	233e      	movs	r3, #62	; 0x3e
 8004316:	5cd3      	ldrb	r3, [r2, r3]
 8004318:	8f91      	ldrh	r1, [r2, #60]	; 0x3c
 800431a:	185b      	adds	r3, r3, r1
 800431c:	3b01      	subs	r3, #1
 800431e:	8793      	strh	r3, [r2, #60]	; 0x3c
 8004320:	e7bb      	b.n	800429a <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004322:	2032      	movs	r0, #50	; 0x32
 8004324:	f7fe fd2f 	bl	8002d86 <SX1276Read>
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 800432a:	8758      	strh	r0, [r3, #58]	; 0x3a
 800432c:	e7e3      	b.n	80042f6 <SX1276OnDio1Irq+0x6a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800432e:	1a19      	subs	r1, r3, r0
 8004330:	b2c9      	uxtb	r1, r1
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <SX1276OnDio1Irq+0x10c>)
 8004334:	18c0      	adds	r0, r0, r3
 8004336:	f7ff fe33 	bl	8003fa0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 800433c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800433e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004340:	e7ab      	b.n	800429a <SX1276OnDio1Irq+0xe>
            switch( SX1276.Settings.Modem )
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 8004344:	795b      	ldrb	r3, [r3, #5]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1a7      	bne.n	800429a <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800434a:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 800434c:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 800434e:	8f90      	ldrh	r0, [r2, #60]	; 0x3c
 8004350:	1a1c      	subs	r4, r3, r0
 8004352:	213f      	movs	r1, #63	; 0x3f
 8004354:	5c51      	ldrb	r1, [r2, r1]
 8004356:	428c      	cmp	r4, r1
 8004358:	dd0a      	ble.n	8004370 <SX1276OnDio1Irq+0xe4>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <SX1276OnDio1Irq+0x10c>)
 800435c:	18c0      	adds	r0, r0, r3
 800435e:	f7ff fd89 	bl	8003e74 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 8004364:	223f      	movs	r2, #63	; 0x3f
 8004366:	5c9a      	ldrb	r2, [r3, r2]
 8004368:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800436a:	1852      	adds	r2, r2, r1
 800436c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800436e:	e794      	b.n	800429a <SX1276OnDio1Irq+0xe>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004370:	1a19      	subs	r1, r3, r0
 8004372:	b2c9      	uxtb	r1, r1
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <SX1276OnDio1Irq+0x10c>)
 8004376:	18c0      	adds	r0, r0, r3
 8004378:	f7ff fd7c 	bl	8003e74 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <SX1276OnDio1Irq+0xf8>)
 800437e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004380:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8004382:	e78a      	b.n	800429a <SX1276OnDio1Irq+0xe>
 8004384:	20001544 	.word	0x20001544
 8004388:	200015ac 	.word	0x200015ac
 800438c:	2000020c 	.word	0x2000020c
 8004390:	2000152c 	.word	0x2000152c
 8004394:	2000157e 	.word	0x2000157e
 8004398:	20000214 	.word	0x20000214

0800439c <SX1276SetMaxPayloadLength>:
{
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	0004      	movs	r4, r0
 80043a0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 80043a2:	f7ff f8c1 	bl	8003528 <SX1276SetModem>
    switch( modem )
 80043a6:	2c00      	cmp	r4, #0
 80043a8:	d002      	beq.n	80043b0 <SX1276SetMaxPayloadLength+0x14>
 80043aa:	2c01      	cmp	r4, #1
 80043ac:	d00a      	beq.n	80043c4 <SX1276SetMaxPayloadLength+0x28>
}
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <SX1276SetMaxPayloadLength+0x34>)
 80043b2:	2322      	movs	r3, #34	; 0x22
 80043b4:	5cd3      	ldrb	r3, [r2, r3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f9      	bne.n	80043ae <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80043ba:	0029      	movs	r1, r5
 80043bc:	2032      	movs	r0, #50	; 0x32
 80043be:	f7fe fc8c 	bl	8002cda <SX1276Write>
 80043c2:	e7f4      	b.n	80043ae <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80043c4:	0029      	movs	r1, r5
 80043c6:	2023      	movs	r0, #35	; 0x23
 80043c8:	f7fe fc87 	bl	8002cda <SX1276Write>
}
 80043cc:	e7ef      	b.n	80043ae <SX1276SetMaxPayloadLength+0x12>
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	20001544 	.word	0x20001544

080043d4 <SX1276SetPublicNetwork>:
{
 80043d4:	b510      	push	{r4, lr}
 80043d6:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 80043d8:	2001      	movs	r0, #1
 80043da:	f7ff f8a5 	bl	8003528 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80043de:	4a07      	ldr	r2, [pc, #28]	; (80043fc <SX1276SetPublicNetwork+0x28>)
 80043e0:	235c      	movs	r3, #92	; 0x5c
 80043e2:	54d4      	strb	r4, [r2, r3]
    if( enable == true )
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	d004      	beq.n	80043f2 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80043e8:	2134      	movs	r1, #52	; 0x34
 80043ea:	2039      	movs	r0, #57	; 0x39
 80043ec:	f7fe fc75 	bl	8002cda <SX1276Write>
}
 80043f0:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80043f2:	2112      	movs	r1, #18
 80043f4:	2039      	movs	r0, #57	; 0x39
 80043f6:	f7fe fc70 	bl	8002cda <SX1276Write>
}
 80043fa:	e7f9      	b.n	80043f0 <SX1276SetPublicNetwork+0x1c>
 80043fc:	20001544 	.word	0x20001544

08004400 <SX1276OnTimeoutIrq>:
{
 8004400:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004402:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <SX1276OnTimeoutIrq+0xd0>)
 8004404:	791b      	ldrb	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d002      	beq.n	8004410 <SX1276OnTimeoutIrq+0x10>
 800440a:	2b02      	cmp	r3, #2
 800440c:	d034      	beq.n	8004478 <SX1276OnTimeoutIrq+0x78>
}
 800440e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <SX1276OnTimeoutIrq+0xd0>)
 8004412:	795b      	ldrb	r3, [r3, #5]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <SX1276OnTimeoutIrq+0x2a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004418:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <SX1276OnTimeoutIrq+0xd4>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f6      	beq.n	800440e <SX1276OnTimeoutIrq+0xe>
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f3      	beq.n	800440e <SX1276OnTimeoutIrq+0xe>
            RadioEvents->RxTimeout( );
 8004426:	4798      	blx	r3
 8004428:	e7f1      	b.n	800440e <SX1276OnTimeoutIrq+0xe>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800442a:	4c29      	ldr	r4, [pc, #164]	; (80044d0 <SX1276OnTimeoutIrq+0xd0>)
 800442c:	2230      	movs	r2, #48	; 0x30
 800442e:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004430:	3201      	adds	r2, #1
 8004432:	54a3      	strb	r3, [r4, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004434:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004436:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004438:	210b      	movs	r1, #11
 800443a:	203e      	movs	r0, #62	; 0x3e
 800443c:	f7fe fc4d 	bl	8002cda <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004440:	2110      	movs	r1, #16
 8004442:	203f      	movs	r0, #63	; 0x3f
 8004444:	f7fe fc49 	bl	8002cda <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004448:	2326      	movs	r3, #38	; 0x26
 800444a:	5ce3      	ldrb	r3, [r4, r3]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <SX1276OnTimeoutIrq+0x6a>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004450:	200d      	movs	r0, #13
 8004452:	f7fe fc98 	bl	8002d86 <SX1276Read>
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	4301      	orrs	r1, r0
 800445a:	b2c9      	uxtb	r1, r1
 800445c:	200d      	movs	r0, #13
 800445e:	f7fe fc3c 	bl	8002cda <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8004462:	481d      	ldr	r0, [pc, #116]	; (80044d8 <SX1276OnTimeoutIrq+0xd8>)
 8004464:	f00a fad2 	bl	800ea0c <TimerStart>
 8004468:	e7d6      	b.n	8004418 <SX1276OnTimeoutIrq+0x18>
                SX1276.Settings.State = RF_IDLE;
 800446a:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <SX1276OnTimeoutIrq+0xd0>)
 800446c:	2200      	movs	r2, #0
 800446e:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004470:	4819      	ldr	r0, [pc, #100]	; (80044d8 <SX1276OnTimeoutIrq+0xd8>)
 8004472:	f00a fb4b 	bl	800eb0c <TimerStop>
 8004476:	e7cf      	b.n	8004418 <SX1276OnTimeoutIrq+0x18>
        SX1276Reset( );
 8004478:	f7fe fbe6 	bl	8002c48 <SX1276Reset>
        RxChainCalibration( );
 800447c:	f7fe fc8e 	bl	8002d9c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004480:	2000      	movs	r0, #0
 8004482:	f7fe fe19 	bl	80030b8 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004486:	2400      	movs	r4, #0
 8004488:	2c0f      	cmp	r4, #15
 800448a:	d80d      	bhi.n	80044a8 <SX1276OnTimeoutIrq+0xa8>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800448c:	4d13      	ldr	r5, [pc, #76]	; (80044dc <SX1276OnTimeoutIrq+0xdc>)
 800448e:	0066      	lsls	r6, r4, #1
 8004490:	1936      	adds	r6, r6, r4
 8004492:	5d70      	ldrb	r0, [r6, r5]
 8004494:	f7ff f848 	bl	8003528 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004498:	19ad      	adds	r5, r5, r6
 800449a:	78a9      	ldrb	r1, [r5, #2]
 800449c:	7868      	ldrb	r0, [r5, #1]
 800449e:	f7fe fc1c 	bl	8002cda <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80044a2:	3401      	adds	r4, #1
 80044a4:	b2e4      	uxtb	r4, r4
 80044a6:	e7ef      	b.n	8004488 <SX1276OnTimeoutIrq+0x88>
        SX1276SetModem( MODEM_FSK );
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7ff f83d 	bl	8003528 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80044ae:	4c08      	ldr	r4, [pc, #32]	; (80044d0 <SX1276OnTimeoutIrq+0xd0>)
 80044b0:	235c      	movs	r3, #92	; 0x5c
 80044b2:	5ce0      	ldrb	r0, [r4, r3]
 80044b4:	f7ff ff8e 	bl	80043d4 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <SX1276OnTimeoutIrq+0xd4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0a4      	beq.n	800440e <SX1276OnTimeoutIrq+0xe>
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0a1      	beq.n	800440e <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80044ca:	4798      	blx	r3
}
 80044cc:	e79f      	b.n	800440e <SX1276OnTimeoutIrq+0xe>
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	20001544 	.word	0x20001544
 80044d4:	2000020c 	.word	0x2000020c
 80044d8:	2000152c 	.word	0x2000152c
 80044dc:	08010c1c 	.word	0x08010c1c

080044e0 <SX1276GetWakeupTime>:
{
 80044e0:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80044e2:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <SX1276GetWakeupTime+0x10>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4798      	blx	r3
 80044ea:	3002      	adds	r0, #2
}
 80044ec:	bd10      	pop	{r4, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	2000020c 	.word	0x2000020c

080044f4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80044f4:	4b10      	ldr	r3, [pc, #64]	; (8004538 <SystemInit+0x44>)
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	0052      	lsls	r2, r2, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	490e      	ldr	r1, [pc, #56]	; (800453c <SystemInit+0x48>)
 8004504:	400a      	ands	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	490d      	ldr	r1, [pc, #52]	; (8004540 <SystemInit+0x4c>)
 800450c:	400a      	ands	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	2101      	movs	r1, #1
 8004514:	438a      	bics	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	490a      	ldr	r1, [pc, #40]	; (8004544 <SystemInit+0x50>)
 800451c:	400a      	ands	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4909      	ldr	r1, [pc, #36]	; (8004548 <SystemInit+0x54>)
 8004524:	400a      	ands	r2, r1
 8004526:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <SystemInit+0x58>)
 800452e:	2280      	movs	r2, #128	; 0x80
 8004530:	0512      	lsls	r2, r2, #20
 8004532:	609a      	str	r2, [r3, #8]
#endif
}
 8004534:	4770      	bx	lr
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	40021000 	.word	0x40021000
 800453c:	88ff400c 	.word	0x88ff400c
 8004540:	fef6fff6 	.word	0xfef6fff6
 8004544:	fffbffff 	.word	0xfffbffff
 8004548:	ff02ffff 	.word	0xff02ffff
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004550:	b510      	push	{r4, lr}
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_Init+0x24>)
 8004554:	6813      	ldr	r3, [r2, #0]
 8004556:	2102      	movs	r1, #2
 8004558:	430b      	orrs	r3, r1
 800455a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800455c:	2003      	movs	r0, #3
 800455e:	f00b f973 	bl	800f848 <HAL_InitTick>
 8004562:	1e04      	subs	r4, r0, #0
 8004564:	d002      	beq.n	800456c <HAL_Init+0x1c>
  {
    status = HAL_ERROR;
 8004566:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8004568:	0020      	movs	r0, r4
 800456a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800456c:	f00b f976 	bl	800f85c <HAL_MspInit>
 8004570:	e7fa      	b.n	8004568 <HAL_Init+0x18>
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	40022000 	.word	0x40022000

08004578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004578:	4a02      	ldr	r2, [pc, #8]	; (8004584 <HAL_IncTick+0xc>)
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	4770      	bx	lr
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	200015c4 	.word	0x200015c4

08004588 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004588:	4b01      	ldr	r3, [pc, #4]	; (8004590 <HAL_GetTick+0x8>)
 800458a:	6818      	ldr	r0, [r3, #0]
}
 800458c:	4770      	bx	lr
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	200015c4 	.word	0x200015c4

08004594 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004594:	4a02      	ldr	r2, [pc, #8]	; (80045a0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8004596:	6853      	ldr	r3, [r2, #4]
 8004598:	2101      	movs	r1, #1
 800459a:	430b      	orrs	r3, r1
 800459c:	6053      	str	r3, [r2, #4]
}
 800459e:	4770      	bx	lr
 80045a0:	40015800 	.word	0x40015800

080045a4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80045a4:	4a02      	ldr	r2, [pc, #8]	; (80045b0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80045a6:	6853      	ldr	r3, [r2, #4]
 80045a8:	2102      	movs	r1, #2
 80045aa:	430b      	orrs	r3, r1
 80045ac:	6053      	str	r3, [r2, #4]
}
 80045ae:	4770      	bx	lr
 80045b0:	40015800 	.word	0x40015800

080045b4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80045b4:	4a02      	ldr	r2, [pc, #8]	; (80045c0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80045b6:	6853      	ldr	r3, [r2, #4]
 80045b8:	2104      	movs	r1, #4
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6053      	str	r3, [r2, #4]
}
 80045be:	4770      	bx	lr
 80045c0:	40015800 	.word	0x40015800

080045c4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80045c4:	b510      	push	{r4, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <ADC_DelayMicroSecond+0x28>)
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	4908      	ldr	r1, [pc, #32]	; (80045f0 <ADC_DelayMicroSecond+0x2c>)
 80045d0:	f7fb fda4 	bl	800011c <__udivsi3>
 80045d4:	4344      	muls	r4, r0
 80045d6:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80045d8:	9b01      	ldr	r3, [sp, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <ADC_DelayMicroSecond+0x22>
  {
    waitLoopIndex--;
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	e7f8      	b.n	80045d8 <ADC_DelayMicroSecond+0x14>
  } 
}
 80045e6:	b002      	add	sp, #8
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	20000044 	.word	0x20000044
 80045f0:	000f4240 	.word	0x000f4240

080045f4 <ADC_Enable>:
{
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045f8:	6802      	ldr	r2, [r0, #0]
 80045fa:	6891      	ldr	r1, [r2, #8]
 80045fc:	2303      	movs	r3, #3
 80045fe:	400b      	ands	r3, r1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d00d      	beq.n	8004620 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004604:	6891      	ldr	r1, [r2, #8]
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <ADC_Enable+0x74>)
 8004608:	4219      	tst	r1, r3
 800460a:	d00e      	beq.n	800462a <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800460e:	2210      	movs	r2, #16
 8004610:	4313      	orrs	r3, r2
 8004612:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004614:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004616:	3a0f      	subs	r2, #15
 8004618:	4313      	orrs	r3, r2
 800461a:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800461c:	2001      	movs	r0, #1
}
 800461e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004620:	6813      	ldr	r3, [r2, #0]
 8004622:	07db      	lsls	r3, r3, #31
 8004624:	d5ee      	bpl.n	8004604 <ADC_Enable+0x10>
  return HAL_OK;
 8004626:	2000      	movs	r0, #0
 8004628:	e7f9      	b.n	800461e <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 800462a:	6893      	ldr	r3, [r2, #8]
 800462c:	2101      	movs	r1, #1
 800462e:	430b      	orrs	r3, r1
 8004630:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004632:	2001      	movs	r0, #1
 8004634:	f7ff ffc6 	bl	80045c4 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004638:	f7ff ffa6 	bl	8004588 <HAL_GetTick>
 800463c:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	07db      	lsls	r3, r3, #31
 8004644:	d40e      	bmi.n	8004664 <ADC_Enable+0x70>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004646:	f7ff ff9f 	bl	8004588 <HAL_GetTick>
 800464a:	1b40      	subs	r0, r0, r5
 800464c:	280a      	cmp	r0, #10
 800464e:	d9f6      	bls.n	800463e <ADC_Enable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004650:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004652:	2210      	movs	r2, #16
 8004654:	4313      	orrs	r3, r2
 8004656:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800465a:	3a0f      	subs	r2, #15
 800465c:	4313      	orrs	r3, r2
 800465e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004660:	2001      	movs	r0, #1
 8004662:	e7dc      	b.n	800461e <ADC_Enable+0x2a>
  return HAL_OK;
 8004664:	2000      	movs	r0, #0
 8004666:	e7da      	b.n	800461e <ADC_Enable+0x2a>
 8004668:	80000017 	.word	0x80000017

0800466c <HAL_ADC_MspInit>:
}
 800466c:	4770      	bx	lr
	...

08004670 <HAL_ADC_Init>:
{
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8004674:	d100      	bne.n	8004678 <HAL_ADC_Init+0x8>
 8004676:	e0e2      	b.n	800483e <HAL_ADC_Init+0x1ce>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004678:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800467a:	2b00      	cmp	r3, #0
 800467c:	d030      	beq.n	80046e0 <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800467e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004680:	06db      	lsls	r3, r3, #27
 8004682:	d433      	bmi.n	80046ec <HAL_ADC_Init+0x7c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	6891      	ldr	r1, [r2, #8]
 8004688:	2004      	movs	r0, #4
 800468a:	0005      	movs	r5, r0
 800468c:	400d      	ands	r5, r1
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800468e:	4208      	tst	r0, r1
 8004690:	d12c      	bne.n	80046ec <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 8004692:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004694:	4b6b      	ldr	r3, [pc, #428]	; (8004844 <HAL_ADC_Init+0x1d4>)
 8004696:	4019      	ands	r1, r3
 8004698:	3306      	adds	r3, #6
 800469a:	33ff      	adds	r3, #255	; 0xff
 800469c:	4319      	orrs	r1, r3
 800469e:	6561      	str	r1, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046a0:	6891      	ldr	r1, [r2, #8]
 80046a2:	3301      	adds	r3, #1
 80046a4:	400b      	ands	r3, r1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d029      	beq.n	80046fe <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	21c0      	movs	r1, #192	; 0xc0
 80046ae:	0609      	lsls	r1, r1, #24
 80046b0:	428b      	cmp	r3, r1
 80046b2:	d028      	beq.n	8004706 <HAL_ADC_Init+0x96>
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	05c9      	lsls	r1, r1, #23
 80046b8:	428b      	cmp	r3, r1
 80046ba:	d024      	beq.n	8004706 <HAL_ADC_Init+0x96>
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	0609      	lsls	r1, r1, #24
 80046c0:	428b      	cmp	r3, r1
 80046c2:	d020      	beq.n	8004706 <HAL_ADC_Init+0x96>
 80046c4:	6913      	ldr	r3, [r2, #16]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	6113      	str	r3, [r2, #16]
 80046cc:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <HAL_ADC_Init+0x1d8>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	495e      	ldr	r1, [pc, #376]	; (800484c <HAL_ADC_Init+0x1dc>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6861      	ldr	r1, [r4, #4]
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e01b      	b.n	8004718 <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 80046e0:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80046e2:	2250      	movs	r2, #80	; 0x50
 80046e4:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80046e6:	f7ff ffc1 	bl	800466c <HAL_ADC_MspInit>
 80046ea:	e7c8      	b.n	800467e <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ee:	2210      	movs	r2, #16
 80046f0:	4313      	orrs	r3, r2
 80046f2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80046f4:	2350      	movs	r3, #80	; 0x50
 80046f6:	2200      	movs	r2, #0
 80046f8:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80046fa:	2001      	movs	r0, #1
}
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	07db      	lsls	r3, r3, #31
 8004702:	d413      	bmi.n	800472c <HAL_ADC_Init+0xbc>
 8004704:	e7d1      	b.n	80046aa <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004706:	6913      	ldr	r3, [r2, #16]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	089b      	lsrs	r3, r3, #2
 800470c:	6113      	str	r3, [r2, #16]
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	6913      	ldr	r3, [r2, #16]
 8004712:	6861      	ldr	r1, [r4, #4]
 8004714:	430b      	orrs	r3, r1
 8004716:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	68d3      	ldr	r3, [r2, #12]
 800471c:	2118      	movs	r1, #24
 800471e:	438b      	bics	r3, r1
 8004720:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	68d3      	ldr	r3, [r2, #12]
 8004726:	68a1      	ldr	r1, [r4, #8]
 8004728:	430b      	orrs	r3, r1
 800472a:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800472c:	4a46      	ldr	r2, [pc, #280]	; (8004848 <HAL_ADC_Init+0x1d8>)
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	4947      	ldr	r1, [pc, #284]	; (8004850 <HAL_ADC_Init+0x1e0>)
 8004732:	400b      	ands	r3, r1
 8004734:	6013      	str	r3, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473a:	0649      	lsls	r1, r1, #25
 800473c:	430b      	orrs	r3, r1
 800473e:	6013      	str	r3, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	00d2      	lsls	r2, r2, #3
 8004746:	d404      	bmi.n	8004752 <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004748:	6899      	ldr	r1, [r3, #8]
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	0552      	lsls	r2, r2, #21
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	493f      	ldr	r1, [pc, #252]	; (8004854 <HAL_ADC_Init+0x1e4>)
 8004758:	400a      	ands	r2, r1
 800475a:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	68c2      	ldr	r2, [r0, #12]
 8004760:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004762:	6921      	ldr	r1, [r4, #16]
 8004764:	2902      	cmp	r1, #2
 8004766:	d02d      	beq.n	80047c4 <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004768:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800476a:	2120      	movs	r1, #32
 800476c:	5c61      	ldrb	r1, [r4, r1]
 800476e:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004770:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	5c61      	ldrb	r1, [r4, r1]
 8004776:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004778:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800477a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800477c:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800477e:	69a1      	ldr	r1, [r4, #24]
 8004780:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 8004782:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004784:	69e1      	ldr	r1, [r4, #28]
 8004786:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004788:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800478a:	4313      	orrs	r3, r2
 800478c:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800478e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004790:	22c2      	movs	r2, #194	; 0xc2
 8004792:	32ff      	adds	r2, #255	; 0xff
 8004794:	4293      	cmp	r3, r2
 8004796:	d005      	beq.n	80047a4 <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004798:	6821      	ldr	r1, [r4, #0]
 800479a:	68ca      	ldr	r2, [r1, #12]
 800479c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800479e:	4303      	orrs	r3, r0
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047a4:	2321      	movs	r3, #33	; 0x21
 80047a6:	5ce3      	ldrb	r3, [r4, r3]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d00d      	beq.n	80047c8 <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 80047ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d01e      	beq.n	80047f0 <HAL_ADC_Init+0x180>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	07d2      	lsls	r2, r2, #31
 80047b8:	d52d      	bpl.n	8004816 <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	2101      	movs	r1, #1
 80047be:	438a      	bics	r2, r1
 80047c0:	611a      	str	r2, [r3, #16]
 80047c2:	e028      	b.n	8004816 <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80047c4:	2504      	movs	r5, #4
 80047c6:	e7cf      	b.n	8004768 <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80047c8:	331f      	adds	r3, #31
 80047ca:	5ce3      	ldrb	r3, [r4, r3]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80047d0:	6822      	ldr	r2, [r4, #0]
 80047d2:	68d1      	ldr	r1, [r2, #12]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	025b      	lsls	r3, r3, #9
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]
 80047dc:	e7e6      	b.n	80047ac <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047e0:	2220      	movs	r2, #32
 80047e2:	4313      	orrs	r3, r2
 80047e4:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e8:	3a1f      	subs	r2, #31
 80047ea:	4313      	orrs	r3, r2
 80047ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80047ee:	e7dd      	b.n	80047ac <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	6913      	ldr	r3, [r2, #16]
 80047f4:	4918      	ldr	r1, [pc, #96]	; (8004858 <HAL_ADC_Init+0x1e8>)
 80047f6:	400b      	ands	r3, r1
 80047f8:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80047fa:	6821      	ldr	r1, [r4, #0]
 80047fc:	690a      	ldr	r2, [r1, #16]
 80047fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004800:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004802:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8004804:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004806:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004808:	4313      	orrs	r3, r2
 800480a:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	6913      	ldr	r3, [r2, #16]
 8004810:	2101      	movs	r1, #1
 8004812:	430b      	orrs	r3, r1
 8004814:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	6953      	ldr	r3, [r2, #20]
 800481a:	2107      	movs	r1, #7
 800481c:	438b      	bics	r3, r1
 800481e:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	6953      	ldr	r3, [r2, #20]
 8004824:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004826:	430b      	orrs	r3, r1
 8004828:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800482a:	2300      	movs	r3, #0
 800482c:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800482e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004830:	2203      	movs	r2, #3
 8004832:	4393      	bics	r3, r2
 8004834:	3a02      	subs	r2, #2
 8004836:	4313      	orrs	r3, r2
 8004838:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800483a:	2000      	movs	r0, #0
 800483c:	e75e      	b.n	80046fc <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 800483e:	2001      	movs	r0, #1
 8004840:	e75c      	b.n	80046fc <HAL_ADC_Init+0x8c>
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	fffffefd 	.word	0xfffffefd
 8004848:	40012708 	.word	0x40012708
 800484c:	ffc3ffff 	.word	0xffc3ffff
 8004850:	fdffffff 	.word	0xfdffffff
 8004854:	fffe0219 	.word	0xfffe0219
 8004858:	fffffc03 	.word	0xfffffc03

0800485c <HAL_ADC_Start>:
{
 800485c:	b510      	push	{r4, lr}
 800485e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	075b      	lsls	r3, r3, #29
 8004866:	d423      	bmi.n	80048b0 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8004868:	2350      	movs	r3, #80	; 0x50
 800486a:	5cc3      	ldrb	r3, [r0, r3]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d021      	beq.n	80048b4 <HAL_ADC_Start+0x58>
 8004870:	2350      	movs	r3, #80	; 0x50
 8004872:	2201      	movs	r2, #1
 8004874:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004876:	69c3      	ldr	r3, [r0, #28]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d114      	bne.n	80048a6 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487c:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800487e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <HAL_ADC_Start+0x5c>)
 8004882:	401a      	ands	r2, r3
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4313      	orrs	r3, r2
 800488a:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800488c:	2300      	movs	r3, #0
 800488e:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8004890:	2250      	movs	r2, #80	; 0x50
 8004892:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	3a34      	subs	r2, #52	; 0x34
 8004898:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	6893      	ldr	r3, [r2, #8]
 800489e:	2104      	movs	r1, #4
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6093      	str	r3, [r2, #8]
}
 80048a4:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80048a6:	f7ff fea5 	bl	80045f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d1fa      	bne.n	80048a4 <HAL_ADC_Start+0x48>
 80048ae:	e7e6      	b.n	800487e <HAL_ADC_Start+0x22>
    tmp_hal_status = HAL_BUSY;
 80048b0:	2002      	movs	r0, #2
 80048b2:	e7f7      	b.n	80048a4 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 80048b4:	2002      	movs	r0, #2
 80048b6:	e7f5      	b.n	80048a4 <HAL_ADC_Start+0x48>
 80048b8:	fffff0fe 	.word	0xfffff0fe

080048bc <HAL_ADC_PollForConversion>:
{
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	0004      	movs	r4, r0
 80048c0:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80048c2:	6946      	ldr	r6, [r0, #20]
 80048c4:	2e08      	cmp	r6, #8
 80048c6:	d004      	beq.n	80048d2 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80048c8:	6803      	ldr	r3, [r0, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	07db      	lsls	r3, r3, #31
 80048ce:	d419      	bmi.n	8004904 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80048d0:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 80048d2:	f7ff fe59 	bl	8004588 <HAL_GetTick>
 80048d6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4216      	tst	r6, r2
 80048de:	d11a      	bne.n	8004916 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 80048e0:	1c6b      	adds	r3, r5, #1
 80048e2:	d0f9      	beq.n	80048d8 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_ADC_PollForConversion+0x36>
 80048e8:	f7ff fe4e 	bl	8004588 <HAL_GetTick>
 80048ec:	1bc0      	subs	r0, r0, r7
 80048ee:	42a8      	cmp	r0, r5
 80048f0:	d9f2      	bls.n	80048d8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048f4:	2204      	movs	r2, #4
 80048f6:	4313      	orrs	r3, r2
 80048f8:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80048fa:	2350      	movs	r3, #80	; 0x50
 80048fc:	2200      	movs	r2, #0
 80048fe:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8004900:	2003      	movs	r0, #3
 8004902:	e02e      	b.n	8004962 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004904:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004906:	2220      	movs	r2, #32
 8004908:	4313      	orrs	r3, r2
 800490a:	6543      	str	r3, [r0, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800490c:	2350      	movs	r3, #80	; 0x50
 800490e:	2200      	movs	r2, #0
 8004910:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	e025      	b.n	8004962 <HAL_ADC_PollForConversion+0xa6>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004916:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	0092      	lsls	r2, r2, #2
 800491c:	430a      	orrs	r2, r1
 800491e:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004920:	68d9      	ldr	r1, [r3, #12]
 8004922:	22c0      	movs	r2, #192	; 0xc0
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	4211      	tst	r1, r2
 8004928:	d114      	bne.n	8004954 <HAL_ADC_PollForConversion+0x98>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800492a:	2220      	movs	r2, #32
 800492c:	5ca2      	ldrb	r2, [r4, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800492e:	2a00      	cmp	r2, #0
 8004930:	d110      	bne.n	8004954 <HAL_ADC_PollForConversion+0x98>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	0712      	lsls	r2, r2, #28
 8004936:	d50d      	bpl.n	8004954 <HAL_ADC_PollForConversion+0x98>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	0752      	lsls	r2, r2, #29
 800493c:	d412      	bmi.n	8004964 <HAL_ADC_PollForConversion+0xa8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	210c      	movs	r1, #12
 8004942:	438a      	bics	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8004946:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004948:	4a0c      	ldr	r2, [pc, #48]	; (800497c <HAL_ADC_PollForConversion+0xc0>)
 800494a:	4013      	ands	r3, r2
 800494c:	3204      	adds	r2, #4
 800494e:	32ff      	adds	r2, #255	; 0xff
 8004950:	4313      	orrs	r3, r2
 8004952:	6563      	str	r3, [r4, #84]	; 0x54
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004954:	69a3      	ldr	r3, [r4, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_ADC_PollForConversion+0xba>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	220c      	movs	r2, #12
 800495e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004960:	2000      	movs	r0, #0
}
 8004962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004966:	2220      	movs	r2, #32
 8004968:	4313      	orrs	r3, r2
 800496a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800496e:	3a1f      	subs	r2, #31
 8004970:	4313      	orrs	r3, r2
 8004972:	65a3      	str	r3, [r4, #88]	; 0x58
 8004974:	e7ee      	b.n	8004954 <HAL_ADC_PollForConversion+0x98>
  return HAL_OK;
 8004976:	2000      	movs	r0, #0
 8004978:	e7f3      	b.n	8004962 <HAL_ADC_PollForConversion+0xa6>
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	fffffefe 	.word	0xfffffefe

08004980 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004980:	6803      	ldr	r3, [r0, #0]
 8004982:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004984:	4770      	bx	lr
	...

08004988 <HAL_ADC_ConfigChannel>:
{
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	0004      	movs	r4, r0
 800498c:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800498e:	2350      	movs	r3, #80	; 0x50
 8004990:	5cc3      	ldrb	r3, [r0, r3]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d04b      	beq.n	8004a2e <HAL_ADC_ConfigChannel+0xa6>
 8004996:	2350      	movs	r3, #80	; 0x50
 8004998:	2201      	movs	r2, #1
 800499a:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800499c:	6803      	ldr	r3, [r0, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	0752      	lsls	r2, r2, #29
 80049a2:	d41a      	bmi.n	80049da <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <HAL_ADC_ConfigChannel+0xac>)
 80049a6:	6849      	ldr	r1, [r1, #4]
 80049a8:	4291      	cmp	r1, r2
 80049aa:	d029      	beq.n	8004a00 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80049ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80049ae:	682a      	ldr	r2, [r5, #0]
 80049b0:	0352      	lsls	r2, r2, #13
 80049b2:	0b52      	lsrs	r2, r2, #13
 80049b4:	430a      	orrs	r2, r1
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	035b      	lsls	r3, r3, #13
 80049bc:	d416      	bmi.n	80049ec <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	039b      	lsls	r3, r3, #14
 80049c2:	d505      	bpl.n	80049d0 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80049c4:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <HAL_ADC_ConfigChannel+0xb0>)
 80049c6:	6811      	ldr	r1, [r2, #0]
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	03db      	lsls	r3, r3, #15
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80049d0:	2350      	movs	r3, #80	; 0x50
 80049d2:	2200      	movs	r2, #0
 80049d4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80049d6:	2000      	movs	r0, #0
}
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80049dc:	2220      	movs	r2, #32
 80049de:	4313      	orrs	r3, r2
 80049e0:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80049e2:	2350      	movs	r3, #80	; 0x50
 80049e4:	2200      	movs	r2, #0
 80049e6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80049e8:	2001      	movs	r0, #1
 80049ea:	e7f5      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;   
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_ADC_ConfigChannel+0xb0>)
 80049ee:	6811      	ldr	r1, [r2, #0]
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80049f8:	200a      	movs	r0, #10
 80049fa:	f7ff fde3 	bl	80045c4 <ADC_DelayMicroSecond>
 80049fe:	e7de      	b.n	80049be <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004a00:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a02:	682a      	ldr	r2, [r5, #0]
 8004a04:	0352      	lsls	r2, r2, #13
 8004a06:	0b52      	lsrs	r2, r2, #13
 8004a08:	4391      	bics	r1, r2
 8004a0a:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	035b      	lsls	r3, r3, #13
 8004a10:	d504      	bpl.n	8004a1c <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_ADC_ConfigChannel+0xb0>)
 8004a14:	6813      	ldr	r3, [r2, #0]
 8004a16:	4909      	ldr	r1, [pc, #36]	; (8004a3c <HAL_ADC_ConfigChannel+0xb4>)
 8004a18:	400b      	ands	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	039b      	lsls	r3, r3, #14
 8004a20:	d5d6      	bpl.n	80049d0 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004a22:	4a05      	ldr	r2, [pc, #20]	; (8004a38 <HAL_ADC_ConfigChannel+0xb0>)
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	4906      	ldr	r1, [pc, #24]	; (8004a40 <HAL_ADC_ConfigChannel+0xb8>)
 8004a28:	400b      	ands	r3, r1
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e7d0      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8004a2e:	2002      	movs	r0, #2
 8004a30:	e7d2      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x50>
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	00001001 	.word	0x00001001
 8004a38:	40012708 	.word	0x40012708
 8004a3c:	ff7fffff 	.word	0xff7fffff
 8004a40:	ffbfffff 	.word	0xffbfffff

08004a44 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a48:	2350      	movs	r3, #80	; 0x50
 8004a4a:	5cc3      	ldrb	r3, [r0, r3]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d049      	beq.n	8004ae4 <HAL_ADCEx_Calibration_Start+0xa0>
 8004a50:	2350      	movs	r3, #80	; 0x50
 8004a52:	2201      	movs	r2, #1
 8004a54:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a56:	6803      	ldr	r3, [r0, #0]
 8004a58:	6899      	ldr	r1, [r3, #8]
 8004a5a:	3202      	adds	r2, #2
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	2a01      	cmp	r2, #1
 8004a60:	d108      	bne.n	8004a74 <HAL_ADCEx_Calibration_Start+0x30>
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	07d2      	lsls	r2, r2, #31
 8004a66:	d505      	bpl.n	8004a74 <HAL_ADCEx_Calibration_Start+0x30>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a68:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	6543      	str	r3, [r0, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8004a70:	2001      	movs	r0, #1
 8004a72:	e033      	b.n	8004adc <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 8004a74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004a76:	491c      	ldr	r1, [pc, #112]	; (8004ae8 <HAL_ADCEx_Calibration_Start+0xa4>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	3106      	adds	r1, #6
 8004a7c:	31ff      	adds	r1, #255	; 0xff
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a82:	68de      	ldr	r6, [r3, #12]
 8004a84:	3101      	adds	r1, #1
 8004a86:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	438a      	bics	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	6891      	ldr	r1, [r2, #8]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	430b      	orrs	r3, r1
 8004a98:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8004a9a:	f7ff fd75 	bl	8004588 <HAL_GetTick>
 8004a9e:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	da0f      	bge.n	8004ac8 <HAL_ADCEx_Calibration_Start+0x84>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004aa8:	f7ff fd6e 	bl	8004588 <HAL_GetTick>
 8004aac:	1b40      	subs	r0, r0, r5
 8004aae:	280a      	cmp	r0, #10
 8004ab0:	d9f6      	bls.n	8004aa0 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8004ab2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ab4:	2212      	movs	r2, #18
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	3a02      	subs	r2, #2
 8004aba:	4313      	orrs	r3, r2
 8004abc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004abe:	2350      	movs	r3, #80	; 0x50
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	e00c      	b.n	8004ae2 <HAL_ADCEx_Calibration_Start+0x9e>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	4316      	orrs	r6, r2
 8004acc:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004ace:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	3a02      	subs	r2, #2
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ada:	2000      	movs	r0, #0
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004adc:	2350      	movs	r3, #80	; 0x50
 8004ade:	2200      	movs	r2, #0
 8004ae0:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8004ae4:	2002      	movs	r0, #2
 8004ae6:	e7fc      	b.n	8004ae2 <HAL_ADCEx_Calibration_Start+0x9e>
 8004ae8:	fffffefd 	.word	0xfffffefd

08004aec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aec:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004aee:	2800      	cmp	r0, #0
 8004af0:	db11      	blt.n	8004b16 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004af2:	0883      	lsrs	r3, r0, #2
 8004af4:	4e13      	ldr	r6, [pc, #76]	; (8004b44 <HAL_NVIC_SetPriority+0x58>)
 8004af6:	33c0      	adds	r3, #192	; 0xc0
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	599d      	ldr	r5, [r3, r6]
 8004afc:	2403      	movs	r4, #3
 8004afe:	4020      	ands	r0, r4
 8004b00:	00c0      	lsls	r0, r0, #3
 8004b02:	22ff      	movs	r2, #255	; 0xff
 8004b04:	0014      	movs	r4, r2
 8004b06:	4084      	lsls	r4, r0
 8004b08:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b0a:	0189      	lsls	r1, r1, #6
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b10:	432a      	orrs	r2, r5
 8004b12:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b16:	230f      	movs	r3, #15
 8004b18:	4003      	ands	r3, r0
 8004b1a:	3b08      	subs	r3, #8
 8004b1c:	089b      	lsrs	r3, r3, #2
 8004b1e:	3306      	adds	r3, #6
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <HAL_NVIC_SetPriority+0x5c>)
 8004b24:	4694      	mov	ip, r2
 8004b26:	4463      	add	r3, ip
 8004b28:	685c      	ldr	r4, [r3, #4]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4010      	ands	r0, r2
 8004b2e:	00c0      	lsls	r0, r0, #3
 8004b30:	32fc      	adds	r2, #252	; 0xfc
 8004b32:	0015      	movs	r5, r2
 8004b34:	4085      	lsls	r5, r0
 8004b36:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b38:	0189      	lsls	r1, r1, #6
 8004b3a:	400a      	ands	r2, r1
 8004b3c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b3e:	4322      	orrs	r2, r4
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e7e7      	b.n	8004b14 <HAL_NVIC_SetPriority+0x28>
 8004b44:	e000e100 	.word	0xe000e100
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	db05      	blt.n	8004b5c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b50:	231f      	movs	r3, #31
 8004b52:	4018      	ands	r0, r3
 8004b54:	3b1e      	subs	r3, #30
 8004b56:	4083      	lsls	r3, r0
 8004b58:	4a01      	ldr	r2, [pc, #4]	; (8004b60 <HAL_NVIC_EnableIRQ+0x14>)
 8004b5a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b5c:	4770      	bx	lr
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	e000e100 	.word	0xe000e100

08004b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b64:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b66:	251c      	movs	r5, #28
 8004b68:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004b6a:	4025      	ands	r5, r4
 8004b6c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004b6e:	2401      	movs	r4, #1
 8004b70:	40ac      	lsls	r4, r5
 8004b72:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b74:	6804      	ldr	r4, [r0, #0]
 8004b76:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b78:	6883      	ldr	r3, [r0, #8]
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d004      	beq.n	8004b88 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004b7e:	6803      	ldr	r3, [r0, #0]
 8004b80:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004b82:	6803      	ldr	r3, [r0, #0]
 8004b84:	60da      	str	r2, [r3, #12]
  }
}
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8004b88:	6803      	ldr	r3, [r0, #0]
 8004b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004b8c:	6803      	ldr	r3, [r0, #0]
 8004b8e:	60d9      	str	r1, [r3, #12]
 8004b90:	e7f9      	b.n	8004b86 <DMA_SetConfig+0x22>
	...

08004b94 <HAL_DMA_Init>:
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8004b98:	d03d      	beq.n	8004c16 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b9a:	6805      	ldr	r5, [r0, #0]
 8004b9c:	4b1f      	ldr	r3, [pc, #124]	; (8004c1c <HAL_DMA_Init+0x88>)
 8004b9e:	18e8      	adds	r0, r5, r3
 8004ba0:	2114      	movs	r1, #20
 8004ba2:	f7fb fabb 	bl	800011c <__udivsi3>
 8004ba6:	0080      	lsls	r0, r0, #2
 8004ba8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_DMA_Init+0x8c>)
 8004bac:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bae:	2325      	movs	r3, #37	; 0x25
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8004bb4:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_DMA_Init+0x90>)
 8004bb8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	68e1      	ldr	r1, [r4, #12]
 8004bbe:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc0:	6921      	ldr	r1, [r4, #16]
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	6961      	ldr	r1, [r4, #20]
 8004bc6:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc8:	69a1      	ldr	r1, [r4, #24]
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	69e1      	ldr	r1, [r4, #28]
 8004bce:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd0:	6a21      	ldr	r1, [r4, #32]
 8004bd2:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8004bd4:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004bd6:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	01db      	lsls	r3, r3, #7
 8004bdc:	68a2      	ldr	r2, [r4, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d010      	beq.n	8004c04 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_DMA_Init+0x94>)
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	221c      	movs	r2, #28
 8004be8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004bea:	4015      	ands	r5, r2
 8004bec:	200f      	movs	r0, #15
 8004bee:	40a8      	lsls	r0, r5
 8004bf0:	4381      	bics	r1, r0
 8004bf2:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004bf8:	4002      	ands	r2, r0
 8004bfa:	6860      	ldr	r0, [r4, #4]
 8004bfc:	4090      	lsls	r0, r2
 8004bfe:	0002      	movs	r2, r0
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8004c08:	2225      	movs	r2, #37	; 0x25
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8004c0e:	3a01      	subs	r2, #1
 8004c10:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004c12:	2000      	movs	r0, #0
}
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c16:	2001      	movs	r0, #1
 8004c18:	e7fc      	b.n	8004c14 <HAL_DMA_Init+0x80>
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	bffdfff8 	.word	0xbffdfff8
 8004c20:	40020000 	.word	0x40020000
 8004c24:	ffff800f 	.word	0xffff800f
 8004c28:	400200a8 	.word	0x400200a8

08004c2c <HAL_DMA_Start_IT>:
{
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004c30:	2024      	movs	r0, #36	; 0x24
 8004c32:	5c20      	ldrb	r0, [r4, r0]
 8004c34:	2801      	cmp	r0, #1
 8004c36:	d032      	beq.n	8004c9e <HAL_DMA_Start_IT+0x72>
 8004c38:	2024      	movs	r0, #36	; 0x24
 8004c3a:	2501      	movs	r5, #1
 8004c3c:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c3e:	3001      	adds	r0, #1
 8004c40:	5c20      	ldrb	r0, [r4, r0]
 8004c42:	2801      	cmp	r0, #1
 8004c44:	d004      	beq.n	8004c50 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8004c46:	2324      	movs	r3, #36	; 0x24
 8004c48:	2200      	movs	r2, #0
 8004c4a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8004c4c:	2002      	movs	r0, #2
}
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c50:	3024      	adds	r0, #36	; 0x24
 8004c52:	3501      	adds	r5, #1
 8004c54:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c56:	2000      	movs	r0, #0
 8004c58:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004c5a:	6825      	ldr	r5, [r4, #0]
 8004c5c:	6828      	ldr	r0, [r5, #0]
 8004c5e:	2601      	movs	r6, #1
 8004c60:	43b0      	bics	r0, r6
 8004c62:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c64:	0020      	movs	r0, r4
 8004c66:	f7ff ff7d 	bl	8004b64 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8004c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	210e      	movs	r1, #14
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	2101      	movs	r1, #1
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2000      	movs	r0, #0
 8004c86:	e7e2      	b.n	8004c4e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	438b      	bics	r3, r1
 8004c90:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	6813      	ldr	r3, [r2, #0]
 8004c96:	3106      	adds	r1, #6
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	e7ed      	b.n	8004c7a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8004c9e:	2002      	movs	r0, #2
 8004ca0:	e7d5      	b.n	8004c4e <HAL_DMA_Start_IT+0x22>

08004ca2 <HAL_DMA_Abort_IT>:
{
 8004ca2:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ca4:	2325      	movs	r3, #37	; 0x25
 8004ca6:	5cc3      	ldrb	r3, [r0, r3]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d003      	beq.n	8004cb4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cac:	2304      	movs	r3, #4
 8004cae:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004cb0:	2001      	movs	r0, #1
}
 8004cb2:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	210e      	movs	r1, #14
 8004cba:	438b      	bics	r3, r1
 8004cbc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004cbe:	6801      	ldr	r1, [r0, #0]
 8004cc0:	680a      	ldr	r2, [r1, #0]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	439a      	bics	r2, r3
 8004cc6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cc8:	221c      	movs	r2, #28
 8004cca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004ccc:	400a      	ands	r2, r1
 8004cce:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004cd0:	001c      	movs	r4, r3
 8004cd2:	4094      	lsls	r4, r2
 8004cd4:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	2225      	movs	r2, #37	; 0x25
 8004cd8:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8004cda:	3323      	adds	r3, #35	; 0x23
 8004cdc:	2200      	movs	r2, #0
 8004cde:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8004ce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 8004ce6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e7e2      	b.n	8004cb2 <HAL_DMA_Abort_IT+0x10>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e7e0      	b.n	8004cb2 <HAL_DMA_Abort_IT+0x10>

08004cf0 <HAL_DMA_IRQHandler>:
{
 8004cf0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cf4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004cf6:	6804      	ldr	r4, [r0, #0]
 8004cf8:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004cfa:	231c      	movs	r3, #28
 8004cfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2204      	movs	r2, #4
 8004d02:	409a      	lsls	r2, r3
 8004d04:	4211      	tst	r1, r2
 8004d06:	d014      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x42>
 8004d08:	076a      	lsls	r2, r5, #29
 8004d0a:	d512      	bpl.n	8004d32 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	069b      	lsls	r3, r3, #26
 8004d10:	d403      	bmi.n	8004d1a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	2204      	movs	r2, #4
 8004d16:	4393      	bics	r3, r2
 8004d18:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004d1a:	221c      	movs	r2, #28
 8004d1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d1e:	401a      	ands	r2, r3
 8004d20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d22:	2304      	movs	r3, #4
 8004d24:	4093      	lsls	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8004d28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d000      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8004d2e:	4798      	blx	r3
}
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004d32:	2202      	movs	r2, #2
 8004d34:	409a      	lsls	r2, r3
 8004d36:	4211      	tst	r1, r2
 8004d38:	d01a      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x80>
 8004d3a:	07aa      	lsls	r2, r5, #30
 8004d3c:	d518      	bpl.n	8004d70 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	069b      	lsls	r3, r3, #26
 8004d42:	d406      	bmi.n	8004d52 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	220a      	movs	r2, #10
 8004d48:	4393      	bics	r3, r2
 8004d4a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004d4c:	2325      	movs	r3, #37	; 0x25
 8004d4e:	3a09      	subs	r2, #9
 8004d50:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d52:	221c      	movs	r2, #28
 8004d54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d56:	401a      	ands	r2, r3
 8004d58:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	4093      	lsls	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004d60:	2324      	movs	r3, #36	; 0x24
 8004d62:	2200      	movs	r2, #0
 8004d64:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8004d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0e1      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8004d6c:	4798      	blx	r3
 8004d6e:	e7df      	b.n	8004d30 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004d70:	2208      	movs	r2, #8
 8004d72:	409a      	lsls	r2, r3
 8004d74:	4211      	tst	r1, r2
 8004d76:	d0db      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x40>
 8004d78:	072b      	lsls	r3, r5, #28
 8004d7a:	d5d9      	bpl.n	8004d30 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	220e      	movs	r2, #14
 8004d80:	4393      	bics	r3, r2
 8004d82:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d84:	320e      	adds	r2, #14
 8004d86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d88:	401a      	ands	r2, r3
 8004d8a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	001c      	movs	r4, r3
 8004d90:	4094      	lsls	r4, r2
 8004d92:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d94:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004d96:	2225      	movs	r2, #37	; 0x25
 8004d98:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8004d9a:	3323      	adds	r3, #35	; 0x23
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8004da0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0c4      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8004da6:	4798      	blx	r3
  return;
 8004da8:	e7c2      	b.n	8004d30 <HAL_DMA_IRQHandler+0x40>
	...

08004dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dae:	46c6      	mov	lr, r8
 8004db0:	b500      	push	{lr}
  uint32_t position = 0x00U;
 8004db2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004db4:	e038      	b.n	8004e28 <HAL_GPIO_Init+0x7c>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004db6:	2605      	movs	r6, #5
 8004db8:	e000      	b.n	8004dbc <HAL_GPIO_Init+0x10>
 8004dba:	2600      	movs	r6, #0
 8004dbc:	40a6      	lsls	r6, r4
 8004dbe:	0034      	movs	r4, r6
 8004dc0:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc2:	3202      	adds	r2, #2
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	4e58      	ldr	r6, [pc, #352]	; (8004f28 <HAL_GPIO_Init+0x17c>)
 8004dc8:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dca:	4a58      	ldr	r2, [pc, #352]	; (8004f2c <HAL_GPIO_Init+0x180>)
 8004dcc:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004dce:	4642      	mov	r2, r8
 8004dd0:	43d2      	mvns	r2, r2
 8004dd2:	0026      	movs	r6, r4
 8004dd4:	4645      	mov	r5, r8
 8004dd6:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dd8:	684d      	ldr	r5, [r1, #4]
 8004dda:	03ed      	lsls	r5, r5, #15
 8004ddc:	d502      	bpl.n	8004de4 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8004dde:	4645      	mov	r5, r8
 8004de0:	432c      	orrs	r4, r5
 8004de2:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 8004de4:	4c51      	ldr	r4, [pc, #324]	; (8004f2c <HAL_GPIO_Init+0x180>)
 8004de6:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8004de8:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004dea:	0026      	movs	r6, r4
 8004dec:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dee:	684d      	ldr	r5, [r1, #4]
 8004df0:	03ad      	lsls	r5, r5, #14
 8004df2:	d502      	bpl.n	8004dfa <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8004df4:	4645      	mov	r5, r8
 8004df6:	432c      	orrs	r4, r5
 8004df8:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8004dfa:	4c4c      	ldr	r4, [pc, #304]	; (8004f2c <HAL_GPIO_Init+0x180>)
 8004dfc:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dfe:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e00:	0026      	movs	r6, r4
 8004e02:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e04:	684d      	ldr	r5, [r1, #4]
 8004e06:	02ed      	lsls	r5, r5, #11
 8004e08:	d502      	bpl.n	8004e10 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8004e0a:	4645      	mov	r5, r8
 8004e0c:	432c      	orrs	r4, r5
 8004e0e:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8004e10:	4c46      	ldr	r4, [pc, #280]	; (8004f2c <HAL_GPIO_Init+0x180>)
 8004e12:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8004e14:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004e16:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e18:	684d      	ldr	r5, [r1, #4]
 8004e1a:	02ad      	lsls	r5, r5, #10
 8004e1c:	d501      	bpl.n	8004e22 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8004e1e:	4642      	mov	r2, r8
 8004e20:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8004e22:	4c42      	ldr	r4, [pc, #264]	; (8004f2c <HAL_GPIO_Init+0x180>)
 8004e24:	60e2      	str	r2, [r4, #12]
      }
    }
    position++;
 8004e26:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8004e28:	680c      	ldr	r4, [r1, #0]
 8004e2a:	0022      	movs	r2, r4
 8004e2c:	40da      	lsrs	r2, r3
 8004e2e:	d078      	beq.n	8004f22 <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004e30:	2201      	movs	r2, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	0025      	movs	r5, r4
 8004e36:	4015      	ands	r5, r2
 8004e38:	46a8      	mov	r8, r5
    if(iocurrent)
 8004e3a:	4214      	tst	r4, r2
 8004e3c:	d0f3      	beq.n	8004e26 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004e3e:	684c      	ldr	r4, [r1, #4]
 8004e40:	2c02      	cmp	r4, #2
 8004e42:	d001      	beq.n	8004e48 <HAL_GPIO_Init+0x9c>
 8004e44:	2c12      	cmp	r4, #18
 8004e46:	d10e      	bne.n	8004e66 <HAL_GPIO_Init+0xba>
        temp = GPIOx->AFR[position >> 3U];
 8004e48:	08dc      	lsrs	r4, r3, #3
 8004e4a:	3408      	adds	r4, #8
 8004e4c:	00a4      	lsls	r4, r4, #2
 8004e4e:	5827      	ldr	r7, [r4, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004e50:	2607      	movs	r6, #7
 8004e52:	401e      	ands	r6, r3
 8004e54:	00b6      	lsls	r6, r6, #2
 8004e56:	250f      	movs	r5, #15
 8004e58:	40b5      	lsls	r5, r6
 8004e5a:	43af      	bics	r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004e5c:	690d      	ldr	r5, [r1, #16]
 8004e5e:	40b5      	lsls	r5, r6
 8004e60:	002e      	movs	r6, r5
 8004e62:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004e64:	5026      	str	r6, [r4, r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e66:	684c      	ldr	r4, [r1, #4]
 8004e68:	1e66      	subs	r6, r4, #1
 8004e6a:	2e01      	cmp	r6, #1
 8004e6c:	d903      	bls.n	8004e76 <HAL_GPIO_Init+0xca>
 8004e6e:	2c11      	cmp	r4, #17
 8004e70:	d001      	beq.n	8004e76 <HAL_GPIO_Init+0xca>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e72:	2c12      	cmp	r4, #18
 8004e74:	d112      	bne.n	8004e9c <HAL_GPIO_Init+0xf0>
        temp = GPIOx->OSPEEDR;
 8004e76:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e78:	005f      	lsls	r7, r3, #1
 8004e7a:	2603      	movs	r6, #3
 8004e7c:	40be      	lsls	r6, r7
 8004e7e:	43b4      	bics	r4, r6
 8004e80:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e82:	68cc      	ldr	r4, [r1, #12]
 8004e84:	40bc      	lsls	r4, r7
 8004e86:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004e88:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 8004e8a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e8c:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e8e:	684a      	ldr	r2, [r1, #4]
 8004e90:	0916      	lsrs	r6, r2, #4
 8004e92:	2201      	movs	r2, #1
 8004e94:	4032      	ands	r2, r6
 8004e96:	409a      	lsls	r2, r3
 8004e98:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004e9a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->MODER;
 8004e9c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e9e:	005e      	lsls	r6, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	0017      	movs	r7, r2
 8004ea4:	40b7      	lsls	r7, r6
 8004ea6:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea8:	684d      	ldr	r5, [r1, #4]
 8004eaa:	402a      	ands	r2, r5
 8004eac:	40b2      	lsls	r2, r6
 8004eae:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004eb0:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8004eb2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eb4:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8004eb6:	688a      	ldr	r2, [r1, #8]
 8004eb8:	40b2      	lsls	r2, r6
 8004eba:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8004ebc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004ebe:	684a      	ldr	r2, [r1, #4]
 8004ec0:	00d2      	lsls	r2, r2, #3
 8004ec2:	d5b0      	bpl.n	8004e26 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec4:	4c1a      	ldr	r4, [pc, #104]	; (8004f30 <HAL_GPIO_Init+0x184>)
 8004ec6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ec8:	2601      	movs	r6, #1
 8004eca:	4332      	orrs	r2, r6
 8004ecc:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ece:	089a      	lsrs	r2, r3, #2
 8004ed0:	1c94      	adds	r4, r2, #2
 8004ed2:	00a4      	lsls	r4, r4, #2
 8004ed4:	4e14      	ldr	r6, [pc, #80]	; (8004f28 <HAL_GPIO_Init+0x17c>)
 8004ed6:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004ed8:	2603      	movs	r6, #3
 8004eda:	401e      	ands	r6, r3
 8004edc:	00b4      	lsls	r4, r6, #2
 8004ede:	260f      	movs	r6, #15
 8004ee0:	40a6      	lsls	r6, r4
 8004ee2:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ee4:	26a0      	movs	r6, #160	; 0xa0
 8004ee6:	05f6      	lsls	r6, r6, #23
 8004ee8:	42b0      	cmp	r0, r6
 8004eea:	d100      	bne.n	8004eee <HAL_GPIO_Init+0x142>
 8004eec:	e765      	b.n	8004dba <HAL_GPIO_Init+0xe>
 8004eee:	4e11      	ldr	r6, [pc, #68]	; (8004f34 <HAL_GPIO_Init+0x188>)
 8004ef0:	42b0      	cmp	r0, r6
 8004ef2:	d00e      	beq.n	8004f12 <HAL_GPIO_Init+0x166>
 8004ef4:	4e10      	ldr	r6, [pc, #64]	; (8004f38 <HAL_GPIO_Init+0x18c>)
 8004ef6:	42b0      	cmp	r0, r6
 8004ef8:	d00d      	beq.n	8004f16 <HAL_GPIO_Init+0x16a>
 8004efa:	4e10      	ldr	r6, [pc, #64]	; (8004f3c <HAL_GPIO_Init+0x190>)
 8004efc:	42b0      	cmp	r0, r6
 8004efe:	d00c      	beq.n	8004f1a <HAL_GPIO_Init+0x16e>
 8004f00:	4e0f      	ldr	r6, [pc, #60]	; (8004f40 <HAL_GPIO_Init+0x194>)
 8004f02:	42b0      	cmp	r0, r6
 8004f04:	d00b      	beq.n	8004f1e <HAL_GPIO_Init+0x172>
 8004f06:	4e0f      	ldr	r6, [pc, #60]	; (8004f44 <HAL_GPIO_Init+0x198>)
 8004f08:	42b0      	cmp	r0, r6
 8004f0a:	d100      	bne.n	8004f0e <HAL_GPIO_Init+0x162>
 8004f0c:	e753      	b.n	8004db6 <HAL_GPIO_Init+0xa>
 8004f0e:	2606      	movs	r6, #6
 8004f10:	e754      	b.n	8004dbc <HAL_GPIO_Init+0x10>
 8004f12:	2601      	movs	r6, #1
 8004f14:	e752      	b.n	8004dbc <HAL_GPIO_Init+0x10>
 8004f16:	2602      	movs	r6, #2
 8004f18:	e750      	b.n	8004dbc <HAL_GPIO_Init+0x10>
 8004f1a:	2603      	movs	r6, #3
 8004f1c:	e74e      	b.n	8004dbc <HAL_GPIO_Init+0x10>
 8004f1e:	2604      	movs	r6, #4
 8004f20:	e74c      	b.n	8004dbc <HAL_GPIO_Init+0x10>
  }
}
 8004f22:	bc80      	pop	{r7}
 8004f24:	46b8      	mov	r8, r7
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40021000 	.word	0x40021000
 8004f34:	50000400 	.word	0x50000400
 8004f38:	50000800 	.word	0x50000800
 8004f3c:	50000c00 	.word	0x50000c00
 8004f40:	50001000 	.word	0x50001000
 8004f44:	50001c00 	.word	0x50001c00

08004f48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f4c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004f4e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8004f50:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004f52:	e7fc      	b.n	8004f4e <HAL_GPIO_WritePin+0x6>

08004f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f54:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4218      	tst	r0, r3
 8004f5c:	d100      	bne.n	8004f60 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004f5e:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f60:	4b02      	ldr	r3, [pc, #8]	; (8004f6c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004f62:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f64:	f00a fcd2 	bl	800f90c <HAL_GPIO_EXTI_Callback>
}
 8004f68:	e7f9      	b.n	8004f5e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	40010400 	.word	0x40010400

08004f70 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f70:	6803      	ldr	r3, [r0, #0]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	0792      	lsls	r2, r2, #30
 8004f76:	d501      	bpl.n	8004f7c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f78:	2200      	movs	r2, #0
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f7c:	6803      	ldr	r3, [r0, #0]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	07d2      	lsls	r2, r2, #31
 8004f82:	d403      	bmi.n	8004f8c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	2101      	movs	r1, #1
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	619a      	str	r2, [r3, #24]
  }
}
 8004f8c:	4770      	bx	lr
	...

08004f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	9c05      	ldr	r4, [sp, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004f94:	6805      	ldr	r5, [r0, #0]
 8004f96:	6868      	ldr	r0, [r5, #4]
 8004f98:	0d66      	lsrs	r6, r4, #21
 8004f9a:	2780      	movs	r7, #128	; 0x80
 8004f9c:	00ff      	lsls	r7, r7, #3
 8004f9e:	4037      	ands	r7, r6
 8004fa0:	4e05      	ldr	r6, [pc, #20]	; (8004fb8 <I2C_TransferConfig+0x28>)
 8004fa2:	433e      	orrs	r6, r7
 8004fa4:	43b0      	bics	r0, r6
 8004fa6:	0589      	lsls	r1, r1, #22
 8004fa8:	0d89      	lsrs	r1, r1, #22
 8004faa:	0412      	lsls	r2, r2, #16
 8004fac:	4311      	orrs	r1, r2
 8004fae:	4319      	orrs	r1, r3
 8004fb0:	4321      	orrs	r1, r4
 8004fb2:	4301      	orrs	r1, r0
 8004fb4:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb8:	03ff63ff 	.word	0x03ff63ff

08004fbc <I2C_IsAcknowledgeFailed>:
{
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	0005      	movs	r5, r0
 8004fc0:	000f      	movs	r7, r1
 8004fc2:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc4:	6803      	ldr	r3, [r0, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	06db      	lsls	r3, r3, #27
 8004fca:	d401      	bmi.n	8004fd0 <I2C_IsAcknowledgeFailed+0x14>
  return HAL_OK;
 8004fcc:	2000      	movs	r0, #0
}
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	699c      	ldr	r4, [r3, #24]
 8004fd4:	06a2      	lsls	r2, r4, #26
 8004fd6:	d415      	bmi.n	8005004 <I2C_IsAcknowledgeFailed+0x48>
      if (Timeout != HAL_MAX_DELAY)
 8004fd8:	1c7b      	adds	r3, r7, #1
 8004fda:	d0f9      	beq.n	8004fd0 <I2C_IsAcknowledgeFailed+0x14>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fdc:	f7ff fad4 	bl	8004588 <HAL_GetTick>
 8004fe0:	1b80      	subs	r0, r0, r6
 8004fe2:	42b8      	cmp	r0, r7
 8004fe4:	d801      	bhi.n	8004fea <I2C_IsAcknowledgeFailed+0x2e>
 8004fe6:	2f00      	cmp	r7, #0
 8004fe8:	d1f2      	bne.n	8004fd0 <I2C_IsAcknowledgeFailed+0x14>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004fec:	2220      	movs	r2, #32
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	2341      	movs	r3, #65	; 0x41
 8004ff4:	54ea      	strb	r2, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	3222      	adds	r2, #34	; 0x22
 8004ffa:	54ab      	strb	r3, [r5, r2]
          __HAL_UNLOCK(hi2c);
 8004ffc:	3a02      	subs	r2, #2
 8004ffe:	54ab      	strb	r3, [r5, r2]
          return HAL_ERROR;
 8005000:	2001      	movs	r0, #1
 8005002:	e7e4      	b.n	8004fce <I2C_IsAcknowledgeFailed+0x12>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005004:	2210      	movs	r2, #16
 8005006:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	2420      	movs	r4, #32
 800500c:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800500e:	0028      	movs	r0, r5
 8005010:	f7ff ffae 	bl	8004f70 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005014:	682a      	ldr	r2, [r5, #0]
 8005016:	6853      	ldr	r3, [r2, #4]
 8005018:	4907      	ldr	r1, [pc, #28]	; (8005038 <I2C_IsAcknowledgeFailed+0x7c>)
 800501a:	400b      	ands	r3, r1
 800501c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800501e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005020:	2204      	movs	r2, #4
 8005022:	4313      	orrs	r3, r2
 8005024:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005026:	2341      	movs	r3, #65	; 0x41
 8005028:	54ec      	strb	r4, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	323e      	adds	r2, #62	; 0x3e
 800502e:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8005030:	3a02      	subs	r2, #2
 8005032:	54ab      	strb	r3, [r5, r2]
    return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
 8005036:	e7ca      	b.n	8004fce <I2C_IsAcknowledgeFailed+0x12>
 8005038:	fe00e800 	.word	0xfe00e800

0800503c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	0004      	movs	r4, r0
 8005040:	000d      	movs	r5, r1
 8005042:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	079b      	lsls	r3, r3, #30
 800504a:	d41c      	bmi.n	8005086 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800504c:	0032      	movs	r2, r6
 800504e:	0029      	movs	r1, r5
 8005050:	0020      	movs	r0, r4
 8005052:	f7ff ffb3 	bl	8004fbc <I2C_IsAcknowledgeFailed>
 8005056:	2800      	cmp	r0, #0
 8005058:	d117      	bne.n	800508a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800505a:	1c6b      	adds	r3, r5, #1
 800505c:	d0f2      	beq.n	8005044 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7ff fa93 	bl	8004588 <HAL_GetTick>
 8005062:	1b80      	subs	r0, r0, r6
 8005064:	42a8      	cmp	r0, r5
 8005066:	d801      	bhi.n	800506c <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8005068:	2d00      	cmp	r5, #0
 800506a:	d1eb      	bne.n	8005044 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800506e:	2220      	movs	r2, #32
 8005070:	4313      	orrs	r3, r2
 8005072:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005074:	2341      	movs	r3, #65	; 0x41
 8005076:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	2300      	movs	r3, #0
 800507a:	3222      	adds	r2, #34	; 0x22
 800507c:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 800507e:	3a02      	subs	r2, #2
 8005080:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8005082:	2001      	movs	r0, #1
 8005084:	e000      	b.n	8005088 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 8005086:	2000      	movs	r0, #0
}
 8005088:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800508a:	2001      	movs	r0, #1
 800508c:	e7fc      	b.n	8005088 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

0800508e <I2C_WaitOnFlagUntilTimeout>:
{
 800508e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005090:	46c6      	mov	lr, r8
 8005092:	b500      	push	{lr}
 8005094:	0007      	movs	r7, r0
 8005096:	000d      	movs	r5, r1
 8005098:	4690      	mov	r8, r2
 800509a:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699c      	ldr	r4, [r3, #24]
 80050a0:	402c      	ands	r4, r5
 80050a2:	1b64      	subs	r4, r4, r5
 80050a4:	4263      	negs	r3, r4
 80050a6:	415c      	adcs	r4, r3
 80050a8:	4544      	cmp	r4, r8
 80050aa:	d116      	bne.n	80050da <I2C_WaitOnFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	1c73      	adds	r3, r6, #1
 80050ae:	d0f5      	beq.n	800509c <I2C_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7ff fa6a 	bl	8004588 <HAL_GetTick>
 80050b4:	9b06      	ldr	r3, [sp, #24]
 80050b6:	1ac0      	subs	r0, r0, r3
 80050b8:	42b0      	cmp	r0, r6
 80050ba:	d801      	bhi.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0x32>
 80050bc:	2e00      	cmp	r6, #0
 80050be:	d1ed      	bne.n	800509c <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	2220      	movs	r2, #32
 80050c4:	4313      	orrs	r3, r2
 80050c6:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	2341      	movs	r3, #65	; 0x41
 80050ca:	54fa      	strb	r2, [r7, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	3222      	adds	r2, #34	; 0x22
 80050d0:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(hi2c);
 80050d2:	3a02      	subs	r2, #2
 80050d4:	54bb      	strb	r3, [r7, r2]
        return HAL_ERROR;
 80050d6:	2001      	movs	r0, #1
 80050d8:	e000      	b.n	80050dc <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 80050da:	2000      	movs	r0, #0
}
 80050dc:	bc80      	pop	{r7}
 80050de:	46b8      	mov	r8, r7
 80050e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80050e2:	b570      	push	{r4, r5, r6, lr}
 80050e4:	0005      	movs	r5, r0
 80050e6:	000c      	movs	r4, r1
 80050e8:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	069b      	lsls	r3, r3, #26
 80050f0:	d41a      	bmi.n	8005128 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f2:	0032      	movs	r2, r6
 80050f4:	0021      	movs	r1, r4
 80050f6:	0028      	movs	r0, r5
 80050f8:	f7ff ff60 	bl	8004fbc <I2C_IsAcknowledgeFailed>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d115      	bne.n	800512c <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005100:	f7ff fa42 	bl	8004588 <HAL_GetTick>
 8005104:	1b80      	subs	r0, r0, r6
 8005106:	42a0      	cmp	r0, r4
 8005108:	d801      	bhi.n	800510e <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800510a:	2c00      	cmp	r4, #0
 800510c:	d1ed      	bne.n	80050ea <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005110:	2220      	movs	r2, #32
 8005112:	4313      	orrs	r3, r2
 8005114:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005116:	2341      	movs	r3, #65	; 0x41
 8005118:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800511a:	2300      	movs	r3, #0
 800511c:	3222      	adds	r2, #34	; 0x22
 800511e:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8005120:	3a02      	subs	r2, #2
 8005122:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8005124:	2001      	movs	r0, #1
}
 8005126:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005128:	2000      	movs	r0, #0
 800512a:	e7fc      	b.n	8005126 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 800512c:	2001      	movs	r0, #1
 800512e:	e7fa      	b.n	8005126 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08005130 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	0004      	movs	r4, r0
 8005134:	000d      	movs	r5, r1
 8005136:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	075b      	lsls	r3, r3, #29
 800513e:	d433      	bmi.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005140:	0032      	movs	r2, r6
 8005142:	0029      	movs	r1, r5
 8005144:	0020      	movs	r0, r4
 8005146:	f7ff ff39 	bl	8004fbc <I2C_IsAcknowledgeFailed>
 800514a:	2800      	cmp	r0, #0
 800514c:	d12e      	bne.n	80051ac <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	0692      	lsls	r2, r2, #26
 8005154:	d411      	bmi.n	800517a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f7ff fa17 	bl	8004588 <HAL_GetTick>
 800515a:	1b80      	subs	r0, r0, r6
 800515c:	42a8      	cmp	r0, r5
 800515e:	d801      	bhi.n	8005164 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8005160:	2d00      	cmp	r5, #0
 8005162:	d1e9      	bne.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005164:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005166:	2220      	movs	r2, #32
 8005168:	4313      	orrs	r3, r2
 800516a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800516c:	2341      	movs	r3, #65	; 0x41
 800516e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8005170:	3b01      	subs	r3, #1
 8005172:	2200      	movs	r2, #0
 8005174:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8005176:	2001      	movs	r0, #1
}
 8005178:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	0752      	lsls	r2, r2, #29
 800517e:	d502      	bpl.n	8005186 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
 8005180:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005182:	2a00      	cmp	r2, #0
 8005184:	d1f8      	bne.n	8005178 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005186:	2220      	movs	r2, #32
 8005188:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800518a:	6821      	ldr	r1, [r4, #0]
 800518c:	684b      	ldr	r3, [r1, #4]
 800518e:	4808      	ldr	r0, [pc, #32]	; (80051b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>)
 8005190:	4003      	ands	r3, r0
 8005192:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005194:	2300      	movs	r3, #0
 8005196:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005198:	2141      	movs	r1, #65	; 0x41
 800519a:	5462      	strb	r2, [r4, r1]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800519c:	3222      	adds	r2, #34	; 0x22
 800519e:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80051a0:	3a02      	subs	r2, #2
 80051a2:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80051a4:	2001      	movs	r0, #1
 80051a6:	e7e7      	b.n	8005178 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
  return HAL_OK;
 80051a8:	2000      	movs	r0, #0
 80051aa:	e7e5      	b.n	8005178 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
      return HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
 80051ae:	e7e3      	b.n	8005178 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80051b0:	fe00e800 	.word	0xfe00e800

080051b4 <HAL_I2C_Init>:
{
 80051b4:	b510      	push	{r4, lr}
 80051b6:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80051b8:	d059      	beq.n	800526e <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051ba:	2341      	movs	r3, #65	; 0x41
 80051bc:	5cc3      	ldrb	r3, [r0, r3]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d043      	beq.n	800524a <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80051c2:	2341      	movs	r3, #65	; 0x41
 80051c4:	2224      	movs	r2, #36	; 0x24
 80051c6:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	438b      	bics	r3, r1
 80051d0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_I2C_Init+0xc0>)
 80051d6:	6861      	ldr	r1, [r4, #4]
 80051d8:	400b      	ands	r3, r1
 80051da:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051dc:	6822      	ldr	r2, [r4, #0]
 80051de:	6893      	ldr	r3, [r2, #8]
 80051e0:	4925      	ldr	r1, [pc, #148]	; (8005278 <HAL_I2C_Init+0xc4>)
 80051e2:	400b      	ands	r3, r1
 80051e4:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e6:	68e3      	ldr	r3, [r4, #12]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d034      	beq.n	8005256 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	2384      	movs	r3, #132	; 0x84
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	68a1      	ldr	r1, [r4, #8]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051f8:	68e3      	ldr	r3, [r4, #12]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d032      	beq.n	8005264 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	6851      	ldr	r1, [r2, #4]
 8005202:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_I2C_Init+0xc8>)
 8005204:	430b      	orrs	r3, r1
 8005206:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	68d3      	ldr	r3, [r2, #12]
 800520c:	491a      	ldr	r1, [pc, #104]	; (8005278 <HAL_I2C_Init+0xc4>)
 800520e:	400b      	ands	r3, r1
 8005210:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6962      	ldr	r2, [r4, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	69a2      	ldr	r2, [r4, #24]
 800521a:	0212      	lsls	r2, r2, #8
 800521c:	6821      	ldr	r1, [r4, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	69e3      	ldr	r3, [r4, #28]
 8005226:	6a21      	ldr	r1, [r4, #32]
 8005228:	430b      	orrs	r3, r1
 800522a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800522c:	6822      	ldr	r2, [r4, #0]
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	2101      	movs	r1, #1
 8005232:	430b      	orrs	r3, r1
 8005234:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005236:	2300      	movs	r3, #0
 8005238:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800523a:	2241      	movs	r2, #65	; 0x41
 800523c:	311f      	adds	r1, #31
 800523e:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005240:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	3201      	adds	r2, #1
 8005244:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005246:	2000      	movs	r0, #0
}
 8005248:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800524a:	3340      	adds	r3, #64	; 0x40
 800524c:	2200      	movs	r2, #0
 800524e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8005250:	f009 feac 	bl	800efac <HAL_I2C_MspInit>
 8005254:	e7b5      	b.n	80051c2 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	68a1      	ldr	r1, [r4, #8]
 800525e:	430b      	orrs	r3, r1
 8005260:	6093      	str	r3, [r2, #8]
 8005262:	e7c9      	b.n	80051f8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	0112      	lsls	r2, r2, #4
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	e7c7      	b.n	80051fe <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800526e:	2001      	movs	r0, #1
 8005270:	e7ea      	b.n	8005248 <HAL_I2C_Init+0x94>
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	f0ffffff 	.word	0xf0ffffff
 8005278:	ffff7fff 	.word	0xffff7fff
 800527c:	02008000 	.word	0x02008000

08005280 <HAL_I2C_Master_Transmit>:
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b085      	sub	sp, #20
 8005284:	0004      	movs	r4, r0
 8005286:	000f      	movs	r7, r1
 8005288:	9202      	str	r2, [sp, #8]
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800528e:	2341      	movs	r3, #65	; 0x41
 8005290:	5cc3      	ldrb	r3, [r0, r3]
 8005292:	2b20      	cmp	r3, #32
 8005294:	d000      	beq.n	8005298 <HAL_I2C_Master_Transmit+0x18>
 8005296:	e09b      	b.n	80053d0 <HAL_I2C_Master_Transmit+0x150>
    __HAL_LOCK(hi2c);
 8005298:	3320      	adds	r3, #32
 800529a:	5cc3      	ldrb	r3, [r0, r3]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d100      	bne.n	80052a2 <HAL_I2C_Master_Transmit+0x22>
 80052a0:	e099      	b.n	80053d6 <HAL_I2C_Master_Transmit+0x156>
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	2201      	movs	r2, #1
 80052a6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80052a8:	f7ff f96e 	bl	8004588 <HAL_GetTick>
 80052ac:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	9000      	str	r0, [sp, #0]
 80052b2:	2319      	movs	r3, #25
 80052b4:	2201      	movs	r2, #1
 80052b6:	0209      	lsls	r1, r1, #8
 80052b8:	0020      	movs	r0, r4
 80052ba:	f7ff fee8 	bl	800508e <I2C_WaitOnFlagUntilTimeout>
 80052be:	2800      	cmp	r0, #0
 80052c0:	d000      	beq.n	80052c4 <HAL_I2C_Master_Transmit+0x44>
 80052c2:	e08a      	b.n	80053da <HAL_I2C_Master_Transmit+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052c4:	2341      	movs	r3, #65	; 0x41
 80052c6:	2221      	movs	r2, #33	; 0x21
 80052c8:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052ca:	3301      	adds	r3, #1
 80052cc:	3a11      	subs	r2, #17
 80052ce:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80052d4:	9a02      	ldr	r2, [sp, #8]
 80052d6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80052d8:	9a03      	ldr	r2, [sp, #12]
 80052da:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052dc:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2bff      	cmp	r3, #255	; 0xff
 80052e4:	d90b      	bls.n	80052fe <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e6:	23ff      	movs	r3, #255	; 0xff
 80052e8:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052ea:	3b7f      	subs	r3, #127	; 0x7f
 80052ec:	4a3f      	ldr	r2, [pc, #252]	; (80053ec <HAL_I2C_Master_Transmit+0x16c>)
 80052ee:	9200      	str	r2, [sp, #0]
 80052f0:	045b      	lsls	r3, r3, #17
 80052f2:	22ff      	movs	r2, #255	; 0xff
 80052f4:	0039      	movs	r1, r7
 80052f6:	0020      	movs	r0, r4
 80052f8:	f7ff fe4a 	bl	8004f90 <I2C_TransferConfig>
 80052fc:	e018      	b.n	8005330 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 80052fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005300:	b292      	uxth	r2, r2
 8005302:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	4938      	ldr	r1, [pc, #224]	; (80053ec <HAL_I2C_Master_Transmit+0x16c>)
 800530a:	9100      	str	r1, [sp, #0]
 800530c:	049b      	lsls	r3, r3, #18
 800530e:	0039      	movs	r1, r7
 8005310:	0020      	movs	r0, r4
 8005312:	f7ff fe3d 	bl	8004f90 <I2C_TransferConfig>
 8005316:	e00b      	b.n	8005330 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8005318:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800531a:	b292      	uxth	r2, r2
 800531c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	2100      	movs	r1, #0
 8005324:	9100      	str	r1, [sp, #0]
 8005326:	049b      	lsls	r3, r3, #18
 8005328:	0039      	movs	r1, r7
 800532a:	0020      	movs	r0, r4
 800532c:	f7ff fe30 	bl	8004f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005330:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d034      	beq.n	80053a2 <HAL_I2C_Master_Transmit+0x122>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005338:	0032      	movs	r2, r6
 800533a:	0029      	movs	r1, r5
 800533c:	0020      	movs	r0, r4
 800533e:	f7ff fe7d 	bl	800503c <I2C_WaitOnTXISFlagUntilTimeout>
 8005342:	2800      	cmp	r0, #0
 8005344:	d14b      	bne.n	80053de <HAL_I2C_Master_Transmit+0x15e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800534a:	7812      	ldrb	r2, [r2, #0]
 800534c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800534e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005350:	3301      	adds	r3, #1
 8005352:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005356:	3b01      	subs	r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800535c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800535e:	3b01      	subs	r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005364:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005366:	b292      	uxth	r2, r2
 8005368:	2a00      	cmp	r2, #0
 800536a:	d0e1      	beq.n	8005330 <HAL_I2C_Master_Transmit+0xb0>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1df      	bne.n	8005330 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005370:	9600      	str	r6, [sp, #0]
 8005372:	002b      	movs	r3, r5
 8005374:	2200      	movs	r2, #0
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	0020      	movs	r0, r4
 800537a:	f7ff fe88 	bl	800508e <I2C_WaitOnFlagUntilTimeout>
 800537e:	2800      	cmp	r0, #0
 8005380:	d12f      	bne.n	80053e2 <HAL_I2C_Master_Transmit+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	2bff      	cmp	r3, #255	; 0xff
 8005388:	d9c6      	bls.n	8005318 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800538a:	23ff      	movs	r3, #255	; 0xff
 800538c:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800538e:	3b7f      	subs	r3, #127	; 0x7f
 8005390:	2200      	movs	r2, #0
 8005392:	9200      	str	r2, [sp, #0]
 8005394:	045b      	lsls	r3, r3, #17
 8005396:	32ff      	adds	r2, #255	; 0xff
 8005398:	0039      	movs	r1, r7
 800539a:	0020      	movs	r0, r4
 800539c:	f7ff fdf8 	bl	8004f90 <I2C_TransferConfig>
 80053a0:	e7c6      	b.n	8005330 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a2:	0032      	movs	r2, r6
 80053a4:	0029      	movs	r1, r5
 80053a6:	0020      	movs	r0, r4
 80053a8:	f7ff fe9b 	bl	80050e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d11a      	bne.n	80053e6 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80053b6:	6821      	ldr	r1, [r4, #0]
 80053b8:	684b      	ldr	r3, [r1, #4]
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <HAL_I2C_Master_Transmit+0x170>)
 80053bc:	402b      	ands	r3, r5
 80053be:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	2341      	movs	r3, #65	; 0x41
 80053c2:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	3222      	adds	r2, #34	; 0x22
 80053c8:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80053ca:	3a02      	subs	r2, #2
 80053cc:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80053ce:	e000      	b.n	80053d2 <HAL_I2C_Master_Transmit+0x152>
    return HAL_BUSY;
 80053d0:	2002      	movs	r0, #2
}
 80053d2:	b005      	add	sp, #20
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80053d6:	2002      	movs	r0, #2
 80053d8:	e7fb      	b.n	80053d2 <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80053da:	2001      	movs	r0, #1
 80053dc:	e7f9      	b.n	80053d2 <HAL_I2C_Master_Transmit+0x152>
        return HAL_ERROR;
 80053de:	2001      	movs	r0, #1
 80053e0:	e7f7      	b.n	80053d2 <HAL_I2C_Master_Transmit+0x152>
          return HAL_ERROR;
 80053e2:	2001      	movs	r0, #1
 80053e4:	e7f5      	b.n	80053d2 <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80053e6:	2001      	movs	r0, #1
 80053e8:	e7f3      	b.n	80053d2 <HAL_I2C_Master_Transmit+0x152>
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	80002000 	.word	0x80002000
 80053f0:	fe00e800 	.word	0xfe00e800

080053f4 <HAL_I2C_Master_Receive>:
{
 80053f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f6:	b085      	sub	sp, #20
 80053f8:	0004      	movs	r4, r0
 80053fa:	000f      	movs	r7, r1
 80053fc:	9202      	str	r2, [sp, #8]
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005402:	2341      	movs	r3, #65	; 0x41
 8005404:	5cc3      	ldrb	r3, [r0, r3]
 8005406:	2b20      	cmp	r3, #32
 8005408:	d000      	beq.n	800540c <HAL_I2C_Master_Receive+0x18>
 800540a:	e09b      	b.n	8005544 <HAL_I2C_Master_Receive+0x150>
    __HAL_LOCK(hi2c);
 800540c:	3320      	adds	r3, #32
 800540e:	5cc3      	ldrb	r3, [r0, r3]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d100      	bne.n	8005416 <HAL_I2C_Master_Receive+0x22>
 8005414:	e099      	b.n	800554a <HAL_I2C_Master_Receive+0x156>
 8005416:	2340      	movs	r3, #64	; 0x40
 8005418:	2201      	movs	r2, #1
 800541a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 800541c:	f7ff f8b4 	bl	8004588 <HAL_GetTick>
 8005420:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	9000      	str	r0, [sp, #0]
 8005426:	2319      	movs	r3, #25
 8005428:	2201      	movs	r2, #1
 800542a:	0209      	lsls	r1, r1, #8
 800542c:	0020      	movs	r0, r4
 800542e:	f7ff fe2e 	bl	800508e <I2C_WaitOnFlagUntilTimeout>
 8005432:	2800      	cmp	r0, #0
 8005434:	d000      	beq.n	8005438 <HAL_I2C_Master_Receive+0x44>
 8005436:	e08a      	b.n	800554e <HAL_I2C_Master_Receive+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005438:	2341      	movs	r3, #65	; 0x41
 800543a:	2222      	movs	r2, #34	; 0x22
 800543c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800543e:	3301      	adds	r3, #1
 8005440:	3a12      	subs	r2, #18
 8005442:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005444:	2300      	movs	r3, #0
 8005446:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005448:	9a02      	ldr	r2, [sp, #8]
 800544a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800544c:	9a03      	ldr	r2, [sp, #12]
 800544e:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005450:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2bff      	cmp	r3, #255	; 0xff
 8005458:	d90b      	bls.n	8005472 <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800545a:	23ff      	movs	r3, #255	; 0xff
 800545c:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800545e:	3b7f      	subs	r3, #127	; 0x7f
 8005460:	4a3f      	ldr	r2, [pc, #252]	; (8005560 <HAL_I2C_Master_Receive+0x16c>)
 8005462:	9200      	str	r2, [sp, #0]
 8005464:	045b      	lsls	r3, r3, #17
 8005466:	22ff      	movs	r2, #255	; 0xff
 8005468:	0039      	movs	r1, r7
 800546a:	0020      	movs	r0, r4
 800546c:	f7ff fd90 	bl	8004f90 <I2C_TransferConfig>
 8005470:	e018      	b.n	80054a4 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8005472:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005474:	b292      	uxth	r2, r2
 8005476:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	4938      	ldr	r1, [pc, #224]	; (8005560 <HAL_I2C_Master_Receive+0x16c>)
 800547e:	9100      	str	r1, [sp, #0]
 8005480:	049b      	lsls	r3, r3, #18
 8005482:	0039      	movs	r1, r7
 8005484:	0020      	movs	r0, r4
 8005486:	f7ff fd83 	bl	8004f90 <I2C_TransferConfig>
 800548a:	e00b      	b.n	80054a4 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 800548c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800548e:	b292      	uxth	r2, r2
 8005490:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	2100      	movs	r1, #0
 8005498:	9100      	str	r1, [sp, #0]
 800549a:	049b      	lsls	r3, r3, #18
 800549c:	0039      	movs	r1, r7
 800549e:	0020      	movs	r0, r4
 80054a0:	f7ff fd76 	bl	8004f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d034      	beq.n	8005516 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ac:	0032      	movs	r2, r6
 80054ae:	0029      	movs	r1, r5
 80054b0:	0020      	movs	r0, r4
 80054b2:	f7ff fe3d 	bl	8005130 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d14b      	bne.n	8005552 <HAL_I2C_Master_Receive+0x15e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054c0:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80054c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c4:	3301      	adds	r3, #1
 80054c6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80054c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80054d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054d2:	3a01      	subs	r2, #1
 80054d4:	b292      	uxth	r2, r2
 80054d6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054da:	b292      	uxth	r2, r2
 80054dc:	2a00      	cmp	r2, #0
 80054de:	d0e1      	beq.n	80054a4 <HAL_I2C_Master_Receive+0xb0>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1df      	bne.n	80054a4 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054e4:	9600      	str	r6, [sp, #0]
 80054e6:	002b      	movs	r3, r5
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	0020      	movs	r0, r4
 80054ee:	f7ff fdce 	bl	800508e <I2C_WaitOnFlagUntilTimeout>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d12f      	bne.n	8005556 <HAL_I2C_Master_Receive+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2bff      	cmp	r3, #255	; 0xff
 80054fc:	d9c6      	bls.n	800548c <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054fe:	23ff      	movs	r3, #255	; 0xff
 8005500:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005502:	3b7f      	subs	r3, #127	; 0x7f
 8005504:	2200      	movs	r2, #0
 8005506:	9200      	str	r2, [sp, #0]
 8005508:	045b      	lsls	r3, r3, #17
 800550a:	32ff      	adds	r2, #255	; 0xff
 800550c:	0039      	movs	r1, r7
 800550e:	0020      	movs	r0, r4
 8005510:	f7ff fd3e 	bl	8004f90 <I2C_TransferConfig>
 8005514:	e7c6      	b.n	80054a4 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005516:	0032      	movs	r2, r6
 8005518:	0029      	movs	r1, r5
 800551a:	0020      	movs	r0, r4
 800551c:	f7ff fde1 	bl	80050e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005520:	2800      	cmp	r0, #0
 8005522:	d11a      	bne.n	800555a <HAL_I2C_Master_Receive+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	2220      	movs	r2, #32
 8005528:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	684b      	ldr	r3, [r1, #4]
 800552e:	4d0d      	ldr	r5, [pc, #52]	; (8005564 <HAL_I2C_Master_Receive+0x170>)
 8005530:	402b      	ands	r3, r5
 8005532:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005534:	2341      	movs	r3, #65	; 0x41
 8005536:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005538:	2300      	movs	r3, #0
 800553a:	3222      	adds	r2, #34	; 0x22
 800553c:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800553e:	3a02      	subs	r2, #2
 8005540:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8005542:	e000      	b.n	8005546 <HAL_I2C_Master_Receive+0x152>
    return HAL_BUSY;
 8005544:	2002      	movs	r0, #2
}
 8005546:	b005      	add	sp, #20
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800554a:	2002      	movs	r0, #2
 800554c:	e7fb      	b.n	8005546 <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 800554e:	2001      	movs	r0, #1
 8005550:	e7f9      	b.n	8005546 <HAL_I2C_Master_Receive+0x152>
        return HAL_ERROR;
 8005552:	2001      	movs	r0, #1
 8005554:	e7f7      	b.n	8005546 <HAL_I2C_Master_Receive+0x152>
          return HAL_ERROR;
 8005556:	2001      	movs	r0, #1
 8005558:	e7f5      	b.n	8005546 <HAL_I2C_Master_Receive+0x152>
      return HAL_ERROR;
 800555a:	2001      	movs	r0, #1
 800555c:	e7f3      	b.n	8005546 <HAL_I2C_Master_Receive+0x152>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	80002400 	.word	0x80002400
 8005564:	fe00e800 	.word	0xfe00e800

08005568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005568:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556a:	2341      	movs	r3, #65	; 0x41
 800556c:	5cc3      	ldrb	r3, [r0, r3]
 800556e:	2b20      	cmp	r3, #32
 8005570:	d120      	bne.n	80055b4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005572:	3320      	adds	r3, #32
 8005574:	5cc3      	ldrb	r3, [r0, r3]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d01e      	beq.n	80055b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800557a:	2440      	movs	r4, #64	; 0x40
 800557c:	2201      	movs	r2, #1
 800557e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	2541      	movs	r5, #65	; 0x41
 8005582:	2324      	movs	r3, #36	; 0x24
 8005584:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005586:	6806      	ldr	r6, [r0, #0]
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	4393      	bics	r3, r2
 800558c:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800558e:	6806      	ldr	r6, [r0, #0]
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	4f0a      	ldr	r7, [pc, #40]	; (80055bc <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8005594:	403b      	ands	r3, r7
 8005596:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005598:	6806      	ldr	r6, [r0, #0]
 800559a:	6833      	ldr	r3, [r6, #0]
 800559c:	4319      	orrs	r1, r3
 800559e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a0:	6801      	ldr	r1, [r0, #0]
 80055a2:	680b      	ldr	r3, [r1, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a8:	2320      	movs	r3, #32
 80055aa:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80055b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80055b4:	2002      	movs	r0, #2
 80055b6:	e7fc      	b.n	80055b2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80055b8:	2002      	movs	r0, #2
 80055ba:	e7fa      	b.n	80055b2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80055bc:	ffffefff 	.word	0xffffefff

080055c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	2341      	movs	r3, #65	; 0x41
 80055c4:	5cc3      	ldrb	r3, [r0, r3]
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d11e      	bne.n	8005608 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ca:	3320      	adds	r3, #32
 80055cc:	5cc3      	ldrb	r3, [r0, r3]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d01c      	beq.n	800560c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80055d2:	2440      	movs	r4, #64	; 0x40
 80055d4:	2201      	movs	r2, #1
 80055d6:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d8:	2541      	movs	r5, #65	; 0x41
 80055da:	2324      	movs	r3, #36	; 0x24
 80055dc:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055de:	6806      	ldr	r6, [r0, #0]
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	4393      	bics	r3, r2
 80055e4:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055e6:	6806      	ldr	r6, [r0, #0]
 80055e8:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055ea:	4f09      	ldr	r7, [pc, #36]	; (8005610 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80055ec:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055ee:	0209      	lsls	r1, r1, #8
 80055f0:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055f2:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f4:	6801      	ldr	r1, [r0, #0]
 80055f6:	680b      	ldr	r3, [r1, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	2320      	movs	r3, #32
 80055fe:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	2300      	movs	r3, #0
 8005602:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8005604:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005608:	2002      	movs	r0, #2
 800560a:	e7fc      	b.n	8005606 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 800560c:	2002      	movs	r0, #2
 800560e:	e7fa      	b.n	8005606 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8005610:	fffff0ff 	.word	0xfffff0ff

08005614 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005614:	4a02      	ldr	r2, [pc, #8]	; (8005620 <HAL_PWR_DisablePVD+0xc>)
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	2110      	movs	r1, #16
 800561a:	438b      	bics	r3, r1
 800561c:	6013      	str	r3, [r2, #0]
}
 800561e:	4770      	bx	lr
 8005620:	40007000 	.word	0x40007000

08005624 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005624:	4a03      	ldr	r2, [pc, #12]	; (8005634 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005626:	6811      	ldr	r1, [r2, #0]
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	430b      	orrs	r3, r1
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	4770      	bx	lr
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	40007000 	.word	0x40007000

08005638 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005638:	4a03      	ldr	r2, [pc, #12]	; (8005648 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800563a:	6811      	ldr	r1, [r2, #0]
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	430b      	orrs	r3, r1
 8005642:	6013      	str	r3, [r2, #0]
}
 8005644:	4770      	bx	lr
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	40007000 	.word	0x40007000

0800564c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800564c:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800564e:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005650:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005652:	230c      	movs	r3, #12
 8005654:	400b      	ands	r3, r1
 8005656:	2b08      	cmp	r3, #8
 8005658:	d042      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x94>
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d011      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x36>
 800565e:	2b04      	cmp	r3, #4
 8005660:	d009      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005662:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	0b52      	lsrs	r2, r2, #13
 8005668:	2307      	movs	r3, #7
 800566a:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800566c:	3301      	adds	r3, #1
 800566e:	2080      	movs	r0, #128	; 0x80
 8005670:	0200      	lsls	r0, r0, #8
 8005672:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8005674:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	06db      	lsls	r3, r3, #27
 800567c:	d532      	bpl.n	80056e4 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 800567e:	481b      	ldr	r0, [pc, #108]	; (80056ec <HAL_RCC_GetSysClockFreq+0xa0>)
 8005680:	e7f8      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005682:	0c8a      	lsrs	r2, r1, #18
 8005684:	230f      	movs	r3, #15
 8005686:	4013      	ands	r3, r2
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800568a:	5cd2      	ldrb	r2, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800568c:	0d89      	lsrs	r1, r1, #22
 800568e:	2303      	movs	r3, #3
 8005690:	4019      	ands	r1, r3
 8005692:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	03db      	lsls	r3, r3, #15
 800569a:	d509      	bpl.n	80056b0 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (HSE_VALUE * pllm) / plld;
 800569c:	0150      	lsls	r0, r2, #5
 800569e:	1a80      	subs	r0, r0, r2
 80056a0:	0183      	lsls	r3, r0, #6
 80056a2:	1a18      	subs	r0, r3, r0
 80056a4:	00c0      	lsls	r0, r0, #3
 80056a6:	1880      	adds	r0, r0, r2
 80056a8:	0240      	lsls	r0, r0, #9
 80056aa:	f7fa fd37 	bl	800011c <__udivsi3>
 80056ae:	e7e1      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	06db      	lsls	r3, r3, #27
 80056b6:	d509      	bpl.n	80056cc <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80056b8:	0153      	lsls	r3, r2, #5
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	0198      	lsls	r0, r3, #6
 80056be:	1ac0      	subs	r0, r0, r3
 80056c0:	00c0      	lsls	r0, r0, #3
 80056c2:	1880      	adds	r0, r0, r2
 80056c4:	0200      	lsls	r0, r0, #8
 80056c6:	f7fa fd29 	bl	800011c <__udivsi3>
 80056ca:	e7d3      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 80056cc:	0153      	lsls	r3, r2, #5
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	0198      	lsls	r0, r3, #6
 80056d2:	1ac0      	subs	r0, r0, r3
 80056d4:	00c0      	lsls	r0, r0, #3
 80056d6:	1880      	adds	r0, r0, r2
 80056d8:	0280      	lsls	r0, r0, #10
 80056da:	f7fa fd1f 	bl	800011c <__udivsi3>
 80056de:	e7c9      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 80056e0:	4804      	ldr	r0, [pc, #16]	; (80056f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80056e2:	e7c7      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 80056e4:	4804      	ldr	r0, [pc, #16]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 80056e6:	e7c5      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28>
 80056e8:	40021000 	.word	0x40021000
 80056ec:	003d0900 	.word	0x003d0900
 80056f0:	08010cfc 	.word	0x08010cfc
 80056f4:	007a1200 	.word	0x007a1200
 80056f8:	00f42400 	.word	0x00f42400

080056fc <HAL_RCC_OscConfig>:
{
 80056fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8005702:	d100      	bne.n	8005706 <HAL_RCC_OscConfig+0xa>
 8005704:	e29b      	b.n	8005c3e <HAL_RCC_OscConfig+0x542>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005706:	4bc4      	ldr	r3, [pc, #784]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	250c      	movs	r5, #12
 800570c:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800570e:	68de      	ldr	r6, [r3, #12]
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	025b      	lsls	r3, r3, #9
 8005714:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005716:	6803      	ldr	r3, [r0, #0]
 8005718:	07db      	lsls	r3, r3, #31
 800571a:	d536      	bpl.n	800578a <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800571c:	2d08      	cmp	r5, #8
 800571e:	d02c      	beq.n	800577a <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005720:	2d0c      	cmp	r5, #12
 8005722:	d028      	beq.n	8005776 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005724:	6863      	ldr	r3, [r4, #4]
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	0252      	lsls	r2, r2, #9
 800572a:	4293      	cmp	r3, r2
 800572c:	d055      	beq.n	80057da <HAL_RCC_OscConfig+0xde>
 800572e:	22a0      	movs	r2, #160	; 0xa0
 8005730:	02d2      	lsls	r2, r2, #11
 8005732:	4293      	cmp	r3, r2
 8005734:	d058      	beq.n	80057e8 <HAL_RCC_OscConfig+0xec>
 8005736:	4bb8      	ldr	r3, [pc, #736]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	49b8      	ldr	r1, [pc, #736]	; (8005a1c <HAL_RCC_OscConfig+0x320>)
 800573c:	400a      	ands	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	0249      	lsls	r1, r1, #9
 8005746:	400a      	ands	r2, r1
 8005748:	9201      	str	r2, [sp, #4]
 800574a:	9a01      	ldr	r2, [sp, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	49b4      	ldr	r1, [pc, #720]	; (8005a20 <HAL_RCC_OscConfig+0x324>)
 8005750:	400a      	ands	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d052      	beq.n	8005800 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 800575a:	f7fe ff15 	bl	8004588 <HAL_GetTick>
 800575e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005760:	4bad      	ldr	r3, [pc, #692]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	039b      	lsls	r3, r3, #14
 8005766:	d410      	bmi.n	800578a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005768:	f7fe ff0e 	bl	8004588 <HAL_GetTick>
 800576c:	1bc0      	subs	r0, r0, r7
 800576e:	2864      	cmp	r0, #100	; 0x64
 8005770:	d9f6      	bls.n	8005760 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8005772:	2003      	movs	r0, #3
 8005774:	e264      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005776:	2e00      	cmp	r6, #0
 8005778:	d0d4      	beq.n	8005724 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577a:	4ba7      	ldr	r3, [pc, #668]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	039b      	lsls	r3, r3, #14
 8005780:	d503      	bpl.n	800578a <HAL_RCC_OscConfig+0x8e>
 8005782:	6863      	ldr	r3, [r4, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d100      	bne.n	800578a <HAL_RCC_OscConfig+0x8e>
 8005788:	e25c      	b.n	8005c44 <HAL_RCC_OscConfig+0x548>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	079b      	lsls	r3, r3, #30
 800578e:	d56c      	bpl.n	800586a <HAL_RCC_OscConfig+0x16e>
    hsi_state = RCC_OscInitStruct->HSIState;
 8005790:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005792:	069a      	lsls	r2, r3, #26
 8005794:	d505      	bpl.n	80057a2 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005796:	48a0      	ldr	r0, [pc, #640]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005798:	6802      	ldr	r2, [r0, #0]
 800579a:	2120      	movs	r1, #32
 800579c:	430a      	orrs	r2, r1
 800579e:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80057a0:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057a2:	2d04      	cmp	r5, #4
 80057a4:	d03c      	beq.n	8005820 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057a6:	2d0c      	cmp	r5, #12
 80057a8:	d038      	beq.n	800581c <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d100      	bne.n	80057b0 <HAL_RCC_OscConfig+0xb4>
 80057ae:	e0ae      	b.n	800590e <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80057b0:	4999      	ldr	r1, [pc, #612]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80057b2:	680a      	ldr	r2, [r1, #0]
 80057b4:	2009      	movs	r0, #9
 80057b6:	4382      	bics	r2, r0
 80057b8:	4313      	orrs	r3, r2
 80057ba:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80057bc:	f7fe fee4 	bl	8004588 <HAL_GetTick>
 80057c0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057c2:	4b95      	ldr	r3, [pc, #596]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	075b      	lsls	r3, r3, #29
 80057c8:	d500      	bpl.n	80057cc <HAL_RCC_OscConfig+0xd0>
 80057ca:	e097      	b.n	80058fc <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057cc:	f7fe fedc 	bl	8004588 <HAL_GetTick>
 80057d0:	1b80      	subs	r0, r0, r6
 80057d2:	2802      	cmp	r0, #2
 80057d4:	d9f5      	bls.n	80057c2 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80057d6:	2003      	movs	r0, #3
 80057d8:	e232      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057da:	4a8f      	ldr	r2, [pc, #572]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80057dc:	6811      	ldr	r1, [r2, #0]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	430b      	orrs	r3, r1
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e7b5      	b.n	8005754 <HAL_RCC_OscConfig+0x58>
 80057e8:	4b8b      	ldr	r3, [pc, #556]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	02d2      	lsls	r2, r2, #11
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	0252      	lsls	r2, r2, #9
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e7a9      	b.n	8005754 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8005800:	f7fe fec2 	bl	8004588 <HAL_GetTick>
 8005804:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005806:	4b84      	ldr	r3, [pc, #528]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	039b      	lsls	r3, r3, #14
 800580c:	d5bd      	bpl.n	800578a <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800580e:	f7fe febb 	bl	8004588 <HAL_GetTick>
 8005812:	1bc0      	subs	r0, r0, r7
 8005814:	2864      	cmp	r0, #100	; 0x64
 8005816:	d9f6      	bls.n	8005806 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8005818:	2003      	movs	r0, #3
 800581a:	e211      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800581c:	2e00      	cmp	r6, #0
 800581e:	d1c4      	bne.n	80057aa <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005820:	4a7d      	ldr	r2, [pc, #500]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	0752      	lsls	r2, r2, #29
 8005826:	d502      	bpl.n	800582e <HAL_RCC_OscConfig+0x132>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d100      	bne.n	800582e <HAL_RCC_OscConfig+0x132>
 800582c:	e20c      	b.n	8005c48 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582e:	4e7a      	ldr	r6, [pc, #488]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005830:	6872      	ldr	r2, [r6, #4]
 8005832:	497c      	ldr	r1, [pc, #496]	; (8005a24 <HAL_RCC_OscConfig+0x328>)
 8005834:	400a      	ands	r2, r1
 8005836:	6921      	ldr	r1, [r4, #16]
 8005838:	0209      	lsls	r1, r1, #8
 800583a:	430a      	orrs	r2, r1
 800583c:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800583e:	6832      	ldr	r2, [r6, #0]
 8005840:	2109      	movs	r1, #9
 8005842:	438a      	bics	r2, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005848:	f7ff ff00 	bl	800564c <HAL_RCC_GetSysClockFreq>
 800584c:	68f2      	ldr	r2, [r6, #12]
 800584e:	0912      	lsrs	r2, r2, #4
 8005850:	230f      	movs	r3, #15
 8005852:	4013      	ands	r3, r2
 8005854:	4a74      	ldr	r2, [pc, #464]	; (8005a28 <HAL_RCC_OscConfig+0x32c>)
 8005856:	5cd3      	ldrb	r3, [r2, r3]
 8005858:	40d8      	lsrs	r0, r3
 800585a:	4b74      	ldr	r3, [pc, #464]	; (8005a2c <HAL_RCC_OscConfig+0x330>)
 800585c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800585e:	2003      	movs	r0, #3
 8005860:	f009 fff2 	bl	800f848 <HAL_InitTick>
      if(status != HAL_OK)
 8005864:	2800      	cmp	r0, #0
 8005866:	d000      	beq.n	800586a <HAL_RCC_OscConfig+0x16e>
 8005868:	e1ea      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	06db      	lsls	r3, r3, #27
 800586e:	d52c      	bpl.n	80058ca <HAL_RCC_OscConfig+0x1ce>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005870:	2d00      	cmp	r5, #0
 8005872:	d15f      	bne.n	8005934 <HAL_RCC_OscConfig+0x238>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005874:	4b68      	ldr	r3, [pc, #416]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	059b      	lsls	r3, r3, #22
 800587a:	d503      	bpl.n	8005884 <HAL_RCC_OscConfig+0x188>
 800587c:	69e3      	ldr	r3, [r4, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d100      	bne.n	8005884 <HAL_RCC_OscConfig+0x188>
 8005882:	e1e3      	b.n	8005c4c <HAL_RCC_OscConfig+0x550>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005884:	4a64      	ldr	r2, [pc, #400]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005886:	6853      	ldr	r3, [r2, #4]
 8005888:	4969      	ldr	r1, [pc, #420]	; (8005a30 <HAL_RCC_OscConfig+0x334>)
 800588a:	400b      	ands	r3, r1
 800588c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800588e:	430b      	orrs	r3, r1
 8005890:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005892:	6853      	ldr	r3, [r2, #4]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	6a21      	ldr	r1, [r4, #32]
 800589a:	0609      	lsls	r1, r1, #24
 800589c:	430b      	orrs	r3, r1
 800589e:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80058a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a2:	0b59      	lsrs	r1, r3, #13
 80058a4:	3101      	adds	r1, #1
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80058ac:	68d1      	ldr	r1, [r2, #12]
 80058ae:	0909      	lsrs	r1, r1, #4
 80058b0:	220f      	movs	r2, #15
 80058b2:	400a      	ands	r2, r1
 80058b4:	495c      	ldr	r1, [pc, #368]	; (8005a28 <HAL_RCC_OscConfig+0x32c>)
 80058b6:	5c8a      	ldrb	r2, [r1, r2]
 80058b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80058ba:	4a5c      	ldr	r2, [pc, #368]	; (8005a2c <HAL_RCC_OscConfig+0x330>)
 80058bc:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80058be:	2003      	movs	r0, #3
 80058c0:	f009 ffc2 	bl	800f848 <HAL_InitTick>
        if(status != HAL_OK)
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d000      	beq.n	80058ca <HAL_RCC_OscConfig+0x1ce>
 80058c8:	e1ba      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	071b      	lsls	r3, r3, #28
 80058ce:	d57d      	bpl.n	80059cc <HAL_RCC_OscConfig+0x2d0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058d0:	6963      	ldr	r3, [r4, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d067      	beq.n	80059a6 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 80058d6:	4a50      	ldr	r2, [pc, #320]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80058d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80058da:	2101      	movs	r1, #1
 80058dc:	430b      	orrs	r3, r1
 80058de:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80058e0:	f7fe fe52 	bl	8004588 <HAL_GetTick>
 80058e4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058e6:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80058e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ea:	079b      	lsls	r3, r3, #30
 80058ec:	d46e      	bmi.n	80059cc <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ee:	f7fe fe4b 	bl	8004588 <HAL_GetTick>
 80058f2:	1b80      	subs	r0, r0, r6
 80058f4:	2802      	cmp	r0, #2
 80058f6:	d9f6      	bls.n	80058e6 <HAL_RCC_OscConfig+0x1ea>
          return HAL_TIMEOUT;
 80058f8:	2003      	movs	r0, #3
 80058fa:	e1a1      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fc:	4946      	ldr	r1, [pc, #280]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80058fe:	684b      	ldr	r3, [r1, #4]
 8005900:	4a48      	ldr	r2, [pc, #288]	; (8005a24 <HAL_RCC_OscConfig+0x328>)
 8005902:	4013      	ands	r3, r2
 8005904:	6922      	ldr	r2, [r4, #16]
 8005906:	0212      	lsls	r2, r2, #8
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
 800590c:	e7ad      	b.n	800586a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 800590e:	4a42      	ldr	r2, [pc, #264]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005910:	6813      	ldr	r3, [r2, #0]
 8005912:	2101      	movs	r1, #1
 8005914:	438b      	bics	r3, r1
 8005916:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005918:	f7fe fe36 	bl	8004588 <HAL_GetTick>
 800591c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800591e:	4b3e      	ldr	r3, [pc, #248]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	075b      	lsls	r3, r3, #29
 8005924:	d5a1      	bpl.n	800586a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005926:	f7fe fe2f 	bl	8004588 <HAL_GetTick>
 800592a:	1b80      	subs	r0, r0, r6
 800592c:	2802      	cmp	r0, #2
 800592e:	d9f6      	bls.n	800591e <HAL_RCC_OscConfig+0x222>
            return HAL_TIMEOUT;
 8005930:	2003      	movs	r0, #3
 8005932:	e185      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005934:	69e3      	ldr	r3, [r4, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d022      	beq.n	8005980 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_MSI_ENABLE();
 800593a:	4a37      	ldr	r2, [pc, #220]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	430b      	orrs	r3, r1
 8005944:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005946:	f7fe fe1f 	bl	8004588 <HAL_GetTick>
 800594a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800594c:	4b32      	ldr	r3, [pc, #200]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	059b      	lsls	r3, r3, #22
 8005952:	d406      	bmi.n	8005962 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005954:	f7fe fe18 	bl	8004588 <HAL_GetTick>
 8005958:	1b80      	subs	r0, r0, r6
 800595a:	2802      	cmp	r0, #2
 800595c:	d9f6      	bls.n	800594c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800595e:	2003      	movs	r0, #3
 8005960:	e16e      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005962:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005964:	6853      	ldr	r3, [r2, #4]
 8005966:	4932      	ldr	r1, [pc, #200]	; (8005a30 <HAL_RCC_OscConfig+0x334>)
 8005968:	400b      	ands	r3, r1
 800596a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800596c:	430b      	orrs	r3, r1
 800596e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005970:	6853      	ldr	r3, [r2, #4]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	6a21      	ldr	r1, [r4, #32]
 8005978:	0609      	lsls	r1, r1, #24
 800597a:	430b      	orrs	r3, r1
 800597c:	6053      	str	r3, [r2, #4]
 800597e:	e7a4      	b.n	80058ca <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_MSI_DISABLE();
 8005980:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	492b      	ldr	r1, [pc, #172]	; (8005a34 <HAL_RCC_OscConfig+0x338>)
 8005986:	400b      	ands	r3, r1
 8005988:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800598a:	f7fe fdfd 	bl	8004588 <HAL_GetTick>
 800598e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005990:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	059b      	lsls	r3, r3, #22
 8005996:	d598      	bpl.n	80058ca <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005998:	f7fe fdf6 	bl	8004588 <HAL_GetTick>
 800599c:	1b80      	subs	r0, r0, r6
 800599e:	2802      	cmp	r0, #2
 80059a0:	d9f6      	bls.n	8005990 <HAL_RCC_OscConfig+0x294>
            return HAL_TIMEOUT;
 80059a2:	2003      	movs	r0, #3
 80059a4:	e14c      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
      __HAL_RCC_LSI_DISABLE();
 80059a6:	4a1c      	ldr	r2, [pc, #112]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80059a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80059aa:	2101      	movs	r1, #1
 80059ac:	438b      	bics	r3, r1
 80059ae:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80059b0:	f7fe fdea 	bl	8004588 <HAL_GetTick>
 80059b4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	079b      	lsls	r3, r3, #30
 80059bc:	d506      	bpl.n	80059cc <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059be:	f7fe fde3 	bl	8004588 <HAL_GetTick>
 80059c2:	1b80      	subs	r0, r0, r6
 80059c4:	2802      	cmp	r0, #2
 80059c6:	d9f6      	bls.n	80059b6 <HAL_RCC_OscConfig+0x2ba>
          return HAL_TIMEOUT;
 80059c8:	2003      	movs	r0, #3
 80059ca:	e139      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	075b      	lsls	r3, r3, #29
 80059d0:	d400      	bmi.n	80059d4 <HAL_RCC_OscConfig+0x2d8>
 80059d2:	e08c      	b.n	8005aee <HAL_RCC_OscConfig+0x3f2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d4:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	d41b      	bmi.n	8005a14 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80059dc:	4a0e      	ldr	r2, [pc, #56]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 80059de:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	055b      	lsls	r3, r3, #21
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80059e8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <HAL_RCC_OscConfig+0x33c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	05db      	lsls	r3, r3, #23
 80059f0:	d526      	bpl.n	8005a40 <HAL_RCC_OscConfig+0x344>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	0052      	lsls	r2, r2, #1
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d035      	beq.n	8005a68 <HAL_RCC_OscConfig+0x36c>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d14b      	bne.n	8005a98 <HAL_RCC_OscConfig+0x39c>
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <HAL_RCC_OscConfig+0x31c>)
 8005a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a04:	490b      	ldr	r1, [pc, #44]	; (8005a34 <HAL_RCC_OscConfig+0x338>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	651a      	str	r2, [r3, #80]	; 0x50
 8005a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a0c:	490b      	ldr	r1, [pc, #44]	; (8005a3c <HAL_RCC_OscConfig+0x340>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50
 8005a12:	e02f      	b.n	8005a74 <HAL_RCC_OscConfig+0x378>
    FlagStatus       pwrclkchanged = RESET;
 8005a14:	2600      	movs	r6, #0
 8005a16:	e7e8      	b.n	80059ea <HAL_RCC_OscConfig+0x2ee>
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	fffeffff 	.word	0xfffeffff
 8005a20:	fffbffff 	.word	0xfffbffff
 8005a24:	ffffe0ff 	.word	0xffffe0ff
 8005a28:	08010d08 	.word	0x08010d08
 8005a2c:	20000044 	.word	0x20000044
 8005a30:	ffff1fff 	.word	0xffff1fff
 8005a34:	fffffeff 	.word	0xfffffeff
 8005a38:	40007000 	.word	0x40007000
 8005a3c:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a40:	4a88      	ldr	r2, [pc, #544]	; (8005c64 <HAL_RCC_OscConfig+0x568>)
 8005a42:	6811      	ldr	r1, [r2, #0]
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005a4c:	f7fe fd9c 	bl	8004588 <HAL_GetTick>
 8005a50:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	4b84      	ldr	r3, [pc, #528]	; (8005c64 <HAL_RCC_OscConfig+0x568>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	05db      	lsls	r3, r3, #23
 8005a58:	d4cb      	bmi.n	80059f2 <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5a:	f7fe fd95 	bl	8004588 <HAL_GetTick>
 8005a5e:	1bc0      	subs	r0, r0, r7
 8005a60:	2864      	cmp	r0, #100	; 0x64
 8005a62:	d9f6      	bls.n	8005a52 <HAL_RCC_OscConfig+0x356>
          return HAL_TIMEOUT;
 8005a64:	2003      	movs	r0, #3
 8005a66:	e0eb      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a68:	4a7f      	ldr	r2, [pc, #508]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005a6a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a74:	68a3      	ldr	r3, [r4, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d028      	beq.n	8005acc <HAL_RCC_OscConfig+0x3d0>
      tickstart = HAL_GetTick();
 8005a7a:	f7fe fd85 	bl	8004588 <HAL_GetTick>
 8005a7e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a80:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d430      	bmi.n	8005aea <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a88:	f7fe fd7e 	bl	8004588 <HAL_GetTick>
 8005a8c:	1bc0      	subs	r0, r0, r7
 8005a8e:	4b77      	ldr	r3, [pc, #476]	; (8005c6c <HAL_RCC_OscConfig+0x570>)
 8005a90:	4298      	cmp	r0, r3
 8005a92:	d9f5      	bls.n	8005a80 <HAL_RCC_OscConfig+0x384>
          return HAL_TIMEOUT;
 8005a94:	2003      	movs	r0, #3
 8005a96:	e0d3      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a98:	22a0      	movs	r2, #160	; 0xa0
 8005a9a:	00d2      	lsls	r2, r2, #3
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x3b8>
 8005aa0:	4b71      	ldr	r3, [pc, #452]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aa4:	4972      	ldr	r1, [pc, #456]	; (8005c70 <HAL_RCC_OscConfig+0x574>)
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	651a      	str	r2, [r3, #80]	; 0x50
 8005aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aac:	4971      	ldr	r1, [pc, #452]	; (8005c74 <HAL_RCC_OscConfig+0x578>)
 8005aae:	400a      	ands	r2, r1
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50
 8005ab2:	e7df      	b.n	8005a74 <HAL_RCC_OscConfig+0x378>
 8005ab4:	4b6c      	ldr	r3, [pc, #432]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005ab6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	3aff      	subs	r2, #255	; 0xff
 8005abc:	430a      	orrs	r2, r1
 8005abe:	651a      	str	r2, [r3, #80]	; 0x50
 8005ac0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	0052      	lsls	r2, r2, #1
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8005aca:	e7d3      	b.n	8005a74 <HAL_RCC_OscConfig+0x378>
      tickstart = HAL_GetTick();
 8005acc:	f7fe fd5c 	bl	8004588 <HAL_GetTick>
 8005ad0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ad2:	4b65      	ldr	r3, [pc, #404]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	059b      	lsls	r3, r3, #22
 8005ad8:	d507      	bpl.n	8005aea <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fe fd55 	bl	8004588 <HAL_GetTick>
 8005ade:	1bc0      	subs	r0, r0, r7
 8005ae0:	4b62      	ldr	r3, [pc, #392]	; (8005c6c <HAL_RCC_OscConfig+0x570>)
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	d9f5      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8005ae6:	2003      	movs	r0, #3
 8005ae8:	e0aa      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
    if(pwrclkchanged == SET)
 8005aea:	2e01      	cmp	r6, #1
 8005aec:	d021      	beq.n	8005b32 <HAL_RCC_OscConfig+0x436>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	069b      	lsls	r3, r3, #26
 8005af2:	d53c      	bpl.n	8005b6e <HAL_RCC_OscConfig+0x472>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005af4:	69a3      	ldr	r3, [r4, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d021      	beq.n	8005b3e <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_HSI48_ENABLE();
 8005afa:	4b5b      	ldr	r3, [pc, #364]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005afc:	6899      	ldr	r1, [r3, #8]
 8005afe:	2001      	movs	r0, #1
 8005b00:	4301      	orrs	r1, r0
 8005b02:	6099      	str	r1, [r3, #8]
 8005b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b06:	4302      	orrs	r2, r0
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34
 8005b0a:	4a5b      	ldr	r2, [pc, #364]	; (8005c78 <HAL_RCC_OscConfig+0x57c>)
 8005b0c:	6a11      	ldr	r1, [r2, #32]
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005b16:	f7fe fd37 	bl	8004588 <HAL_GetTick>
 8005b1a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b1c:	4b52      	ldr	r3, [pc, #328]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	079b      	lsls	r3, r3, #30
 8005b22:	d424      	bmi.n	8005b6e <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b24:	f7fe fd30 	bl	8004588 <HAL_GetTick>
 8005b28:	1b80      	subs	r0, r0, r6
 8005b2a:	2802      	cmp	r0, #2
 8005b2c:	d9f6      	bls.n	8005b1c <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8005b2e:	2003      	movs	r0, #3
 8005b30:	e086      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b32:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005b34:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b36:	4951      	ldr	r1, [pc, #324]	; (8005c7c <HAL_RCC_OscConfig+0x580>)
 8005b38:	400b      	ands	r3, r1
 8005b3a:	6393      	str	r3, [r2, #56]	; 0x38
 8005b3c:	e7d7      	b.n	8005aee <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI48_DISABLE();
 8005b3e:	4a4a      	ldr	r2, [pc, #296]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005b40:	6893      	ldr	r3, [r2, #8]
 8005b42:	2101      	movs	r1, #1
 8005b44:	438b      	bics	r3, r1
 8005b46:	6093      	str	r3, [r2, #8]
 8005b48:	4a4b      	ldr	r2, [pc, #300]	; (8005c78 <HAL_RCC_OscConfig+0x57c>)
 8005b4a:	6a13      	ldr	r3, [r2, #32]
 8005b4c:	494c      	ldr	r1, [pc, #304]	; (8005c80 <HAL_RCC_OscConfig+0x584>)
 8005b4e:	400b      	ands	r3, r1
 8005b50:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005b52:	f7fe fd19 	bl	8004588 <HAL_GetTick>
 8005b56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b58:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	079b      	lsls	r3, r3, #30
 8005b5e:	d506      	bpl.n	8005b6e <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b60:	f7fe fd12 	bl	8004588 <HAL_GetTick>
 8005b64:	1b80      	subs	r0, r0, r6
 8005b66:	2802      	cmp	r0, #2
 8005b68:	d9f6      	bls.n	8005b58 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
 8005b6a:	2003      	movs	r0, #3
 8005b6c:	e068      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d100      	bne.n	8005b76 <HAL_RCC_OscConfig+0x47a>
 8005b74:	e06c      	b.n	8005c50 <HAL_RCC_OscConfig+0x554>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b76:	2d0c      	cmp	r5, #12
 8005b78:	d049      	beq.n	8005c0e <HAL_RCC_OscConfig+0x512>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d012      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	4940      	ldr	r1, [pc, #256]	; (8005c84 <HAL_RCC_OscConfig+0x588>)
 8005b84:	400b      	ands	r3, r1
 8005b86:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b88:	f7fe fcfe 	bl	8004588 <HAL_GetTick>
 8005b8c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	019b      	lsls	r3, r3, #6
 8005b94:	d539      	bpl.n	8005c0a <HAL_RCC_OscConfig+0x50e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fe fcf7 	bl	8004588 <HAL_GetTick>
 8005b9a:	1b00      	subs	r0, r0, r4
 8005b9c:	2802      	cmp	r0, #2
 8005b9e:	d9f6      	bls.n	8005b8e <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 8005ba0:	2003      	movs	r0, #3
 8005ba2:	e04d      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_PLL_DISABLE();
 8005ba4:	4a30      	ldr	r2, [pc, #192]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	4936      	ldr	r1, [pc, #216]	; (8005c84 <HAL_RCC_OscConfig+0x588>)
 8005baa:	400b      	ands	r3, r1
 8005bac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bae:	f7fe fceb 	bl	8004588 <HAL_GetTick>
 8005bb2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	d506      	bpl.n	8005bca <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bbc:	f7fe fce4 	bl	8004588 <HAL_GetTick>
 8005bc0:	1b40      	subs	r0, r0, r5
 8005bc2:	2802      	cmp	r0, #2
 8005bc4:	d9f6      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x4b8>
            return HAL_TIMEOUT;
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	e03a      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bca:	4927      	ldr	r1, [pc, #156]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005bcc:	68cb      	ldr	r3, [r1, #12]
 8005bce:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <HAL_RCC_OscConfig+0x58c>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005bd4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005bd6:	4302      	orrs	r2, r0
 8005bd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005bda:	4302      	orrs	r2, r0
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8005be0:	680a      	ldr	r2, [r1, #0]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	045b      	lsls	r3, r3, #17
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8005bea:	f7fe fccd 	bl	8004588 <HAL_GetTick>
 8005bee:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	019b      	lsls	r3, r3, #6
 8005bf6:	d406      	bmi.n	8005c06 <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fe fcc6 	bl	8004588 <HAL_GetTick>
 8005bfc:	1b00      	subs	r0, r0, r4
 8005bfe:	2802      	cmp	r0, #2
 8005c00:	d9f6      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 8005c02:	2003      	movs	r0, #3
 8005c04:	e01c      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
  return HAL_OK;
 8005c06:	2000      	movs	r0, #0
 8005c08:	e01a      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	e018      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d020      	beq.n	8005c54 <HAL_RCC_OscConfig+0x558>
        pll_config = RCC->CFGR;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <HAL_RCC_OscConfig+0x56c>)
 8005c14:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	025b      	lsls	r3, r3, #9
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c1e:	428b      	cmp	r3, r1
 8005c20:	d11a      	bne.n	8005c58 <HAL_RCC_OscConfig+0x55c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c22:	23f0      	movs	r3, #240	; 0xf0
 8005c24:	039b      	lsls	r3, r3, #14
 8005c26:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c2a:	428b      	cmp	r3, r1
 8005c2c:	d116      	bne.n	8005c5c <HAL_RCC_OscConfig+0x560>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005c2e:	23c0      	movs	r3, #192	; 0xc0
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	401a      	ands	r2, r3
 8005c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d112      	bne.n	8005c60 <HAL_RCC_OscConfig+0x564>
  return HAL_OK;
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e000      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
    return HAL_ERROR;
 8005c3e:	2001      	movs	r0, #1
}
 8005c40:	b003      	add	sp, #12
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8005c44:	2001      	movs	r0, #1
 8005c46:	e7fb      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        return HAL_ERROR;
 8005c48:	2001      	movs	r0, #1
 8005c4a:	e7f9      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        return HAL_ERROR;
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7f7      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
  return HAL_OK;
 8005c50:	2000      	movs	r0, #0
 8005c52:	e7f5      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
        return HAL_ERROR;
 8005c54:	2001      	movs	r0, #1
 8005c56:	e7f3      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
          return HAL_ERROR;
 8005c58:	2001      	movs	r0, #1
 8005c5a:	e7f1      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	e7ef      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
 8005c60:	2001      	movs	r0, #1
 8005c62:	e7ed      	b.n	8005c40 <HAL_RCC_OscConfig+0x544>
 8005c64:	40007000 	.word	0x40007000
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	00001388 	.word	0x00001388
 8005c70:	fffffeff 	.word	0xfffffeff
 8005c74:	fffffbff 	.word	0xfffffbff
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	efffffff 	.word	0xefffffff
 8005c80:	ffffdfff 	.word	0xffffdfff
 8005c84:	feffffff 	.word	0xfeffffff
 8005c88:	ff02ffff 	.word	0xff02ffff

08005c8c <HAL_RCC_ClockConfig>:
{
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	0004      	movs	r4, r0
 8005c90:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d100      	bne.n	8005c98 <HAL_RCC_ClockConfig+0xc>
 8005c96:	e0b7      	b.n	8005e08 <HAL_RCC_ClockConfig+0x17c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c98:	4b5f      	ldr	r3, [pc, #380]	; (8005e18 <HAL_RCC_ClockConfig+0x18c>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	d20a      	bcs.n	8005cba <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca4:	495c      	ldr	r1, [pc, #368]	; (8005e18 <HAL_RCC_ClockConfig+0x18c>)
 8005ca6:	680b      	ldr	r3, [r1, #0]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	4393      	bics	r3, r2
 8005cac:	432b      	orrs	r3, r5
 8005cae:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb0:	680b      	ldr	r3, [r1, #0]
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	42aa      	cmp	r2, r5
 8005cb6:	d000      	beq.n	8005cba <HAL_RCC_ClockConfig+0x2e>
 8005cb8:	e0a8      	b.n	8005e0c <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	079b      	lsls	r3, r3, #30
 8005cbe:	d506      	bpl.n	8005cce <HAL_RCC_ClockConfig+0x42>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4a56      	ldr	r2, [pc, #344]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005cc2:	68d3      	ldr	r3, [r2, #12]
 8005cc4:	21f0      	movs	r1, #240	; 0xf0
 8005cc6:	438b      	bics	r3, r1
 8005cc8:	68a1      	ldr	r1, [r4, #8]
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	07db      	lsls	r3, r3, #31
 8005cd2:	d564      	bpl.n	8005d9e <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d009      	beq.n	8005cee <HAL_RCC_ClockConfig+0x62>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d029      	beq.n	8005d32 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d02d      	beq.n	8005d3e <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ce2:	4a4e      	ldr	r2, [pc, #312]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	0592      	lsls	r2, r2, #22
 8005ce8:	d406      	bmi.n	8005cf8 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8005cea:	2001      	movs	r0, #1
 8005cec:	e08b      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cee:	4a4b      	ldr	r2, [pc, #300]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	0392      	lsls	r2, r2, #14
 8005cf4:	d400      	bmi.n	8005cf8 <HAL_RCC_ClockConfig+0x6c>
 8005cf6:	e08b      	b.n	8005e10 <HAL_RCC_ClockConfig+0x184>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cf8:	4948      	ldr	r1, [pc, #288]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005cfa:	68ca      	ldr	r2, [r1, #12]
 8005cfc:	2003      	movs	r0, #3
 8005cfe:	4382      	bics	r2, r0
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8005d04:	f7fe fc40 	bl	8004588 <HAL_GetTick>
 8005d08:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d01c      	beq.n	8005d4a <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d028      	beq.n	8005d66 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d034      	beq.n	8005d82 <HAL_RCC_ClockConfig+0xf6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d18:	4b40      	ldr	r3, [pc, #256]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	220c      	movs	r2, #12
 8005d1e:	421a      	tst	r2, r3
 8005d20:	d03d      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d22:	f7fe fc31 	bl	8004588 <HAL_GetTick>
 8005d26:	1b80      	subs	r0, r0, r6
 8005d28:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_RCC_ClockConfig+0x194>)
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	d9f4      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x8c>
          return HAL_TIMEOUT;
 8005d2e:	2003      	movs	r0, #3
 8005d30:	e069      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d32:	4a3a      	ldr	r2, [pc, #232]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	0192      	lsls	r2, r2, #6
 8005d38:	d4de      	bmi.n	8005cf8 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e063      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d3e:	4a37      	ldr	r2, [pc, #220]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	0752      	lsls	r2, r2, #29
 8005d44:	d4d8      	bmi.n	8005cf8 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8005d46:	2001      	movs	r0, #1
 8005d48:	e05d      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d4a:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	230c      	movs	r3, #12
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d023      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d56:	f7fe fc17 	bl	8004588 <HAL_GetTick>
 8005d5a:	1b80      	subs	r0, r0, r6
 8005d5c:	4a30      	ldr	r2, [pc, #192]	; (8005e20 <HAL_RCC_ClockConfig+0x194>)
 8005d5e:	4290      	cmp	r0, r2
 8005d60:	d9f3      	bls.n	8005d4a <HAL_RCC_ClockConfig+0xbe>
          return HAL_TIMEOUT;
 8005d62:	2003      	movs	r0, #3
 8005d64:	e04f      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b0c      	cmp	r3, #12
 8005d70:	d015      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d72:	f7fe fc09 	bl	8004588 <HAL_GetTick>
 8005d76:	1b80      	subs	r0, r0, r6
 8005d78:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCC_ClockConfig+0x194>)
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	d9f3      	bls.n	8005d66 <HAL_RCC_ClockConfig+0xda>
          return HAL_TIMEOUT;
 8005d7e:	2003      	movs	r0, #3
 8005d80:	e041      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d82:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	230c      	movs	r3, #12
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d007      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8e:	f7fe fbfb 	bl	8004588 <HAL_GetTick>
 8005d92:	1b80      	subs	r0, r0, r6
 8005d94:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <HAL_RCC_ClockConfig+0x194>)
 8005d96:	4298      	cmp	r0, r3
 8005d98:	d9f3      	bls.n	8005d82 <HAL_RCC_ClockConfig+0xf6>
          return HAL_TIMEOUT;
 8005d9a:	2003      	movs	r0, #3
 8005d9c:	e033      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <HAL_RCC_ClockConfig+0x18c>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	2301      	movs	r3, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	42ab      	cmp	r3, r5
 8005da8:	d909      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	491b      	ldr	r1, [pc, #108]	; (8005e18 <HAL_RCC_ClockConfig+0x18c>)
 8005dac:	680b      	ldr	r3, [r1, #0]
 8005dae:	2201      	movs	r2, #1
 8005db0:	4393      	bics	r3, r2
 8005db2:	432b      	orrs	r3, r5
 8005db4:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db6:	680b      	ldr	r3, [r1, #0]
 8005db8:	401a      	ands	r2, r3
 8005dba:	42aa      	cmp	r2, r5
 8005dbc:	d12a      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	075b      	lsls	r3, r3, #29
 8005dc2:	d506      	bpl.n	8005dd2 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005dc6:	68d3      	ldr	r3, [r2, #12]
 8005dc8:	4916      	ldr	r1, [pc, #88]	; (8005e24 <HAL_RCC_ClockConfig+0x198>)
 8005dca:	400b      	ands	r3, r1
 8005dcc:	68e1      	ldr	r1, [r4, #12]
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	071b      	lsls	r3, r3, #28
 8005dd6:	d507      	bpl.n	8005de8 <HAL_RCC_ClockConfig+0x15c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dd8:	4910      	ldr	r1, [pc, #64]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005dda:	68cb      	ldr	r3, [r1, #12]
 8005ddc:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <HAL_RCC_ClockConfig+0x19c>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005de8:	f7ff fc30 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_ClockConfig+0x190>)
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	0912      	lsrs	r2, r2, #4
 8005df2:	230f      	movs	r3, #15
 8005df4:	4013      	ands	r3, r2
 8005df6:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <HAL_RCC_ClockConfig+0x1a0>)
 8005df8:	5cd3      	ldrb	r3, [r2, r3]
 8005dfa:	40d8      	lsrs	r0, r3
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <HAL_RCC_ClockConfig+0x1a4>)
 8005dfe:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005e00:	2003      	movs	r0, #3
 8005e02:	f009 fd21 	bl	800f848 <HAL_InitTick>
}
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e7fc      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      return HAL_ERROR;
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	e7fa      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
        return HAL_ERROR;
 8005e10:	2001      	movs	r0, #1
 8005e12:	e7f8      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
      return HAL_ERROR;
 8005e14:	2001      	movs	r0, #1
 8005e16:	e7f6      	b.n	8005e06 <HAL_RCC_ClockConfig+0x17a>
 8005e18:	40022000 	.word	0x40022000
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	00001388 	.word	0x00001388
 8005e24:	fffff8ff 	.word	0xfffff8ff
 8005e28:	ffffc7ff 	.word	0xffffc7ff
 8005e2c:	08010d08 	.word	0x08010d08
 8005e30:	20000044 	.word	0x20000044

08005e34 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005e34:	4b01      	ldr	r3, [pc, #4]	; (8005e3c <HAL_RCC_GetHCLKFreq+0x8>)
 8005e36:	6818      	ldr	r0, [r3, #0]
}
 8005e38:	4770      	bx	lr
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	20000044 	.word	0x20000044

08005e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e40:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e42:	f7ff fff7 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	0a12      	lsrs	r2, r2, #8
 8005e4c:	2307      	movs	r3, #7
 8005e4e:	4013      	ands	r3, r2
 8005e50:	4a02      	ldr	r2, [pc, #8]	; (8005e5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005e52:	5cd3      	ldrb	r3, [r2, r3]
 8005e54:	40d8      	lsrs	r0, r3
}
 8005e56:	bd10      	pop	{r4, pc}
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	08010d18 	.word	0x08010d18

08005e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e60:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e62:	f7ff ffe7 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8005e66:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	0ad2      	lsrs	r2, r2, #11
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	4013      	ands	r3, r2
 8005e70:	4a02      	ldr	r2, [pc, #8]	; (8005e7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005e72:	5cd3      	ldrb	r3, [r2, r3]
 8005e74:	40d8      	lsrs	r0, r3
}
 8005e76:	bd10      	pop	{r4, pc}
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	08010d18 	.word	0x08010d18

08005e80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e84:	6803      	ldr	r3, [r0, #0]
 8005e86:	069b      	lsls	r3, r3, #26
 8005e88:	d54f      	bpl.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8a:	4b6b      	ldr	r3, [pc, #428]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	d500      	bpl.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8005e92:	e092      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e94:	4a68      	ldr	r2, [pc, #416]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e96:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	055b      	lsls	r3, r3, #21
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8005ea0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea2:	4b66      	ldr	r3, [pc, #408]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	05db      	lsls	r3, r3, #23
 8005ea8:	d400      	bmi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8005eaa:	e088      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005eac:	4b62      	ldr	r3, [pc, #392]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	23c0      	movs	r3, #192	; 0xc0
 8005eb2:	039b      	lsls	r3, r3, #14
 8005eb4:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	428b      	cmp	r3, r1
 8005ebc:	d006      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4c>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005ebe:	23c0      	movs	r3, #192	; 0xc0
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	0011      	movs	r1, r2
 8005ec4:	4019      	ands	r1, r3
 8005ec6:	4299      	cmp	r1, r3
 8005ec8:	d100      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005eca:	e08d      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005ecc:	4b5a      	ldr	r3, [pc, #360]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ece:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ed0:	23c0      	movs	r3, #192	; 0xc0
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	0008      	movs	r0, r1
 8005ed6:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005ed8:	4219      	tst	r1, r3
 8005eda:	d015      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005edc:	401a      	ands	r2, r3
 8005ede:	4282      	cmp	r2, r0
 8005ee0:	d012      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	069b      	lsls	r3, r3, #26
 8005ee6:	d50f      	bpl.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005ee8:	4b53      	ldr	r3, [pc, #332]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005eec:	4a54      	ldr	r2, [pc, #336]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005eee:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ef0:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	0309      	lsls	r1, r1, #12
 8005ef6:	4331      	orrs	r1, r6
 8005ef8:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005efa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005efc:	4e51      	ldr	r6, [pc, #324]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005efe:	4031      	ands	r1, r6
 8005f00:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005f02:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005f04:	05c3      	lsls	r3, r0, #23
 8005f06:	d476      	bmi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x176>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	22c0      	movs	r2, #192	; 0xc0
 8005f0c:	0292      	lsls	r2, r2, #10
 8005f0e:	0019      	movs	r1, r3
 8005f10:	4011      	ands	r1, r2
 8005f12:	4291      	cmp	r1, r2
 8005f14:	d07e      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005f16:	4948      	ldr	r1, [pc, #288]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f18:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8005f1a:	22c0      	movs	r2, #192	; 0xc0
 8005f1c:	0292      	lsls	r2, r2, #10
 8005f1e:	6860      	ldr	r0, [r4, #4]
 8005f20:	4002      	ands	r2, r0
 8005f22:	4313      	orrs	r3, r2
 8005f24:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f26:	2d01      	cmp	r5, #1
 8005f28:	d07e      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	07db      	lsls	r3, r3, #31
 8005f2e:	d506      	bpl.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f30:	4a41      	ldr	r2, [pc, #260]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f34:	2103      	movs	r1, #3
 8005f36:	438b      	bics	r3, r1
 8005f38:	68a1      	ldr	r1, [r4, #8]
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	079b      	lsls	r3, r3, #30
 8005f42:	d506      	bpl.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f44:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f48:	210c      	movs	r1, #12
 8005f4a:	438b      	bics	r3, r1
 8005f4c:	68e1      	ldr	r1, [r4, #12]
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	075b      	lsls	r3, r3, #29
 8005f56:	d506      	bpl.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f58:	4a37      	ldr	r2, [pc, #220]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f5c:	493a      	ldr	r1, [pc, #232]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005f5e:	400b      	ands	r3, r1
 8005f60:	6921      	ldr	r1, [r4, #16]
 8005f62:	430b      	orrs	r3, r1
 8005f64:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	071b      	lsls	r3, r3, #28
 8005f6a:	d506      	bpl.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f6c:	4a32      	ldr	r2, [pc, #200]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f6e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f70:	4936      	ldr	r1, [pc, #216]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	6961      	ldr	r1, [r4, #20]
 8005f76:	430b      	orrs	r3, r1
 8005f78:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	05db      	lsls	r3, r3, #23
 8005f7e:	d506      	bpl.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f80:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f84:	492e      	ldr	r1, [pc, #184]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	69a1      	ldr	r1, [r4, #24]
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	065b      	lsls	r3, r3, #25
 8005f92:	d506      	bpl.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f94:	4a28      	ldr	r2, [pc, #160]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f98:	492d      	ldr	r1, [pc, #180]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	6a21      	ldr	r1, [r4, #32]
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	d545      	bpl.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005faa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005fac:	4929      	ldr	r1, [pc, #164]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	69e1      	ldr	r1, [r4, #28]
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e03d      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    FlagStatus       pwrclkchanged = RESET;
 8005fba:	2500      	movs	r5, #0
 8005fbc:	e771      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fc0:	6811      	ldr	r1, [r2, #0]
 8005fc2:	2380      	movs	r3, #128	; 0x80
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005fca:	f7fe fadd 	bl	8004588 <HAL_GetTick>
 8005fce:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	05db      	lsls	r3, r3, #23
 8005fd6:	d500      	bpl.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005fd8:	e768      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fda:	f7fe fad5 	bl	8004588 <HAL_GetTick>
 8005fde:	1b80      	subs	r0, r0, r6
 8005fe0:	2864      	cmp	r0, #100	; 0x64
 8005fe2:	d9f5      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
          return HAL_TIMEOUT;
 8005fe4:	2003      	movs	r0, #3
 8005fe6:	e026      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fe8:	4b13      	ldr	r3, [pc, #76]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	039b      	lsls	r3, r3, #14
 8005fee:	d400      	bmi.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005ff0:	e76c      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4c>
          return HAL_ERROR;
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e01f      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        tickstart = HAL_GetTick();
 8005ff6:	f7fe fac7 	bl	8004588 <HAL_GetTick>
 8005ffa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ffc:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	059b      	lsls	r3, r3, #22
 8006002:	d481      	bmi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006004:	f7fe fac0 	bl	8004588 <HAL_GetTick>
 8006008:	1b80      	subs	r0, r0, r6
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800600c:	4298      	cmp	r0, r3
 800600e:	d9f5      	bls.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x17c>
            return HAL_TIMEOUT;
 8006010:	2003      	movs	r0, #3
 8006012:	e010      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006014:	4908      	ldr	r1, [pc, #32]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006016:	680a      	ldr	r2, [r1, #0]
 8006018:	4810      	ldr	r0, [pc, #64]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800601a:	4002      	ands	r2, r0
 800601c:	20c0      	movs	r0, #192	; 0xc0
 800601e:	0380      	lsls	r0, r0, #14
 8006020:	4003      	ands	r3, r0
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]
 8006026:	e776      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006028:	000a      	movs	r2, r1
 800602a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800602c:	490c      	ldr	r1, [pc, #48]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800602e:	400b      	ands	r3, r1
 8006030:	6393      	str	r3, [r2, #56]	; 0x38
 8006032:	e77a      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  return HAL_OK;
 8006034:	2000      	movs	r0, #0
}
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	40021000 	.word	0x40021000
 800603c:	40007000 	.word	0x40007000
 8006040:	fffcffff 	.word	0xfffcffff
 8006044:	fff7ffff 	.word	0xfff7ffff
 8006048:	fffff3ff 	.word	0xfffff3ff
 800604c:	ffffcfff 	.word	0xffffcfff
 8006050:	fbffffff 	.word	0xfbffffff
 8006054:	fff3ffff 	.word	0xfff3ffff
 8006058:	00001388 	.word	0x00001388
 800605c:	ffcfffff 	.word	0xffcfffff
 8006060:	efffffff 	.word	0xefffffff

08006064 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006068:	2320      	movs	r3, #32
 800606a:	5cc3      	ldrb	r3, [r0, r3]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d060      	beq.n	8006132 <HAL_RTC_DeactivateAlarm+0xce>
 8006070:	2320      	movs	r3, #32
 8006072:	2201      	movs	r2, #1
 8006074:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006076:	3301      	adds	r3, #1
 8006078:	3201      	adds	r2, #1
 800607a:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800607c:	6803      	ldr	r3, [r0, #0]
 800607e:	32c8      	adds	r2, #200	; 0xc8
 8006080:	625a      	str	r2, [r3, #36]	; 0x24
 8006082:	6803      	ldr	r3, [r0, #0]
 8006084:	3a77      	subs	r2, #119	; 0x77
 8006086:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4299      	cmp	r1, r3
 800608e:	d022      	beq.n	80060d6 <HAL_RTC_DeactivateAlarm+0x72>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006090:	6802      	ldr	r2, [r0, #0]
 8006092:	6893      	ldr	r3, [r2, #8]
 8006094:	4928      	ldr	r1, [pc, #160]	; (8006138 <HAL_RTC_DeactivateAlarm+0xd4>)
 8006096:	400b      	ands	r3, r1
 8006098:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800609a:	6802      	ldr	r2, [r0, #0]
 800609c:	6893      	ldr	r3, [r2, #8]
 800609e:	4927      	ldr	r1, [pc, #156]	; (800613c <HAL_RTC_DeactivateAlarm+0xd8>)
 80060a0:	400b      	ands	r3, r1
 80060a2:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();
 80060a4:	f7fe fa70 	bl	8004588 <HAL_GetTick>
 80060a8:	0005      	movs	r5, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	079b      	lsls	r3, r3, #30
 80060b0:	d434      	bmi.n	800611c <HAL_RTC_DeactivateAlarm+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060b2:	f7fe fa69 	bl	8004588 <HAL_GetTick>
 80060b6:	1b40      	subs	r0, r0, r5
 80060b8:	22fa      	movs	r2, #250	; 0xfa
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	4290      	cmp	r0, r2
 80060be:	d9f4      	bls.n	80060aa <HAL_RTC_DeactivateAlarm+0x46>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	22ff      	movs	r2, #255	; 0xff
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c6:	2321      	movs	r3, #33	; 0x21
 80060c8:	3afc      	subs	r2, #252	; 0xfc
 80060ca:	54e2      	strb	r2, [r4, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060cc:	3b01      	subs	r3, #1
 80060ce:	2200      	movs	r2, #0
 80060d0:	54e2      	strb	r2, [r4, r3]

        return HAL_TIMEOUT;
 80060d2:	2003      	movs	r0, #3
 80060d4:	e02c      	b.n	8006130 <HAL_RTC_DeactivateAlarm+0xcc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80060d6:	6802      	ldr	r2, [r0, #0]
 80060d8:	6893      	ldr	r3, [r2, #8]
 80060da:	4919      	ldr	r1, [pc, #100]	; (8006140 <HAL_RTC_DeactivateAlarm+0xdc>)
 80060dc:	400b      	ands	r3, r1
 80060de:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80060e0:	6802      	ldr	r2, [r0, #0]
 80060e2:	6893      	ldr	r3, [r2, #8]
 80060e4:	4917      	ldr	r1, [pc, #92]	; (8006144 <HAL_RTC_DeactivateAlarm+0xe0>)
 80060e6:	400b      	ands	r3, r1
 80060e8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80060ea:	f7fe fa4d 	bl	8004588 <HAL_GetTick>
 80060ee:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	07db      	lsls	r3, r3, #31
 80060f6:	d411      	bmi.n	800611c <HAL_RTC_DeactivateAlarm+0xb8>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80060f8:	f7fe fa46 	bl	8004588 <HAL_GetTick>
 80060fc:	1b40      	subs	r0, r0, r5
 80060fe:	23fa      	movs	r3, #250	; 0xfa
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4298      	cmp	r0, r3
 8006104:	d9f4      	bls.n	80060f0 <HAL_RTC_DeactivateAlarm+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800610c:	2321      	movs	r3, #33	; 0x21
 800610e:	3afc      	subs	r2, #252	; 0xfc
 8006110:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8006112:	3b01      	subs	r3, #1
 8006114:	2200      	movs	r2, #0
 8006116:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8006118:	2003      	movs	r0, #3
 800611a:	e009      	b.n	8006130 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006122:	2321      	movs	r3, #33	; 0x21
 8006124:	3afe      	subs	r2, #254	; 0xfe
 8006126:	54e2      	strb	r2, [r4, r3]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006128:	3b01      	subs	r3, #1
 800612a:	2200      	movs	r2, #0
 800612c:	54e2      	strb	r2, [r4, r3]

  return HAL_OK;
 800612e:	2000      	movs	r0, #0
}
 8006130:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8006132:	2002      	movs	r0, #2
 8006134:	e7fc      	b.n	8006130 <HAL_RTC_DeactivateAlarm+0xcc>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	fffffdff 	.word	0xfffffdff
 800613c:	ffffdfff 	.word	0xffffdfff
 8006140:	fffffeff 	.word	0xfffffeff
 8006144:	ffffefff 	.word	0xffffefff

08006148 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800614c:	6802      	ldr	r2, [r0, #0]
 800614e:	68d3      	ldr	r3, [r2, #12]
 8006150:	21a0      	movs	r1, #160	; 0xa0
 8006152:	438b      	bics	r3, r1
 8006154:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006156:	f7fe fa17 	bl	8004588 <HAL_GetTick>
 800615a:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	069b      	lsls	r3, r3, #26
 8006162:	d408      	bmi.n	8006176 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006164:	f7fe fa10 	bl	8004588 <HAL_GetTick>
 8006168:	1b40      	subs	r0, r0, r5
 800616a:	23fa      	movs	r3, #250	; 0xfa
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4298      	cmp	r0, r3
 8006170:	d9f4      	bls.n	800615c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8006172:	2003      	movs	r0, #3
 8006174:	e000      	b.n	8006178 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8006176:	2000      	movs	r0, #0
}
 8006178:	bd70      	pop	{r4, r5, r6, pc}

0800617a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800617a:	b570      	push	{r4, r5, r6, lr}
 800617c:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	0652      	lsls	r2, r2, #25
 8006184:	d501      	bpl.n	800618a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006186:	2000      	movs	r0, #0
}
 8006188:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800618a:	2201      	movs	r2, #1
 800618c:	4252      	negs	r2, r2
 800618e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006190:	f7fe f9fa 	bl	8004588 <HAL_GetTick>
 8006194:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	065b      	lsls	r3, r3, #25
 800619c:	d408      	bmi.n	80061b0 <RTC_EnterInitMode+0x36>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800619e:	f7fe f9f3 	bl	8004588 <HAL_GetTick>
 80061a2:	1b40      	subs	r0, r0, r5
 80061a4:	22fa      	movs	r2, #250	; 0xfa
 80061a6:	0092      	lsls	r2, r2, #2
 80061a8:	4290      	cmp	r0, r2
 80061aa:	d9f4      	bls.n	8006196 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80061ac:	2003      	movs	r0, #3
 80061ae:	e7eb      	b.n	8006188 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80061b0:	2000      	movs	r0, #0
 80061b2:	e7e9      	b.n	8006188 <RTC_EnterInitMode+0xe>

080061b4 <HAL_RTC_Init>:
{
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 80061b8:	d063      	beq.n	8006282 <HAL_RTC_Init+0xce>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061ba:	2321      	movs	r3, #33	; 0x21
 80061bc:	5cc3      	ldrb	r3, [r0, r3]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d041      	beq.n	8006246 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c2:	2321      	movs	r3, #33	; 0x21
 80061c4:	2202      	movs	r2, #2
 80061c6:	54e2      	strb	r2, [r4, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	32c8      	adds	r2, #200	; 0xc8
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	3a77      	subs	r2, #119	; 0x77
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061d4:	0020      	movs	r0, r4
 80061d6:	f7ff ffd0 	bl	800617a <RTC_EnterInitMode>
 80061da:	1e05      	subs	r5, r0, #0
 80061dc:	d139      	bne.n	8006252 <HAL_RTC_Init+0x9e>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	6893      	ldr	r3, [r2, #8]
 80061e2:	4929      	ldr	r1, [pc, #164]	; (8006288 <HAL_RTC_Init+0xd4>)
 80061e4:	400b      	ands	r3, r1
 80061e6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061e8:	6821      	ldr	r1, [r4, #0]
 80061ea:	688a      	ldr	r2, [r1, #8]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	6920      	ldr	r0, [r4, #16]
 80061f0:	4303      	orrs	r3, r0
 80061f2:	69a0      	ldr	r0, [r4, #24]
 80061f4:	4303      	orrs	r3, r0
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	68e2      	ldr	r2, [r4, #12]
 80061fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006200:	6821      	ldr	r1, [r4, #0]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	68a2      	ldr	r2, [r4, #8]
 8006206:	0412      	lsls	r2, r2, #16
 8006208:	4313      	orrs	r3, r2
 800620a:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	68d3      	ldr	r3, [r2, #12]
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	438b      	bics	r3, r1
 8006214:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800621a:	397d      	subs	r1, #125	; 0x7d
 800621c:	438b      	bics	r3, r1
 800621e:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006220:	6821      	ldr	r1, [r4, #0]
 8006222:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8006224:	69e2      	ldr	r2, [r4, #28]
 8006226:	6960      	ldr	r0, [r4, #20]
 8006228:	4302      	orrs	r2, r0
 800622a:	4313      	orrs	r3, r2
 800622c:	64cb      	str	r3, [r1, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	069b      	lsls	r3, r3, #26
 8006234:	d515      	bpl.n	8006262 <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800623c:	2321      	movs	r3, #33	; 0x21
 800623e:	3afe      	subs	r2, #254	; 0xfe
 8006240:	54e2      	strb	r2, [r4, r3]
}
 8006242:	0028      	movs	r0, r5
 8006244:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8006246:	3320      	adds	r3, #32
 8006248:	2200      	movs	r2, #0
 800624a:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 800624c:	f009 fb22 	bl	800f894 <HAL_RTC_MspInit>
 8006250:	e7b7      	b.n	80061c2 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006258:	2321      	movs	r3, #33	; 0x21
 800625a:	3afb      	subs	r2, #251	; 0xfb
 800625c:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 800625e:	2501      	movs	r5, #1
 8006260:	e7ef      	b.n	8006242 <HAL_RTC_Init+0x8e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006262:	0020      	movs	r0, r4
 8006264:	f7ff ff70 	bl	8006148 <HAL_RTC_WaitForSynchro>
 8006268:	2800      	cmp	r0, #0
 800626a:	d0e4      	beq.n	8006236 <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	22ff      	movs	r2, #255	; 0xff
 8006270:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006272:	2321      	movs	r3, #33	; 0x21
 8006274:	3afb      	subs	r2, #251	; 0xfb
 8006276:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8006278:	3b01      	subs	r3, #1
 800627a:	2200      	movs	r2, #0
 800627c:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800627e:	2501      	movs	r5, #1
 8006280:	e7df      	b.n	8006242 <HAL_RTC_Init+0x8e>
    return HAL_ERROR;
 8006282:	2501      	movs	r5, #1
 8006284:	e7dd      	b.n	8006242 <HAL_RTC_Init+0x8e>
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	ff8fffbf 	.word	0xff8fffbf

0800628c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800628c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 800628e:	2809      	cmp	r0, #9
 8006290:	d903      	bls.n	800629a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8006292:	3301      	adds	r3, #1
    Param -= 10U;
 8006294:	380a      	subs	r0, #10
 8006296:	b2c0      	uxtb	r0, r0
 8006298:	e7f9      	b.n	800628e <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	b2db      	uxtb	r3, r3
 800629e:	4318      	orrs	r0, r3
}
 80062a0:	4770      	bx	lr
	...

080062a4 <HAL_RTC_SetTime>:
{
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	0004      	movs	r4, r0
 80062a8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80062aa:	2320      	movs	r3, #32
 80062ac:	5cc3      	ldrb	r3, [r0, r3]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d100      	bne.n	80062b4 <HAL_RTC_SetTime+0x10>
 80062b2:	e078      	b.n	80063a6 <HAL_RTC_SetTime+0x102>
 80062b4:	2320      	movs	r3, #32
 80062b6:	2101      	movs	r1, #1
 80062b8:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ba:	3301      	adds	r3, #1
 80062bc:	3101      	adds	r1, #1
 80062be:	54c1      	strb	r1, [r0, r3]
  if (Format == RTC_FORMAT_BIN)
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	d144      	bne.n	800634e <HAL_RTC_SetTime+0xaa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062c4:	6803      	ldr	r3, [r0, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	065b      	lsls	r3, r3, #25
 80062ca:	d401      	bmi.n	80062d0 <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	70f3      	strb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062d0:	7830      	ldrb	r0, [r6, #0]
 80062d2:	f7ff ffdb 	bl	800628c <RTC_ByteToBcd2>
 80062d6:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80062d8:	7870      	ldrb	r0, [r6, #1]
 80062da:	f7ff ffd7 	bl	800628c <RTC_ByteToBcd2>
 80062de:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062e0:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80062e2:	78b0      	ldrb	r0, [r6, #2]
 80062e4:	f7ff ffd2 	bl	800628c <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80062e8:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80062ea:	78f0      	ldrb	r0, [r6, #3]
 80062ec:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062ee:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	22ca      	movs	r2, #202	; 0xca
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	3a77      	subs	r2, #119	; 0x77
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062fc:	0020      	movs	r0, r4
 80062fe:	f7ff ff3c 	bl	800617a <RTC_EnterInitMode>
 8006302:	1e07      	subs	r7, r0, #0
 8006304:	d134      	bne.n	8006370 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	4828      	ldr	r0, [pc, #160]	; (80063ac <HAL_RTC_SetTime+0x108>)
 800630a:	4005      	ands	r5, r0
 800630c:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	6893      	ldr	r3, [r2, #8]
 8006312:	4927      	ldr	r1, [pc, #156]	; (80063b0 <HAL_RTC_SetTime+0x10c>)
 8006314:	400b      	ands	r3, r1
 8006316:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006318:	6821      	ldr	r1, [r4, #0]
 800631a:	688b      	ldr	r3, [r1, #8]
 800631c:	68f2      	ldr	r2, [r6, #12]
 800631e:	6930      	ldr	r0, [r6, #16]
 8006320:	4302      	orrs	r2, r0
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	68d3      	ldr	r3, [r2, #12]
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	438b      	bics	r3, r1
 800632e:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	069b      	lsls	r3, r3, #26
 8006336:	d526      	bpl.n	8006386 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	22ff      	movs	r2, #255	; 0xff
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800633e:	2321      	movs	r3, #33	; 0x21
 8006340:	3afe      	subs	r2, #254	; 0xfe
 8006342:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8006344:	3b01      	subs	r3, #1
 8006346:	2200      	movs	r2, #0
 8006348:	54e2      	strb	r2, [r4, r3]
}
 800634a:	0038      	movs	r0, r7
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800634e:	6803      	ldr	r3, [r0, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	065b      	lsls	r3, r3, #25
 8006354:	d401      	bmi.n	800635a <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 8006356:	2300      	movs	r3, #0
 8006358:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800635a:	7835      	ldrb	r5, [r6, #0]
 800635c:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800635e:	7870      	ldrb	r0, [r6, #1]
 8006360:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006362:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8006364:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006366:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006368:	78f0      	ldrb	r0, [r6, #3]
 800636a:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800636c:	4305      	orrs	r5, r0
 800636e:	e7bf      	b.n	80062f0 <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	22ff      	movs	r2, #255	; 0xff
 8006374:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006376:	2321      	movs	r3, #33	; 0x21
 8006378:	3afb      	subs	r2, #251	; 0xfb
 800637a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 800637c:	3b01      	subs	r3, #1
 800637e:	2200      	movs	r2, #0
 8006380:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8006382:	2701      	movs	r7, #1
 8006384:	e7e1      	b.n	800634a <HAL_RTC_SetTime+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006386:	0020      	movs	r0, r4
 8006388:	f7ff fede 	bl	8006148 <HAL_RTC_WaitForSynchro>
 800638c:	2800      	cmp	r0, #0
 800638e:	d0d3      	beq.n	8006338 <HAL_RTC_SetTime+0x94>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	22ff      	movs	r2, #255	; 0xff
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006396:	2321      	movs	r3, #33	; 0x21
 8006398:	3afb      	subs	r2, #251	; 0xfb
 800639a:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800639c:	3b01      	subs	r3, #1
 800639e:	2200      	movs	r2, #0
 80063a0:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80063a2:	2701      	movs	r7, #1
 80063a4:	e7d1      	b.n	800634a <HAL_RTC_SetTime+0xa6>
  __HAL_LOCK(hrtc);
 80063a6:	2702      	movs	r7, #2
 80063a8:	e7cf      	b.n	800634a <HAL_RTC_SetTime+0xa6>
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	007f7f7f 	.word	0x007f7f7f
 80063b0:	fffbffff 	.word	0xfffbffff

080063b4 <HAL_RTC_SetDate>:
{
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	0004      	movs	r4, r0
 80063b8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80063ba:	2320      	movs	r3, #32
 80063bc:	5cc3      	ldrb	r3, [r0, r3]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d069      	beq.n	8006496 <HAL_RTC_SetDate+0xe2>
 80063c2:	2320      	movs	r3, #32
 80063c4:	2101      	movs	r1, #1
 80063c6:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063c8:	3301      	adds	r3, #1
 80063ca:	3101      	adds	r1, #1
 80063cc:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_RTC_SetDate+0x2c>
 80063d2:	7873      	ldrb	r3, [r6, #1]
 80063d4:	06d9      	lsls	r1, r3, #27
 80063d6:	d503      	bpl.n	80063e0 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80063d8:	2110      	movs	r1, #16
 80063da:	438b      	bics	r3, r1
 80063dc:	330a      	adds	r3, #10
 80063de:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 80063e0:	2a00      	cmp	r2, #0
 80063e2:	d132      	bne.n	800644a <HAL_RTC_SetDate+0x96>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063e4:	78f0      	ldrb	r0, [r6, #3]
 80063e6:	f7ff ff51 	bl	800628c <RTC_ByteToBcd2>
 80063ea:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80063ec:	7870      	ldrb	r0, [r6, #1]
 80063ee:	f7ff ff4d 	bl	800628c <RTC_ByteToBcd2>
 80063f2:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063f4:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80063f6:	78b0      	ldrb	r0, [r6, #2]
 80063f8:	f7ff ff48 	bl	800628c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80063fc:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << 13U));
 80063fe:	7830      	ldrb	r0, [r6, #0]
 8006400:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006402:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	22ca      	movs	r2, #202	; 0xca
 8006408:	625a      	str	r2, [r3, #36]	; 0x24
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	3a77      	subs	r2, #119	; 0x77
 800640e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006410:	0020      	movs	r0, r4
 8006412:	f7ff feb2 	bl	800617a <RTC_EnterInitMode>
 8006416:	1e06      	subs	r6, r0, #0
 8006418:	d122      	bne.n	8006460 <HAL_RTC_SetDate+0xac>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	481f      	ldr	r0, [pc, #124]	; (800649c <HAL_RTC_SetDate+0xe8>)
 800641e:	4005      	ands	r5, r0
 8006420:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	68d3      	ldr	r3, [r2, #12]
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	438b      	bics	r3, r1
 800642a:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	069b      	lsls	r3, r3, #26
 8006432:	d520      	bpl.n	8006476 <HAL_RTC_SetDate+0xc2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	22ff      	movs	r2, #255	; 0xff
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800643a:	2321      	movs	r3, #33	; 0x21
 800643c:	3afe      	subs	r2, #254	; 0xfe
 800643e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 8006440:	3b01      	subs	r3, #1
 8006442:	2200      	movs	r2, #0
 8006444:	54e2      	strb	r2, [r4, r3]
}
 8006446:	0030      	movs	r0, r6
 8006448:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800644a:	78f5      	ldrb	r5, [r6, #3]
 800644c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800644e:	7870      	ldrb	r0, [r6, #1]
 8006450:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006452:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8006454:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006456:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006458:	7830      	ldrb	r0, [r6, #0]
 800645a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800645c:	4305      	orrs	r5, r0
 800645e:	e7d1      	b.n	8006404 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006466:	2321      	movs	r3, #33	; 0x21
 8006468:	3afb      	subs	r2, #251	; 0xfb
 800646a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hrtc);
 800646c:	3b01      	subs	r3, #1
 800646e:	2200      	movs	r2, #0
 8006470:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8006472:	2601      	movs	r6, #1
 8006474:	e7e7      	b.n	8006446 <HAL_RTC_SetDate+0x92>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006476:	0020      	movs	r0, r4
 8006478:	f7ff fe66 	bl	8006148 <HAL_RTC_WaitForSynchro>
 800647c:	2800      	cmp	r0, #0
 800647e:	d0d9      	beq.n	8006434 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	22ff      	movs	r2, #255	; 0xff
 8006484:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006486:	2321      	movs	r3, #33	; 0x21
 8006488:	3afb      	subs	r2, #251	; 0xfb
 800648a:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800648c:	3b01      	subs	r3, #1
 800648e:	2200      	movs	r2, #0
 8006490:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8006492:	2601      	movs	r6, #1
 8006494:	e7d7      	b.n	8006446 <HAL_RTC_SetDate+0x92>
  __HAL_LOCK(hrtc);
 8006496:	2602      	movs	r6, #2
 8006498:	e7d5      	b.n	8006446 <HAL_RTC_SetDate+0x92>
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	00ffff3f 	.word	0x00ffff3f

080064a0 <HAL_RTC_SetAlarm_IT>:
{
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	0004      	movs	r4, r0
 80064a4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80064a6:	2320      	movs	r3, #32
 80064a8:	5cc3      	ldrb	r3, [r0, r3]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d100      	bne.n	80064b0 <HAL_RTC_SetAlarm_IT+0x10>
 80064ae:	e0cb      	b.n	8006648 <HAL_RTC_SetAlarm_IT+0x1a8>
 80064b0:	2320      	movs	r3, #32
 80064b2:	2101      	movs	r1, #1
 80064b4:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064b6:	3301      	adds	r3, #1
 80064b8:	3101      	adds	r1, #1
 80064ba:	54c1      	strb	r1, [r0, r3]
  if (Format == RTC_FORMAT_BIN)
 80064bc:	2a00      	cmp	r2, #0
 80064be:	d152      	bne.n	8006566 <HAL_RTC_SetAlarm_IT+0xc6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064c0:	6803      	ldr	r3, [r0, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	065b      	lsls	r3, r3, #25
 80064c6:	d401      	bmi.n	80064cc <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	70eb      	strb	r3, [r5, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80064cc:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80064ce:	7828      	ldrb	r0, [r5, #0]
 80064d0:	f7ff fedc 	bl	800628c <RTC_ByteToBcd2>
 80064d4:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064d6:	7868      	ldrb	r0, [r5, #1]
 80064d8:	f7ff fed8 	bl	800628c <RTC_ByteToBcd2>
 80064dc:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80064de:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80064e0:	78a8      	ldrb	r0, [r5, #2]
 80064e2:	f7ff fed3 	bl	800628c <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064e6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064e8:	78e8      	ldrb	r0, [r5, #3]
 80064ea:	0400      	lsls	r0, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80064ec:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064ee:	2320      	movs	r3, #32
 80064f0:	5ce8      	ldrb	r0, [r5, r3]
 80064f2:	f7ff fecb 	bl	800628c <RTC_ByteToBcd2>
 80064f6:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064f8:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064fa:	433e      	orrs	r6, r7
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80064fc:	696b      	ldr	r3, [r5, #20]
 80064fe:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006500:	686f      	ldr	r7, [r5, #4]
 8006502:	69ab      	ldr	r3, [r5, #24]
 8006504:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	22ca      	movs	r2, #202	; 0xca
 800650a:	625a      	str	r2, [r3, #36]	; 0x24
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	3a77      	subs	r2, #119	; 0x77
 8006510:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006512:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006514:	2380      	movs	r3, #128	; 0x80
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	429a      	cmp	r2, r3
 800651a:	d03d      	beq.n	8006598 <HAL_RTC_SetAlarm_IT+0xf8>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	6893      	ldr	r3, [r2, #8]
 8006520:	494a      	ldr	r1, [pc, #296]	; (800664c <HAL_RTC_SetAlarm_IT+0x1ac>)
 8006522:	400b      	ands	r3, r1
 8006524:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006526:	6821      	ldr	r1, [r4, #0]
 8006528:	68ca      	ldr	r2, [r1, #12]
 800652a:	23ff      	movs	r3, #255	; 0xff
 800652c:	401a      	ands	r2, r3
 800652e:	4b48      	ldr	r3, [pc, #288]	; (8006650 <HAL_RTC_SetAlarm_IT+0x1b0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8006534:	f7fe f828 	bl	8004588 <HAL_GetTick>
 8006538:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	0792      	lsls	r2, r2, #30
 8006540:	d45f      	bmi.n	8006602 <HAL_RTC_SetAlarm_IT+0x162>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006542:	f7fe f821 	bl	8004588 <HAL_GetTick>
 8006546:	1b40      	subs	r0, r0, r5
 8006548:	23fa      	movs	r3, #250	; 0xfa
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4298      	cmp	r0, r3
 800654e:	d9f4      	bls.n	800653a <HAL_RTC_SetAlarm_IT+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006556:	2321      	movs	r3, #33	; 0x21
 8006558:	3afc      	subs	r2, #252	; 0xfc
 800655a:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800655c:	3b01      	subs	r3, #1
 800655e:	2200      	movs	r2, #0
 8006560:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8006562:	2003      	movs	r0, #3
 8006564:	e06f      	b.n	8006646 <HAL_RTC_SetAlarm_IT+0x1a6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006566:	6803      	ldr	r3, [r0, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	065b      	lsls	r3, r3, #25
 800656c:	d401      	bmi.n	8006572 <HAL_RTC_SetAlarm_IT+0xd2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800656e:	2300      	movs	r3, #0
 8006570:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006572:	782e      	ldrb	r6, [r5, #0]
 8006574:	0436      	lsls	r6, r6, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006576:	786b      	ldrb	r3, [r5, #1]
 8006578:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800657a:	431e      	orrs	r6, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800657c:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800657e:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006580:	78eb      	ldrb	r3, [r5, #3]
 8006582:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006584:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006586:	2320      	movs	r3, #32
 8006588:	5ceb      	ldrb	r3, [r5, r3]
 800658a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800658c:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800658e:	69eb      	ldr	r3, [r5, #28]
 8006590:	431e      	orrs	r6, r3
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006592:	696b      	ldr	r3, [r5, #20]
 8006594:	431e      	orrs	r6, r3
 8006596:	e7b3      	b.n	8006500 <HAL_RTC_SetAlarm_IT+0x60>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	6893      	ldr	r3, [r2, #8]
 800659c:	492d      	ldr	r1, [pc, #180]	; (8006654 <HAL_RTC_SetAlarm_IT+0x1b4>)
 800659e:	400b      	ands	r3, r1
 80065a0:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80065a2:	6821      	ldr	r1, [r4, #0]
 80065a4:	68ca      	ldr	r2, [r1, #12]
 80065a6:	23ff      	movs	r3, #255	; 0xff
 80065a8:	401a      	ands	r2, r3
 80065aa:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <HAL_RTC_SetAlarm_IT+0x1b8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80065b0:	f7fd ffea 	bl	8004588 <HAL_GetTick>
 80065b4:	0005      	movs	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	07d2      	lsls	r2, r2, #31
 80065bc:	d411      	bmi.n	80065e2 <HAL_RTC_SetAlarm_IT+0x142>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065be:	f7fd ffe3 	bl	8004588 <HAL_GetTick>
 80065c2:	1b40      	subs	r0, r0, r5
 80065c4:	23fa      	movs	r3, #250	; 0xfa
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4298      	cmp	r0, r3
 80065ca:	d9f4      	bls.n	80065b6 <HAL_RTC_SetAlarm_IT+0x116>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	22ff      	movs	r2, #255	; 0xff
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065d2:	2321      	movs	r3, #33	; 0x21
 80065d4:	3afc      	subs	r2, #252	; 0xfc
 80065d6:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 80065d8:	3b01      	subs	r3, #1
 80065da:	2200      	movs	r2, #0
 80065dc:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80065de:	2003      	movs	r0, #3
 80065e0:	e031      	b.n	8006646 <HAL_RTC_SetAlarm_IT+0x1a6>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80065e2:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	6891      	ldr	r1, [r2, #8]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	6891      	ldr	r1, [r2, #8]
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	015b      	lsls	r3, r3, #5
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6093      	str	r3, [r2, #8]
 8006600:	e00e      	b.n	8006620 <HAL_RTC_SetAlarm_IT+0x180>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006602:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	6891      	ldr	r1, [r2, #8]
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	430b      	orrs	r3, r1
 8006612:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	6891      	ldr	r1, [r2, #8]
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	019b      	lsls	r3, r3, #6
 800661c:	430b      	orrs	r3, r1
 800661e:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <HAL_RTC_SetAlarm_IT+0x1bc>)
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	0292      	lsls	r2, r2, #10
 8006628:	4311      	orrs	r1, r2
 800662a:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800662c:	6899      	ldr	r1, [r3, #8]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006638:	2321      	movs	r3, #33	; 0x21
 800663a:	3afe      	subs	r2, #254	; 0xfe
 800663c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800663e:	3b01      	subs	r3, #1
 8006640:	2200      	movs	r2, #0
 8006642:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8006644:	2000      	movs	r0, #0
}
 8006646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8006648:	2002      	movs	r0, #2
 800664a:	e7fc      	b.n	8006646 <HAL_RTC_SetAlarm_IT+0x1a6>
 800664c:	fffffdff 	.word	0xfffffdff
 8006650:	fffffd7f 	.word	0xfffffd7f
 8006654:	fffffeff 	.word	0xfffffeff
 8006658:	fffffe7f 	.word	0xfffffe7f
 800665c:	40010400 	.word	0x40010400

08006660 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006660:	0002      	movs	r2, r0
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006662:	0900      	lsrs	r0, r0, #4
 8006664:	0083      	lsls	r3, r0, #2
 8006666:	181b      	adds	r3, r3, r0
 8006668:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800666a:	200f      	movs	r0, #15
 800666c:	4010      	ands	r0, r2
 800666e:	18c0      	adds	r0, r0, r3
 8006670:	b2c0      	uxtb	r0, r0
}
 8006672:	4770      	bx	lr

08006674 <HAL_RTC_GetTime>:
{
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006678:	6803      	ldr	r3, [r0, #0]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800667e:	6803      	ldr	r3, [r0, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	045b      	lsls	r3, r3, #17
 8006684:	0c5b      	lsrs	r3, r3, #17
 8006686:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006688:	6803      	ldr	r3, [r0, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	490e      	ldr	r1, [pc, #56]	; (80066c8 <HAL_RTC_GetTime+0x54>)
 800668e:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006690:	0c1e      	lsrs	r6, r3, #16
 8006692:	203f      	movs	r0, #63	; 0x3f
 8006694:	4030      	ands	r0, r6
 8006696:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006698:	0a1d      	lsrs	r5, r3, #8
 800669a:	277f      	movs	r7, #127	; 0x7f
 800669c:	403d      	ands	r5, r7
 800669e:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80066a0:	401f      	ands	r7, r3
 80066a2:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066a4:	2140      	movs	r1, #64	; 0x40
 80066a6:	4031      	ands	r1, r6
 80066a8:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	d10a      	bne.n	80066c4 <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066ae:	f7ff ffd7 	bl	8006660 <RTC_Bcd2ToByte>
 80066b2:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066b4:	0028      	movs	r0, r5
 80066b6:	f7ff ffd3 	bl	8006660 <RTC_Bcd2ToByte>
 80066ba:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80066bc:	0038      	movs	r0, r7
 80066be:	f7ff ffcf 	bl	8006660 <RTC_Bcd2ToByte>
 80066c2:	70a0      	strb	r0, [r4, #2]
}
 80066c4:	2000      	movs	r0, #0
 80066c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c8:	007f7f7f 	.word	0x007f7f7f

080066cc <HAL_RTC_GetDate>:
{
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80066d0:	6803      	ldr	r3, [r0, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	490e      	ldr	r1, [pc, #56]	; (8006710 <HAL_RTC_GetDate+0x44>)
 80066d6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80066d8:	0c18      	lsrs	r0, r3, #16
 80066da:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80066dc:	0a19      	lsrs	r1, r3, #8
 80066de:	261f      	movs	r6, #31
 80066e0:	400e      	ands	r6, r1
 80066e2:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80066e4:	253f      	movs	r5, #63	; 0x3f
 80066e6:	401d      	ands	r5, r3
 80066e8:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80066ea:	0b5b      	lsrs	r3, r3, #13
 80066ec:	2107      	movs	r1, #7
 80066ee:	400b      	ands	r3, r1
 80066f0:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	d10a      	bne.n	800670c <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80066f6:	f7ff ffb3 	bl	8006660 <RTC_Bcd2ToByte>
 80066fa:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80066fc:	0030      	movs	r0, r6
 80066fe:	f7ff ffaf 	bl	8006660 <RTC_Bcd2ToByte>
 8006702:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006704:	0028      	movs	r0, r5
 8006706:	f7ff ffab 	bl	8006660 <RTC_Bcd2ToByte>
 800670a:	70a0      	strb	r0, [r4, #2]
}
 800670c:	2000      	movs	r0, #0
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	00ffff3f 	.word	0x00ffff3f

08006714 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006714:	6803      	ldr	r3, [r0, #0]
 8006716:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006718:	0089      	lsls	r1, r1, #2
 800671a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800671c:	600a      	str	r2, [r1, #0]
}
 800671e:	4770      	bx	lr

08006720 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006720:	6803      	ldr	r3, [r0, #0]
 8006722:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006724:	0089      	lsls	r1, r1, #2
 8006726:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006728:	6808      	ldr	r0, [r1, #0]
}
 800672a:	4770      	bx	lr

0800672c <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800672c:	b530      	push	{r4, r5, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800672e:	2320      	movs	r3, #32
 8006730:	5cc3      	ldrb	r3, [r0, r3]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d017      	beq.n	8006766 <HAL_RTCEx_EnableBypassShadow+0x3a>
 8006736:	2320      	movs	r3, #32
 8006738:	2401      	movs	r4, #1
 800673a:	54c4      	strb	r4, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800673c:	2121      	movs	r1, #33	; 0x21
 800673e:	2202      	movs	r2, #2
 8006740:	5442      	strb	r2, [r0, r1]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006742:	6802      	ldr	r2, [r0, #0]
 8006744:	25ca      	movs	r5, #202	; 0xca
 8006746:	6255      	str	r5, [r2, #36]	; 0x24
 8006748:	6802      	ldr	r2, [r0, #0]
 800674a:	3d77      	subs	r5, #119	; 0x77
 800674c:	6255      	str	r5, [r2, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800674e:	6805      	ldr	r5, [r0, #0]
 8006750:	68aa      	ldr	r2, [r5, #8]
 8006752:	431a      	orrs	r2, r3
 8006754:	60aa      	str	r2, [r5, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006756:	6802      	ldr	r2, [r0, #0]
 8006758:	25ff      	movs	r5, #255	; 0xff
 800675a:	6255      	str	r5, [r2, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800675c:	5444      	strb	r4, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800675e:	2200      	movs	r2, #0
 8006760:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8006762:	2000      	movs	r0, #0
}
 8006764:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hrtc);
 8006766:	2002      	movs	r0, #2
 8006768:	e7fc      	b.n	8006764 <HAL_RTCEx_EnableBypassShadow+0x38>
	...

0800676c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676e:	46c6      	mov	lr, r8
 8006770:	b500      	push	{lr}
 8006772:	0007      	movs	r7, r0
 8006774:	000d      	movs	r5, r1
 8006776:	4690      	mov	r8, r2
 8006778:	001e      	movs	r6, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689c      	ldr	r4, [r3, #8]
 800677e:	402c      	ands	r4, r5
 8006780:	1b64      	subs	r4, r4, r5
 8006782:	4263      	negs	r3, r4
 8006784:	415c      	adcs	r4, r3
 8006786:	4544      	cmp	r4, r8
 8006788:	d03b      	beq.n	8006802 <SPI_WaitFlagStateUntilTimeout+0x96>
  {
    if (Timeout != HAL_MAX_DELAY)
 800678a:	1c73      	adds	r3, r6, #1
 800678c:	d0f5      	beq.n	800677a <SPI_WaitFlagStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800678e:	f7fd fefb 	bl	8004588 <HAL_GetTick>
 8006792:	9b06      	ldr	r3, [sp, #24]
 8006794:	1ac0      	subs	r0, r0, r3
 8006796:	42b0      	cmp	r0, r6
 8006798:	d201      	bcs.n	800679e <SPI_WaitFlagStateUntilTimeout+0x32>
 800679a:	2e00      	cmp	r6, #0
 800679c:	d1ed      	bne.n	800677a <SPI_WaitFlagStateUntilTimeout+0xe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	6853      	ldr	r3, [r2, #4]
 80067a2:	21e0      	movs	r1, #224	; 0xe0
 80067a4:	438b      	bics	r3, r1
 80067a6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a8:	2382      	movs	r3, #130	; 0x82
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d00c      	beq.n	80067cc <SPI_WaitFlagStateUntilTimeout+0x60>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d016      	beq.n	80067ea <SPI_WaitFlagStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067bc:	2351      	movs	r3, #81	; 0x51
 80067be:	2201      	movs	r2, #1
 80067c0:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067c2:	3b01      	subs	r3, #1
 80067c4:	2200      	movs	r2, #0
 80067c6:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 80067c8:	2003      	movs	r0, #3
 80067ca:	e01b      	b.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2280      	movs	r2, #128	; 0x80
 80067d0:	0212      	lsls	r2, r2, #8
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <SPI_WaitFlagStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d6:	2280      	movs	r2, #128	; 0x80
 80067d8:	00d2      	lsls	r2, r2, #3
 80067da:	4293      	cmp	r3, r2
 80067dc:	d1e9      	bne.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0x46>
          __HAL_SPI_DISABLE(hspi);
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	6813      	ldr	r3, [r2, #0]
 80067e2:	2140      	movs	r1, #64	; 0x40
 80067e4:	438b      	bics	r3, r1
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e7e3      	b.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0x46>
          SPI_RESET_CRC(hspi);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	6813      	ldr	r3, [r2, #0]
 80067ee:	4907      	ldr	r1, [pc, #28]	; (800680c <SPI_WaitFlagStateUntilTimeout+0xa0>)
 80067f0:	400b      	ands	r3, r1
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	6811      	ldr	r1, [r2, #0]
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	019b      	lsls	r3, r3, #6
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	e7dc      	b.n	80067bc <SPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }

  return HAL_OK;
 8006802:	2000      	movs	r0, #0
}
 8006804:	bc80      	pop	{r7}
 8006806:	46b8      	mov	r8, r7
 8006808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	ffffdfff 	.word	0xffffdfff

08006810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b510      	push	{r4, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	0004      	movs	r4, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006816:	2382      	movs	r3, #130	; 0x82
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	6840      	ldr	r0, [r0, #4]
 800681c:	4298      	cmp	r0, r3
 800681e:	d006      	beq.n	800682e <SPI_EndRxTxTransaction+0x1e>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006820:	2351      	movs	r3, #81	; 0x51
 8006822:	5ce3      	ldrb	r3, [r4, r3]
 8006824:	2b05      	cmp	r3, #5
 8006826:	d011      	beq.n	800684c <SPI_EndRxTxTransaction+0x3c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006828:	2000      	movs	r0, #0
}
 800682a:	b002      	add	sp, #8
 800682c:	bd10      	pop	{r4, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800682e:	9200      	str	r2, [sp, #0]
 8006830:	000b      	movs	r3, r1
 8006832:	2200      	movs	r2, #0
 8006834:	2180      	movs	r1, #128	; 0x80
 8006836:	0020      	movs	r0, r4
 8006838:	f7ff ff98 	bl	800676c <SPI_WaitFlagStateUntilTimeout>
 800683c:	2800      	cmp	r0, #0
 800683e:	d0f4      	beq.n	800682a <SPI_EndRxTxTransaction+0x1a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006840:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006842:	2220      	movs	r2, #32
 8006844:	4313      	orrs	r3, r2
 8006846:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006848:	2003      	movs	r0, #3
 800684a:	e7ee      	b.n	800682a <SPI_EndRxTxTransaction+0x1a>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800684c:	9200      	str	r2, [sp, #0]
 800684e:	000b      	movs	r3, r1
 8006850:	2200      	movs	r2, #0
 8006852:	2101      	movs	r1, #1
 8006854:	0020      	movs	r0, r4
 8006856:	f7ff ff89 	bl	800676c <SPI_WaitFlagStateUntilTimeout>
 800685a:	2800      	cmp	r0, #0
 800685c:	d0e5      	beq.n	800682a <SPI_EndRxTxTransaction+0x1a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006860:	2220      	movs	r2, #32
 8006862:	4313      	orrs	r3, r2
 8006864:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006866:	2003      	movs	r0, #3
 8006868:	e7df      	b.n	800682a <SPI_EndRxTxTransaction+0x1a>

0800686a <HAL_SPI_MspInit>:
}
 800686a:	4770      	bx	lr

0800686c <HAL_SPI_Init>:
{
 800686c:	b510      	push	{r4, lr}
 800686e:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8006870:	d03b      	beq.n	80068ea <HAL_SPI_Init+0x7e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006872:	2300      	movs	r3, #0
 8006874:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006876:	3351      	adds	r3, #81	; 0x51
 8006878:	5cc3      	ldrb	r3, [r0, r3]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d02f      	beq.n	80068de <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 800687e:	2251      	movs	r2, #81	; 0x51
 8006880:	2302      	movs	r3, #2
 8006882:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 8006884:	6821      	ldr	r1, [r4, #0]
 8006886:	680b      	ldr	r3, [r1, #0]
 8006888:	2040      	movs	r0, #64	; 0x40
 800688a:	4383      	bics	r3, r0
 800688c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	68a1      	ldr	r1, [r4, #8]
 8006892:	430b      	orrs	r3, r1
 8006894:	68e1      	ldr	r1, [r4, #12]
 8006896:	430b      	orrs	r3, r1
 8006898:	6921      	ldr	r1, [r4, #16]
 800689a:	430b      	orrs	r3, r1
 800689c:	6961      	ldr	r1, [r4, #20]
 800689e:	430b      	orrs	r3, r1
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	0089      	lsls	r1, r1, #2
 80068a4:	69a0      	ldr	r0, [r4, #24]
 80068a6:	4001      	ands	r1, r0
 80068a8:	430b      	orrs	r3, r1
 80068aa:	69e1      	ldr	r1, [r4, #28]
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6a21      	ldr	r1, [r4, #32]
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80068b6:	4303      	orrs	r3, r0
 80068b8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068ba:	8b61      	ldrh	r1, [r4, #26]
 80068bc:	2304      	movs	r3, #4
 80068be:	400b      	ands	r3, r1
 80068c0:	6821      	ldr	r1, [r4, #0]
 80068c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068c4:	4303      	orrs	r3, r0
 80068c6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c8:	6821      	ldr	r1, [r4, #0]
 80068ca:	69cb      	ldr	r3, [r1, #28]
 80068cc:	4808      	ldr	r0, [pc, #32]	; (80068f0 <HAL_SPI_Init+0x84>)
 80068ce:	4003      	ands	r3, r0
 80068d0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068d6:	3301      	adds	r3, #1
 80068d8:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80068da:	2000      	movs	r0, #0
}
 80068dc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80068de:	3350      	adds	r3, #80	; 0x50
 80068e0:	2200      	movs	r2, #0
 80068e2:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 80068e4:	f7ff ffc1 	bl	800686a <HAL_SPI_MspInit>
 80068e8:	e7c9      	b.n	800687e <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7f6      	b.n	80068dc <HAL_SPI_Init+0x70>
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	fffff7ff 	.word	0xfffff7ff

080068f4 <HAL_SPI_TransmitReceive>:
{
 80068f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f6:	b085      	sub	sp, #20
 80068f8:	0004      	movs	r4, r0
 80068fa:	9100      	str	r1, [sp, #0]
 80068fc:	9201      	str	r2, [sp, #4]
 80068fe:	001e      	movs	r6, r3
 8006900:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006902:	2350      	movs	r3, #80	; 0x50
 8006904:	5cc3      	ldrb	r3, [r0, r3]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d100      	bne.n	800690c <HAL_SPI_TransmitReceive+0x18>
 800690a:	e108      	b.n	8006b1e <HAL_SPI_TransmitReceive+0x22a>
 800690c:	2350      	movs	r3, #80	; 0x50
 800690e:	2201      	movs	r2, #1
 8006910:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8006912:	f7fd fe39 	bl	8004588 <HAL_GetTick>
 8006916:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 8006918:	2351      	movs	r3, #81	; 0x51
 800691a:	5ce3      	ldrb	r3, [r4, r3]
 800691c:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 800691e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006920:	2b01      	cmp	r3, #1
 8006922:	d00b      	beq.n	800693c <HAL_SPI_TransmitReceive+0x48>
 8006924:	2382      	movs	r3, #130	; 0x82
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	429a      	cmp	r2, r3
 800692a:	d000      	beq.n	800692e <HAL_SPI_TransmitReceive+0x3a>
 800692c:	e0de      	b.n	8006aec <HAL_SPI_TransmitReceive+0x1f8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800692e:	68a3      	ldr	r3, [r4, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d000      	beq.n	8006936 <HAL_SPI_TransmitReceive+0x42>
 8006934:	e0e3      	b.n	8006afe <HAL_SPI_TransmitReceive+0x20a>
 8006936:	2904      	cmp	r1, #4
 8006938:	d000      	beq.n	800693c <HAL_SPI_TransmitReceive+0x48>
 800693a:	e0e2      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x20e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d100      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x50>
 8006942:	e0e0      	b.n	8006b06 <HAL_SPI_TransmitReceive+0x212>
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d100      	bne.n	800694c <HAL_SPI_TransmitReceive+0x58>
 800694a:	e0de      	b.n	8006b0a <HAL_SPI_TransmitReceive+0x216>
 800694c:	2e00      	cmp	r6, #0
 800694e:	d100      	bne.n	8006952 <HAL_SPI_TransmitReceive+0x5e>
 8006950:	e0dd      	b.n	8006b0e <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006952:	2351      	movs	r3, #81	; 0x51
 8006954:	5ce3      	ldrb	r3, [r4, r3]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d002      	beq.n	8006960 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800695a:	2351      	movs	r3, #81	; 0x51
 800695c:	2205      	movs	r2, #5
 800695e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006960:	2300      	movs	r3, #0
 8006962:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006964:	9a01      	ldr	r2, [sp, #4]
 8006966:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006968:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800696a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800696c:	9a00      	ldr	r2, [sp, #0]
 800696e:	6322      	str	r2, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006970:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006972:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8006974:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006976:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	0652      	lsls	r2, r2, #25
 800697e:	d403      	bmi.n	8006988 <HAL_SPI_TransmitReceive+0x94>
    __HAL_SPI_ENABLE(hspi);
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	2140      	movs	r1, #64	; 0x40
 8006984:	430a      	orrs	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006988:	2380      	movs	r3, #128	; 0x80
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	68e2      	ldr	r2, [r4, #12]
 800698e:	429a      	cmp	r2, r3
 8006990:	d011      	beq.n	80069b6 <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_SPI_TransmitReceive+0xa8>
 8006998:	2e01      	cmp	r6, #1
 800699a:	d10a      	bne.n	80069b2 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800699c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069a6:	3301      	adds	r3, #1
 80069a8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80069aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80069b2:	2601      	movs	r6, #1
 80069b4:	e066      	b.n	8006a84 <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_SPI_TransmitReceive+0xcc>
 80069bc:	2e01      	cmp	r6, #1
 80069be:	d10a      	bne.n	80069d6 <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80069c4:	8812      	ldrh	r2, [r2, #0]
 80069c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069ca:	3302      	adds	r3, #2
 80069cc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80069ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80069d6:	2601      	movs	r6, #1
 80069d8:	e01a      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	07d2      	lsls	r2, r2, #31
 80069e0:	d50e      	bpl.n	8006a00 <HAL_SPI_TransmitReceive+0x10c>
 80069e2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80069e4:	b292      	uxth	r2, r2
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0x10c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069ee:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f2:	3302      	adds	r3, #2
 80069f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80069f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80069fe:	2601      	movs	r6, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a00:	f7fd fdc2 	bl	8004588 <HAL_GetTick>
 8006a04:	1bc0      	subs	r0, r0, r7
 8006a06:	42a8      	cmp	r0, r5
 8006a08:	d302      	bcc.n	8006a10 <HAL_SPI_TransmitReceive+0x11c>
 8006a0a:	1c6b      	adds	r3, r5, #1
 8006a0c:	d000      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x11c>
 8006a0e:	e080      	b.n	8006b12 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d103      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x12c>
 8006a18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d04f      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x1cc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	0792      	lsls	r2, r2, #30
 8006a26:	d5d8      	bpl.n	80069da <HAL_SPI_TransmitReceive+0xe6>
 8006a28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006a2a:	b292      	uxth	r2, r2
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d0d4      	beq.n	80069da <HAL_SPI_TransmitReceive+0xe6>
 8006a30:	2e01      	cmp	r6, #1
 8006a32:	d1d2      	bne.n	80069da <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a36:	8812      	ldrh	r2, [r2, #0]
 8006a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006a40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006a48:	2600      	movs	r6, #0
 8006a4a:	e7c6      	b.n	80069da <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	07d2      	lsls	r2, r2, #31
 8006a52:	d50e      	bpl.n	8006a72 <HAL_SPI_TransmitReceive+0x17e>
 8006a54:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006a56:	b292      	uxth	r2, r2
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	d00a      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x17e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a60:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8006a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a64:	3301      	adds	r3, #1
 8006a66:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006a68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006a70:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a72:	f7fd fd89 	bl	8004588 <HAL_GetTick>
 8006a76:	1bc0      	subs	r0, r0, r7
 8006a78:	42a8      	cmp	r0, r5
 8006a7a:	d301      	bcc.n	8006a80 <HAL_SPI_TransmitReceive+0x18c>
 8006a7c:	1c6b      	adds	r3, r5, #1
 8006a7e:	d14a      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x222>
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	d04a      	beq.n	8006b1a <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x1a0>
 8006a8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_SPI_TransmitReceive+0x1cc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	0792      	lsls	r2, r2, #30
 8006a9a:	d5d7      	bpl.n	8006a4c <HAL_SPI_TransmitReceive+0x158>
 8006a9c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d0d3      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x158>
 8006aa4:	2e01      	cmp	r6, #1
 8006aa6:	d1d1      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x158>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aa8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006ab4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006abc:	2600      	movs	r6, #0
 8006abe:	e7c5      	b.n	8006a4c <HAL_SPI_TransmitReceive+0x158>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac0:	003a      	movs	r2, r7
 8006ac2:	0029      	movs	r1, r5
 8006ac4:	0020      	movs	r0, r4
 8006ac6:	f7ff fea3 	bl	8006810 <SPI_EndRxTxTransaction>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d10a      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x1f0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ace:	68a3      	ldr	r3, [r4, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10c      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	9203      	str	r2, [sp, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	e004      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006ae8:	2001      	movs	r0, #1
    goto error;
 8006aea:	e000      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
    errorcode = HAL_BUSY;
 8006aec:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006aee:	2351      	movs	r3, #81	; 0x51
 8006af0:	2201      	movs	r2, #1
 8006af2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8006af4:	3b01      	subs	r3, #1
 8006af6:	2200      	movs	r2, #0
 8006af8:	54e2      	strb	r2, [r4, r3]
}
 8006afa:	b005      	add	sp, #20
 8006afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 8006afe:	2002      	movs	r0, #2
 8006b00:	e7f5      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
 8006b02:	2002      	movs	r0, #2
 8006b04:	e7f3      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
    errorcode = HAL_ERROR;
 8006b06:	2001      	movs	r0, #1
 8006b08:	e7f1      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	e7ef      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e7ed      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
        errorcode = HAL_TIMEOUT;
 8006b12:	2003      	movs	r0, #3
 8006b14:	e7eb      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
        errorcode = HAL_TIMEOUT;
 8006b16:	2003      	movs	r0, #3
 8006b18:	e7e9      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
 8006b1a:	2003      	movs	r0, #3
 8006b1c:	e7e7      	b.n	8006aee <HAL_SPI_TransmitReceive+0x1fa>
  __HAL_LOCK(hspi);
 8006b1e:	2002      	movs	r0, #2
 8006b20:	e7eb      	b.n	8006afa <HAL_SPI_TransmitReceive+0x206>

08006b22 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b22:	6802      	ldr	r2, [r0, #0]
 8006b24:	6813      	ldr	r3, [r2, #0]
 8006b26:	21c0      	movs	r1, #192	; 0xc0
 8006b28:	438b      	bics	r3, r1
 8006b2a:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006b30:	4770      	bx	lr
	...

08006b34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b34:	6802      	ldr	r2, [r0, #0]
 8006b36:	6813      	ldr	r3, [r2, #0]
 8006b38:	4906      	ldr	r1, [pc, #24]	; (8006b54 <UART_EndRxTransfer+0x20>)
 8006b3a:	400b      	ands	r3, r1
 8006b3c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3e:	6802      	ldr	r2, [r0, #0]
 8006b40:	6893      	ldr	r3, [r2, #8]
 8006b42:	3123      	adds	r1, #35	; 0x23
 8006b44:	31ff      	adds	r1, #255	; 0xff
 8006b46:	438b      	bics	r3, r1
 8006b48:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6603      	str	r3, [r0, #96]	; 0x60
}
 8006b52:	4770      	bx	lr
 8006b54:	fffffedf 	.word	0xfffffedf

08006b58 <HAL_UART_Transmit_DMA>:
{
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	0004      	movs	r4, r0
 8006b5c:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006b5e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8006b60:	2a20      	cmp	r2, #32
 8006b62:	d14b      	bne.n	8006bfc <HAL_UART_Transmit_DMA+0xa4>
    if ((pData == NULL) || (Size == 0U))
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d04b      	beq.n	8006c00 <HAL_UART_Transmit_DMA+0xa8>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d04b      	beq.n	8006c04 <HAL_UART_Transmit_DMA+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	0152      	lsls	r2, r2, #5
 8006b70:	6880      	ldr	r0, [r0, #8]
 8006b72:	4290      	cmp	r0, r2
 8006b74:	d02e      	beq.n	8006bd4 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8006b76:	2270      	movs	r2, #112	; 0x70
 8006b78:	5ca2      	ldrb	r2, [r4, r2]
 8006b7a:	2a01      	cmp	r2, #1
 8006b7c:	d044      	beq.n	8006c08 <HAL_UART_Transmit_DMA+0xb0>
 8006b7e:	2270      	movs	r2, #112	; 0x70
 8006b80:	2001      	movs	r0, #1
 8006b82:	54a0      	strb	r0, [r4, r2]
    huart->pTxBuffPtr  = pData;
 8006b84:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006b86:	3a20      	subs	r2, #32
 8006b88:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8006b8a:	3202      	adds	r2, #2
 8006b8c:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8e:	2200      	movs	r2, #0
 8006b90:	67e2      	str	r2, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b92:	3221      	adds	r2, #33	; 0x21
 8006b94:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8006b96:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d022      	beq.n	8006be2 <HAL_UART_Transmit_DMA+0x8a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b9c:	491b      	ldr	r1, [pc, #108]	; (8006c0c <HAL_UART_Transmit_DMA+0xb4>)
 8006b9e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ba0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006ba2:	491b      	ldr	r1, [pc, #108]	; (8006c10 <HAL_UART_Transmit_DMA+0xb8>)
 8006ba4:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ba6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006ba8:	491a      	ldr	r1, [pc, #104]	; (8006c14 <HAL_UART_Transmit_DMA+0xbc>)
 8006baa:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006bac:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006bae:	2100      	movs	r1, #0
 8006bb0:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	3228      	adds	r2, #40	; 0x28
 8006bb6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006bb8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006bba:	f7fe f837 	bl	8004c2c <HAL_DMA_Start_IT>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d00f      	beq.n	8006be2 <HAL_UART_Transmit_DMA+0x8a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bc2:	2310      	movs	r3, #16
 8006bc4:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006bc6:	3360      	adds	r3, #96	; 0x60
 8006bc8:	2200      	movs	r2, #0
 8006bca:	54e2      	strb	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 8006bcc:	3b50      	subs	r3, #80	; 0x50
 8006bce:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	e014      	b.n	8006bfe <HAL_UART_Transmit_DMA+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd4:	6922      	ldr	r2, [r4, #16]
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	d1cd      	bne.n	8006b76 <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1) != 0)
 8006bda:	07ca      	lsls	r2, r1, #31
 8006bdc:	d5cb      	bpl.n	8006b76 <HAL_UART_Transmit_DMA+0x1e>
        return  HAL_ERROR;
 8006bde:	2001      	movs	r0, #1
 8006be0:	e00d      	b.n	8006bfe <HAL_UART_Transmit_DMA+0xa6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006be8:	2370      	movs	r3, #112	; 0x70
 8006bea:	2200      	movs	r2, #0
 8006bec:	54e2      	strb	r2, [r4, r3]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	6893      	ldr	r3, [r2, #8]
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e000      	b.n	8006bfe <HAL_UART_Transmit_DMA+0xa6>
    return HAL_BUSY;
 8006bfc:	2002      	movs	r0, #2
}
 8006bfe:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8006c00:	2001      	movs	r0, #1
 8006c02:	e7fc      	b.n	8006bfe <HAL_UART_Transmit_DMA+0xa6>
 8006c04:	2001      	movs	r0, #1
 8006c06:	e7fa      	b.n	8006bfe <HAL_UART_Transmit_DMA+0xa6>
    __HAL_LOCK(huart);
 8006c08:	2002      	movs	r0, #2
 8006c0a:	e7f8      	b.n	8006bfe <HAL_UART_Transmit_DMA+0xa6>
 8006c0c:	08006c19 	.word	0x08006c19
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006c71 	.word	0x08006c71

08006c18 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c1c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	069b      	lsls	r3, r3, #26
 8006c24:	d40d      	bmi.n	8006c42 <UART_DMATransmitCplt+0x2a>
  {
    huart->TxXferCount = 0U;
 8006c26:	2352      	movs	r3, #82	; 0x52
 8006c28:	2200      	movs	r2, #0
 8006c2a:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c2c:	6802      	ldr	r2, [r0, #0]
 8006c2e:	6893      	ldr	r3, [r2, #8]
 8006c30:	2180      	movs	r1, #128	; 0x80
 8006c32:	438b      	bics	r3, r1
 8006c34:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c36:	6802      	ldr	r2, [r0, #0]
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	3940      	subs	r1, #64	; 0x40
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c40:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006c42:	f009 f8e1 	bl	800fe08 <HAL_UART_TxCpltCallback>
}
 8006c46:	e7fb      	b.n	8006c40 <UART_DMATransmitCplt+0x28>

08006c48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c48:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c4a:	6802      	ldr	r2, [r0, #0]
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	2140      	movs	r1, #64	; 0x40
 8006c50:	438b      	bics	r3, r1
 8006c52:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	2320      	movs	r3, #32
 8006c56:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c5c:	f009 f8d4 	bl	800fe08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c60:	bd10      	pop	{r4, pc}

08006c62 <HAL_UART_TxHalfCpltCallback>:
}
 8006c62:	4770      	bx	lr

08006c64 <UART_DMATxHalfCplt>:
{
 8006c64:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c66:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_UART_TxHalfCpltCallback(huart);
 8006c68:	f7ff fffb 	bl	8006c62 <HAL_UART_TxHalfCpltCallback>
}
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <HAL_UART_ErrorCallback>:
}
 8006c6e:	4770      	bx	lr

08006c70 <UART_DMAError>:
{
 8006c70:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c72:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c74:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c76:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	d501      	bpl.n	8006c84 <UART_DMAError+0x14>
 8006c80:	2a21      	cmp	r2, #33	; 0x21
 8006c82:	d00d      	beq.n	8006ca0 <UART_DMAError+0x30>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	065b      	lsls	r3, r3, #25
 8006c8a:	d501      	bpl.n	8006c90 <UART_DMAError+0x20>
 8006c8c:	2d22      	cmp	r5, #34	; 0x22
 8006c8e:	d00e      	beq.n	8006cae <UART_DMAError+0x3e>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c90:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c92:	2210      	movs	r2, #16
 8006c94:	4313      	orrs	r3, r2
 8006c96:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006c98:	0020      	movs	r0, r4
 8006c9a:	f7ff ffe8 	bl	8006c6e <HAL_UART_ErrorCallback>
}
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8006ca0:	2352      	movs	r3, #82	; 0x52
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8006ca6:	0020      	movs	r0, r4
 8006ca8:	f7ff ff3b 	bl	8006b22 <UART_EndTxTransfer>
 8006cac:	e7ea      	b.n	8006c84 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8006cae:	235a      	movs	r3, #90	; 0x5a
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8006cb4:	0020      	movs	r0, r4
 8006cb6:	f7ff ff3d 	bl	8006b34 <UART_EndRxTransfer>
 8006cba:	e7e9      	b.n	8006c90 <UART_DMAError+0x20>

08006cbc <HAL_UART_IRQHandler>:
{
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cc0:	6802      	ldr	r2, [r0, #0]
 8006cc2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc4:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc6:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006cc8:	210f      	movs	r1, #15
 8006cca:	000e      	movs	r6, r1
 8006ccc:	401e      	ands	r6, r3
  if (errorflags == 0U)
 8006cce:	4219      	tst	r1, r3
 8006cd0:	d103      	bne.n	8006cda <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cd2:	0699      	lsls	r1, r3, #26
 8006cd4:	d501      	bpl.n	8006cda <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cd6:	0681      	lsls	r1, r0, #26
 8006cd8:	d41a      	bmi.n	8006d10 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != 0U)
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x34>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cde:	2101      	movs	r1, #1
 8006ce0:	000e      	movs	r6, r1
 8006ce2:	402e      	ands	r6, r5
 8006ce4:	4229      	tst	r1, r5
 8006ce6:	d119      	bne.n	8006d1c <HAL_UART_IRQHandler+0x60>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006ce8:	3120      	adds	r1, #32
 8006cea:	31ff      	adds	r1, #255	; 0xff
 8006cec:	4208      	tst	r0, r1
 8006cee:	d115      	bne.n	8006d1c <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cf0:	02d9      	lsls	r1, r3, #11
 8006cf2:	d502      	bpl.n	8006cfa <HAL_UART_IRQHandler+0x3e>
 8006cf4:	0269      	lsls	r1, r5, #9
 8006cf6:	d500      	bpl.n	8006cfa <HAL_UART_IRQHandler+0x3e>
 8006cf8:	e075      	b.n	8006de6 <HAL_UART_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006cfa:	061a      	lsls	r2, r3, #24
 8006cfc:	d502      	bpl.n	8006d04 <HAL_UART_IRQHandler+0x48>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006cfe:	0602      	lsls	r2, r0, #24
 8006d00:	d500      	bpl.n	8006d04 <HAL_UART_IRQHandler+0x48>
 8006d02:	e077      	b.n	8006df4 <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d04:	065b      	lsls	r3, r3, #25
 8006d06:	d502      	bpl.n	8006d0e <HAL_UART_IRQHandler+0x52>
 8006d08:	0643      	lsls	r3, r0, #25
 8006d0a:	d500      	bpl.n	8006d0e <HAL_UART_IRQHandler+0x52>
 8006d0c:	e079      	b.n	8006e02 <HAL_UART_IRQHandler+0x146>
}
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006d10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0fb      	beq.n	8006d0e <HAL_UART_IRQHandler+0x52>
        huart->RxISR(huart);
 8006d16:	0020      	movs	r0, r4
 8006d18:	4798      	blx	r3
      return;
 8006d1a:	e7f8      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d1c:	07d9      	lsls	r1, r3, #31
 8006d1e:	d506      	bpl.n	8006d2e <HAL_UART_IRQHandler+0x72>
 8006d20:	05c1      	lsls	r1, r0, #23
 8006d22:	d504      	bpl.n	8006d2e <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d24:	2101      	movs	r1, #1
 8006d26:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d28:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d2e:	079a      	lsls	r2, r3, #30
 8006d30:	d508      	bpl.n	8006d44 <HAL_UART_IRQHandler+0x88>
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d006      	beq.n	8006d44 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d36:	6822      	ldr	r2, [r4, #0]
 8006d38:	2102      	movs	r1, #2
 8006d3a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d3c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d3e:	3102      	adds	r1, #2
 8006d40:	430a      	orrs	r2, r1
 8006d42:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d44:	075a      	lsls	r2, r3, #29
 8006d46:	d508      	bpl.n	8006d5a <HAL_UART_IRQHandler+0x9e>
 8006d48:	2e00      	cmp	r6, #0
 8006d4a:	d006      	beq.n	8006d5a <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d4c:	6822      	ldr	r2, [r4, #0]
 8006d4e:	2104      	movs	r1, #4
 8006d50:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d52:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d54:	3902      	subs	r1, #2
 8006d56:	430a      	orrs	r2, r1
 8006d58:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d5a:	071a      	lsls	r2, r3, #28
 8006d5c:	d509      	bpl.n	8006d72 <HAL_UART_IRQHandler+0xb6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d5e:	0682      	lsls	r2, r0, #26
 8006d60:	d401      	bmi.n	8006d66 <HAL_UART_IRQHandler+0xaa>
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d005      	beq.n	8006d72 <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	2108      	movs	r1, #8
 8006d6a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d6c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d72:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	d0ca      	beq.n	8006d0e <HAL_UART_IRQHandler+0x52>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d78:	069b      	lsls	r3, r3, #26
 8006d7a:	d506      	bpl.n	8006d8a <HAL_UART_IRQHandler+0xce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d7c:	0683      	lsls	r3, r0, #26
 8006d7e:	d504      	bpl.n	8006d8a <HAL_UART_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8006d80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_UART_IRQHandler+0xce>
          huart->RxISR(huart);
 8006d86:	0020      	movs	r0, r4
 8006d88:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006d8a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	065b      	lsls	r3, r3, #25
 8006d92:	d401      	bmi.n	8006d98 <HAL_UART_IRQHandler+0xdc>
 8006d94:	0713      	lsls	r3, r2, #28
 8006d96:	d520      	bpl.n	8006dda <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 8006d98:	0020      	movs	r0, r4
 8006d9a:	f7ff fecb 	bl	8006b34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	0652      	lsls	r2, r2, #25
 8006da4:	d515      	bpl.n	8006dd2 <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	2140      	movs	r1, #64	; 0x40
 8006daa:	438a      	bics	r2, r1
 8006dac:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006dae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_UART_IRQHandler+0x10e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006db4:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <HAL_UART_IRQHandler+0x150>)
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006dba:	f7fd ff72 	bl	8004ca2 <HAL_DMA_Abort_IT>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d0a5      	beq.n	8006d0e <HAL_UART_IRQHandler+0x52>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006dc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006dc6:	4798      	blx	r3
 8006dc8:	e7a1      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
            HAL_UART_ErrorCallback(huart);
 8006dca:	0020      	movs	r0, r4
 8006dcc:	f7ff ff4f 	bl	8006c6e <HAL_UART_ErrorCallback>
 8006dd0:	e79d      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
          HAL_UART_ErrorCallback(huart);
 8006dd2:	0020      	movs	r0, r4
 8006dd4:	f7ff ff4b 	bl	8006c6e <HAL_UART_ErrorCallback>
 8006dd8:	e799      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
        HAL_UART_ErrorCallback(huart);
 8006dda:	0020      	movs	r0, r4
 8006ddc:	f7ff ff47 	bl	8006c6e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	67e3      	str	r3, [r4, #124]	; 0x7c
    return;
 8006de4:	e793      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	035b      	lsls	r3, r3, #13
 8006dea:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006dec:	0020      	movs	r0, r4
 8006dee:	f000 faf3 	bl	80073d8 <HAL_UARTEx_WakeupCallback>
    return;
 8006df2:	e78c      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
    if (huart->TxISR != NULL)
 8006df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d100      	bne.n	8006dfc <HAL_UART_IRQHandler+0x140>
 8006dfa:	e788      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
      huart->TxISR(huart);
 8006dfc:	0020      	movs	r0, r4
 8006dfe:	4798      	blx	r3
    return;
 8006e00:	e785      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
    UART_EndTransmit_IT(huart);
 8006e02:	0020      	movs	r0, r4
 8006e04:	f7ff ff20 	bl	8006c48 <UART_EndTransmit_IT>
    return;
 8006e08:	e781      	b.n	8006d0e <HAL_UART_IRQHandler+0x52>
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	08006e11 	.word	0x08006e11

08006e10 <UART_DMAAbortOnError>:
{
 8006e10:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e12:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	225a      	movs	r2, #90	; 0x5a
 8006e18:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8006e1a:	3a08      	subs	r2, #8
 8006e1c:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8006e1e:	f7ff ff26 	bl	8006c6e <HAL_UART_ErrorCallback>
}
 8006e22:	bd10      	pop	{r4, pc}

08006e24 <UART_SetConfig>:
{
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e28:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e2a:	6883      	ldr	r3, [r0, #8]
 8006e2c:	6902      	ldr	r2, [r0, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	6942      	ldr	r2, [r0, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	69c2      	ldr	r2, [r0, #28]
 8006e36:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e38:	680a      	ldr	r2, [r1, #0]
 8006e3a:	48b8      	ldr	r0, [pc, #736]	; (800711c <UART_SetConfig+0x2f8>)
 8006e3c:	4002      	ands	r2, r0
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	6853      	ldr	r3, [r2, #4]
 8006e46:	49b6      	ldr	r1, [pc, #728]	; (8007120 <UART_SetConfig+0x2fc>)
 8006e48:	400b      	ands	r3, r1
 8006e4a:	68e1      	ldr	r1, [r4, #12]
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e50:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	4bb3      	ldr	r3, [pc, #716]	; (8007124 <UART_SetConfig+0x300>)
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d001      	beq.n	8006e5e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006e5a:	6a23      	ldr	r3, [r4, #32]
 8006e5c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e5e:	6893      	ldr	r3, [r2, #8]
 8006e60:	48b1      	ldr	r0, [pc, #708]	; (8007128 <UART_SetConfig+0x304>)
 8006e62:	4003      	ands	r3, r0
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	4ab0      	ldr	r2, [pc, #704]	; (800712c <UART_SetConfig+0x308>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00d      	beq.n	8006e8c <UART_SetConfig+0x68>
 8006e70:	4aaf      	ldr	r2, [pc, #700]	; (8007130 <UART_SetConfig+0x30c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d02a      	beq.n	8006ecc <UART_SetConfig+0xa8>
 8006e76:	4aaf      	ldr	r2, [pc, #700]	; (8007134 <UART_SetConfig+0x310>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d060      	beq.n	8006f3e <UART_SetConfig+0x11a>
 8006e7c:	4aae      	ldr	r2, [pc, #696]	; (8007138 <UART_SetConfig+0x314>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d05f      	beq.n	8006f42 <UART_SetConfig+0x11e>
 8006e82:	4aa8      	ldr	r2, [pc, #672]	; (8007124 <UART_SetConfig+0x300>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d032      	beq.n	8006eee <UART_SetConfig+0xca>
 8006e88:	2510      	movs	r5, #16
 8006e8a:	e00b      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006e8c:	4aab      	ldr	r2, [pc, #684]	; (800713c <UART_SetConfig+0x318>)
 8006e8e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006e90:	2203      	movs	r2, #3
 8006e92:	400a      	ands	r2, r1
 8006e94:	2a02      	cmp	r2, #2
 8006e96:	d042      	beq.n	8006f1e <UART_SetConfig+0xfa>
 8006e98:	d814      	bhi.n	8006ec4 <UART_SetConfig+0xa0>
 8006e9a:	2a00      	cmp	r2, #0
 8006e9c:	d041      	beq.n	8006f22 <UART_SetConfig+0xfe>
 8006e9e:	2a01      	cmp	r2, #1
 8006ea0:	d141      	bne.n	8006f26 <UART_SetConfig+0x102>
 8006ea2:	2504      	movs	r5, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ea4:	4a9f      	ldr	r2, [pc, #636]	; (8007124 <UART_SetConfig+0x300>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d055      	beq.n	8006f56 <UART_SetConfig+0x132>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eaa:	2380      	movs	r3, #128	; 0x80
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	69e2      	ldr	r2, [r4, #28]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d100      	bne.n	8006eb6 <UART_SetConfig+0x92>
 8006eb4:	e08c      	b.n	8006fd0 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8006eb6:	2d08      	cmp	r5, #8
 8006eb8:	d900      	bls.n	8006ebc <UART_SetConfig+0x98>
 8006eba:	e16c      	b.n	8007196 <UART_SetConfig+0x372>
 8006ebc:	00ab      	lsls	r3, r5, #2
 8006ebe:	4aa0      	ldr	r2, [pc, #640]	; (8007140 <UART_SetConfig+0x31c>)
 8006ec0:	58d3      	ldr	r3, [r2, r3]
 8006ec2:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ec4:	2a03      	cmp	r2, #3
 8006ec6:	d130      	bne.n	8006f2a <UART_SetConfig+0x106>
 8006ec8:	2508      	movs	r5, #8
 8006eca:	e7eb      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006ecc:	4a9b      	ldr	r2, [pc, #620]	; (800713c <UART_SetConfig+0x318>)
 8006ece:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006ed0:	220c      	movs	r2, #12
 8006ed2:	400a      	ands	r2, r1
 8006ed4:	2a08      	cmp	r2, #8
 8006ed6:	d02a      	beq.n	8006f2e <UART_SetConfig+0x10a>
 8006ed8:	d805      	bhi.n	8006ee6 <UART_SetConfig+0xc2>
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d029      	beq.n	8006f32 <UART_SetConfig+0x10e>
 8006ede:	2a04      	cmp	r2, #4
 8006ee0:	d129      	bne.n	8006f36 <UART_SetConfig+0x112>
 8006ee2:	2504      	movs	r5, #4
 8006ee4:	e7de      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006ee6:	2a0c      	cmp	r2, #12
 8006ee8:	d127      	bne.n	8006f3a <UART_SetConfig+0x116>
 8006eea:	2508      	movs	r5, #8
 8006eec:	e7da      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006eee:	4a93      	ldr	r2, [pc, #588]	; (800713c <UART_SetConfig+0x318>)
 8006ef0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ef2:	21c0      	movs	r1, #192	; 0xc0
 8006ef4:	0109      	lsls	r1, r1, #4
 8006ef6:	400a      	ands	r2, r1
 8006ef8:	2180      	movs	r1, #128	; 0x80
 8006efa:	0109      	lsls	r1, r1, #4
 8006efc:	428a      	cmp	r2, r1
 8006efe:	d022      	beq.n	8006f46 <UART_SetConfig+0x122>
 8006f00:	d807      	bhi.n	8006f12 <UART_SetConfig+0xee>
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	d021      	beq.n	8006f4a <UART_SetConfig+0x126>
 8006f06:	2180      	movs	r1, #128	; 0x80
 8006f08:	00c9      	lsls	r1, r1, #3
 8006f0a:	428a      	cmp	r2, r1
 8006f0c:	d11f      	bne.n	8006f4e <UART_SetConfig+0x12a>
 8006f0e:	2504      	movs	r5, #4
 8006f10:	e7c8      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f12:	21c0      	movs	r1, #192	; 0xc0
 8006f14:	0109      	lsls	r1, r1, #4
 8006f16:	428a      	cmp	r2, r1
 8006f18:	d11b      	bne.n	8006f52 <UART_SetConfig+0x12e>
 8006f1a:	2508      	movs	r5, #8
 8006f1c:	e7c2      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f1e:	2502      	movs	r5, #2
 8006f20:	e7c0      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f22:	2501      	movs	r5, #1
 8006f24:	e7be      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f26:	2510      	movs	r5, #16
 8006f28:	e7bc      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f2a:	2510      	movs	r5, #16
 8006f2c:	e7ba      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f2e:	2502      	movs	r5, #2
 8006f30:	e7b8      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f32:	2500      	movs	r5, #0
 8006f34:	e7b6      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f36:	2510      	movs	r5, #16
 8006f38:	e7b4      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f3a:	2510      	movs	r5, #16
 8006f3c:	e7b2      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f3e:	2500      	movs	r5, #0
 8006f40:	e7b0      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f42:	2500      	movs	r5, #0
 8006f44:	e7ae      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f46:	2502      	movs	r5, #2
 8006f48:	e7ac      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	e7aa      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f4e:	2510      	movs	r5, #16
 8006f50:	e7a8      	b.n	8006ea4 <UART_SetConfig+0x80>
 8006f52:	2510      	movs	r5, #16
 8006f54:	e7a6      	b.n	8006ea4 <UART_SetConfig+0x80>
    switch (clocksource)
 8006f56:	2d04      	cmp	r5, #4
 8006f58:	d035      	beq.n	8006fc6 <UART_SetConfig+0x1a2>
 8006f5a:	d80b      	bhi.n	8006f74 <UART_SetConfig+0x150>
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	d02c      	beq.n	8006fba <UART_SetConfig+0x196>
 8006f60:	2d02      	cmp	r5, #2
 8006f62:	d105      	bne.n	8006f70 <UART_SetConfig+0x14c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f64:	4b75      	ldr	r3, [pc, #468]	; (800713c <UART_SetConfig+0x318>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	06db      	lsls	r3, r3, #27
 8006f6a:	d42f      	bmi.n	8006fcc <UART_SetConfig+0x1a8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006f6c:	4875      	ldr	r0, [pc, #468]	; (8007144 <UART_SetConfig+0x320>)
 8006f6e:	e005      	b.n	8006f7c <UART_SetConfig+0x158>
    switch (clocksource)
 8006f70:	2501      	movs	r5, #1
 8006f72:	e0a6      	b.n	80070c2 <UART_SetConfig+0x29e>
 8006f74:	2d08      	cmp	r5, #8
 8006f76:	d11e      	bne.n	8006fb6 <UART_SetConfig+0x192>
 8006f78:	2080      	movs	r0, #128	; 0x80
 8006f7a:	0200      	lsls	r0, r0, #8
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f7c:	6862      	ldr	r2, [r4, #4]
 8006f7e:	0053      	lsls	r3, r2, #1
 8006f80:	189b      	adds	r3, r3, r2
 8006f82:	4283      	cmp	r3, r0
 8006f84:	d900      	bls.n	8006f88 <UART_SetConfig+0x164>
 8006f86:	e109      	b.n	800719c <UART_SetConfig+0x378>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f88:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	d200      	bcs.n	8006f90 <UART_SetConfig+0x16c>
 8006f8e:	e107      	b.n	80071a0 <UART_SetConfig+0x37c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8006f90:	0e07      	lsrs	r7, r0, #24
 8006f92:	0206      	lsls	r6, r0, #8
 8006f94:	0850      	lsrs	r0, r2, #1
 8006f96:	2100      	movs	r1, #0
 8006f98:	1980      	adds	r0, r0, r6
 8006f9a:	4179      	adcs	r1, r7
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f7f9 fa71 	bl	8000484 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fa2:	4b69      	ldr	r3, [pc, #420]	; (8007148 <UART_SetConfig+0x324>)
 8006fa4:	18c2      	adds	r2, r0, r3
 8006fa6:	4b69      	ldr	r3, [pc, #420]	; (800714c <UART_SetConfig+0x328>)
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d900      	bls.n	8006fae <UART_SetConfig+0x18a>
 8006fac:	e0fa      	b.n	80071a4 <UART_SetConfig+0x380>
          huart->Instance->BRR = usartdiv;
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	60d8      	str	r0, [r3, #12]
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	e085      	b.n	80070c2 <UART_SetConfig+0x29e>
    switch (clocksource)
 8006fb6:	2501      	movs	r5, #1
 8006fb8:	e083      	b.n	80070c2 <UART_SetConfig+0x29e>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006fba:	f7fe ff41 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d1dc      	bne.n	8006f7c <UART_SetConfig+0x158>
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	e07d      	b.n	80070c2 <UART_SetConfig+0x29e>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006fc6:	f7fe fb41 	bl	800564c <HAL_RCC_GetSysClockFreq>
        break;
 8006fca:	e7f8      	b.n	8006fbe <UART_SetConfig+0x19a>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8006fcc:	4860      	ldr	r0, [pc, #384]	; (8007150 <UART_SetConfig+0x32c>)
 8006fce:	e7d5      	b.n	8006f7c <UART_SetConfig+0x158>
    switch (clocksource)
 8006fd0:	2d08      	cmp	r5, #8
 8006fd2:	d861      	bhi.n	8007098 <UART_SetConfig+0x274>
 8006fd4:	00ab      	lsls	r3, r5, #2
 8006fd6:	4a5f      	ldr	r2, [pc, #380]	; (8007154 <UART_SetConfig+0x330>)
 8006fd8:	58d3      	ldr	r3, [r2, r3]
 8006fda:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006fdc:	f7fe ff30 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	0040      	lsls	r0, r0, #1
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	18c0      	adds	r0, r0, r3
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	f7f9 f897 	bl	800011c <__udivsi3>
 8006fee:	0400      	lsls	r0, r0, #16
 8006ff0:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff2:	4a59      	ldr	r2, [pc, #356]	; (8007158 <UART_SetConfig+0x334>)
 8006ff4:	0003      	movs	r3, r0
 8006ff6:	3b10      	subs	r3, #16
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d900      	bls.n	8006ffe <UART_SetConfig+0x1da>
 8006ffc:	e0d4      	b.n	80071a8 <UART_SetConfig+0x384>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ffe:	230f      	movs	r3, #15
 8007000:	0002      	movs	r2, r0
 8007002:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007004:	0840      	lsrs	r0, r0, #1
 8007006:	3b08      	subs	r3, #8
 8007008:	4018      	ands	r0, r3
 800700a:	4310      	orrs	r0, r2
      huart->Instance->BRR = brrtemp;
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	60d8      	str	r0, [r3, #12]
 8007010:	e057      	b.n	80070c2 <UART_SetConfig+0x29e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007012:	f7fe ff25 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 8007016:	0040      	lsls	r0, r0, #1
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	18c0      	adds	r0, r0, r3
 800701e:	6861      	ldr	r1, [r4, #4]
 8007020:	f7f9 f87c 	bl	800011c <__udivsi3>
 8007024:	0400      	lsls	r0, r0, #16
 8007026:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007028:	2500      	movs	r5, #0
        break;
 800702a:	e7e2      	b.n	8006ff2 <UART_SetConfig+0x1ce>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800702c:	4b43      	ldr	r3, [pc, #268]	; (800713c <UART_SetConfig+0x318>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	06db      	lsls	r3, r3, #27
 8007032:	d50b      	bpl.n	800704c <UART_SetConfig+0x228>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007034:	6863      	ldr	r3, [r4, #4]
 8007036:	0858      	lsrs	r0, r3, #1
 8007038:	4b48      	ldr	r3, [pc, #288]	; (800715c <UART_SetConfig+0x338>)
 800703a:	469c      	mov	ip, r3
 800703c:	4460      	add	r0, ip
 800703e:	6861      	ldr	r1, [r4, #4]
 8007040:	f7f9 f86c 	bl	800011c <__udivsi3>
 8007044:	0400      	lsls	r0, r0, #16
 8007046:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007048:	2500      	movs	r5, #0
 800704a:	e7d2      	b.n	8006ff2 <UART_SetConfig+0x1ce>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	0858      	lsrs	r0, r3, #1
 8007050:	4b43      	ldr	r3, [pc, #268]	; (8007160 <UART_SetConfig+0x33c>)
 8007052:	469c      	mov	ip, r3
 8007054:	4460      	add	r0, ip
 8007056:	6861      	ldr	r1, [r4, #4]
 8007058:	f7f9 f860 	bl	800011c <__udivsi3>
 800705c:	0400      	lsls	r0, r0, #16
 800705e:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007060:	2500      	movs	r5, #0
 8007062:	e7c6      	b.n	8006ff2 <UART_SetConfig+0x1ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007064:	f7fe faf2 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8007068:	0040      	lsls	r0, r0, #1
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	18c0      	adds	r0, r0, r3
 8007070:	6861      	ldr	r1, [r4, #4]
 8007072:	f7f9 f853 	bl	800011c <__udivsi3>
 8007076:	0400      	lsls	r0, r0, #16
 8007078:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800707a:	2500      	movs	r5, #0
        break;
 800707c:	e7b9      	b.n	8006ff2 <UART_SetConfig+0x1ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800707e:	6863      	ldr	r3, [r4, #4]
 8007080:	0858      	lsrs	r0, r3, #1
 8007082:	2380      	movs	r3, #128	; 0x80
 8007084:	025b      	lsls	r3, r3, #9
 8007086:	469c      	mov	ip, r3
 8007088:	4460      	add	r0, ip
 800708a:	6861      	ldr	r1, [r4, #4]
 800708c:	f7f9 f846 	bl	800011c <__udivsi3>
 8007090:	0400      	lsls	r0, r0, #16
 8007092:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007094:	2500      	movs	r5, #0
        break;
 8007096:	e7ac      	b.n	8006ff2 <UART_SetConfig+0x1ce>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007098:	2501      	movs	r5, #1
 800709a:	2000      	movs	r0, #0
 800709c:	e7a9      	b.n	8006ff2 <UART_SetConfig+0x1ce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800709e:	f7fe fecf 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	18c0      	adds	r0, r0, r3
 80070a8:	6861      	ldr	r1, [r4, #4]
 80070aa:	f7f9 f837 	bl	800011c <__udivsi3>
 80070ae:	0400      	lsls	r0, r0, #16
 80070b0:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b2:	4a29      	ldr	r2, [pc, #164]	; (8007158 <UART_SetConfig+0x334>)
 80070b4:	0003      	movs	r3, r0
 80070b6:	3b10      	subs	r3, #16
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d900      	bls.n	80070be <UART_SetConfig+0x29a>
 80070bc:	e076      	b.n	80071ac <UART_SetConfig+0x388>
      huart->Instance->BRR = usartdiv;
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80070c6:	6663      	str	r3, [r4, #100]	; 0x64
}
 80070c8:	0028      	movs	r0, r5
 80070ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80070cc:	f7fe fec8 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 80070d0:	6863      	ldr	r3, [r4, #4]
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	18c0      	adds	r0, r0, r3
 80070d6:	6861      	ldr	r1, [r4, #4]
 80070d8:	f7f9 f820 	bl	800011c <__udivsi3>
 80070dc:	0400      	lsls	r0, r0, #16
 80070de:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80070e0:	2500      	movs	r5, #0
        break;
 80070e2:	e7e6      	b.n	80070b2 <UART_SetConfig+0x28e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e4:	4b15      	ldr	r3, [pc, #84]	; (800713c <UART_SetConfig+0x318>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	06db      	lsls	r3, r3, #27
 80070ea:	d50b      	bpl.n	8007104 <UART_SetConfig+0x2e0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	0858      	lsrs	r0, r3, #1
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <UART_SetConfig+0x32c>)
 80070f2:	469c      	mov	ip, r3
 80070f4:	4460      	add	r0, ip
 80070f6:	6861      	ldr	r1, [r4, #4]
 80070f8:	f7f9 f810 	bl	800011c <__udivsi3>
 80070fc:	0400      	lsls	r0, r0, #16
 80070fe:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007100:	2500      	movs	r5, #0
 8007102:	e7d6      	b.n	80070b2 <UART_SetConfig+0x28e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007104:	6863      	ldr	r3, [r4, #4]
 8007106:	0858      	lsrs	r0, r3, #1
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <UART_SetConfig+0x320>)
 800710a:	469c      	mov	ip, r3
 800710c:	4460      	add	r0, ip
 800710e:	6861      	ldr	r1, [r4, #4]
 8007110:	f7f9 f804 	bl	800011c <__udivsi3>
 8007114:	0400      	lsls	r0, r0, #16
 8007116:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007118:	2500      	movs	r5, #0
 800711a:	e7ca      	b.n	80070b2 <UART_SetConfig+0x28e>
 800711c:	efff69f3 	.word	0xefff69f3
 8007120:	ffffcfff 	.word	0xffffcfff
 8007124:	40004800 	.word	0x40004800
 8007128:	fffff4ff 	.word	0xfffff4ff
 800712c:	40013800 	.word	0x40013800
 8007130:	40004400 	.word	0x40004400
 8007134:	40004c00 	.word	0x40004c00
 8007138:	40005000 	.word	0x40005000
 800713c:	40021000 	.word	0x40021000
 8007140:	08010d20 	.word	0x08010d20
 8007144:	00f42400 	.word	0x00f42400
 8007148:	fffffd00 	.word	0xfffffd00
 800714c:	000ffcff 	.word	0x000ffcff
 8007150:	003d0900 	.word	0x003d0900
 8007154:	08010d44 	.word	0x08010d44
 8007158:	0000ffef 	.word	0x0000ffef
 800715c:	007a1200 	.word	0x007a1200
 8007160:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007164:	f7fe fa72 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	18c0      	adds	r0, r0, r3
 800716e:	6861      	ldr	r1, [r4, #4]
 8007170:	f7f8 ffd4 	bl	800011c <__udivsi3>
 8007174:	0400      	lsls	r0, r0, #16
 8007176:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007178:	2500      	movs	r5, #0
        break;
 800717a:	e79a      	b.n	80070b2 <UART_SetConfig+0x28e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	0858      	lsrs	r0, r3, #1
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	469c      	mov	ip, r3
 8007186:	4460      	add	r0, ip
 8007188:	6861      	ldr	r1, [r4, #4]
 800718a:	f7f8 ffc7 	bl	800011c <__udivsi3>
 800718e:	0400      	lsls	r0, r0, #16
 8007190:	0c00      	lsrs	r0, r0, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8007192:	2500      	movs	r5, #0
        break;
 8007194:	e78d      	b.n	80070b2 <UART_SetConfig+0x28e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	2501      	movs	r5, #1
 8007198:	2000      	movs	r0, #0
 800719a:	e78a      	b.n	80070b2 <UART_SetConfig+0x28e>
        ret = HAL_ERROR;
 800719c:	2501      	movs	r5, #1
 800719e:	e790      	b.n	80070c2 <UART_SetConfig+0x29e>
 80071a0:	2501      	movs	r5, #1
 80071a2:	e78e      	b.n	80070c2 <UART_SetConfig+0x29e>
          ret = HAL_ERROR;
 80071a4:	2501      	movs	r5, #1
 80071a6:	e78c      	b.n	80070c2 <UART_SetConfig+0x29e>
      ret = HAL_ERROR;
 80071a8:	2501      	movs	r5, #1
 80071aa:	e78a      	b.n	80070c2 <UART_SetConfig+0x29e>
      ret = HAL_ERROR;
 80071ac:	2501      	movs	r5, #1
 80071ae:	e788      	b.n	80070c2 <UART_SetConfig+0x29e>

080071b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071b2:	07db      	lsls	r3, r3, #31
 80071b4:	d506      	bpl.n	80071c4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071b6:	6802      	ldr	r2, [r0, #0]
 80071b8:	6853      	ldr	r3, [r2, #4]
 80071ba:	492c      	ldr	r1, [pc, #176]	; (800726c <UART_AdvFeatureConfig+0xbc>)
 80071bc:	400b      	ands	r3, r1
 80071be:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071c6:	079b      	lsls	r3, r3, #30
 80071c8:	d506      	bpl.n	80071d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ca:	6802      	ldr	r2, [r0, #0]
 80071cc:	6853      	ldr	r3, [r2, #4]
 80071ce:	4928      	ldr	r1, [pc, #160]	; (8007270 <UART_AdvFeatureConfig+0xc0>)
 80071d0:	400b      	ands	r3, r1
 80071d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071da:	075b      	lsls	r3, r3, #29
 80071dc:	d506      	bpl.n	80071ec <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071de:	6802      	ldr	r2, [r0, #0]
 80071e0:	6853      	ldr	r3, [r2, #4]
 80071e2:	4924      	ldr	r1, [pc, #144]	; (8007274 <UART_AdvFeatureConfig+0xc4>)
 80071e4:	400b      	ands	r3, r1
 80071e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071ee:	071b      	lsls	r3, r3, #28
 80071f0:	d506      	bpl.n	8007200 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071f2:	6802      	ldr	r2, [r0, #0]
 80071f4:	6853      	ldr	r3, [r2, #4]
 80071f6:	4920      	ldr	r1, [pc, #128]	; (8007278 <UART_AdvFeatureConfig+0xc8>)
 80071f8:	400b      	ands	r3, r1
 80071fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007200:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007202:	06db      	lsls	r3, r3, #27
 8007204:	d506      	bpl.n	8007214 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007206:	6802      	ldr	r2, [r0, #0]
 8007208:	6893      	ldr	r3, [r2, #8]
 800720a:	491c      	ldr	r1, [pc, #112]	; (800727c <UART_AdvFeatureConfig+0xcc>)
 800720c:	400b      	ands	r3, r1
 800720e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007210:	430b      	orrs	r3, r1
 8007212:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007214:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007216:	069b      	lsls	r3, r3, #26
 8007218:	d506      	bpl.n	8007228 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800721a:	6802      	ldr	r2, [r0, #0]
 800721c:	6893      	ldr	r3, [r2, #8]
 800721e:	4918      	ldr	r1, [pc, #96]	; (8007280 <UART_AdvFeatureConfig+0xd0>)
 8007220:	400b      	ands	r3, r1
 8007222:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007224:	430b      	orrs	r3, r1
 8007226:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007228:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800722a:	065b      	lsls	r3, r3, #25
 800722c:	d50b      	bpl.n	8007246 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800722e:	6802      	ldr	r2, [r0, #0]
 8007230:	6853      	ldr	r3, [r2, #4]
 8007232:	4914      	ldr	r1, [pc, #80]	; (8007284 <UART_AdvFeatureConfig+0xd4>)
 8007234:	400b      	ands	r3, r1
 8007236:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007238:	430b      	orrs	r3, r1
 800723a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	035b      	lsls	r3, r3, #13
 8007240:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007242:	429a      	cmp	r2, r3
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007246:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007248:	061b      	lsls	r3, r3, #24
 800724a:	d506      	bpl.n	800725a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800724c:	6802      	ldr	r2, [r0, #0]
 800724e:	6853      	ldr	r3, [r2, #4]
 8007250:	490d      	ldr	r1, [pc, #52]	; (8007288 <UART_AdvFeatureConfig+0xd8>)
 8007252:	400b      	ands	r3, r1
 8007254:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007256:	430b      	orrs	r3, r1
 8007258:	6053      	str	r3, [r2, #4]
}
 800725a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800725c:	6802      	ldr	r2, [r0, #0]
 800725e:	6853      	ldr	r3, [r2, #4]
 8007260:	490a      	ldr	r1, [pc, #40]	; (800728c <UART_AdvFeatureConfig+0xdc>)
 8007262:	400b      	ands	r3, r1
 8007264:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007266:	430b      	orrs	r3, r1
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	e7ec      	b.n	8007246 <UART_AdvFeatureConfig+0x96>
 800726c:	fffdffff 	.word	0xfffdffff
 8007270:	fffeffff 	.word	0xfffeffff
 8007274:	fffbffff 	.word	0xfffbffff
 8007278:	ffff7fff 	.word	0xffff7fff
 800727c:	ffffefff 	.word	0xffffefff
 8007280:	ffffdfff 	.word	0xffffdfff
 8007284:	ffefffff 	.word	0xffefffff
 8007288:	fff7ffff 	.word	0xfff7ffff
 800728c:	ff9fffff 	.word	0xff9fffff

08007290 <UART_WaitOnFlagUntilTimeout>:
{
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	46ce      	mov	lr, r9
 8007294:	4647      	mov	r7, r8
 8007296:	b580      	push	{r7, lr}
 8007298:	0006      	movs	r6, r0
 800729a:	000d      	movs	r5, r1
 800729c:	0017      	movs	r7, r2
 800729e:	4699      	mov	r9, r3
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a4:	6833      	ldr	r3, [r6, #0]
 80072a6:	69dc      	ldr	r4, [r3, #28]
 80072a8:	402c      	ands	r4, r5
 80072aa:	1b64      	subs	r4, r4, r5
 80072ac:	4263      	negs	r3, r4
 80072ae:	415c      	adcs	r4, r3
 80072b0:	42bc      	cmp	r4, r7
 80072b2:	d11e      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	4643      	mov	r3, r8
 80072b6:	3301      	adds	r3, #1
 80072b8:	d0f4      	beq.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ba:	f7fd f965 	bl	8004588 <HAL_GetTick>
 80072be:	464b      	mov	r3, r9
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	4540      	cmp	r0, r8
 80072c4:	d802      	bhi.n	80072cc <UART_WaitOnFlagUntilTimeout+0x3c>
 80072c6:	4643      	mov	r3, r8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1eb      	bne.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x14>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072cc:	6832      	ldr	r2, [r6, #0]
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	490a      	ldr	r1, [pc, #40]	; (80072fc <UART_WaitOnFlagUntilTimeout+0x6c>)
 80072d2:	400b      	ands	r3, r1
 80072d4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	6832      	ldr	r2, [r6, #0]
 80072d8:	6893      	ldr	r3, [r2, #8]
 80072da:	31a3      	adds	r1, #163	; 0xa3
 80072dc:	31ff      	adds	r1, #255	; 0xff
 80072de:	438b      	bics	r3, r1
 80072e0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80072e2:	2320      	movs	r3, #32
 80072e4:	6773      	str	r3, [r6, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80072e6:	67b3      	str	r3, [r6, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80072e8:	3350      	adds	r3, #80	; 0x50
 80072ea:	2200      	movs	r2, #0
 80072ec:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80072ee:	2003      	movs	r0, #3
 80072f0:	e000      	b.n	80072f4 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 80072f2:	2000      	movs	r0, #0
}
 80072f4:	bcc0      	pop	{r6, r7}
 80072f6:	46b9      	mov	r9, r7
 80072f8:	46b0      	mov	r8, r6
 80072fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072fc:	fffffe5f 	.word	0xfffffe5f

08007300 <UART_CheckIdleState>:
{
 8007300:	b530      	push	{r4, r5, lr}
 8007302:	b083      	sub	sp, #12
 8007304:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007306:	2300      	movs	r3, #0
 8007308:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800730a:	f7fd f93d 	bl	8004588 <HAL_GetTick>
 800730e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	071b      	lsls	r3, r3, #28
 8007316:	d40c      	bmi.n	8007332 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	075b      	lsls	r3, r3, #29
 800731e:	d415      	bmi.n	800734c <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8007320:	2320      	movs	r3, #32
 8007322:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007324:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007326:	3350      	adds	r3, #80	; 0x50
 8007328:	2200      	movs	r2, #0
 800732a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800732c:	2000      	movs	r0, #0
}
 800732e:	b003      	add	sp, #12
 8007330:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <UART_CheckIdleState+0x68>)
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	0003      	movs	r3, r0
 800733a:	2200      	movs	r2, #0
 800733c:	0389      	lsls	r1, r1, #14
 800733e:	0020      	movs	r0, r4
 8007340:	f7ff ffa6 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 8007344:	2800      	cmp	r0, #0
 8007346:	d0e7      	beq.n	8007318 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007348:	2003      	movs	r0, #3
 800734a:	e7f0      	b.n	800732e <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <UART_CheckIdleState+0x68>)
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	002b      	movs	r3, r5
 8007354:	2200      	movs	r2, #0
 8007356:	03c9      	lsls	r1, r1, #15
 8007358:	0020      	movs	r0, r4
 800735a:	f7ff ff99 	bl	8007290 <UART_WaitOnFlagUntilTimeout>
 800735e:	2800      	cmp	r0, #0
 8007360:	d0de      	beq.n	8007320 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8007362:	2003      	movs	r0, #3
 8007364:	e7e3      	b.n	800732e <UART_CheckIdleState+0x2e>
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	01ffffff 	.word	0x01ffffff

0800736c <HAL_UART_Init>:
{
 800736c:	b510      	push	{r4, lr}
 800736e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007370:	d02e      	beq.n	80073d0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007372:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007374:	2b00      	cmp	r3, #0
 8007376:	d021      	beq.n	80073bc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	2324      	movs	r3, #36	; 0x24
 800737a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800737c:	6822      	ldr	r2, [r4, #0]
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	2101      	movs	r1, #1
 8007382:	438b      	bics	r3, r1
 8007384:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007386:	0020      	movs	r0, r4
 8007388:	f7ff fd4c 	bl	8006e24 <UART_SetConfig>
 800738c:	2801      	cmp	r0, #1
 800738e:	d014      	beq.n	80073ba <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d118      	bne.n	80073c8 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	6853      	ldr	r3, [r2, #4]
 800739a:	490e      	ldr	r1, [pc, #56]	; (80073d4 <HAL_UART_Init+0x68>)
 800739c:	400b      	ands	r3, r1
 800739e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a0:	6822      	ldr	r2, [r4, #0]
 80073a2:	6893      	ldr	r3, [r2, #8]
 80073a4:	212a      	movs	r1, #42	; 0x2a
 80073a6:	438b      	bics	r3, r1
 80073a8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	6813      	ldr	r3, [r2, #0]
 80073ae:	3929      	subs	r1, #41	; 0x29
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80073b4:	0020      	movs	r0, r4
 80073b6:	f7ff ffa3 	bl	8007300 <UART_CheckIdleState>
}
 80073ba:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80073bc:	3370      	adds	r3, #112	; 0x70
 80073be:	2200      	movs	r2, #0
 80073c0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80073c2:	f008 fd65 	bl	800fe90 <HAL_UART_MspInit>
 80073c6:	e7d7      	b.n	8007378 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80073c8:	0020      	movs	r0, r4
 80073ca:	f7ff fef1 	bl	80071b0 <UART_AdvFeatureConfig>
 80073ce:	e7e2      	b.n	8007396 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80073d0:	2001      	movs	r0, #1
 80073d2:	e7f2      	b.n	80073ba <HAL_UART_Init+0x4e>
 80073d4:	ffffb7ff 	.word	0xffffb7ff

080073d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073d8:	4770      	bx	lr

080073da <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80073da:	780b      	ldrb	r3, [r1, #0]
 80073dc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80073de:	784b      	ldrb	r3, [r1, #1]
 80073e0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80073e2:	788b      	ldrb	r3, [r1, #2]
 80073e4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80073e6:	78cb      	ldrb	r3, [r1, #3]
 80073e8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80073ea:	790b      	ldrb	r3, [r1, #4]
 80073ec:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80073ee:	794b      	ldrb	r3, [r1, #5]
 80073f0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80073f2:	798b      	ldrb	r3, [r1, #6]
 80073f4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80073f6:	79cb      	ldrb	r3, [r1, #7]
 80073f8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80073fa:	7a0b      	ldrb	r3, [r1, #8]
 80073fc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80073fe:	7a4b      	ldrb	r3, [r1, #9]
 8007400:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007402:	7a8b      	ldrb	r3, [r1, #10]
 8007404:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007406:	7acb      	ldrb	r3, [r1, #11]
 8007408:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800740a:	7b0b      	ldrb	r3, [r1, #12]
 800740c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800740e:	7b4b      	ldrb	r3, [r1, #13]
 8007410:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8007412:	7b8b      	ldrb	r3, [r1, #14]
 8007414:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007416:	7bcb      	ldrb	r3, [r1, #15]
 8007418:	73c3      	strb	r3, [r0, #15]
#endif
}
 800741a:	4770      	bx	lr

0800741c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800741c:	1e53      	subs	r3, r2, #1
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2a00      	cmp	r2, #0
 8007422:	d005      	beq.n	8007430 <copy_block_nn+0x14>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8007424:	780a      	ldrb	r2, [r1, #0]
 8007426:	7002      	strb	r2, [r0, #0]
    while( nn-- )
 8007428:	001a      	movs	r2, r3
        *d++ = *s++;
 800742a:	3101      	adds	r1, #1
 800742c:	3001      	adds	r0, #1
 800742e:	e7f5      	b.n	800741c <copy_block_nn>
}
 8007430:	4770      	bx	lr

08007432 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007432:	780b      	ldrb	r3, [r1, #0]
 8007434:	7802      	ldrb	r2, [r0, #0]
 8007436:	4053      	eors	r3, r2
 8007438:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800743a:	784b      	ldrb	r3, [r1, #1]
 800743c:	7842      	ldrb	r2, [r0, #1]
 800743e:	4053      	eors	r3, r2
 8007440:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007442:	788b      	ldrb	r3, [r1, #2]
 8007444:	7882      	ldrb	r2, [r0, #2]
 8007446:	4053      	eors	r3, r2
 8007448:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800744a:	78cb      	ldrb	r3, [r1, #3]
 800744c:	78c2      	ldrb	r2, [r0, #3]
 800744e:	4053      	eors	r3, r2
 8007450:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007452:	790b      	ldrb	r3, [r1, #4]
 8007454:	7902      	ldrb	r2, [r0, #4]
 8007456:	4053      	eors	r3, r2
 8007458:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800745a:	794b      	ldrb	r3, [r1, #5]
 800745c:	7942      	ldrb	r2, [r0, #5]
 800745e:	4053      	eors	r3, r2
 8007460:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007462:	798b      	ldrb	r3, [r1, #6]
 8007464:	7982      	ldrb	r2, [r0, #6]
 8007466:	4053      	eors	r3, r2
 8007468:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800746a:	79cb      	ldrb	r3, [r1, #7]
 800746c:	79c2      	ldrb	r2, [r0, #7]
 800746e:	4053      	eors	r3, r2
 8007470:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007472:	7a0b      	ldrb	r3, [r1, #8]
 8007474:	7a02      	ldrb	r2, [r0, #8]
 8007476:	4053      	eors	r3, r2
 8007478:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800747a:	7a4b      	ldrb	r3, [r1, #9]
 800747c:	7a42      	ldrb	r2, [r0, #9]
 800747e:	4053      	eors	r3, r2
 8007480:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007482:	7a8b      	ldrb	r3, [r1, #10]
 8007484:	7a82      	ldrb	r2, [r0, #10]
 8007486:	4053      	eors	r3, r2
 8007488:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800748a:	7acb      	ldrb	r3, [r1, #11]
 800748c:	7ac2      	ldrb	r2, [r0, #11]
 800748e:	4053      	eors	r3, r2
 8007490:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007492:	7b0b      	ldrb	r3, [r1, #12]
 8007494:	7b02      	ldrb	r2, [r0, #12]
 8007496:	4053      	eors	r3, r2
 8007498:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800749a:	7b4b      	ldrb	r3, [r1, #13]
 800749c:	7b42      	ldrb	r2, [r0, #13]
 800749e:	4053      	eors	r3, r2
 80074a0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80074a2:	7b8b      	ldrb	r3, [r1, #14]
 80074a4:	7b82      	ldrb	r2, [r0, #14]
 80074a6:	4053      	eors	r3, r2
 80074a8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80074aa:	7bcb      	ldrb	r3, [r1, #15]
 80074ac:	7bc2      	ldrb	r2, [r0, #15]
 80074ae:	4053      	eors	r3, r2
 80074b0:	73c3      	strb	r3, [r0, #15]
#endif
}
 80074b2:	4770      	bx	lr

080074b4 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80074b4:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80074b6:	780b      	ldrb	r3, [r1, #0]
 80074b8:	7814      	ldrb	r4, [r2, #0]
 80074ba:	4063      	eors	r3, r4
 80074bc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80074be:	784b      	ldrb	r3, [r1, #1]
 80074c0:	7854      	ldrb	r4, [r2, #1]
 80074c2:	4063      	eors	r3, r4
 80074c4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80074c6:	788b      	ldrb	r3, [r1, #2]
 80074c8:	7894      	ldrb	r4, [r2, #2]
 80074ca:	4063      	eors	r3, r4
 80074cc:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80074ce:	78cb      	ldrb	r3, [r1, #3]
 80074d0:	78d4      	ldrb	r4, [r2, #3]
 80074d2:	4063      	eors	r3, r4
 80074d4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80074d6:	790b      	ldrb	r3, [r1, #4]
 80074d8:	7914      	ldrb	r4, [r2, #4]
 80074da:	4063      	eors	r3, r4
 80074dc:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80074de:	794b      	ldrb	r3, [r1, #5]
 80074e0:	7954      	ldrb	r4, [r2, #5]
 80074e2:	4063      	eors	r3, r4
 80074e4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80074e6:	798b      	ldrb	r3, [r1, #6]
 80074e8:	7994      	ldrb	r4, [r2, #6]
 80074ea:	4063      	eors	r3, r4
 80074ec:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80074ee:	79cb      	ldrb	r3, [r1, #7]
 80074f0:	79d4      	ldrb	r4, [r2, #7]
 80074f2:	4063      	eors	r3, r4
 80074f4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80074f6:	7a0b      	ldrb	r3, [r1, #8]
 80074f8:	7a14      	ldrb	r4, [r2, #8]
 80074fa:	4063      	eors	r3, r4
 80074fc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80074fe:	7a4b      	ldrb	r3, [r1, #9]
 8007500:	7a54      	ldrb	r4, [r2, #9]
 8007502:	4063      	eors	r3, r4
 8007504:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007506:	7a8b      	ldrb	r3, [r1, #10]
 8007508:	7a94      	ldrb	r4, [r2, #10]
 800750a:	4063      	eors	r3, r4
 800750c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800750e:	7acb      	ldrb	r3, [r1, #11]
 8007510:	7ad4      	ldrb	r4, [r2, #11]
 8007512:	4063      	eors	r3, r4
 8007514:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007516:	7b0b      	ldrb	r3, [r1, #12]
 8007518:	7b14      	ldrb	r4, [r2, #12]
 800751a:	4063      	eors	r3, r4
 800751c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800751e:	7b4b      	ldrb	r3, [r1, #13]
 8007520:	7b54      	ldrb	r4, [r2, #13]
 8007522:	4063      	eors	r3, r4
 8007524:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007526:	7b8b      	ldrb	r3, [r1, #14]
 8007528:	7b94      	ldrb	r4, [r2, #14]
 800752a:	4063      	eors	r3, r4
 800752c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800752e:	7bcb      	ldrb	r3, [r1, #15]
 8007530:	7bd2      	ldrb	r2, [r2, #15]
 8007532:	4053      	eors	r3, r2
 8007534:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007536:	bd10      	pop	{r4, pc}

08007538 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8007538:	b510      	push	{r4, lr}
    xor_block(d, k);
 800753a:	f7ff ff7a 	bl	8007432 <xor_block>
}
 800753e:	bd10      	pop	{r4, pc}

08007540 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007540:	7802      	ldrb	r2, [r0, #0]
 8007542:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <shift_sub_rows+0x64>)
 8007544:	5c9a      	ldrb	r2, [r3, r2]
 8007546:	7002      	strb	r2, [r0, #0]
 8007548:	7902      	ldrb	r2, [r0, #4]
 800754a:	5c9a      	ldrb	r2, [r3, r2]
 800754c:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800754e:	7a02      	ldrb	r2, [r0, #8]
 8007550:	5c9a      	ldrb	r2, [r3, r2]
 8007552:	7202      	strb	r2, [r0, #8]
 8007554:	7b02      	ldrb	r2, [r0, #12]
 8007556:	5c9a      	ldrb	r2, [r3, r2]
 8007558:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800755a:	7842      	ldrb	r2, [r0, #1]
 800755c:	7941      	ldrb	r1, [r0, #5]
 800755e:	5c59      	ldrb	r1, [r3, r1]
 8007560:	7041      	strb	r1, [r0, #1]
 8007562:	7a41      	ldrb	r1, [r0, #9]
 8007564:	5c59      	ldrb	r1, [r3, r1]
 8007566:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007568:	7b41      	ldrb	r1, [r0, #13]
 800756a:	5c59      	ldrb	r1, [r3, r1]
 800756c:	7241      	strb	r1, [r0, #9]
 800756e:	5c9a      	ldrb	r2, [r3, r2]
 8007570:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007572:	7882      	ldrb	r2, [r0, #2]
 8007574:	7a81      	ldrb	r1, [r0, #10]
 8007576:	5c59      	ldrb	r1, [r3, r1]
 8007578:	7081      	strb	r1, [r0, #2]
 800757a:	5c9a      	ldrb	r2, [r3, r2]
 800757c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800757e:	7982      	ldrb	r2, [r0, #6]
 8007580:	7b81      	ldrb	r1, [r0, #14]
 8007582:	5c59      	ldrb	r1, [r3, r1]
 8007584:	7181      	strb	r1, [r0, #6]
 8007586:	5c9a      	ldrb	r2, [r3, r2]
 8007588:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800758a:	7bc2      	ldrb	r2, [r0, #15]
 800758c:	7ac1      	ldrb	r1, [r0, #11]
 800758e:	5c59      	ldrb	r1, [r3, r1]
 8007590:	73c1      	strb	r1, [r0, #15]
 8007592:	79c1      	ldrb	r1, [r0, #7]
 8007594:	5c59      	ldrb	r1, [r3, r1]
 8007596:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007598:	78c1      	ldrb	r1, [r0, #3]
 800759a:	5c59      	ldrb	r1, [r3, r1]
 800759c:	71c1      	strb	r1, [r0, #7]
 800759e:	5c9b      	ldrb	r3, [r3, r2]
 80075a0:	70c3      	strb	r3, [r0, #3]
}
 80075a2:	4770      	bx	lr
 80075a4:	08010f68 	.word	0x08010f68

080075a8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	46de      	mov	lr, fp
 80075ac:	4657      	mov	r7, sl
 80075ae:	464e      	mov	r6, r9
 80075b0:	4645      	mov	r5, r8
 80075b2:	b5e0      	push	{r5, r6, r7, lr}
 80075b4:	b087      	sub	sp, #28
 80075b6:	0004      	movs	r4, r0
    block_copy(st, dt);
 80075b8:	0001      	movs	r1, r0
 80075ba:	a802      	add	r0, sp, #8
 80075bc:	f7ff ff0d 	bl	80073da <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80075c0:	ab02      	add	r3, sp, #8
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	469c      	mov	ip, r3
 80075c6:	4a89      	ldr	r2, [pc, #548]	; (80077ec <mix_sub_columns+0x244>)
 80075c8:	5cd0      	ldrb	r0, [r2, r3]
 80075ca:	ab02      	add	r3, sp, #8
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	4699      	mov	r9, r3
 80075d0:	4a87      	ldr	r2, [pc, #540]	; (80077f0 <mix_sub_columns+0x248>)
 80075d2:	5cd3      	ldrb	r3, [r2, r3]
 80075d4:	469a      	mov	sl, r3
 80075d6:	ab02      	add	r3, sp, #8
 80075d8:	7a9b      	ldrb	r3, [r3, #10]
 80075da:	4698      	mov	r8, r3
 80075dc:	4985      	ldr	r1, [pc, #532]	; (80077f4 <mix_sub_columns+0x24c>)
 80075de:	5ccd      	ldrb	r5, [r1, r3]
 80075e0:	ab02      	add	r3, sp, #8
 80075e2:	7bdf      	ldrb	r7, [r3, #15]
 80075e4:	5dce      	ldrb	r6, [r1, r7]
 80075e6:	4653      	mov	r3, sl
 80075e8:	4058      	eors	r0, r3
 80075ea:	4068      	eors	r0, r5
 80075ec:	4070      	eors	r0, r6
 80075ee:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80075f0:	4663      	mov	r3, ip
 80075f2:	5cc8      	ldrb	r0, [r1, r3]
 80075f4:	464b      	mov	r3, r9
 80075f6:	4a7d      	ldr	r2, [pc, #500]	; (80077ec <mix_sub_columns+0x244>)
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
 80075fa:	469b      	mov	fp, r3
 80075fc:	4643      	mov	r3, r8
 80075fe:	4a7c      	ldr	r2, [pc, #496]	; (80077f0 <mix_sub_columns+0x248>)
 8007600:	5cd3      	ldrb	r3, [r2, r3]
 8007602:	469a      	mov	sl, r3
 8007604:	465b      	mov	r3, fp
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	4043      	eors	r3, r0
 800760a:	469b      	mov	fp, r3
 800760c:	4653      	mov	r3, sl
 800760e:	4658      	mov	r0, fp
 8007610:	4043      	eors	r3, r0
 8007612:	405e      	eors	r6, r3
 8007614:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007616:	464b      	mov	r3, r9
 8007618:	5ccb      	ldrb	r3, [r1, r3]
 800761a:	4699      	mov	r9, r3
 800761c:	4643      	mov	r3, r8
 800761e:	4a73      	ldr	r2, [pc, #460]	; (80077ec <mix_sub_columns+0x244>)
 8007620:	5cd3      	ldrb	r3, [r2, r3]
 8007622:	4698      	mov	r8, r3
 8007624:	4b72      	ldr	r3, [pc, #456]	; (80077f0 <mix_sub_columns+0x248>)
 8007626:	5dde      	ldrb	r6, [r3, r7]
 8007628:	464b      	mov	r3, r9
 800762a:	9801      	ldr	r0, [sp, #4]
 800762c:	4058      	eors	r0, r3
 800762e:	4643      	mov	r3, r8
 8007630:	4058      	eors	r0, r3
 8007632:	4070      	eors	r0, r6
 8007634:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007636:	4663      	mov	r3, ip
 8007638:	4a6d      	ldr	r2, [pc, #436]	; (80077f0 <mix_sub_columns+0x248>)
 800763a:	5cd6      	ldrb	r6, [r2, r3]
 800763c:	4b6b      	ldr	r3, [pc, #428]	; (80077ec <mix_sub_columns+0x244>)
 800763e:	5dd8      	ldrb	r0, [r3, r7]
 8007640:	464b      	mov	r3, r9
 8007642:	405e      	eors	r6, r3
 8007644:	4075      	eors	r5, r6
 8007646:	4045      	eors	r5, r0
 8007648:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800764a:	ab02      	add	r3, sp, #8
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	469c      	mov	ip, r3
 8007650:	4a66      	ldr	r2, [pc, #408]	; (80077ec <mix_sub_columns+0x244>)
 8007652:	5cd0      	ldrb	r0, [r2, r3]
 8007654:	ab02      	add	r3, sp, #8
 8007656:	7a5b      	ldrb	r3, [r3, #9]
 8007658:	4699      	mov	r9, r3
 800765a:	4a65      	ldr	r2, [pc, #404]	; (80077f0 <mix_sub_columns+0x248>)
 800765c:	5cd3      	ldrb	r3, [r2, r3]
 800765e:	469a      	mov	sl, r3
 8007660:	ab02      	add	r3, sp, #8
 8007662:	7b9b      	ldrb	r3, [r3, #14]
 8007664:	4698      	mov	r8, r3
 8007666:	5ccd      	ldrb	r5, [r1, r3]
 8007668:	ab02      	add	r3, sp, #8
 800766a:	78df      	ldrb	r7, [r3, #3]
 800766c:	5dce      	ldrb	r6, [r1, r7]
 800766e:	4653      	mov	r3, sl
 8007670:	4058      	eors	r0, r3
 8007672:	4068      	eors	r0, r5
 8007674:	4070      	eors	r0, r6
 8007676:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007678:	4663      	mov	r3, ip
 800767a:	5cc8      	ldrb	r0, [r1, r3]
 800767c:	464b      	mov	r3, r9
 800767e:	4a5b      	ldr	r2, [pc, #364]	; (80077ec <mix_sub_columns+0x244>)
 8007680:	5cd3      	ldrb	r3, [r2, r3]
 8007682:	469b      	mov	fp, r3
 8007684:	4643      	mov	r3, r8
 8007686:	4a5a      	ldr	r2, [pc, #360]	; (80077f0 <mix_sub_columns+0x248>)
 8007688:	5cd3      	ldrb	r3, [r2, r3]
 800768a:	469a      	mov	sl, r3
 800768c:	465b      	mov	r3, fp
 800768e:	9001      	str	r0, [sp, #4]
 8007690:	4043      	eors	r3, r0
 8007692:	469b      	mov	fp, r3
 8007694:	4653      	mov	r3, sl
 8007696:	4658      	mov	r0, fp
 8007698:	4043      	eors	r3, r0
 800769a:	405e      	eors	r6, r3
 800769c:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800769e:	464b      	mov	r3, r9
 80076a0:	5ccb      	ldrb	r3, [r1, r3]
 80076a2:	4699      	mov	r9, r3
 80076a4:	4643      	mov	r3, r8
 80076a6:	4a51      	ldr	r2, [pc, #324]	; (80077ec <mix_sub_columns+0x244>)
 80076a8:	5cd3      	ldrb	r3, [r2, r3]
 80076aa:	4698      	mov	r8, r3
 80076ac:	4b50      	ldr	r3, [pc, #320]	; (80077f0 <mix_sub_columns+0x248>)
 80076ae:	5dde      	ldrb	r6, [r3, r7]
 80076b0:	464b      	mov	r3, r9
 80076b2:	9801      	ldr	r0, [sp, #4]
 80076b4:	4058      	eors	r0, r3
 80076b6:	4643      	mov	r3, r8
 80076b8:	4058      	eors	r0, r3
 80076ba:	4070      	eors	r0, r6
 80076bc:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80076be:	4663      	mov	r3, ip
 80076c0:	4a4b      	ldr	r2, [pc, #300]	; (80077f0 <mix_sub_columns+0x248>)
 80076c2:	5cd6      	ldrb	r6, [r2, r3]
 80076c4:	4b49      	ldr	r3, [pc, #292]	; (80077ec <mix_sub_columns+0x244>)
 80076c6:	5dd8      	ldrb	r0, [r3, r7]
 80076c8:	464b      	mov	r3, r9
 80076ca:	405e      	eors	r6, r3
 80076cc:	4075      	eors	r5, r6
 80076ce:	4045      	eors	r5, r0
 80076d0:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80076d2:	ab02      	add	r3, sp, #8
 80076d4:	7a1b      	ldrb	r3, [r3, #8]
 80076d6:	469c      	mov	ip, r3
 80076d8:	4a44      	ldr	r2, [pc, #272]	; (80077ec <mix_sub_columns+0x244>)
 80076da:	5cd0      	ldrb	r0, [r2, r3]
 80076dc:	ab02      	add	r3, sp, #8
 80076de:	7b5b      	ldrb	r3, [r3, #13]
 80076e0:	4699      	mov	r9, r3
 80076e2:	4a43      	ldr	r2, [pc, #268]	; (80077f0 <mix_sub_columns+0x248>)
 80076e4:	5cd3      	ldrb	r3, [r2, r3]
 80076e6:	469a      	mov	sl, r3
 80076e8:	ab02      	add	r3, sp, #8
 80076ea:	789b      	ldrb	r3, [r3, #2]
 80076ec:	4698      	mov	r8, r3
 80076ee:	5ccd      	ldrb	r5, [r1, r3]
 80076f0:	ab02      	add	r3, sp, #8
 80076f2:	79df      	ldrb	r7, [r3, #7]
 80076f4:	5dce      	ldrb	r6, [r1, r7]
 80076f6:	4653      	mov	r3, sl
 80076f8:	4058      	eors	r0, r3
 80076fa:	4068      	eors	r0, r5
 80076fc:	4070      	eors	r0, r6
 80076fe:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007700:	4663      	mov	r3, ip
 8007702:	5cc8      	ldrb	r0, [r1, r3]
 8007704:	464b      	mov	r3, r9
 8007706:	4a39      	ldr	r2, [pc, #228]	; (80077ec <mix_sub_columns+0x244>)
 8007708:	5cd3      	ldrb	r3, [r2, r3]
 800770a:	469b      	mov	fp, r3
 800770c:	4643      	mov	r3, r8
 800770e:	4a38      	ldr	r2, [pc, #224]	; (80077f0 <mix_sub_columns+0x248>)
 8007710:	5cd3      	ldrb	r3, [r2, r3]
 8007712:	469a      	mov	sl, r3
 8007714:	465b      	mov	r3, fp
 8007716:	9001      	str	r0, [sp, #4]
 8007718:	4043      	eors	r3, r0
 800771a:	469b      	mov	fp, r3
 800771c:	4653      	mov	r3, sl
 800771e:	4658      	mov	r0, fp
 8007720:	4043      	eors	r3, r0
 8007722:	405e      	eors	r6, r3
 8007724:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007726:	464b      	mov	r3, r9
 8007728:	5ccb      	ldrb	r3, [r1, r3]
 800772a:	4699      	mov	r9, r3
 800772c:	4643      	mov	r3, r8
 800772e:	4a2f      	ldr	r2, [pc, #188]	; (80077ec <mix_sub_columns+0x244>)
 8007730:	5cd3      	ldrb	r3, [r2, r3]
 8007732:	4698      	mov	r8, r3
 8007734:	4b2e      	ldr	r3, [pc, #184]	; (80077f0 <mix_sub_columns+0x248>)
 8007736:	5dde      	ldrb	r6, [r3, r7]
 8007738:	464b      	mov	r3, r9
 800773a:	9801      	ldr	r0, [sp, #4]
 800773c:	4058      	eors	r0, r3
 800773e:	4643      	mov	r3, r8
 8007740:	4058      	eors	r0, r3
 8007742:	4070      	eors	r0, r6
 8007744:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007746:	4663      	mov	r3, ip
 8007748:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <mix_sub_columns+0x248>)
 800774a:	5cd6      	ldrb	r6, [r2, r3]
 800774c:	4b27      	ldr	r3, [pc, #156]	; (80077ec <mix_sub_columns+0x244>)
 800774e:	5dd8      	ldrb	r0, [r3, r7]
 8007750:	464b      	mov	r3, r9
 8007752:	405e      	eors	r6, r3
 8007754:	4075      	eors	r5, r6
 8007756:	4045      	eors	r5, r0
 8007758:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800775a:	ab02      	add	r3, sp, #8
 800775c:	7b1b      	ldrb	r3, [r3, #12]
 800775e:	469c      	mov	ip, r3
 8007760:	4a22      	ldr	r2, [pc, #136]	; (80077ec <mix_sub_columns+0x244>)
 8007762:	5cd0      	ldrb	r0, [r2, r3]
 8007764:	ab02      	add	r3, sp, #8
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	4699      	mov	r9, r3
 800776a:	4a21      	ldr	r2, [pc, #132]	; (80077f0 <mix_sub_columns+0x248>)
 800776c:	5cd3      	ldrb	r3, [r2, r3]
 800776e:	469a      	mov	sl, r3
 8007770:	ab02      	add	r3, sp, #8
 8007772:	799b      	ldrb	r3, [r3, #6]
 8007774:	4698      	mov	r8, r3
 8007776:	5ccd      	ldrb	r5, [r1, r3]
 8007778:	ab02      	add	r3, sp, #8
 800777a:	7adf      	ldrb	r7, [r3, #11]
 800777c:	5dce      	ldrb	r6, [r1, r7]
 800777e:	4653      	mov	r3, sl
 8007780:	4058      	eors	r0, r3
 8007782:	4068      	eors	r0, r5
 8007784:	4070      	eors	r0, r6
 8007786:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007788:	4663      	mov	r3, ip
 800778a:	5cc8      	ldrb	r0, [r1, r3]
 800778c:	464b      	mov	r3, r9
 800778e:	4a17      	ldr	r2, [pc, #92]	; (80077ec <mix_sub_columns+0x244>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	469b      	mov	fp, r3
 8007794:	4643      	mov	r3, r8
 8007796:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <mix_sub_columns+0x248>)
 8007798:	5cd3      	ldrb	r3, [r2, r3]
 800779a:	469a      	mov	sl, r3
 800779c:	465b      	mov	r3, fp
 800779e:	0002      	movs	r2, r0
 80077a0:	4043      	eors	r3, r0
 80077a2:	469b      	mov	fp, r3
 80077a4:	4653      	mov	r3, sl
 80077a6:	4658      	mov	r0, fp
 80077a8:	4043      	eors	r3, r0
 80077aa:	405e      	eors	r6, r3
 80077ac:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80077ae:	464b      	mov	r3, r9
 80077b0:	5cc9      	ldrb	r1, [r1, r3]
 80077b2:	4643      	mov	r3, r8
 80077b4:	4e0d      	ldr	r6, [pc, #52]	; (80077ec <mix_sub_columns+0x244>)
 80077b6:	5cf3      	ldrb	r3, [r6, r3]
 80077b8:	4698      	mov	r8, r3
 80077ba:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <mix_sub_columns+0x248>)
 80077bc:	5dde      	ldrb	r6, [r3, r7]
 80077be:	0010      	movs	r0, r2
 80077c0:	4048      	eors	r0, r1
 80077c2:	4643      	mov	r3, r8
 80077c4:	4058      	eors	r0, r3
 80077c6:	4070      	eors	r0, r6
 80077c8:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80077ca:	4663      	mov	r3, ip
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <mix_sub_columns+0x248>)
 80077ce:	5cd2      	ldrb	r2, [r2, r3]
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <mix_sub_columns+0x244>)
 80077d2:	5ddb      	ldrb	r3, [r3, r7]
 80077d4:	4051      	eors	r1, r2
 80077d6:	404d      	eors	r5, r1
 80077d8:	405d      	eors	r5, r3
 80077da:	73e5      	strb	r5, [r4, #15]
  }
 80077dc:	b007      	add	sp, #28
 80077de:	bcf0      	pop	{r4, r5, r6, r7}
 80077e0:	46bb      	mov	fp, r7
 80077e2:	46b2      	mov	sl, r6
 80077e4:	46a9      	mov	r9, r5
 80077e6:	46a0      	mov	r8, r4
 80077e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	08010e68 	.word	0x08010e68
 80077f0:	08010d68 	.word	0x08010d68
 80077f4:	08010f68 	.word	0x08010f68

080077f8 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 80077f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fa:	46de      	mov	lr, fp
 80077fc:	4657      	mov	r7, sl
 80077fe:	464e      	mov	r6, r9
 8007800:	4645      	mov	r5, r8
 8007802:	b5e0      	push	{r5, r6, r7, lr}
 8007804:	b083      	sub	sp, #12
 8007806:	000f      	movs	r7, r1
 8007808:	0014      	movs	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800780a:	000a      	movs	r2, r1
 800780c:	3a10      	subs	r2, #16
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	2a10      	cmp	r2, #16
 8007812:	d804      	bhi.n	800781e <aes_set_key+0x26>
 8007814:	2301      	movs	r3, #1
 8007816:	4093      	lsls	r3, r2
 8007818:	4a3f      	ldr	r2, [pc, #252]	; (8007918 <aes_set_key+0x120>)
 800781a:	4213      	tst	r3, r2
 800781c:	d10a      	bne.n	8007834 <aes_set_key+0x3c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800781e:	23f0      	movs	r3, #240	; 0xf0
 8007820:	2200      	movs	r2, #0
 8007822:	54e2      	strb	r2, [r4, r3]
        return ( uint8_t )-1;
 8007824:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007826:	b003      	add	sp, #12
 8007828:	bcf0      	pop	{r4, r5, r6, r7}
 800782a:	46bb      	mov	fp, r7
 800782c:	46b2      	mov	sl, r6
 800782e:	46a9      	mov	r9, r5
 8007830:	46a0      	mov	r8, r4
 8007832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8007834:	000a      	movs	r2, r1
 8007836:	0001      	movs	r1, r0
 8007838:	0020      	movs	r0, r4
 800783a:	f7ff fdef 	bl	800741c <copy_block_nn>
    hi = (keylen + 28) << 2;
 800783e:	003b      	movs	r3, r7
 8007840:	331c      	adds	r3, #28
 8007842:	b2db      	uxtb	r3, r3
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	b2db      	uxtb	r3, r3
 8007848:	9300      	str	r3, [sp, #0]
    ctx->rnd = (hi >> 4) - 1;
 800784a:	091b      	lsrs	r3, r3, #4
 800784c:	3b01      	subs	r3, #1
 800784e:	22f0      	movs	r2, #240	; 0xf0
 8007850:	54a3      	strb	r3, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007852:	003d      	movs	r5, r7
 8007854:	2301      	movs	r3, #1
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	e01d      	b.n	8007896 <aes_set_key+0x9e>
        else if( keylen > 24 && cc % keylen == 16 )
 800785a:	2f18      	cmp	r7, #24
 800785c:	d901      	bls.n	8007862 <aes_set_key+0x6a>
 800785e:	2910      	cmp	r1, #16
 8007860:	d04a      	beq.n	80078f8 <aes_set_key+0x100>
        tt = cc - keylen;
 8007862:	1beb      	subs	r3, r5, r7
 8007864:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007866:	5ce2      	ldrb	r2, [r4, r3]
 8007868:	4659      	mov	r1, fp
 800786a:	404a      	eors	r2, r1
 800786c:	55a2      	strb	r2, [r4, r6]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	5ca2      	ldrb	r2, [r4, r2]
 8007872:	1c71      	adds	r1, r6, #1
 8007874:	4650      	mov	r0, sl
 8007876:	4042      	eors	r2, r0
 8007878:	5462      	strb	r2, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800787a:	1c9a      	adds	r2, r3, #2
 800787c:	5ca2      	ldrb	r2, [r4, r2]
 800787e:	1cb1      	adds	r1, r6, #2
 8007880:	4648      	mov	r0, r9
 8007882:	4042      	eors	r2, r0
 8007884:	5462      	strb	r2, [r4, r1]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007886:	3303      	adds	r3, #3
 8007888:	5ce3      	ldrb	r3, [r4, r3]
 800788a:	3603      	adds	r6, #3
 800788c:	4642      	mov	r2, r8
 800788e:	4053      	eors	r3, r2
 8007890:	55a3      	strb	r3, [r4, r6]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007892:	3504      	adds	r5, #4
 8007894:	b2ed      	uxtb	r5, r5
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	429d      	cmp	r5, r3
 800789a:	d23b      	bcs.n	8007914 <aes_set_key+0x11c>
        t0 = ctx->ksch[cc - 4];
 800789c:	002e      	movs	r6, r5
 800789e:	1f2b      	subs	r3, r5, #4
 80078a0:	5ce3      	ldrb	r3, [r4, r3]
 80078a2:	469b      	mov	fp, r3
        t1 = ctx->ksch[cc - 3];
 80078a4:	1eeb      	subs	r3, r5, #3
 80078a6:	5ce3      	ldrb	r3, [r4, r3]
 80078a8:	469a      	mov	sl, r3
        t2 = ctx->ksch[cc - 2];
 80078aa:	1eab      	subs	r3, r5, #2
 80078ac:	5ce3      	ldrb	r3, [r4, r3]
 80078ae:	4699      	mov	r9, r3
        t3 = ctx->ksch[cc - 1];
 80078b0:	1e6b      	subs	r3, r5, #1
 80078b2:	5ce3      	ldrb	r3, [r4, r3]
 80078b4:	4698      	mov	r8, r3
        if( cc % keylen == 0 )
 80078b6:	0039      	movs	r1, r7
 80078b8:	0028      	movs	r0, r5
 80078ba:	f7f8 fcb5 	bl	8000228 <__aeabi_uidivmod>
 80078be:	b2c9      	uxtb	r1, r1
 80078c0:	2900      	cmp	r1, #0
 80078c2:	d1ca      	bne.n	800785a <aes_set_key+0x62>
            t0 = s_box(t1) ^ rc;
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <aes_set_key+0x124>)
 80078c6:	4652      	mov	r2, sl
 80078c8:	5c9a      	ldrb	r2, [r3, r2]
 80078ca:	9901      	ldr	r1, [sp, #4]
 80078cc:	404a      	eors	r2, r1
            t1 = s_box(t2);
 80078ce:	4648      	mov	r0, r9
 80078d0:	5c18      	ldrb	r0, [r3, r0]
 80078d2:	4682      	mov	sl, r0
            t2 = s_box(t3);
 80078d4:	4640      	mov	r0, r8
 80078d6:	5c18      	ldrb	r0, [r3, r0]
 80078d8:	4681      	mov	r9, r0
            t3 = s_box(tt);
 80078da:	4658      	mov	r0, fp
 80078dc:	5c1b      	ldrb	r3, [r3, r0]
 80078de:	4698      	mov	r8, r3
            rc = f2(rc);
 80078e0:	000b      	movs	r3, r1
 80078e2:	0049      	lsls	r1, r1, #1
 80078e4:	09db      	lsrs	r3, r3, #7
 80078e6:	0058      	lsls	r0, r3, #1
 80078e8:	181b      	adds	r3, r3, r0
 80078ea:	00d8      	lsls	r0, r3, #3
 80078ec:	181b      	adds	r3, r3, r0
 80078ee:	404b      	eors	r3, r1
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	9301      	str	r3, [sp, #4]
            t0 = s_box(t1) ^ rc;
 80078f4:	4693      	mov	fp, r2
 80078f6:	e7b4      	b.n	8007862 <aes_set_key+0x6a>
            t0 = s_box(t0);
 80078f8:	4b08      	ldr	r3, [pc, #32]	; (800791c <aes_set_key+0x124>)
 80078fa:	465a      	mov	r2, fp
 80078fc:	5c9a      	ldrb	r2, [r3, r2]
 80078fe:	4693      	mov	fp, r2
            t1 = s_box(t1);
 8007900:	4652      	mov	r2, sl
 8007902:	5c9a      	ldrb	r2, [r3, r2]
 8007904:	4692      	mov	sl, r2
            t2 = s_box(t2);
 8007906:	464a      	mov	r2, r9
 8007908:	5c9a      	ldrb	r2, [r3, r2]
 800790a:	4691      	mov	r9, r2
            t3 = s_box(t3);
 800790c:	4642      	mov	r2, r8
 800790e:	5c9b      	ldrb	r3, [r3, r2]
 8007910:	4698      	mov	r8, r3
 8007912:	e7a6      	b.n	8007862 <aes_set_key+0x6a>
    return 0;
 8007914:	2000      	movs	r0, #0
 8007916:	e786      	b.n	8007826 <aes_set_key+0x2e>
 8007918:	00010101 	.word	0x00010101
 800791c:	08010f68 	.word	0x08010f68

08007920 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8007920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007922:	b085      	sub	sp, #20
 8007924:	000d      	movs	r5, r1
 8007926:	0016      	movs	r6, r2
    if( ctx->rnd )
 8007928:	23f0      	movs	r3, #240	; 0xf0
 800792a:	5cd3      	ldrb	r3, [r2, r3]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d020      	beq.n	8007972 <aes_encrypt+0x52>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8007930:	0017      	movs	r7, r2
 8007932:	0001      	movs	r1, r0
 8007934:	4668      	mov	r0, sp
 8007936:	f7ff fdbd 	bl	80074b4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800793a:	2401      	movs	r4, #1
 800793c:	e009      	b.n	8007952 <aes_encrypt+0x32>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800793e:	4668      	mov	r0, sp
 8007940:	f7ff fe32 	bl	80075a8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8007944:	0121      	lsls	r1, r4, #4
 8007946:	1879      	adds	r1, r7, r1
 8007948:	4668      	mov	r0, sp
 800794a:	f7ff fdf5 	bl	8007538 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800794e:	3401      	adds	r4, #1
 8007950:	b2e4      	uxtb	r4, r4
 8007952:	23f0      	movs	r3, #240	; 0xf0
 8007954:	5cf3      	ldrb	r3, [r6, r3]
 8007956:	42a3      	cmp	r3, r4
 8007958:	d8f1      	bhi.n	800793e <aes_encrypt+0x1e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800795a:	4668      	mov	r0, sp
 800795c:	f7ff fdf0 	bl	8007540 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007960:	0124      	lsls	r4, r4, #4
 8007962:	1932      	adds	r2, r6, r4
 8007964:	4669      	mov	r1, sp
 8007966:	0028      	movs	r0, r5
 8007968:	f7ff fda4 	bl	80074b4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800796c:	2000      	movs	r0, #0
}
 800796e:	b005      	add	sp, #20
 8007970:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 8007972:	20ff      	movs	r0, #255	; 0xff
 8007974:	e7fb      	b.n	800796e <aes_encrypt+0x4e>

08007976 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8007976:	b510      	push	{r4, lr}
 8007978:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 800797a:	30f1      	adds	r0, #241	; 0xf1
 800797c:	2210      	movs	r2, #16
 800797e:	2100      	movs	r1, #0
 8007980:	f007 f9e9 	bl	800ed56 <memset1>
            ctx->M_n = 0;
 8007984:	238a      	movs	r3, #138	; 0x8a
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	2200      	movs	r2, #0
 800798a:	50e2      	str	r2, [r4, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 800798c:	32f0      	adds	r2, #240	; 0xf0
 800798e:	2100      	movs	r1, #0
 8007990:	0020      	movs	r0, r4
 8007992:	f007 f9e0 	bl	800ed56 <memset1>
}
 8007996:	bd10      	pop	{r4, pc}

08007998 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8007998:	b510      	push	{r4, lr}
 800799a:	0002      	movs	r2, r0
 800799c:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800799e:	2110      	movs	r1, #16
 80079a0:	f7ff ff2a 	bl	80077f8 <aes_set_key>
}
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 80079a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a8:	46c6      	mov	lr, r8
 80079aa:	b500      	push	{lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	0006      	movs	r6, r0
 80079b0:	000f      	movs	r7, r1
 80079b2:	4690      	mov	r8, r2
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 80079b4:	238a      	movs	r3, #138	; 0x8a
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	58c0      	ldr	r0, [r0, r3]
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d044      	beq.n	8007a48 <AES_CMAC_Update+0xa2>
                  mlen = MIN(16 - ctx->M_n, len);
 80079be:	2510      	movs	r5, #16
 80079c0:	1a2d      	subs	r5, r5, r0
 80079c2:	002c      	movs	r4, r5
 80079c4:	4295      	cmp	r5, r2
 80079c6:	d900      	bls.n	80079ca <AES_CMAC_Update+0x24>
 80079c8:	0014      	movs	r4, r2
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 80079ca:	1cb3      	adds	r3, r6, #2
 80079cc:	33ff      	adds	r3, #255	; 0xff
 80079ce:	b2a2      	uxth	r2, r4
 80079d0:	1818      	adds	r0, r3, r0
 80079d2:	0039      	movs	r1, r7
 80079d4:	f007 f9a7 	bl	800ed26 <memcpy1>
                    ctx->M_n += mlen;
 80079d8:	228a      	movs	r2, #138	; 0x8a
 80079da:	0052      	lsls	r2, r2, #1
 80079dc:	58b3      	ldr	r3, [r6, r2]
 80079de:	18e3      	adds	r3, r4, r3
 80079e0:	50b3      	str	r3, [r6, r2]
                    if (ctx->M_n < 16 || len == mlen)
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	d948      	bls.n	8007a78 <AES_CMAC_Update+0xd2>
 80079e6:	4545      	cmp	r5, r8
 80079e8:	d246      	bcs.n	8007a78 <AES_CMAC_Update+0xd2>
                            return;
                   XOR(ctx->M_last, ctx->X);
 80079ea:	2200      	movs	r2, #0
 80079ec:	e009      	b.n	8007a02 <AES_CMAC_Update+0x5c>
 80079ee:	18b3      	adds	r3, r6, r2
 80079f0:	0018      	movs	r0, r3
 80079f2:	30f1      	adds	r0, #241	; 0xf1
 80079f4:	7801      	ldrb	r1, [r0, #0]
 80079f6:	3302      	adds	r3, #2
 80079f8:	33ff      	adds	r3, #255	; 0xff
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	404b      	eors	r3, r1
 80079fe:	7003      	strb	r3, [r0, #0]
 8007a00:	3201      	adds	r2, #1
 8007a02:	2a0f      	cmp	r2, #15
 8007a04:	ddf3      	ble.n	80079ee <AES_CMAC_Update+0x48>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8007a06:	0032      	movs	r2, r6
 8007a08:	0030      	movs	r0, r6
 8007a0a:	30f1      	adds	r0, #241	; 0xf1
 8007a0c:	0001      	movs	r1, r0
 8007a0e:	f7ff ff87 	bl	8007920 <aes_encrypt>
                    data += mlen;
 8007a12:	193f      	adds	r7, r7, r4
                    len -= mlen;
 8007a14:	4643      	mov	r3, r8
 8007a16:	1b1b      	subs	r3, r3, r4
 8007a18:	4698      	mov	r8, r3
 8007a1a:	e015      	b.n	8007a48 <AES_CMAC_Update+0xa2>
            while (len > 16) {      /* not last block */

                    XOR(data, ctx->X);
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	0034      	movs	r4, r6
 8007a20:	34f1      	adds	r4, #241	; 0xf1
 8007a22:	0021      	movs	r1, r4
 8007a24:	4668      	mov	r0, sp
 8007a26:	f007 f97e 	bl	800ed26 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8007a2a:	0032      	movs	r2, r6
 8007a2c:	4669      	mov	r1, sp
 8007a2e:	4668      	mov	r0, sp
 8007a30:	f7ff ff76 	bl	8007920 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8007a34:	2210      	movs	r2, #16
 8007a36:	4669      	mov	r1, sp
 8007a38:	0020      	movs	r0, r4
 8007a3a:	f007 f974 	bl	800ed26 <memcpy1>

                    data += 16;
 8007a3e:	3710      	adds	r7, #16
                    len -= 16;
 8007a40:	2310      	movs	r3, #16
 8007a42:	425b      	negs	r3, r3
 8007a44:	469c      	mov	ip, r3
 8007a46:	44e0      	add	r8, ip
            while (len > 16) {      /* not last block */
 8007a48:	4643      	mov	r3, r8
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d90a      	bls.n	8007a64 <AES_CMAC_Update+0xbe>
                    XOR(data, ctx->X);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b0f      	cmp	r3, #15
 8007a52:	dce3      	bgt.n	8007a1c <AES_CMAC_Update+0x76>
 8007a54:	18f4      	adds	r4, r6, r3
 8007a56:	34f1      	adds	r4, #241	; 0xf1
 8007a58:	7825      	ldrb	r5, [r4, #0]
 8007a5a:	5cfa      	ldrb	r2, [r7, r3]
 8007a5c:	4055      	eors	r5, r2
 8007a5e:	7025      	strb	r5, [r4, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	e7f5      	b.n	8007a50 <AES_CMAC_Update+0xaa>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8007a64:	1cb0      	adds	r0, r6, #2
 8007a66:	30ff      	adds	r0, #255	; 0xff
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	0039      	movs	r1, r7
 8007a6c:	f007 f95b 	bl	800ed26 <memcpy1>
            ctx->M_n = len;
 8007a70:	238a      	movs	r3, #138	; 0x8a
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4642      	mov	r2, r8
 8007a76:	50f2      	str	r2, [r6, r3]
}
 8007a78:	b004      	add	sp, #16
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	46b8      	mov	r8, r7
 8007a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a80 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8007a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	0006      	movs	r6, r0
 8007a86:	000d      	movs	r5, r1
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8007a88:	ac04      	add	r4, sp, #16
 8007a8a:	2210      	movs	r2, #16
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	0020      	movs	r0, r4
 8007a90:	f007 f961 	bl	800ed56 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8007a94:	002a      	movs	r2, r5
 8007a96:	0021      	movs	r1, r4
 8007a98:	0020      	movs	r0, r4
 8007a9a:	f7ff ff41 	bl	8007920 <aes_encrypt>

            if (K[0] & 0x80) {
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	56e3      	ldrsb	r3, [r4, r3]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	db15      	blt.n	8007ad2 <AES_CMAC_Final+0x52>
                    LSHIFT(K, K);
                   K[15] ^= 0x87;
            } else
                    LSHIFT(K, K);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	e01e      	b.n	8007ae8 <AES_CMAC_Final+0x68>
                    LSHIFT(K, K);
 8007aaa:	a904      	add	r1, sp, #16
 8007aac:	5c88      	ldrb	r0, [r1, r2]
 8007aae:	0040      	lsls	r0, r0, #1
 8007ab0:	1c54      	adds	r4, r2, #1
 8007ab2:	5d0b      	ldrb	r3, [r1, r4]
 8007ab4:	09db      	lsrs	r3, r3, #7
 8007ab6:	4303      	orrs	r3, r0
 8007ab8:	548b      	strb	r3, [r1, r2]
 8007aba:	0022      	movs	r2, r4
 8007abc:	2a0e      	cmp	r2, #14
 8007abe:	ddf4      	ble.n	8007aaa <AES_CMAC_Final+0x2a>
 8007ac0:	a904      	add	r1, sp, #16
 8007ac2:	7bcb      	ldrb	r3, [r1, #15]
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	b2db      	uxtb	r3, r3
                   K[15] ^= 0x87;
 8007ac8:	2279      	movs	r2, #121	; 0x79
 8007aca:	4252      	negs	r2, r2
 8007acc:	4053      	eors	r3, r2
 8007ace:	73cb      	strb	r3, [r1, #15]
 8007ad0:	e010      	b.n	8007af4 <AES_CMAC_Final+0x74>
                    LSHIFT(K, K);
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	e7f2      	b.n	8007abc <AES_CMAC_Final+0x3c>
                    LSHIFT(K, K);
 8007ad6:	a904      	add	r1, sp, #16
 8007ad8:	5c88      	ldrb	r0, [r1, r2]
 8007ada:	0040      	lsls	r0, r0, #1
 8007adc:	1c54      	adds	r4, r2, #1
 8007ade:	5d0b      	ldrb	r3, [r1, r4]
 8007ae0:	09db      	lsrs	r3, r3, #7
 8007ae2:	4303      	orrs	r3, r0
 8007ae4:	548b      	strb	r3, [r1, r2]
 8007ae6:	0022      	movs	r2, r4
 8007ae8:	2a0e      	cmp	r2, #14
 8007aea:	ddf4      	ble.n	8007ad6 <AES_CMAC_Final+0x56>
 8007aec:	aa04      	add	r2, sp, #16
 8007aee:	7bd3      	ldrb	r3, [r2, #15]
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	73d3      	strb	r3, [r2, #15]


            if (ctx->M_n == 16) {
 8007af4:	238a      	movs	r3, #138	; 0x8a
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	58ec      	ldr	r4, [r5, r3]
 8007afa:	2c10      	cmp	r4, #16
 8007afc:	d011      	beq.n	8007b22 <AES_CMAC_Final+0xa2>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8007afe:	ab04      	add	r3, sp, #16
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b25b      	sxtb	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	db19      	blt.n	8007b3c <AES_CMAC_Final+0xbc>
                          LSHIFT(K, K);
                          K[15] ^= 0x87;
                  } else
                           LSHIFT(K, K);
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2a0e      	cmp	r2, #14
 8007b0c:	dc2c      	bgt.n	8007b68 <AES_CMAC_Final+0xe8>
 8007b0e:	a904      	add	r1, sp, #16
 8007b10:	5c88      	ldrb	r0, [r1, r2]
 8007b12:	0040      	lsls	r0, r0, #1
 8007b14:	1c57      	adds	r7, r2, #1
 8007b16:	5dcb      	ldrb	r3, [r1, r7]
 8007b18:	09db      	lsrs	r3, r3, #7
 8007b1a:	4303      	orrs	r3, r0
 8007b1c:	548b      	strb	r3, [r1, r2]
 8007b1e:	003a      	movs	r2, r7
 8007b20:	e7f3      	b.n	8007b0a <AES_CMAC_Final+0x8a>
                    XOR(K, ctx->M_last);
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b0f      	cmp	r3, #15
 8007b26:	dc42      	bgt.n	8007bae <AES_CMAC_Final+0x12e>
 8007b28:	18ea      	adds	r2, r5, r3
 8007b2a:	3202      	adds	r2, #2
 8007b2c:	32ff      	adds	r2, #255	; 0xff
 8007b2e:	7811      	ldrb	r1, [r2, #0]
 8007b30:	a804      	add	r0, sp, #16
 8007b32:	5cc0      	ldrb	r0, [r0, r3]
 8007b34:	4041      	eors	r1, r0
 8007b36:	7011      	strb	r1, [r2, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	e7f3      	b.n	8007b24 <AES_CMAC_Final+0xa4>
                          LSHIFT(K, K);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2a0e      	cmp	r2, #14
 8007b40:	dc09      	bgt.n	8007b56 <AES_CMAC_Final+0xd6>
 8007b42:	a904      	add	r1, sp, #16
 8007b44:	5c88      	ldrb	r0, [r1, r2]
 8007b46:	0040      	lsls	r0, r0, #1
 8007b48:	1c57      	adds	r7, r2, #1
 8007b4a:	5dcb      	ldrb	r3, [r1, r7]
 8007b4c:	09db      	lsrs	r3, r3, #7
 8007b4e:	4303      	orrs	r3, r0
 8007b50:	548b      	strb	r3, [r1, r2]
 8007b52:	003a      	movs	r2, r7
 8007b54:	e7f3      	b.n	8007b3e <AES_CMAC_Final+0xbe>
 8007b56:	aa04      	add	r2, sp, #16
 8007b58:	7bd3      	ldrb	r3, [r2, #15]
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	b2db      	uxtb	r3, r3
                          K[15] ^= 0x87;
 8007b5e:	2179      	movs	r1, #121	; 0x79
 8007b60:	4249      	negs	r1, r1
 8007b62:	404b      	eors	r3, r1
 8007b64:	73d3      	strb	r3, [r2, #15]
 8007b66:	e003      	b.n	8007b70 <AES_CMAC_Final+0xf0>
                           LSHIFT(K, K);
 8007b68:	aa04      	add	r2, sp, #16
 8007b6a:	7bd3      	ldrb	r3, [r2, #15]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	73d3      	strb	r3, [r2, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8007b70:	192c      	adds	r4, r5, r4
 8007b72:	3402      	adds	r4, #2
 8007b74:	34ff      	adds	r4, #255	; 0xff
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	7023      	strb	r3, [r4, #0]
                   while (++ctx->M_n < 16)
 8007b7a:	228a      	movs	r2, #138	; 0x8a
 8007b7c:	0052      	lsls	r2, r2, #1
 8007b7e:	58ab      	ldr	r3, [r5, r2]
 8007b80:	3301      	adds	r3, #1
 8007b82:	50ab      	str	r3, [r5, r2]
 8007b84:	2b0f      	cmp	r3, #15
 8007b86:	d805      	bhi.n	8007b94 <AES_CMAC_Final+0x114>
                         ctx->M_last[ctx->M_n] = 0;
 8007b88:	18eb      	adds	r3, r5, r3
 8007b8a:	3302      	adds	r3, #2
 8007b8c:	33ff      	adds	r3, #255	; 0xff
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e7f2      	b.n	8007b7a <AES_CMAC_Final+0xfa>
   
                  XOR(K, ctx->M_last);
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	dc09      	bgt.n	8007bae <AES_CMAC_Final+0x12e>
 8007b9a:	18ea      	adds	r2, r5, r3
 8007b9c:	3202      	adds	r2, #2
 8007b9e:	32ff      	adds	r2, #255	; 0xff
 8007ba0:	7811      	ldrb	r1, [r2, #0]
 8007ba2:	a804      	add	r0, sp, #16
 8007ba4:	5cc0      	ldrb	r0, [r0, r3]
 8007ba6:	4041      	eors	r1, r0
 8007ba8:	7011      	strb	r1, [r2, #0]
 8007baa:	3301      	adds	r3, #1
 8007bac:	e7f3      	b.n	8007b96 <AES_CMAC_Final+0x116>
 8007bae:	2200      	movs	r2, #0


           }
           XOR(ctx->M_last, ctx->X);
 8007bb0:	2a0f      	cmp	r2, #15
 8007bb2:	dc0a      	bgt.n	8007bca <AES_CMAC_Final+0x14a>
 8007bb4:	18ab      	adds	r3, r5, r2
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	31f1      	adds	r1, #241	; 0xf1
 8007bba:	780c      	ldrb	r4, [r1, #0]
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	33ff      	adds	r3, #255	; 0xff
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	4063      	eors	r3, r4
 8007bc4:	700b      	strb	r3, [r1, #0]
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	e7f2      	b.n	8007bb0 <AES_CMAC_Final+0x130>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8007bca:	0029      	movs	r1, r5
 8007bcc:	31f1      	adds	r1, #241	; 0xf1
 8007bce:	2210      	movs	r2, #16
 8007bd0:	4668      	mov	r0, sp
 8007bd2:	f007 f8a8 	bl	800ed26 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8007bd6:	002a      	movs	r2, r5
 8007bd8:	0031      	movs	r1, r6
 8007bda:	4668      	mov	r0, sp
 8007bdc:	f7ff fea0 	bl	8007920 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8007be0:	2210      	movs	r2, #16
 8007be2:	2100      	movs	r1, #0
 8007be4:	a804      	add	r0, sp, #16
 8007be6:	f007 f8b6 	bl	800ed56 <memset1>

}
 8007bea:	b009      	add	sp, #36	; 0x24
 8007bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bee <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 8007bee:	4770      	bx	lr

08007bf0 <GetKeyByID>:
{
 8007bf0:	b530      	push	{r4, r5, lr}
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2b17      	cmp	r3, #23
 8007bf6:	d81a      	bhi.n	8007c2e <GetKeyByID+0x3e>
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8007bf8:	001d      	movs	r5, r3
 8007bfa:	011c      	lsls	r4, r3, #4
 8007bfc:	18e4      	adds	r4, r4, r3
 8007bfe:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <GetKeyByID+0x44>)
 8007c00:	1912      	adds	r2, r2, r4
 8007c02:	248b      	movs	r4, #139	; 0x8b
 8007c04:	00a4      	lsls	r4, r4, #2
 8007c06:	46a4      	mov	ip, r4
 8007c08:	4462      	add	r2, ip
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	4282      	cmp	r2, r0
 8007c0e:	d002      	beq.n	8007c16 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007c10:	3301      	adds	r3, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	e7ee      	b.n	8007bf4 <GetKeyByID+0x4>
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	195b      	adds	r3, r3, r5
 8007c1a:	228a      	movs	r2, #138	; 0x8a
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	4694      	mov	ip, r2
 8007c20:	4463      	add	r3, ip
 8007c22:	4d04      	ldr	r5, [pc, #16]	; (8007c34 <GetKeyByID+0x44>)
 8007c24:	195b      	adds	r3, r3, r5
 8007c26:	3304      	adds	r3, #4
 8007c28:	600b      	str	r3, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8007c2a:	2000      	movs	r0, #0
}
 8007c2c:	bd30      	pop	{r4, r5, pc}
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007c2e:	2003      	movs	r0, #3
 8007c30:	e7fc      	b.n	8007c2c <GetKeyByID+0x3c>
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	20000318 	.word	0x20000318

08007c38 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8007c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	0006      	movs	r6, r0
 8007c3e:	000c      	movs	r4, r1
 8007c40:	0017      	movs	r7, r2
 8007c42:	001d      	movs	r5, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d032      	beq.n	8007cae <ComputeCmac+0x76>
 8007c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d031      	beq.n	8007cb2 <ComputeCmac+0x7a>
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8007c4e:	481a      	ldr	r0, [pc, #104]	; (8007cb8 <ComputeCmac+0x80>)
 8007c50:	f7ff fe91 	bl	8007976 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8007c54:	a901      	add	r1, sp, #4
 8007c56:	0028      	movs	r0, r5
 8007c58:	f7ff ffca 	bl	8007bf0 <GetKeyByID>
 8007c5c:	1e05      	subs	r5, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007c5e:	d002      	beq.n	8007c66 <ComputeCmac+0x2e>
        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
    }

    return retval;
}
 8007c60:	0028      	movs	r0, r5
 8007c62:	b007      	add	sp, #28
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	1c59      	adds	r1, r3, #1
 8007c6a:	4813      	ldr	r0, [pc, #76]	; (8007cb8 <ComputeCmac+0x80>)
 8007c6c:	f7ff fe94 	bl	8007998 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	d004      	beq.n	8007c7e <ComputeCmac+0x46>
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8007c74:	2210      	movs	r2, #16
 8007c76:	0031      	movs	r1, r6
 8007c78:	480f      	ldr	r0, [pc, #60]	; (8007cb8 <ComputeCmac+0x80>)
 8007c7a:	f7ff fe94 	bl	80079a6 <AES_CMAC_Update>
        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8007c7e:	4e0e      	ldr	r6, [pc, #56]	; (8007cb8 <ComputeCmac+0x80>)
 8007c80:	003a      	movs	r2, r7
 8007c82:	0021      	movs	r1, r4
 8007c84:	0030      	movs	r0, r6
 8007c86:	f7ff fe8e 	bl	80079a6 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8007c8a:	ac02      	add	r4, sp, #8
 8007c8c:	0031      	movs	r1, r6
 8007c8e:	0020      	movs	r0, r4
 8007c90:	f7ff fef6 	bl	8007a80 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8007c94:	78e3      	ldrb	r3, [r4, #3]
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	78a2      	ldrb	r2, [r4, #2]
 8007c9a:	0412      	lsls	r2, r2, #16
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	7862      	ldrb	r2, [r4, #1]
 8007ca0:	0212      	lsls	r2, r2, #8
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	7822      	ldrb	r2, [r4, #0]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e7d8      	b.n	8007c60 <ComputeCmac+0x28>
        return SECURE_ELEMENT_ERROR_NPE;
 8007cae:	2502      	movs	r5, #2
 8007cb0:	e7d6      	b.n	8007c60 <ComputeCmac+0x28>
 8007cb2:	2502      	movs	r5, #2
 8007cb4:	e7d4      	b.n	8007c60 <ComputeCmac+0x28>
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	2000042c 	.word	0x2000042c

08007cbc <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	0005      	movs	r5, r0
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	9600      	str	r6, [sp, #0]
 8007cc6:	220c      	movs	r2, #12
 8007cc8:	2100      	movs	r1, #0
 8007cca:	a801      	add	r0, sp, #4
 8007ccc:	f008 f95a 	bl	800ff84 <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8007cd0:	4c32      	ldr	r4, [pc, #200]	; (8007d9c <SecureElementInit+0xe0>)
 8007cd2:	238b      	movs	r3, #139	; 0x8b
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	54e6      	strb	r6, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8007cd8:	4b31      	ldr	r3, [pc, #196]	; (8007da0 <SecureElementInit+0xe4>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8007cde:	4b31      	ldr	r3, [pc, #196]	; (8007da4 <SecureElementInit+0xe8>)
 8007ce0:	3201      	adds	r2, #1
 8007ce2:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8007ce4:	4b30      	ldr	r3, [pc, #192]	; (8007da8 <SecureElementInit+0xec>)
 8007ce6:	3201      	adds	r2, #1
 8007ce8:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8007cea:	3311      	adds	r3, #17
 8007cec:	3201      	adds	r2, #1
 8007cee:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8007cf0:	4b2e      	ldr	r3, [pc, #184]	; (8007dac <SecureElementInit+0xf0>)
 8007cf2:	3201      	adds	r2, #1
 8007cf4:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8007cf6:	4b2e      	ldr	r3, [pc, #184]	; (8007db0 <SecureElementInit+0xf4>)
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8007cfc:	4b2d      	ldr	r3, [pc, #180]	; (8007db4 <SecureElementInit+0xf8>)
 8007cfe:	3201      	adds	r2, #1
 8007d00:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8007d02:	3311      	adds	r3, #17
 8007d04:	3201      	adds	r2, #1
 8007d06:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <SecureElementInit+0xfc>)
 8007d0a:	3201      	adds	r2, #1
 8007d0c:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8007d0e:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <SecureElementInit+0x100>)
 8007d10:	3276      	adds	r2, #118	; 0x76
 8007d12:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8007d14:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <SecureElementInit+0x104>)
 8007d16:	3201      	adds	r2, #1
 8007d18:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8007d1a:	3311      	adds	r3, #17
 8007d1c:	3201      	adds	r2, #1
 8007d1e:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8007d20:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <SecureElementInit+0x108>)
 8007d22:	3201      	adds	r2, #1
 8007d24:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8007d26:	4b28      	ldr	r3, [pc, #160]	; (8007dc8 <SecureElementInit+0x10c>)
 8007d28:	3201      	adds	r2, #1
 8007d2a:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <SecureElementInit+0x110>)
 8007d2e:	3201      	adds	r2, #1
 8007d30:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8007d32:	3311      	adds	r3, #17
 8007d34:	3201      	adds	r2, #1
 8007d36:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <SecureElementInit+0x114>)
 8007d3a:	3201      	adds	r2, #1
 8007d3c:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8007d3e:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <SecureElementInit+0x118>)
 8007d40:	3201      	adds	r2, #1
 8007d42:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <SecureElementInit+0x11c>)
 8007d46:	3201      	adds	r2, #1
 8007d48:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8007d4a:	3311      	adds	r3, #17
 8007d4c:	3201      	adds	r2, #1
 8007d4e:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8007d50:	4b22      	ldr	r3, [pc, #136]	; (8007ddc <SecureElementInit+0x120>)
 8007d52:	3201      	adds	r2, #1
 8007d54:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8007d56:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <SecureElementInit+0x124>)
 8007d58:	3201      	adds	r2, #1
 8007d5a:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8007d5c:	4b21      	ldr	r3, [pc, #132]	; (8007de4 <SecureElementInit+0x128>)
 8007d5e:	3201      	adds	r2, #1
 8007d60:	54e2      	strb	r2, [r4, r3]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8007d62:	3301      	adds	r3, #1
 8007d64:	18e0      	adds	r0, r4, r3
 8007d66:	3a7c      	subs	r2, #124	; 0x7c
 8007d68:	4669      	mov	r1, sp
 8007d6a:	f006 ffdc 	bl	800ed26 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8007d6e:	2210      	movs	r2, #16
 8007d70:	2100      	movs	r1, #0
 8007d72:	0020      	movs	r0, r4
 8007d74:	f006 ffef 	bl	800ed56 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8007d78:	0020      	movs	r0, r4
 8007d7a:	3010      	adds	r0, #16
 8007d7c:	2210      	movs	r2, #16
 8007d7e:	2100      	movs	r1, #0
 8007d80:	f006 ffe9 	bl	800ed56 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8007d84:	2d00      	cmp	r5, #0
 8007d86:	d004      	beq.n	8007d92 <SecureElementInit+0xd6>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8007d88:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <SecureElementInit+0x12c>)
 8007d8a:	601d      	str	r5, [r3, #0]
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	b004      	add	sp, #16
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
        SeNvmCtxChanged = DummyCB;
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <SecureElementInit+0x12c>)
 8007d94:	4a15      	ldr	r2, [pc, #84]	; (8007dec <SecureElementInit+0x130>)
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	e7f8      	b.n	8007d8c <SecureElementInit+0xd0>
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	20000318 	.word	0x20000318
 8007da0:	0000023d 	.word	0x0000023d
 8007da4:	0000024e 	.word	0x0000024e
 8007da8:	0000025f 	.word	0x0000025f
 8007dac:	00000281 	.word	0x00000281
 8007db0:	00000292 	.word	0x00000292
 8007db4:	000002a3 	.word	0x000002a3
 8007db8:	000002c5 	.word	0x000002c5
 8007dbc:	000002d6 	.word	0x000002d6
 8007dc0:	000002e7 	.word	0x000002e7
 8007dc4:	00000309 	.word	0x00000309
 8007dc8:	0000031a 	.word	0x0000031a
 8007dcc:	0000032b 	.word	0x0000032b
 8007dd0:	0000034d 	.word	0x0000034d
 8007dd4:	0000035e 	.word	0x0000035e
 8007dd8:	0000036f 	.word	0x0000036f
 8007ddc:	00000391 	.word	0x00000391
 8007de0:	000003a2 	.word	0x000003a2
 8007de4:	000003b3 	.word	0x000003b3
 8007de8:	20000314 	.word	0x20000314
 8007dec:	08007bef 	.word	0x08007bef

08007df0 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8007df0:	b510      	push	{r4, lr}
 8007df2:	1e01      	subs	r1, r0, #0
    // Restore nvm context
    if( seNvmCtx != 0 )
 8007df4:	d006      	beq.n	8007e04 <SecureElementRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8007df6:	22f1      	movs	r2, #241	; 0xf1
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	4803      	ldr	r0, [pc, #12]	; (8007e08 <SecureElementRestoreNvmCtx+0x18>)
 8007dfc:	f006 ff93 	bl	800ed26 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8007e00:	2000      	movs	r0, #0
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
}
 8007e02:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007e04:	2002      	movs	r0, #2
 8007e06:	e7fc      	b.n	8007e02 <SecureElementRestoreNvmCtx+0x12>
 8007e08:	20000318 	.word	0x20000318

08007e0c <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8007e0c:	23f1      	movs	r3, #241	; 0xf1
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8007e12:	4801      	ldr	r0, [pc, #4]	; (8007e18 <SecureElementGetNvmCtx+0xc>)
 8007e14:	4770      	bx	lr
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	20000318 	.word	0x20000318

08007e1c <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	b082      	sub	sp, #8
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8007e20:	2b7e      	cmp	r3, #126	; 0x7e
 8007e22:	d805      	bhi.n	8007e30 <SecureElementComputeAesCmac+0x14>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8007e24:	9c04      	ldr	r4, [sp, #16]
 8007e26:	9400      	str	r4, [sp, #0]
 8007e28:	f7ff ff06 	bl	8007c38 <ComputeCmac>
}
 8007e2c:	b002      	add	sp, #8
 8007e2e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007e30:	2003      	movs	r0, #3
 8007e32:	e7fb      	b.n	8007e2c <SecureElementComputeAesCmac+0x10>

08007e34 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8007e34:	b510      	push	{r4, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	0014      	movs	r4, r2
    if( buffer == NULL )
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d010      	beq.n	8007e60 <SecureElementVerifyAesCmac+0x2c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8007e3e:	2200      	movs	r2, #0
 8007e40:	9203      	str	r2, [sp, #12]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8007e42:	aa03      	add	r2, sp, #12
 8007e44:	9200      	str	r2, [sp, #0]
 8007e46:	000a      	movs	r2, r1
 8007e48:	0001      	movs	r1, r0
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f7ff fef4 	bl	8007c38 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d103      	bne.n	8007e5c <SecureElementVerifyAesCmac+0x28>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	42a3      	cmp	r3, r4
 8007e58:	d000      	beq.n	8007e5c <SecureElementVerifyAesCmac+0x28>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8007e5a:	2001      	movs	r0, #1
    }

    return retval;
}
 8007e5c:	b004      	add	sp, #16
 8007e5e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007e60:	2002      	movs	r0, #2
 8007e62:	e7fb      	b.n	8007e5c <SecureElementVerifyAesCmac+0x28>

08007e64 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8007e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e66:	46c6      	mov	lr, r8
 8007e68:	b500      	push	{lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	0006      	movs	r6, r0
 8007e6e:	000c      	movs	r4, r1
 8007e70:	0015      	movs	r5, r2
 8007e72:	001f      	movs	r7, r3
    if( buffer == NULL || encBuffer == NULL )
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d027      	beq.n	8007ec8 <SecureElementAesEncrypt+0x64>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d028      	beq.n	8007ece <SecureElementAesEncrypt+0x6a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8007e7c:	070b      	lsls	r3, r1, #28
 8007e7e:	d129      	bne.n	8007ed4 <SecureElementAesEncrypt+0x70>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8007e80:	22f0      	movs	r2, #240	; 0xf0
 8007e82:	2100      	movs	r1, #0
 8007e84:	4815      	ldr	r0, [pc, #84]	; (8007edc <SecureElementAesEncrypt+0x78>)
 8007e86:	f006 ff66 	bl	800ed56 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8007e8a:	a901      	add	r1, sp, #4
 8007e8c:	0028      	movs	r0, r5
 8007e8e:	f7ff feaf 	bl	8007bf0 <GetKeyByID>
 8007e92:	1e05      	subs	r5, r0, #0
 8007e94:	4680      	mov	r8, r0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007e96:	d004      	beq.n	8007ea2 <SecureElementAesEncrypt+0x3e>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8007e98:	4640      	mov	r0, r8
 8007e9a:	b002      	add	sp, #8
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	46b8      	mov	r8, r7
 8007ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	1c58      	adds	r0, r3, #1
 8007ea6:	4a0d      	ldr	r2, [pc, #52]	; (8007edc <SecureElementAesEncrypt+0x78>)
 8007ea8:	2110      	movs	r1, #16
 8007eaa:	f7ff fca5 	bl	80077f8 <aes_set_key>
        while( size != 0 )
 8007eae:	e008      	b.n	8007ec2 <SecureElementAesEncrypt+0x5e>
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8007eb0:	1970      	adds	r0, r6, r5
 8007eb2:	1979      	adds	r1, r7, r5
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <SecureElementAesEncrypt+0x78>)
 8007eb6:	f7ff fd33 	bl	8007920 <aes_encrypt>
            block = block + 16;
 8007eba:	3510      	adds	r5, #16
 8007ebc:	b2ed      	uxtb	r5, r5
            size = size - 16;
 8007ebe:	3c10      	subs	r4, #16
 8007ec0:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8007ec2:	2c00      	cmp	r4, #0
 8007ec4:	d1f4      	bne.n	8007eb0 <SecureElementAesEncrypt+0x4c>
 8007ec6:	e7e7      	b.n	8007e98 <SecureElementAesEncrypt+0x34>
        return SECURE_ELEMENT_ERROR_NPE;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	4698      	mov	r8, r3
 8007ecc:	e7e4      	b.n	8007e98 <SecureElementAesEncrypt+0x34>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	4698      	mov	r8, r3
 8007ed2:	e7e1      	b.n	8007e98 <SecureElementAesEncrypt+0x34>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007ed4:	2305      	movs	r3, #5
 8007ed6:	4698      	mov	r8, r3
 8007ed8:	e7de      	b.n	8007e98 <SecureElementAesEncrypt+0x34>
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	20000338 	.word	0x20000338

08007ee0 <SecureElementSetKey>:
{
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	1e0e      	subs	r6, r1, #0
    if( key == NULL )
 8007ee6:	d04e      	beq.n	8007f86 <SecureElementSetKey+0xa6>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b17      	cmp	r3, #23
 8007eec:	d847      	bhi.n	8007f7e <SecureElementSetKey+0x9e>
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8007eee:	001c      	movs	r4, r3
 8007ef0:	011d      	lsls	r5, r3, #4
 8007ef2:	18ed      	adds	r5, r5, r3
 8007ef4:	4a25      	ldr	r2, [pc, #148]	; (8007f8c <SecureElementSetKey+0xac>)
 8007ef6:	1952      	adds	r2, r2, r5
 8007ef8:	218b      	movs	r1, #139	; 0x8b
 8007efa:	0089      	lsls	r1, r1, #2
 8007efc:	468c      	mov	ip, r1
 8007efe:	4462      	add	r2, ip
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	4282      	cmp	r2, r0
 8007f04:	d002      	beq.n	8007f0c <SecureElementSetKey+0x2c>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007f06:	3301      	adds	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e7ee      	b.n	8007eea <SecureElementSetKey+0xa>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8007f0c:	2880      	cmp	r0, #128	; 0x80
 8007f0e:	d005      	beq.n	8007f1c <SecureElementSetKey+0x3c>
 8007f10:	2883      	cmp	r0, #131	; 0x83
 8007f12:	d003      	beq.n	8007f1c <SecureElementSetKey+0x3c>
 8007f14:	2886      	cmp	r0, #134	; 0x86
 8007f16:	d001      	beq.n	8007f1c <SecureElementSetKey+0x3c>
 8007f18:	2889      	cmp	r0, #137	; 0x89
 8007f1a:	d11e      	bne.n	8007f5a <SecureElementSetKey+0x7a>
                uint8_t decryptedKey[16] = { 0 };
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	220c      	movs	r2, #12
 8007f22:	2100      	movs	r1, #0
 8007f24:	a801      	add	r0, sp, #4
 8007f26:	f008 f82d 	bl	800ff84 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007f2a:	466b      	mov	r3, sp
 8007f2c:	227f      	movs	r2, #127	; 0x7f
 8007f2e:	2110      	movs	r1, #16
 8007f30:	0030      	movs	r0, r6
 8007f32:	f7ff ff97 	bl	8007e64 <SecureElementAesEncrypt>
 8007f36:	0005      	movs	r5, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8007f38:	0120      	lsls	r0, r4, #4
 8007f3a:	1900      	adds	r0, r0, r4
 8007f3c:	238a      	movs	r3, #138	; 0x8a
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	469c      	mov	ip, r3
 8007f42:	4460      	add	r0, ip
 8007f44:	4c11      	ldr	r4, [pc, #68]	; (8007f8c <SecureElementSetKey+0xac>)
 8007f46:	1900      	adds	r0, r0, r4
 8007f48:	3005      	adds	r0, #5
 8007f4a:	2210      	movs	r2, #16
 8007f4c:	4669      	mov	r1, sp
 8007f4e:	f006 feea 	bl	800ed26 <memcpy1>
                SeNvmCtxChanged( );
 8007f52:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <SecureElementSetKey+0xb0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4798      	blx	r3
                return retval;
 8007f58:	e012      	b.n	8007f80 <SecureElementSetKey+0xa0>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8007f5a:	0118      	lsls	r0, r3, #4
 8007f5c:	18c0      	adds	r0, r0, r3
 8007f5e:	238a      	movs	r3, #138	; 0x8a
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	469c      	mov	ip, r3
 8007f64:	4460      	add	r0, ip
 8007f66:	4c09      	ldr	r4, [pc, #36]	; (8007f8c <SecureElementSetKey+0xac>)
 8007f68:	1900      	adds	r0, r0, r4
 8007f6a:	3005      	adds	r0, #5
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	0031      	movs	r1, r6
 8007f70:	f006 fed9 	bl	800ed26 <memcpy1>
                SeNvmCtxChanged( );
 8007f74:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <SecureElementSetKey+0xb0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	e000      	b.n	8007f80 <SecureElementSetKey+0xa0>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007f7e:	2503      	movs	r5, #3
}
 8007f80:	0028      	movs	r0, r5
 8007f82:	b004      	add	sp, #16
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007f86:	2502      	movs	r5, #2
 8007f88:	e7fa      	b.n	8007f80 <SecureElementSetKey+0xa0>
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	20000318 	.word	0x20000318
 8007f90:	20000314 	.word	0x20000314

08007f94 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f96:	b085      	sub	sp, #20
 8007f98:	0006      	movs	r6, r0
 8007f9a:	000c      	movs	r4, r1
 8007f9c:	0015      	movs	r5, r2
 8007f9e:	001f      	movs	r7, r3
    if( input == NULL )
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	d01e      	beq.n	8007fe2 <SecureElementDeriveAndStoreKey+0x4e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	220c      	movs	r2, #12
 8007faa:	2100      	movs	r1, #0
 8007fac:	a801      	add	r0, sp, #4
 8007fae:	f007 ffe9 	bl	800ff84 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8007fb2:	2f7f      	cmp	r7, #127	; 0x7f
 8007fb4:	d106      	bne.n	8007fc4 <SecureElementDeriveAndStoreKey+0x30>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	d102      	bne.n	8007fc0 <SecureElementDeriveAndStoreKey+0x2c>
 8007fba:	0236      	lsls	r6, r6, #8
 8007fbc:	0e36      	lsrs	r6, r6, #24
 8007fbe:	d012      	beq.n	8007fe6 <SecureElementDeriveAndStoreKey+0x52>
 8007fc0:	2d02      	cmp	r5, #2
 8007fc2:	d012      	beq.n	8007fea <SecureElementDeriveAndStoreKey+0x56>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8007fc4:	466b      	mov	r3, sp
 8007fc6:	002a      	movs	r2, r5
 8007fc8:	2110      	movs	r1, #16
 8007fca:	0020      	movs	r0, r4
 8007fcc:	f7ff ff4a 	bl	8007e64 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d001      	beq.n	8007fd8 <SecureElementDeriveAndStoreKey+0x44>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007fd4:	b005      	add	sp, #20
 8007fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8007fd8:	4669      	mov	r1, sp
 8007fda:	0038      	movs	r0, r7
 8007fdc:	f7ff ff80 	bl	8007ee0 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007fe0:	e7f8      	b.n	8007fd4 <SecureElementDeriveAndStoreKey+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
 8007fe2:	2002      	movs	r0, #2
 8007fe4:	e7f6      	b.n	8007fd4 <SecureElementDeriveAndStoreKey+0x40>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007fe6:	2003      	movs	r0, #3
 8007fe8:	e7f4      	b.n	8007fd4 <SecureElementDeriveAndStoreKey+0x40>
 8007fea:	2003      	movs	r0, #3
 8007fec:	e7f2      	b.n	8007fd4 <SecureElementDeriveAndStoreKey+0x40>
	...

08007ff0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	1e04      	subs	r4, r0, #0
    if( randomNum == NULL )
 8007ff4:	d005      	beq.n	8008002 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random( );
 8007ff6:	4b04      	ldr	r3, [pc, #16]	; (8008008 <SecureElementRandomNumber+0x18>)
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	4798      	blx	r3
 8007ffc:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8007ffe:	2000      	movs	r0, #0
}
 8008000:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8008002:	2002      	movs	r0, #2
 8008004:	e7fc      	b.n	8008000 <SecureElementRandomNumber+0x10>
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	08010b84 	.word	0x08010b84

0800800c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800800c:	b510      	push	{r4, lr}
 800800e:	1e01      	subs	r1, r0, #0
    if( devEui == NULL )
 8008010:	d008      	beq.n	8008024 <SecureElementSetDevEui+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 8008012:	2210      	movs	r2, #16
 8008014:	4804      	ldr	r0, [pc, #16]	; (8008028 <SecureElementSetDevEui+0x1c>)
 8008016:	f006 fe86 	bl	800ed26 <memcpy1>
    SeNvmCtxChanged( );
 800801a:	4b04      	ldr	r3, [pc, #16]	; (800802c <SecureElementSetDevEui+0x20>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8008020:	2000      	movs	r0, #0
}
 8008022:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8008024:	2002      	movs	r0, #2
 8008026:	e7fc      	b.n	8008022 <SecureElementSetDevEui+0x16>
 8008028:	20000318 	.word	0x20000318
 800802c:	20000314 	.word	0x20000314

08008030 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 8008030:	4800      	ldr	r0, [pc, #0]	; (8008034 <SecureElementGetDevEui+0x4>)
 8008032:	4770      	bx	lr
 8008034:	20000318 	.word	0x20000318

08008038 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8008038:	b510      	push	{r4, lr}
 800803a:	1e01      	subs	r1, r0, #0
    if( joinEui == NULL )
 800803c:	d008      	beq.n	8008050 <SecureElementSetJoinEui+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 800803e:	2210      	movs	r2, #16
 8008040:	4804      	ldr	r0, [pc, #16]	; (8008054 <SecureElementSetJoinEui+0x1c>)
 8008042:	f006 fe70 	bl	800ed26 <memcpy1>
    SeNvmCtxChanged( );
 8008046:	4b04      	ldr	r3, [pc, #16]	; (8008058 <SecureElementSetJoinEui+0x20>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800804c:	2000      	movs	r0, #0
}
 800804e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8008050:	2002      	movs	r0, #2
 8008052:	e7fc      	b.n	800804e <SecureElementSetJoinEui+0x16>
 8008054:	20000328 	.word	0x20000328
 8008058:	20000314 	.word	0x20000314

0800805c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 800805c:	4800      	ldr	r0, [pc, #0]	; (8008060 <SecureElementGetJoinEui+0x4>)
 800805e:	4770      	bx	lr
 8008060:	20000328 	.word	0x20000328

08008064 <OnRadioRxError>:
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
#endif
}

static void OnRadioRxError( void )
{
 8008064:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008066:	4a08      	ldr	r2, [pc, #32]	; (8008088 <OnRadioRxError+0x24>)
 8008068:	7813      	ldrb	r3, [r2, #0]
 800806a:	2102      	movs	r1, #2
 800806c:	430b      	orrs	r3, r1
 800806e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008070:	4a06      	ldr	r2, [pc, #24]	; (800808c <OnRadioRxError+0x28>)
 8008072:	23d2      	movs	r3, #210	; 0xd2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	58d3      	ldr	r3, [r2, r3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <OnRadioRxError+0x20>
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d000      	beq.n	8008084 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008082:	4798      	blx	r3
    }
}
 8008084:	bd10      	pop	{r4, pc}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	200006dc 	.word	0x200006dc
 800808c:	200008bc 	.word	0x200008bc

08008090 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008090:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <UpdateRxSlotIdleState+0x28>)
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <UpdateRxSlotIdleState+0x2c>)
 8008094:	58d2      	ldr	r2, [r2, r3]
 8008096:	23f0      	movs	r3, #240	; 0xf0
 8008098:	5cd3      	ldrb	r3, [r2, r3]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d005      	beq.n	80080aa <UpdateRxSlotIdleState+0x1a>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800809e:	4a06      	ldr	r2, [pc, #24]	; (80080b8 <UpdateRxSlotIdleState+0x28>)
 80080a0:	2390      	movs	r3, #144	; 0x90
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	2106      	movs	r1, #6
 80080a6:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80080a8:	4770      	bx	lr
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80080aa:	4a03      	ldr	r2, [pc, #12]	; (80080b8 <UpdateRxSlotIdleState+0x28>)
 80080ac:	2390      	movs	r3, #144	; 0x90
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	2102      	movs	r1, #2
 80080b2:	54d1      	strb	r1, [r2, r3]
}
 80080b4:	e7f8      	b.n	80080a8 <UpdateRxSlotIdleState+0x18>
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	200008bc 	.word	0x200008bc
 80080bc:	00000484 	.word	0x00000484

080080c0 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80080c0:	4a01      	ldr	r2, [pc, #4]	; (80080c8 <LoRaMacEnableRequests+0x8>)
 80080c2:	4b02      	ldr	r3, [pc, #8]	; (80080cc <LoRaMacEnableRequests+0xc>)
 80080c4:	54d0      	strb	r0, [r2, r3]
}
 80080c6:	4770      	bx	lr
 80080c8:	200008bc 	.word	0x200008bc
 80080cc:	00000482 	.word	0x00000482

080080d0 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80080d0:	b510      	push	{r4, lr}
 80080d2:	b088      	sub	sp, #32
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80080d4:	4a1e      	ldr	r2, [pc, #120]	; (8008150 <LoRaMacHandleIndicationEvents+0x80>)
 80080d6:	4b1f      	ldr	r3, [pc, #124]	; (8008154 <LoRaMacHandleIndicationEvents+0x84>)
 80080d8:	5cd3      	ldrb	r3, [r2, r3]
 80080da:	071b      	lsls	r3, r3, #28
 80080dc:	d50d      	bpl.n	80080fa <LoRaMacHandleIndicationEvents+0x2a>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80080de:	0010      	movs	r0, r2
 80080e0:	4a1c      	ldr	r2, [pc, #112]	; (8008154 <LoRaMacHandleIndicationEvents+0x84>)
 80080e2:	5c83      	ldrb	r3, [r0, r2]
 80080e4:	2108      	movs	r1, #8
 80080e6:	438b      	bics	r3, r1
 80080e8:	5483      	strb	r3, [r0, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80080ea:	23d1      	movs	r3, #209	; 0xd1
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	58c3      	ldr	r3, [r0, r3]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	4a19      	ldr	r2, [pc, #100]	; (8008158 <LoRaMacHandleIndicationEvents+0x88>)
 80080f4:	4694      	mov	ip, r2
 80080f6:	4460      	add	r0, ip
 80080f8:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80080fa:	4a15      	ldr	r2, [pc, #84]	; (8008150 <LoRaMacHandleIndicationEvents+0x80>)
 80080fc:	4b15      	ldr	r3, [pc, #84]	; (8008154 <LoRaMacHandleIndicationEvents+0x84>)
 80080fe:	5cd3      	ldrb	r3, [r2, r3]
 8008100:	06db      	lsls	r3, r3, #27
 8008102:	d510      	bpl.n	8008126 <LoRaMacHandleIndicationEvents+0x56>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008104:	2306      	movs	r3, #6
 8008106:	466a      	mov	r2, sp
 8008108:	7113      	strb	r3, [r2, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	7153      	strb	r3, [r2, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800810e:	4c10      	ldr	r4, [pc, #64]	; (8008150 <LoRaMacHandleIndicationEvents+0x80>)
 8008110:	23d1      	movs	r3, #209	; 0xd1
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58e3      	ldr	r3, [r4, r3]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	a801      	add	r0, sp, #4
 800811a:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800811c:	4a0d      	ldr	r2, [pc, #52]	; (8008154 <LoRaMacHandleIndicationEvents+0x84>)
 800811e:	5ca3      	ldrb	r3, [r4, r2]
 8008120:	2110      	movs	r1, #16
 8008122:	438b      	bics	r3, r1
 8008124:	54a3      	strb	r3, [r4, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008126:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <LoRaMacHandleIndicationEvents+0x80>)
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <LoRaMacHandleIndicationEvents+0x84>)
 800812a:	5cd3      	ldrb	r3, [r2, r3]
 800812c:	079b      	lsls	r3, r3, #30
 800812e:	d50d      	bpl.n	800814c <LoRaMacHandleIndicationEvents+0x7c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008130:	0010      	movs	r0, r2
 8008132:	4a08      	ldr	r2, [pc, #32]	; (8008154 <LoRaMacHandleIndicationEvents+0x84>)
 8008134:	5c83      	ldrb	r3, [r0, r2]
 8008136:	2102      	movs	r1, #2
 8008138:	438b      	bics	r3, r1
 800813a:	5483      	strb	r3, [r0, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800813c:	23d1      	movs	r3, #209	; 0xd1
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	58c3      	ldr	r3, [r0, r3]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4a05      	ldr	r2, [pc, #20]	; (800815c <LoRaMacHandleIndicationEvents+0x8c>)
 8008146:	4694      	mov	ip, r2
 8008148:	4460      	add	r0, ip
 800814a:	4798      	blx	r3
    }
}
 800814c:	b008      	add	sp, #32
 800814e:	bd10      	pop	{r4, pc}
 8008150:	200008bc 	.word	0x200008bc
 8008154:	00000481 	.word	0x00000481
 8008158:	00000464 	.word	0x00000464
 800815c:	0000041c 	.word	0x0000041c

08008160 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008160:	4a07      	ldr	r2, [pc, #28]	; (8008180 <LoRaMacCheckForRxAbort+0x20>)
 8008162:	23d0      	movs	r3, #208	; 0xd0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	58d3      	ldr	r3, [r2, r3]
 8008168:	061a      	lsls	r2, r3, #24
 800816a:	d507      	bpl.n	800817c <LoRaMacCheckForRxAbort+0x1c>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800816c:	2280      	movs	r2, #128	; 0x80
 800816e:	4393      	bics	r3, r2
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008170:	3a7e      	subs	r2, #126	; 0x7e
 8008172:	4393      	bics	r3, r2
 8008174:	4902      	ldr	r1, [pc, #8]	; (8008180 <LoRaMacCheckForRxAbort+0x20>)
 8008176:	22d0      	movs	r2, #208	; 0xd0
 8008178:	0092      	lsls	r2, r2, #2
 800817a:	508b      	str	r3, [r1, r2]
    }
}
 800817c:	4770      	bx	lr
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	200008bc 	.word	0x200008bc

08008184 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008184:	4903      	ldr	r1, [pc, #12]	; (8008194 <SetMlmeScheduleUplinkIndication+0x10>)
 8008186:	4a04      	ldr	r2, [pc, #16]	; (8008198 <SetMlmeScheduleUplinkIndication+0x14>)
 8008188:	5c8b      	ldrb	r3, [r1, r2]
 800818a:	2010      	movs	r0, #16
 800818c:	4303      	orrs	r3, r0
 800818e:	548b      	strb	r3, [r1, r2]
}
 8008190:	4770      	bx	lr
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	200008bc 	.word	0x200008bc
 8008198:	00000481 	.word	0x00000481

0800819c <CheckRetransUnconfirmedUplink>:
}

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800819c:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <CheckRetransUnconfirmedUplink+0x44>)
 800819e:	2282      	movs	r2, #130	; 0x82
 80081a0:	00d2      	lsls	r2, r2, #3
 80081a2:	5c99      	ldrb	r1, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80081a4:	4a0f      	ldr	r2, [pc, #60]	; (80081e4 <CheckRetransUnconfirmedUplink+0x48>)
 80081a6:	589b      	ldr	r3, [r3, r2]
 80081a8:	228c      	movs	r2, #140	; 0x8c
 80081aa:	0052      	lsls	r2, r2, #1
 80081ac:	5c9a      	ldrb	r2, [r3, r2]
    if( MacCtx.ChannelsNbTransCounter >=
 80081ae:	4291      	cmp	r1, r2
 80081b0:	d20e      	bcs.n	80081d0 <CheckRetransUnconfirmedUplink+0x34>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80081b2:	490b      	ldr	r1, [pc, #44]	; (80081e0 <CheckRetransUnconfirmedUplink+0x44>)
 80081b4:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <CheckRetransUnconfirmedUplink+0x4c>)
 80081b6:	5c8a      	ldrb	r2, [r1, r2]
 80081b8:	0792      	lsls	r2, r2, #30
 80081ba:	d50b      	bpl.n	80081d4 <CheckRetransUnconfirmedUplink+0x38>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80081bc:	22f0      	movs	r2, #240	; 0xf0
 80081be:	5c9b      	ldrb	r3, [r3, r2]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d009      	beq.n	80081d8 <CheckRetransUnconfirmedUplink+0x3c>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 80081c4:	4b09      	ldr	r3, [pc, #36]	; (80081ec <CheckRetransUnconfirmedUplink+0x50>)
 80081c6:	5ccb      	ldrb	r3, [r1, r3]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <CheckRetransUnconfirmedUplink+0x40>
            {
                return true;
            }
        }
    }
    return false;
 80081cc:	2000      	movs	r0, #0
 80081ce:	e000      	b.n	80081d2 <CheckRetransUnconfirmedUplink+0x36>
        return true;
 80081d0:	2001      	movs	r0, #1
}
 80081d2:	4770      	bx	lr
    return false;
 80081d4:	2000      	movs	r0, #0
 80081d6:	e7fc      	b.n	80081d2 <CheckRetransUnconfirmedUplink+0x36>
            return true;
 80081d8:	2001      	movs	r0, #1
 80081da:	e7fa      	b.n	80081d2 <CheckRetransUnconfirmedUplink+0x36>
                return true;
 80081dc:	2001      	movs	r0, #1
 80081de:	e7f8      	b.n	80081d2 <CheckRetransUnconfirmedUplink+0x36>
 80081e0:	200008bc 	.word	0x200008bc
 80081e4:	00000484 	.word	0x00000484
 80081e8:	00000481 	.word	0x00000481
 80081ec:	0000042d 	.word	0x0000042d

080081f0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80081f0:	4b09      	ldr	r3, [pc, #36]	; (8008218 <CheckRetransConfirmedUplink+0x28>)
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <CheckRetransConfirmedUplink+0x2c>)
 80081f4:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 80081f6:	490a      	ldr	r1, [pc, #40]	; (8008220 <CheckRetransConfirmedUplink+0x30>)
 80081f8:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d208      	bcs.n	8008210 <CheckRetransConfirmedUplink+0x20>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80081fe:	4a06      	ldr	r2, [pc, #24]	; (8008218 <CheckRetransConfirmedUplink+0x28>)
 8008200:	4b08      	ldr	r3, [pc, #32]	; (8008224 <CheckRetransConfirmedUplink+0x34>)
 8008202:	5cd3      	ldrb	r3, [r2, r3]
 8008204:	079b      	lsls	r3, r3, #30
 8008206:	d505      	bpl.n	8008214 <CheckRetransConfirmedUplink+0x24>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008208:	2388      	movs	r3, #136	; 0x88
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	5cd0      	ldrb	r0, [r2, r3]
 800820e:	e000      	b.n	8008212 <CheckRetransConfirmedUplink+0x22>
        return true;
 8008210:	2001      	movs	r0, #1
        {
            return true;
        }
    }
    return false;
}
 8008212:	4770      	bx	lr
    return false;
 8008214:	2000      	movs	r0, #0
 8008216:	e7fc      	b.n	8008212 <CheckRetransConfirmedUplink+0x22>
 8008218:	200008bc 	.word	0x200008bc
 800821c:	00000412 	.word	0x00000412
 8008220:	00000411 	.word	0x00000411
 8008224:	00000481 	.word	0x00000481

08008228 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008228:	4a11      	ldr	r2, [pc, #68]	; (8008270 <StopRetransmission+0x48>)
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <StopRetransmission+0x4c>)
 800822c:	5cd3      	ldrb	r3, [r2, r3]
 800822e:	079b      	lsls	r3, r3, #30
 8008230:	d503      	bpl.n	800823a <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8008232:	4b11      	ldr	r3, [pc, #68]	; (8008278 <StopRetransmission+0x50>)
 8008234:	5cd3      	ldrb	r3, [r2, r3]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008236:	2b01      	cmp	r3, #1
 8008238:	d90a      	bls.n	8008250 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800823a:	4a0d      	ldr	r2, [pc, #52]	; (8008270 <StopRetransmission+0x48>)
 800823c:	4b0f      	ldr	r3, [pc, #60]	; (800827c <StopRetransmission+0x54>)
 800823e:	58d3      	ldr	r3, [r2, r3]
 8008240:	22f2      	movs	r2, #242	; 0xf2
 8008242:	5c9a      	ldrb	r2, [r3, r2]
 8008244:	2a00      	cmp	r2, #0
 8008246:	d003      	beq.n	8008250 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8008248:	21f4      	movs	r1, #244	; 0xf4
 800824a:	585a      	ldr	r2, [r3, r1]
 800824c:	3201      	adds	r2, #1
 800824e:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <StopRetransmission+0x48>)
 8008252:	2200      	movs	r2, #0
 8008254:	2182      	movs	r1, #130	; 0x82
 8008256:	00c9      	lsls	r1, r1, #3
 8008258:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 800825a:	4909      	ldr	r1, [pc, #36]	; (8008280 <StopRetransmission+0x58>)
 800825c:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 800825e:	4909      	ldr	r1, [pc, #36]	; (8008284 <StopRetransmission+0x5c>)
 8008260:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008262:	39d3      	subs	r1, #211	; 0xd3
 8008264:	3202      	adds	r2, #2
 8008266:	5858      	ldr	r0, [r3, r1]
 8008268:	4390      	bics	r0, r2
 800826a:	5058      	str	r0, [r3, r1]

    return true;
}
 800826c:	2001      	movs	r0, #1
 800826e:	4770      	bx	lr
 8008270:	200008bc 	.word	0x200008bc
 8008274:	00000481 	.word	0x00000481
 8008278:	0000042d 	.word	0x0000042d
 800827c:	00000484 	.word	0x00000484
 8008280:	00000414 	.word	0x00000414
 8008284:	00000413 	.word	0x00000413

08008288 <CallNvmCtxCallback>:
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8008288:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800828a:	4a05      	ldr	r2, [pc, #20]	; (80082a0 <CallNvmCtxCallback+0x18>)
 800828c:	23d2      	movs	r3, #210	; 0xd2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	58d3      	ldr	r3, [r2, r3]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <CallNvmCtxCallback+0x16>
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d000      	beq.n	800829e <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800829c:	4798      	blx	r3
    }
}
 800829e:	bd10      	pop	{r4, pc}
 80082a0:	200008bc 	.word	0x200008bc

080082a4 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 80082a4:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7ff ffee 	bl	8008288 <CallNvmCtxCallback>
}
 80082ac:	bd10      	pop	{r4, pc}

080082ae <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 80082ae:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80082b0:	2001      	movs	r0, #1
 80082b2:	f7ff ffe9 	bl	8008288 <CallNvmCtxCallback>
}
 80082b6:	bd10      	pop	{r4, pc}

080082b8 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 80082b8:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 80082ba:	2002      	movs	r0, #2
 80082bc:	f7ff ffe4 	bl	8008288 <CallNvmCtxCallback>
}
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 80082c2:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 80082c4:	2003      	movs	r0, #3
 80082c6:	f7ff ffdf 	bl	8008288 <CallNvmCtxCallback>
}
 80082ca:	bd10      	pop	{r4, pc}

080082cc <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 80082cc:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80082ce:	2004      	movs	r0, #4
 80082d0:	f7ff ffda 	bl	8008288 <CallNvmCtxCallback>
}
 80082d4:	bd10      	pop	{r4, pc}

080082d6 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 80082d6:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80082d8:	2005      	movs	r0, #5
 80082da:	f7ff ffd5 	bl	8008288 <CallNvmCtxCallback>
}
 80082de:	bd10      	pop	{r4, pc}

080082e0 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 80082e0:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80082e2:	2006      	movs	r0, #6
 80082e4:	f7ff ffd0 	bl	8008288 <CallNvmCtxCallback>
}
 80082e8:	bd10      	pop	{r4, pc}
	...

080082ec <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <IsRequestPending+0x18>)
 80082ee:	4b06      	ldr	r3, [pc, #24]	; (8008308 <IsRequestPending+0x1c>)
 80082f0:	5cd3      	ldrb	r3, [r2, r3]
 80082f2:	2205      	movs	r2, #5
 80082f4:	0010      	movs	r0, r2
 80082f6:	4018      	ands	r0, r3
 80082f8:	421a      	tst	r2, r3
 80082fa:	d100      	bne.n	80082fe <IsRequestPending+0x12>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 80082fc:	4770      	bx	lr
        return 1;
 80082fe:	2001      	movs	r0, #1
 8008300:	e7fc      	b.n	80082fc <IsRequestPending+0x10>
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	200008bc 	.word	0x200008bc
 8008308:	00000481 	.word	0x00000481

0800830c <AckTimeoutRetriesProcess>:
{
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	b082      	sub	sp, #8
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8008310:	4a11      	ldr	r2, [pc, #68]	; (8008358 <AckTimeoutRetriesProcess+0x4c>)
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <AckTimeoutRetriesProcess+0x50>)
 8008314:	5cd3      	ldrb	r3, [r2, r3]
 8008316:	4912      	ldr	r1, [pc, #72]	; (8008360 <AckTimeoutRetriesProcess+0x54>)
 8008318:	5c52      	ldrb	r2, [r2, r1]
 800831a:	4293      	cmp	r3, r2
 800831c:	d206      	bcs.n	800832c <AckTimeoutRetriesProcess+0x20>
        MacCtx.AckTimeoutRetriesCounter++;
 800831e:	3301      	adds	r3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	490d      	ldr	r1, [pc, #52]	; (8008358 <AckTimeoutRetriesProcess+0x4c>)
 8008324:	4a0d      	ldr	r2, [pc, #52]	; (800835c <AckTimeoutRetriesProcess+0x50>)
 8008326:	548b      	strb	r3, [r1, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d401      	bmi.n	8008330 <AckTimeoutRetriesProcess+0x24>
}
 800832c:	b002      	add	sp, #8
 800832e:	bd70      	pop	{r4, r5, r6, pc}
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008330:	2322      	movs	r3, #34	; 0x22
 8008332:	466a      	mov	r2, sp
 8008334:	7013      	strb	r3, [r2, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008336:	000e      	movs	r6, r1
 8008338:	4d0a      	ldr	r5, [pc, #40]	; (8008364 <AckTimeoutRetriesProcess+0x58>)
 800833a:	594b      	ldr	r3, [r1, r5]
 800833c:	2296      	movs	r2, #150	; 0x96
 800833e:	0052      	lsls	r2, r2, #1
 8008340:	5c9a      	ldrb	r2, [r3, r2]
 8008342:	4669      	mov	r1, sp
 8008344:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008346:	24f9      	movs	r4, #249	; 0xf9
 8008348:	571a      	ldrsb	r2, [r3, r4]
 800834a:	704a      	strb	r2, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800834c:	7818      	ldrb	r0, [r3, #0]
 800834e:	f004 fc46 	bl	800cbde <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8008352:	5973      	ldr	r3, [r6, r5]
 8008354:	5518      	strb	r0, [r3, r4]
}
 8008356:	e7e9      	b.n	800832c <AckTimeoutRetriesProcess+0x20>
 8008358:	200008bc 	.word	0x200008bc
 800835c:	00000412 	.word	0x00000412
 8008360:	00000411 	.word	0x00000411
 8008364:	00000484 	.word	0x00000484

08008368 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008368:	b500      	push	{lr}
 800836a:	b083      	sub	sp, #12
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800836c:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 800836e:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008370:	58d3      	ldr	r3, [r2, r3]
 8008372:	2296      	movs	r2, #150	; 0x96
 8008374:	0052      	lsls	r2, r2, #1
 8008376:	5c99      	ldrb	r1, [r3, r2]
 8008378:	aa01      	add	r2, sp, #4
 800837a:	7091      	strb	r1, [r2, #2]
    getPhy.Datarate = datarate;
 800837c:	7050      	strb	r0, [r2, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800837e:	210d      	movs	r1, #13
 8008380:	7011      	strb	r1, [r2, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8008382:	2240      	movs	r2, #64	; 0x40
 8008384:	32ff      	adds	r2, #255	; 0xff
 8008386:	5c9a      	ldrb	r2, [r3, r2]
 8008388:	2a00      	cmp	r2, #0
 800838a:	d002      	beq.n	8008392 <GetMaxAppPayloadWithoutFOptsLength+0x2a>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800838c:	aa01      	add	r2, sp, #4
 800838e:	3101      	adds	r1, #1
 8008390:	7011      	strb	r1, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008392:	7818      	ldrb	r0, [r3, #0]
 8008394:	a901      	add	r1, sp, #4
 8008396:	f004 fc22 	bl	800cbde <RegionGetPhyParam>
    return phyParam.Value;
 800839a:	b2c0      	uxtb	r0, r0
}
 800839c:	b003      	add	sp, #12
 800839e:	bd00      	pop	{pc}
 80083a0:	200008bc 	.word	0x200008bc
 80083a4:	00000484 	.word	0x00000484

080083a8 <ValidatePayloadLength>:
{
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	0005      	movs	r5, r0
 80083ac:	0008      	movs	r0, r1
 80083ae:	0014      	movs	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80083b0:	f7ff ffda 	bl	8008368 <GetMaxAppPayloadWithoutFOptsLength>
 80083b4:	b280      	uxth	r0, r0
    payloadSize = ( lenN + fOptsLen );
 80083b6:	1964      	adds	r4, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d303      	bcc.n	80083c4 <ValidatePayloadLength+0x1c>
 80083bc:	2cff      	cmp	r4, #255	; 0xff
 80083be:	d903      	bls.n	80083c8 <ValidatePayloadLength+0x20>
    return false;
 80083c0:	2000      	movs	r0, #0
 80083c2:	e000      	b.n	80083c6 <ValidatePayloadLength+0x1e>
 80083c4:	2000      	movs	r0, #0
}
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7fc      	b.n	80083c6 <ValidatePayloadLength+0x1e>

080083cc <ProcessRadioTxDone>:
{
 80083cc:	b530      	push	{r4, r5, lr}
 80083ce:	b085      	sub	sp, #20
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80083d0:	4a36      	ldr	r2, [pc, #216]	; (80084ac <ProcessRadioTxDone+0xe0>)
 80083d2:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <ProcessRadioTxDone+0xe4>)
 80083d4:	58d2      	ldr	r2, [r2, r3]
 80083d6:	23f0      	movs	r3, #240	; 0xf0
 80083d8:	5cd3      	ldrb	r3, [r2, r3]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d002      	beq.n	80083e4 <ProcessRadioTxDone+0x18>
        Radio.Sleep( );
 80083de:	4b35      	ldr	r3, [pc, #212]	; (80084b4 <ProcessRadioTxDone+0xe8>)
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80083e4:	4c31      	ldr	r4, [pc, #196]	; (80084ac <ProcessRadioTxDone+0xe0>)
 80083e6:	23ec      	movs	r3, #236	; 0xec
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	58e1      	ldr	r1, [r4, r3]
 80083ec:	3b30      	subs	r3, #48	; 0x30
 80083ee:	18e5      	adds	r5, r4, r3
 80083f0:	0028      	movs	r0, r5
 80083f2:	f006 fbcd 	bl	800eb90 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80083f6:	0028      	movs	r0, r5
 80083f8:	f006 fb08 	bl	800ea0c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80083fc:	23ed      	movs	r3, #237	; 0xed
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	58e1      	ldr	r1, [r4, r3]
 8008402:	3b1c      	subs	r3, #28
 8008404:	18e5      	adds	r5, r4, r3
 8008406:	0028      	movs	r0, r5
 8008408:	f006 fbc2 	bl	800eb90 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800840c:	0028      	movs	r0, r5
 800840e:	f006 fafd 	bl	800ea0c <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008412:	4b27      	ldr	r3, [pc, #156]	; (80084b0 <ProcessRadioTxDone+0xe4>)
 8008414:	58e3      	ldr	r3, [r4, r3]
 8008416:	22f0      	movs	r2, #240	; 0xf0
 8008418:	5c9a      	ldrb	r2, [r3, r2]
 800841a:	2a02      	cmp	r2, #2
 800841c:	d004      	beq.n	8008428 <ProcessRadioTxDone+0x5c>
 800841e:	4923      	ldr	r1, [pc, #140]	; (80084ac <ProcessRadioTxDone+0xe0>)
 8008420:	4a25      	ldr	r2, [pc, #148]	; (80084b8 <ProcessRadioTxDone+0xec>)
 8008422:	5c8a      	ldrb	r2, [r1, r2]
 8008424:	2a00      	cmp	r2, #0
 8008426:	d014      	beq.n	8008452 <ProcessRadioTxDone+0x86>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008428:	a903      	add	r1, sp, #12
 800842a:	2216      	movs	r2, #22
 800842c:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800842e:	7818      	ldrb	r0, [r3, #0]
 8008430:	f004 fbd5 	bl	800cbde <RegionGetPhyParam>
 8008434:	9002      	str	r0, [sp, #8]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008436:	4c1d      	ldr	r4, [pc, #116]	; (80084ac <ProcessRadioTxDone+0xe0>)
 8008438:	23ed      	movs	r3, #237	; 0xed
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	58e1      	ldr	r1, [r4, r3]
 800843e:	1809      	adds	r1, r1, r0
 8008440:	3344      	adds	r3, #68	; 0x44
 8008442:	469c      	mov	ip, r3
 8008444:	4464      	add	r4, ip
 8008446:	0020      	movs	r0, r4
 8008448:	f006 fba2 	bl	800eb90 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800844c:	0020      	movs	r0, r4
 800844e:	f006 fadd 	bl	800ea0c <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8008452:	4b16      	ldr	r3, [pc, #88]	; (80084ac <ProcessRadioTxDone+0xe0>)
 8008454:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <ProcessRadioTxDone+0xe4>)
 8008456:	4919      	ldr	r1, [pc, #100]	; (80084bc <ProcessRadioTxDone+0xf0>)
 8008458:	5c59      	ldrb	r1, [r3, r1]
 800845a:	209f      	movs	r0, #159	; 0x9f
 800845c:	0040      	lsls	r0, r0, #1
 800845e:	589c      	ldr	r4, [r3, r2]
 8008460:	5421      	strb	r1, [r4, r0]
    txDone.Channel = MacCtx.Channel;
 8008462:	4668      	mov	r0, sp
 8008464:	7001      	strb	r1, [r0, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008466:	589b      	ldr	r3, [r3, r2]
 8008468:	22ea      	movs	r2, #234	; 0xea
 800846a:	0052      	lsls	r2, r2, #1
 800846c:	5c9a      	ldrb	r2, [r3, r2]
 800846e:	2a00      	cmp	r2, #0
 8008470:	d118      	bne.n	80084a4 <ProcessRadioTxDone+0xd8>
        txDone.Joined  = false;
 8008472:	7042      	strb	r2, [r0, #1]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008474:	4c12      	ldr	r4, [pc, #72]	; (80084c0 <ProcessRadioTxDone+0xf4>)
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	9201      	str	r2, [sp, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800847a:	7818      	ldrb	r0, [r3, #0]
 800847c:	4669      	mov	r1, sp
 800847e:	f004 fbbe 	bl	800cbfe <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8008482:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <ProcessRadioTxDone+0xe0>)
 8008484:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <ProcessRadioTxDone+0xe4>)
 8008486:	5899      	ldr	r1, [r3, r2]
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	22e2      	movs	r2, #226	; 0xe2
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	5088      	str	r0, [r1, r2]
    if( MacCtx.NodeAckRequested == false )
 8008490:	4a09      	ldr	r2, [pc, #36]	; (80084b8 <ProcessRadioTxDone+0xec>)
 8008492:	5c9b      	ldrb	r3, [r3, r2]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <ProcessRadioTxDone+0xd4>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008498:	4a04      	ldr	r2, [pc, #16]	; (80084ac <ProcessRadioTxDone+0xe0>)
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <ProcessRadioTxDone+0xf8>)
 800849c:	2100      	movs	r1, #0
 800849e:	54d1      	strb	r1, [r2, r3]
}
 80084a0:	b005      	add	sp, #20
 80084a2:	bd30      	pop	{r4, r5, pc}
        txDone.Joined  = true;
 80084a4:	2201      	movs	r2, #1
 80084a6:	7042      	strb	r2, [r0, #1]
 80084a8:	e7e4      	b.n	8008474 <ProcessRadioTxDone+0xa8>
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	200008bc 	.word	0x200008bc
 80084b0:	00000484 	.word	0x00000484
 80084b4:	08010b84 	.word	0x08010b84
 80084b8:	00000414 	.word	0x00000414
 80084bc:	00000415 	.word	0x00000415
 80084c0:	200015c8 	.word	0x200015c8
 80084c4:	0000043d 	.word	0x0000043d

080084c8 <OnAckTimeoutTimerEvent>:
{
 80084c8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 80084ca:	4c14      	ldr	r4, [pc, #80]	; (800851c <OnAckTimeoutTimerEvent+0x54>)
 80084cc:	0020      	movs	r0, r4
 80084ce:	f006 fb1d 	bl	800eb0c <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <OnAckTimeoutTimerEvent+0x58>)
 80084d4:	469c      	mov	ip, r3
 80084d6:	4464      	add	r4, ip
 80084d8:	4b12      	ldr	r3, [pc, #72]	; (8008524 <OnAckTimeoutTimerEvent+0x5c>)
 80084da:	5ce3      	ldrb	r3, [r4, r3]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <OnAckTimeoutTimerEvent+0x20>
        MacCtx.AckTimeoutRetry = true;
 80084e0:	4a11      	ldr	r2, [pc, #68]	; (8008528 <OnAckTimeoutTimerEvent+0x60>)
 80084e2:	4b12      	ldr	r3, [pc, #72]	; (800852c <OnAckTimeoutTimerEvent+0x64>)
 80084e4:	2101      	movs	r1, #1
 80084e6:	54d1      	strb	r1, [r2, r3]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80084e8:	4a0f      	ldr	r2, [pc, #60]	; (8008528 <OnAckTimeoutTimerEvent+0x60>)
 80084ea:	4b11      	ldr	r3, [pc, #68]	; (8008530 <OnAckTimeoutTimerEvent+0x68>)
 80084ec:	58d2      	ldr	r2, [r2, r3]
 80084ee:	23f0      	movs	r3, #240	; 0xf0
 80084f0:	5cd3      	ldrb	r3, [r2, r3]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d00a      	beq.n	800850c <OnAckTimeoutTimerEvent+0x44>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80084f6:	4a0c      	ldr	r2, [pc, #48]	; (8008528 <OnAckTimeoutTimerEvent+0x60>)
 80084f8:	23d2      	movs	r3, #210	; 0xd2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	58d3      	ldr	r3, [r2, r3]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <OnAckTimeoutTimerEvent+0x42>
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d000      	beq.n	800850a <OnAckTimeoutTimerEvent+0x42>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008508:	4798      	blx	r3
}
 800850a:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800850c:	4906      	ldr	r1, [pc, #24]	; (8008528 <OnAckTimeoutTimerEvent+0x60>)
 800850e:	4a09      	ldr	r2, [pc, #36]	; (8008534 <OnAckTimeoutTimerEvent+0x6c>)
 8008510:	5c8b      	ldrb	r3, [r1, r2]
 8008512:	2020      	movs	r0, #32
 8008514:	4303      	orrs	r3, r0
 8008516:	548b      	strb	r3, [r1, r2]
 8008518:	e7ed      	b.n	80084f6 <OnAckTimeoutTimerEvent+0x2e>
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	20000cb4 	.word	0x20000cb4
 8008520:	fffffc08 	.word	0xfffffc08
 8008524:	00000414 	.word	0x00000414
 8008528:	200008bc 	.word	0x200008bc
 800852c:	00000413 	.word	0x00000413
 8008530:	00000484 	.word	0x00000484
 8008534:	00000481 	.word	0x00000481

08008538 <PrepareRxDoneAbort>:
{
 8008538:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <PrepareRxDoneAbort+0x38>)
 800853c:	21d0      	movs	r1, #208	; 0xd0
 800853e:	0089      	lsls	r1, r1, #2
 8008540:	2280      	movs	r2, #128	; 0x80
 8008542:	5858      	ldr	r0, [r3, r1]
 8008544:	4302      	orrs	r2, r0
 8008546:	505a      	str	r2, [r3, r1]
    if( MacCtx.NodeAckRequested == true )
 8008548:	4a0a      	ldr	r2, [pc, #40]	; (8008574 <PrepareRxDoneAbort+0x3c>)
 800854a:	5c9b      	ldrb	r3, [r3, r2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <PrepareRxDoneAbort+0x30>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008550:	4907      	ldr	r1, [pc, #28]	; (8008570 <PrepareRxDoneAbort+0x38>)
 8008552:	4a09      	ldr	r2, [pc, #36]	; (8008578 <PrepareRxDoneAbort+0x40>)
 8008554:	5c8b      	ldrb	r3, [r1, r2]
 8008556:	2002      	movs	r0, #2
 8008558:	4303      	orrs	r3, r0
    MacCtx.MacFlags.Bits.MacDone = 1;
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2020      	movs	r0, #32
 800855e:	4303      	orrs	r3, r0
 8008560:	548b      	strb	r3, [r1, r2]
    UpdateRxSlotIdleState( );
 8008562:	f7ff fd95 	bl	8008090 <UpdateRxSlotIdleState>
}
 8008566:	bd10      	pop	{r4, pc}
        OnAckTimeoutTimerEvent( NULL );
 8008568:	2000      	movs	r0, #0
 800856a:	f7ff ffad 	bl	80084c8 <OnAckTimeoutTimerEvent>
 800856e:	e7ef      	b.n	8008550 <PrepareRxDoneAbort+0x18>
 8008570:	200008bc 	.word	0x200008bc
 8008574:	00000414 	.word	0x00000414
 8008578:	00000481 	.word	0x00000481

0800857c <LoRaMacCheckForBeaconAcquisition>:
{
 800857c:	b510      	push	{r4, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800857e:	200b      	movs	r0, #11
 8008580:	f003 fcb8 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 8008584:	2800      	cmp	r0, #0
 8008586:	d012      	beq.n	80085ae <LoRaMacCheckForBeaconAcquisition+0x32>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008588:	4a0b      	ldr	r2, [pc, #44]	; (80085b8 <LoRaMacCheckForBeaconAcquisition+0x3c>)
 800858a:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <LoRaMacCheckForBeaconAcquisition+0x40>)
 800858c:	5cd3      	ldrb	r3, [r2, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800858e:	07da      	lsls	r2, r3, #31
 8008590:	d40f      	bmi.n	80085b2 <LoRaMacCheckForBeaconAcquisition+0x36>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008592:	2204      	movs	r2, #4
 8008594:	0010      	movs	r0, r2
 8008596:	4018      	ands	r0, r3
 8008598:	421a      	tst	r2, r3
 800859a:	d009      	beq.n	80085b0 <LoRaMacCheckForBeaconAcquisition+0x34>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800859c:	4906      	ldr	r1, [pc, #24]	; (80085b8 <LoRaMacCheckForBeaconAcquisition+0x3c>)
 800859e:	22d0      	movs	r2, #208	; 0xd0
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	2302      	movs	r3, #2
 80085a4:	5888      	ldr	r0, [r1, r2]
 80085a6:	4398      	bics	r0, r3
 80085a8:	5088      	str	r0, [r1, r2]
            return 0x01;
 80085aa:	2001      	movs	r0, #1
 80085ac:	e000      	b.n	80085b0 <LoRaMacCheckForBeaconAcquisition+0x34>
    return 0x00;
 80085ae:	2000      	movs	r0, #0
}
 80085b0:	bd10      	pop	{r4, pc}
    return 0x00;
 80085b2:	2000      	movs	r0, #0
 80085b4:	e7fc      	b.n	80085b0 <LoRaMacCheckForBeaconAcquisition+0x34>
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	200008bc 	.word	0x200008bc
 80085bc:	00000481 	.word	0x00000481

080085c0 <GetFCntDown>:
{
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	000c      	movs	r4, r1
 80085c4:	a904      	add	r1, sp, #16
 80085c6:	8809      	ldrh	r1, [r1, #0]
 80085c8:	9e05      	ldr	r6, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	d02c      	beq.n	8008628 <GetFCntDown+0x68>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	d02c      	beq.n	800862c <GetFCntDown+0x6c>
 80085d2:	9d06      	ldr	r5, [sp, #24]
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	d02b      	beq.n	8008630 <GetFCntDown+0x70>
    switch( addrID )
 80085d8:	2804      	cmp	r0, #4
 80085da:	d82b      	bhi.n	8008634 <GetFCntDown+0x74>
 80085dc:	0080      	lsls	r0, r0, #2
 80085de:	4d16      	ldr	r5, [pc, #88]	; (8008638 <GetFCntDown+0x78>)
 80085e0:	5828      	ldr	r0, [r5, r0]
 80085e2:	4687      	mov	pc, r0
            if( lrWanVersion.Fields.Minor == 1 )
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	0e1b      	lsrs	r3, r3, #24
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d002      	beq.n	80085f2 <GetFCntDown+0x32>
                *fCntID = FCNT_DOWN;
 80085ec:	2303      	movs	r3, #3
 80085ee:	7033      	strb	r3, [r6, #0]
 80085f0:	e00b      	b.n	800860a <GetFCntDown+0x4a>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80085f2:	2c00      	cmp	r4, #0
 80085f4:	d004      	beq.n	8008600 <GetFCntDown+0x40>
 80085f6:	2c03      	cmp	r4, #3
 80085f8:	d002      	beq.n	8008600 <GetFCntDown+0x40>
                    *fCntID = N_FCNT_DOWN;
 80085fa:	2301      	movs	r3, #1
 80085fc:	7033      	strb	r3, [r6, #0]
 80085fe:	e004      	b.n	800860a <GetFCntDown+0x4a>
                    *fCntID = A_FCNT_DOWN;
 8008600:	2302      	movs	r3, #2
 8008602:	7033      	strb	r3, [r6, #0]
 8008604:	e001      	b.n	800860a <GetFCntDown+0x4a>
            *fCntID = MC_FCNT_DOWN_0;
 8008606:	2304      	movs	r3, #4
 8008608:	7033      	strb	r3, [r6, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800860a:	89d2      	ldrh	r2, [r2, #14]
 800860c:	7830      	ldrb	r0, [r6, #0]
 800860e:	9b06      	ldr	r3, [sp, #24]
 8008610:	f003 ff0e 	bl	800c430 <LoRaMacCryptoGetFCntDown>
}
 8008614:	bd70      	pop	{r4, r5, r6, pc}
            *fCntID = MC_FCNT_DOWN_1;
 8008616:	2305      	movs	r3, #5
 8008618:	7033      	strb	r3, [r6, #0]
            break;
 800861a:	e7f6      	b.n	800860a <GetFCntDown+0x4a>
            *fCntID = MC_FCNT_DOWN_2;
 800861c:	2306      	movs	r3, #6
 800861e:	7033      	strb	r3, [r6, #0]
            break;
 8008620:	e7f3      	b.n	800860a <GetFCntDown+0x4a>
            *fCntID = MC_FCNT_DOWN_3;
 8008622:	2307      	movs	r3, #7
 8008624:	7033      	strb	r3, [r6, #0]
            break;
 8008626:	e7f0      	b.n	800860a <GetFCntDown+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008628:	200a      	movs	r0, #10
 800862a:	e7f3      	b.n	8008614 <GetFCntDown+0x54>
 800862c:	200a      	movs	r0, #10
 800862e:	e7f1      	b.n	8008614 <GetFCntDown+0x54>
 8008630:	200a      	movs	r0, #10
 8008632:	e7ef      	b.n	8008614 <GetFCntDown+0x54>
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008634:	2005      	movs	r0, #5
 8008636:	e7ed      	b.n	8008614 <GetFCntDown+0x54>
 8008638:	08011068 	.word	0x08011068

0800863c <RemoveMacCommands>:
{
 800863c:	b510      	push	{r4, lr}
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800863e:	2801      	cmp	r0, #1
 8008640:	d900      	bls.n	8008644 <RemoveMacCommands+0x8>
}
 8008642:	bd10      	pop	{r4, pc}
        if( request == MCPS_CONFIRMED )
 8008644:	2a01      	cmp	r2, #1
 8008646:	d104      	bne.n	8008652 <RemoveMacCommands+0x16>
            if( fCtrl.Bits.Ack == 1 )
 8008648:	068b      	lsls	r3, r1, #26
 800864a:	d5fa      	bpl.n	8008642 <RemoveMacCommands+0x6>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800864c:	f003 fb2e 	bl	800bcac <LoRaMacCommandsRemoveStickyAnsCmds>
 8008650:	e7f7      	b.n	8008642 <RemoveMacCommands+0x6>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008652:	f003 fb2b 	bl	800bcac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8008656:	e7f4      	b.n	8008642 <RemoveMacCommands+0x6>

08008658 <ProcessMacCommands>:
{
 8008658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865a:	46de      	mov	lr, fp
 800865c:	4657      	mov	r7, sl
 800865e:	464e      	mov	r6, r9
 8008660:	4645      	mov	r5, r8
 8008662:	b5e0      	push	{r5, r6, r7, lr}
 8008664:	b091      	sub	sp, #68	; 0x44
 8008666:	0006      	movs	r6, r0
 8008668:	000c      	movs	r4, r1
 800866a:	4690      	mov	r8, r2
 800866c:	9302      	str	r3, [sp, #8]
    uint8_t status = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	222f      	movs	r2, #47	; 0x2f
 8008672:	a902      	add	r1, sp, #8
 8008674:	468c      	mov	ip, r1
 8008676:	4462      	add	r2, ip
 8008678:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800867a:	aa0d      	add	r2, sp, #52	; 0x34
 800867c:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 800867e:	4699      	mov	r9, r3
    while( macIndex < commandsSize )
 8008680:	4544      	cmp	r4, r8
 8008682:	d300      	bcc.n	8008686 <ProcessMacCommands+0x2e>
 8008684:	e2ad      	b.n	8008be2 <ProcessMacCommands+0x58a>
        switch( payload[macIndex++] )
 8008686:	1c65      	adds	r5, r4, #1
 8008688:	b2ed      	uxtb	r5, r5
 800868a:	5d33      	ldrb	r3, [r6, r4]
 800868c:	2b13      	cmp	r3, #19
 800868e:	d900      	bls.n	8008692 <ProcessMacCommands+0x3a>
 8008690:	e2a7      	b.n	8008be2 <ProcessMacCommands+0x58a>
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4ae5      	ldr	r2, [pc, #916]	; (8008a2c <ProcessMacCommands+0x3d4>)
 8008696:	58d3      	ldr	r3, [r2, r3]
 8008698:	469f      	mov	pc, r3
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800869a:	2003      	movs	r0, #3
 800869c:	f003 fc2a 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d101      	bne.n	80086a8 <ProcessMacCommands+0x50>
        switch( payload[macIndex++] )
 80086a4:	002c      	movs	r4, r5
 80086a6:	e7eb      	b.n	8008680 <ProcessMacCommands+0x28>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80086a8:	2103      	movs	r1, #3
 80086aa:	2000      	movs	r0, #0
 80086ac:	f003 fbdc 	bl	800be68 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80086b0:	1ca3      	adds	r3, r4, #2
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	5d70      	ldrb	r0, [r6, r5]
 80086b6:	4ade      	ldr	r2, [pc, #888]	; (8008a30 <ProcessMacCommands+0x3d8>)
 80086b8:	218b      	movs	r1, #139	; 0x8b
 80086ba:	00c9      	lsls	r1, r1, #3
 80086bc:	5450      	strb	r0, [r2, r1]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80086be:	3403      	adds	r4, #3
 80086c0:	b2e4      	uxtb	r4, r4
 80086c2:	5cf1      	ldrb	r1, [r6, r3]
 80086c4:	4bdb      	ldr	r3, [pc, #876]	; (8008a34 <ProcessMacCommands+0x3dc>)
 80086c6:	54d1      	strb	r1, [r2, r3]
 80086c8:	e7da      	b.n	8008680 <ProcessMacCommands+0x28>
                int8_t linkAdrDatarate = DR_0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	220a      	movs	r2, #10
 80086ce:	a902      	add	r1, sp, #8
 80086d0:	468c      	mov	ip, r1
 80086d2:	4462      	add	r2, ip
 80086d4:	7013      	strb	r3, [r2, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80086d6:	220b      	movs	r2, #11
 80086d8:	4462      	add	r2, ip
 80086da:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbRep = 0;
 80086dc:	aa05      	add	r2, sp, #20
 80086de:	7013      	strb	r3, [r2, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80086e0:	aa07      	add	r2, sp, #28
 80086e2:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 80086e4:	464b      	mov	r3, r9
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <ProcessMacCommands+0x96>
                break;
 80086ea:	002c      	movs	r4, r5
 80086ec:	e7c8      	b.n	8008680 <ProcessMacCommands+0x28>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80086ee:	1e6b      	subs	r3, r5, #1
 80086f0:	18f3      	adds	r3, r6, r3
 80086f2:	a909      	add	r1, sp, #36	; 0x24
 80086f4:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80086f6:	4643      	mov	r3, r8
 80086f8:	1b5b      	subs	r3, r3, r5
 80086fa:	3301      	adds	r3, #1
 80086fc:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80086fe:	4acc      	ldr	r2, [pc, #816]	; (8008a30 <ProcessMacCommands+0x3d8>)
 8008700:	4bcd      	ldr	r3, [pc, #820]	; (8008a38 <ProcessMacCommands+0x3e0>)
 8008702:	58d3      	ldr	r3, [r2, r3]
 8008704:	22f2      	movs	r2, #242	; 0xf2
 8008706:	5c9a      	ldrb	r2, [r3, r2]
 8008708:	728a      	strb	r2, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800870a:	2296      	movs	r2, #150	; 0x96
 800870c:	0052      	lsls	r2, r2, #1
 800870e:	5c9a      	ldrb	r2, [r3, r2]
 8008710:	724a      	strb	r2, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008712:	22f9      	movs	r2, #249	; 0xf9
 8008714:	569a      	ldrsb	r2, [r3, r2]
 8008716:	72ca      	strb	r2, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008718:	22f8      	movs	r2, #248	; 0xf8
 800871a:	569a      	ldrsb	r2, [r3, r2]
 800871c:	730a      	strb	r2, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800871e:	228c      	movs	r2, #140	; 0x8c
 8008720:	0052      	lsls	r2, r2, #1
 8008722:	5c9a      	ldrb	r2, [r3, r2]
 8008724:	734a      	strb	r2, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8008726:	22e8      	movs	r2, #232	; 0xe8
 8008728:	0052      	lsls	r2, r2, #1
 800872a:	589a      	ldr	r2, [r3, r2]
 800872c:	9209      	str	r2, [sp, #36]	; 0x24
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800872e:	7818      	ldrb	r0, [r3, #0]
 8008730:	ab07      	add	r3, sp, #28
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	ab05      	add	r3, sp, #20
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	230b      	movs	r3, #11
 800873a:	4463      	add	r3, ip
 800873c:	220a      	movs	r2, #10
 800873e:	4462      	add	r2, ip
 8008740:	f004 fab5 	bl	800ccae <RegionLinkAdrReq>
 8008744:	232f      	movs	r3, #47	; 0x2f
 8008746:	aa02      	add	r2, sp, #8
 8008748:	4694      	mov	ip, r2
 800874a:	4463      	add	r3, ip
 800874c:	7018      	strb	r0, [r3, #0]
                    if( ( status & 0x07 ) == 0x07 )
 800874e:	2307      	movs	r3, #7
 8008750:	4018      	ands	r0, r3
 8008752:	2807      	cmp	r0, #7
 8008754:	d001      	beq.n	800875a <ProcessMacCommands+0x102>
{
 8008756:	2400      	movs	r4, #0
 8008758:	e01e      	b.n	8008798 <ProcessMacCommands+0x140>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800875a:	4ab5      	ldr	r2, [pc, #724]	; (8008a30 <ProcessMacCommands+0x3d8>)
 800875c:	4bb6      	ldr	r3, [pc, #728]	; (8008a38 <ProcessMacCommands+0x3e0>)
 800875e:	210a      	movs	r1, #10
 8008760:	4461      	add	r1, ip
 8008762:	7808      	ldrb	r0, [r1, #0]
 8008764:	21f9      	movs	r1, #249	; 0xf9
 8008766:	58d4      	ldr	r4, [r2, r3]
 8008768:	5460      	strb	r0, [r4, r1]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800876a:	39ee      	subs	r1, #238	; 0xee
 800876c:	4461      	add	r1, ip
 800876e:	7808      	ldrb	r0, [r1, #0]
 8008770:	21f8      	movs	r1, #248	; 0xf8
 8008772:	58d4      	ldr	r4, [r2, r3]
 8008774:	5460      	strb	r0, [r4, r1]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008776:	58d2      	ldr	r2, [r2, r3]
 8008778:	ab05      	add	r3, sp, #20
 800877a:	7819      	ldrb	r1, [r3, #0]
 800877c:	238c      	movs	r3, #140	; 0x8c
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	54d1      	strb	r1, [r2, r3]
 8008782:	e7e8      	b.n	8008756 <ProcessMacCommands+0xfe>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008784:	2201      	movs	r2, #1
 8008786:	212f      	movs	r1, #47	; 0x2f
 8008788:	ab02      	add	r3, sp, #8
 800878a:	469c      	mov	ip, r3
 800878c:	4461      	add	r1, ip
 800878e:	2003      	movs	r0, #3
 8008790:	f003 fa26 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008794:	3401      	adds	r4, #1
 8008796:	b2e4      	uxtb	r4, r4
 8008798:	ab07      	add	r3, sp, #28
 800879a:	781f      	ldrb	r7, [r3, #0]
 800879c:	2105      	movs	r1, #5
 800879e:	0038      	movs	r0, r7
 80087a0:	f7f7 fcbc 	bl	800011c <__udivsi3>
 80087a4:	b2c0      	uxtb	r0, r0
 80087a6:	42a0      	cmp	r0, r4
 80087a8:	d8ec      	bhi.n	8008784 <ProcessMacCommands+0x12c>
                    macIndex += linkAdrNbBytesParsed - 1;
 80087aa:	197d      	adds	r5, r7, r5
 80087ac:	b2ed      	uxtb	r5, r5
 80087ae:	3d01      	subs	r5, #1
 80087b0:	b2ed      	uxtb	r5, r5
                    adrBlockFound = true;
 80087b2:	2301      	movs	r3, #1
 80087b4:	4699      	mov	r9, r3
 80087b6:	e798      	b.n	80086ea <ProcessMacCommands+0x92>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80087b8:	3402      	adds	r4, #2
 80087ba:	b2e4      	uxtb	r4, r4
 80087bc:	5d71      	ldrb	r1, [r6, r5]
 80087be:	489c      	ldr	r0, [pc, #624]	; (8008a30 <ProcessMacCommands+0x3d8>)
 80087c0:	4a9d      	ldr	r2, [pc, #628]	; (8008a38 <ProcessMacCommands+0x3e0>)
 80087c2:	230f      	movs	r3, #15
 80087c4:	400b      	ands	r3, r1
 80087c6:	219e      	movs	r1, #158	; 0x9e
 80087c8:	0049      	lsls	r1, r1, #1
 80087ca:	5885      	ldr	r5, [r0, r2]
 80087cc:	546b      	strb	r3, [r5, r1]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80087ce:	5882      	ldr	r2, [r0, r2]
 80087d0:	5c51      	ldrb	r1, [r2, r1]
 80087d2:	2301      	movs	r3, #1
 80087d4:	408b      	lsls	r3, r1
 80087d6:	21e1      	movs	r1, #225	; 0xe1
 80087d8:	0049      	lsls	r1, r1, #1
 80087da:	5253      	strh	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80087dc:	2200      	movs	r2, #0
 80087de:	a90d      	add	r1, sp, #52	; 0x34
 80087e0:	2004      	movs	r0, #4
 80087e2:	f003 f9fd 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                break;
 80087e6:	e74b      	b.n	8008680 <ProcessMacCommands+0x28>
                status = 0x07;
 80087e8:	272f      	movs	r7, #47	; 0x2f
 80087ea:	ab02      	add	r3, sp, #8
 80087ec:	469c      	mov	ip, r3
 80087ee:	4467      	add	r7, ip
 80087f0:	2307      	movs	r3, #7
 80087f2:	703b      	strb	r3, [r7, #0]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80087f4:	5d73      	ldrb	r3, [r6, r5]
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	2207      	movs	r2, #7
 80087fa:	4692      	mov	sl, r2
 80087fc:	4013      	ands	r3, r2
 80087fe:	4662      	mov	r2, ip
 8008800:	7753      	strb	r3, [r2, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008802:	5772      	ldrsb	r2, [r6, r5]
 8008804:	230f      	movs	r3, #15
 8008806:	4013      	ands	r3, r2
 8008808:	4662      	mov	r2, ip
 800880a:	7713      	strb	r3, [r2, #28]
                macIndex++;
 800880c:	1ca3      	adds	r3, r4, #2
 800880e:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008810:	1ce2      	adds	r2, r4, #3
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	5cf3      	ldrb	r3, [r6, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008816:	1d20      	adds	r0, r4, #4
 8008818:	b2c0      	uxtb	r0, r0
 800881a:	5cb2      	ldrb	r2, [r6, r2]
 800881c:	0212      	lsls	r2, r2, #8
 800881e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008820:	3405      	adds	r4, #5
 8008822:	b2e4      	uxtb	r4, r4
 8008824:	5c32      	ldrb	r2, [r6, r0]
 8008826:	0412      	lsls	r2, r2, #16
 8008828:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800882a:	2264      	movs	r2, #100	; 0x64
 800882c:	4353      	muls	r3, r2
 800882e:	930a      	str	r3, [sp, #40]	; 0x28
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8008830:	4a7f      	ldr	r2, [pc, #508]	; (8008a30 <ProcessMacCommands+0x3d8>)
 8008832:	4b81      	ldr	r3, [pc, #516]	; (8008a38 <ProcessMacCommands+0x3e0>)
 8008834:	58d3      	ldr	r3, [r2, r3]
 8008836:	7818      	ldrb	r0, [r3, #0]
 8008838:	a909      	add	r1, sp, #36	; 0x24
 800883a:	f004 fa49 	bl	800ccd0 <RegionRxParamSetupReq>
 800883e:	7038      	strb	r0, [r7, #0]
                if( ( status & 0x07 ) == 0x07 )
 8008840:	4653      	mov	r3, sl
 8008842:	4003      	ands	r3, r0
 8008844:	2b07      	cmp	r3, #7
 8008846:	d008      	beq.n	800885a <ProcessMacCommands+0x202>
                macCmdPayload[0] = status;
 8008848:	a90d      	add	r1, sp, #52	; 0x34
 800884a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800884c:	2201      	movs	r2, #1
 800884e:	2005      	movs	r0, #5
 8008850:	f003 f9c6 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8008854:	f7ff fc96 	bl	8008184 <SetMlmeScheduleUplinkIndication>
                break;
 8008858:	e712      	b.n	8008680 <ProcessMacCommands+0x28>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800885a:	4a75      	ldr	r2, [pc, #468]	; (8008a30 <ProcessMacCommands+0x3d8>)
 800885c:	4b76      	ldr	r3, [pc, #472]	; (8008a38 <ProcessMacCommands+0x3e0>)
 800885e:	a909      	add	r1, sp, #36	; 0x24
 8008860:	9103      	str	r1, [sp, #12]
 8008862:	780d      	ldrb	r5, [r1, #0]
 8008864:	2790      	movs	r7, #144	; 0x90
 8008866:	007f      	lsls	r7, r7, #1
 8008868:	58d1      	ldr	r1, [r2, r3]
 800886a:	55cd      	strb	r5, [r1, r7]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800886c:	3708      	adds	r7, #8
 800886e:	58d1      	ldr	r1, [r2, r3]
 8008870:	55cd      	strb	r5, [r1, r7]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008872:	9903      	ldr	r1, [sp, #12]
 8008874:	684d      	ldr	r5, [r1, #4]
 8008876:	3f0c      	subs	r7, #12
 8008878:	58d1      	ldr	r1, [r2, r3]
 800887a:	51cd      	str	r5, [r1, r7]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800887c:	3708      	adds	r7, #8
 800887e:	58d1      	ldr	r1, [r2, r3]
 8008880:	51cd      	str	r5, [r1, r7]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008882:	58d2      	ldr	r2, [r2, r3]
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	7859      	ldrb	r1, [r3, #1]
 8008888:	231a      	movs	r3, #26
 800888a:	33ff      	adds	r3, #255	; 0xff
 800888c:	54d1      	strb	r1, [r2, r3]
 800888e:	e7db      	b.n	8008848 <ProcessMacCommands+0x1f0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008890:	4a67      	ldr	r2, [pc, #412]	; (8008a30 <ProcessMacCommands+0x3d8>)
 8008892:	23d2      	movs	r3, #210	; 0xd2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	58d3      	ldr	r3, [r2, r3]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d015      	beq.n	80088c8 <ProcessMacCommands+0x270>
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d014      	beq.n	80088cc <ProcessMacCommands+0x274>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80088a2:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80088a4:	ab02      	add	r3, sp, #8
 80088a6:	222c      	movs	r2, #44	; 0x2c
 80088a8:	189b      	adds	r3, r3, r2
 80088aa:	7018      	strb	r0, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80088ac:	233f      	movs	r3, #63	; 0x3f
 80088ae:	9a02      	ldr	r2, [sp, #8]
 80088b0:	4013      	ands	r3, r2
 80088b2:	aa02      	add	r2, sp, #8
 80088b4:	212d      	movs	r1, #45	; 0x2d
 80088b6:	1852      	adds	r2, r2, r1
 80088b8:	7013      	strb	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80088ba:	2202      	movs	r2, #2
 80088bc:	a90d      	add	r1, sp, #52	; 0x34
 80088be:	2006      	movs	r0, #6
 80088c0:	f003 f98e 	bl	800bbe0 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80088c4:	002c      	movs	r4, r5
                break;
 80088c6:	e6db      	b.n	8008680 <ProcessMacCommands+0x28>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80088c8:	20ff      	movs	r0, #255	; 0xff
 80088ca:	e7eb      	b.n	80088a4 <ProcessMacCommands+0x24c>
 80088cc:	20ff      	movs	r0, #255	; 0xff
 80088ce:	e7e9      	b.n	80088a4 <ProcessMacCommands+0x24c>
                status = 0x03;
 80088d0:	272f      	movs	r7, #47	; 0x2f
 80088d2:	ab02      	add	r3, sp, #8
 80088d4:	469c      	mov	ip, r3
 80088d6:	4467      	add	r7, ip
 80088d8:	2303      	movs	r3, #3
 80088da:	703b      	strb	r3, [r7, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 80088dc:	1ca3      	adds	r3, r4, #2
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	5772      	ldrsb	r2, [r6, r5]
 80088e2:	a907      	add	r1, sp, #28
 80088e4:	710a      	strb	r2, [r1, #4]
                newChannelReq.NewChannel = &chParam;
 80088e6:	a809      	add	r0, sp, #36	; 0x24
 80088e8:	9007      	str	r0, [sp, #28]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80088ea:	1ce5      	adds	r5, r4, #3
 80088ec:	b2ed      	uxtb	r5, r5
 80088ee:	5cf3      	ldrb	r3, [r6, r3]
 80088f0:	469c      	mov	ip, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80088f2:	1d22      	adds	r2, r4, #4
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	5d73      	ldrb	r3, [r6, r5]
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	4665      	mov	r5, ip
 80088fc:	432b      	orrs	r3, r5
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80088fe:	1d65      	adds	r5, r4, #5
 8008900:	b2ed      	uxtb	r5, r5
 8008902:	5cb2      	ldrb	r2, [r6, r2]
 8008904:	0412      	lsls	r2, r2, #16
 8008906:	431a      	orrs	r2, r3
                chParam.Frequency *= 100;
 8008908:	2364      	movs	r3, #100	; 0x64
 800890a:	4353      	muls	r3, r2
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
                chParam.Rx1Frequency = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	930a      	str	r3, [sp, #40]	; 0x28
                chParam.DrRange.Value = payload[macIndex++];
 8008912:	3406      	adds	r4, #6
 8008914:	b2e4      	uxtb	r4, r4
 8008916:	5773      	ldrsb	r3, [r6, r5]
 8008918:	7203      	strb	r3, [r0, #8]
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800891a:	4a45      	ldr	r2, [pc, #276]	; (8008a30 <ProcessMacCommands+0x3d8>)
 800891c:	4b46      	ldr	r3, [pc, #280]	; (8008a38 <ProcessMacCommands+0x3e0>)
 800891e:	58d3      	ldr	r3, [r2, r3]
 8008920:	7818      	ldrb	r0, [r3, #0]
 8008922:	f004 f9de 	bl	800cce2 <RegionNewChannelReq>
 8008926:	7038      	strb	r0, [r7, #0]
                macCmdPayload[0] = status;
 8008928:	a90d      	add	r1, sp, #52	; 0x34
 800892a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800892c:	2201      	movs	r2, #1
 800892e:	2007      	movs	r0, #7
 8008930:	f003 f956 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                break;
 8008934:	e6a4      	b.n	8008680 <ProcessMacCommands+0x28>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008936:	3402      	adds	r4, #2
 8008938:	b2e4      	uxtb	r4, r4
 800893a:	5d73      	ldrb	r3, [r6, r5]
 800893c:	220f      	movs	r2, #15
 800893e:	0011      	movs	r1, r2
 8008940:	4019      	ands	r1, r3
                if( delay == 0 )
 8008942:	421a      	tst	r2, r3
 8008944:	d100      	bne.n	8008948 <ProcessMacCommands+0x2f0>
                    delay++;
 8008946:	3101      	adds	r1, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8008948:	4d39      	ldr	r5, [pc, #228]	; (8008a30 <ProcessMacCommands+0x3d8>)
 800894a:	483b      	ldr	r0, [pc, #236]	; (8008a38 <ProcessMacCommands+0x3e0>)
 800894c:	014b      	lsls	r3, r1, #5
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	185b      	adds	r3, r3, r1
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	2184      	movs	r1, #132	; 0x84
 8008958:	0049      	lsls	r1, r1, #1
 800895a:	582a      	ldr	r2, [r5, r0]
 800895c:	5053      	str	r3, [r2, r1]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800895e:	582a      	ldr	r2, [r5, r0]
 8008960:	5853      	ldr	r3, [r2, r1]
 8008962:	21fa      	movs	r1, #250	; 0xfa
 8008964:	0089      	lsls	r1, r1, #2
 8008966:	468c      	mov	ip, r1
 8008968:	4463      	add	r3, ip
 800896a:	2186      	movs	r1, #134	; 0x86
 800896c:	0049      	lsls	r1, r1, #1
 800896e:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008970:	2200      	movs	r2, #0
 8008972:	a90d      	add	r1, sp, #52	; 0x34
 8008974:	2008      	movs	r0, #8
 8008976:	f003 f933 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800897a:	f7ff fc03 	bl	8008184 <SetMlmeScheduleUplinkIndication>
                break;
 800897e:	e67f      	b.n	8008680 <ProcessMacCommands+0x28>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008980:	3402      	adds	r4, #2
 8008982:	b2e4      	uxtb	r4, r4
 8008984:	5d72      	ldrb	r2, [r6, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 8008986:	ab05      	add	r3, sp, #20
 8008988:	2100      	movs	r1, #0
 800898a:	7019      	strb	r1, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800898c:	7059      	strb	r1, [r3, #1]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800898e:	0693      	lsls	r3, r2, #26
 8008990:	d502      	bpl.n	8008998 <ProcessMacCommands+0x340>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008992:	ab05      	add	r3, sp, #20
 8008994:	3101      	adds	r1, #1
 8008996:	7059      	strb	r1, [r3, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008998:	06d3      	lsls	r3, r2, #27
 800899a:	d502      	bpl.n	80089a2 <ProcessMacCommands+0x34a>
                    txParamSetupReq.UplinkDwellTime = 1;
 800899c:	ab05      	add	r3, sp, #20
 800899e:	2101      	movs	r1, #1
 80089a0:	7019      	strb	r1, [r3, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80089a2:	230f      	movs	r3, #15
 80089a4:	4013      	ands	r3, r2
 80089a6:	a905      	add	r1, sp, #20
 80089a8:	708b      	strb	r3, [r1, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80089aa:	4a21      	ldr	r2, [pc, #132]	; (8008a30 <ProcessMacCommands+0x3d8>)
 80089ac:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <ProcessMacCommands+0x3e0>)
 80089ae:	58d3      	ldr	r3, [r2, r3]
 80089b0:	7818      	ldrb	r0, [r3, #0]
 80089b2:	f004 f99f 	bl	800ccf4 <RegionTxParamSetupReq>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d100      	bne.n	80089bc <ProcessMacCommands+0x364>
 80089ba:	e661      	b.n	8008680 <ProcessMacCommands+0x28>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80089bc:	4f1c      	ldr	r7, [pc, #112]	; (8008a30 <ProcessMacCommands+0x3d8>)
 80089be:	4d1e      	ldr	r5, [pc, #120]	; (8008a38 <ProcessMacCommands+0x3e0>)
 80089c0:	ab05      	add	r3, sp, #20
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	2196      	movs	r1, #150	; 0x96
 80089c6:	0049      	lsls	r1, r1, #1
 80089c8:	468a      	mov	sl, r1
 80089ca:	5979      	ldr	r1, [r7, r5]
 80089cc:	4650      	mov	r0, sl
 80089ce:	540a      	strb	r2, [r1, r0]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80089d0:	7859      	ldrb	r1, [r3, #1]
 80089d2:	222e      	movs	r2, #46	; 0x2e
 80089d4:	32ff      	adds	r2, #255	; 0xff
 80089d6:	5978      	ldr	r0, [r7, r5]
 80089d8:	5481      	strb	r1, [r0, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80089da:	789b      	ldrb	r3, [r3, #2]
 80089dc:	4a17      	ldr	r2, [pc, #92]	; (8008a3c <ProcessMacCommands+0x3e4>)
 80089de:	5cd0      	ldrb	r0, [r2, r3]
 80089e0:	597b      	ldr	r3, [r7, r5]
 80089e2:	469b      	mov	fp, r3
 80089e4:	f7f8 f820 	bl	8000a28 <__aeabi_ui2f>
 80089e8:	2398      	movs	r3, #152	; 0x98
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	465a      	mov	r2, fp
 80089ee:	50d0      	str	r0, [r2, r3]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80089f0:	3b2f      	subs	r3, #47	; 0x2f
 80089f2:	3bff      	subs	r3, #255	; 0xff
 80089f4:	aa02      	add	r2, sp, #8
 80089f6:	7513      	strb	r3, [r2, #20]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80089f8:	597b      	ldr	r3, [r7, r5]
 80089fa:	4652      	mov	r2, sl
 80089fc:	5c9a      	ldrb	r2, [r3, r2]
 80089fe:	a902      	add	r1, sp, #8
 8008a00:	758a      	strb	r2, [r1, #22]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008a02:	7818      	ldrb	r0, [r3, #0]
 8008a04:	a907      	add	r1, sp, #28
 8008a06:	f004 f8ea 	bl	800cbde <RegionGetPhyParam>
 8008a0a:	9009      	str	r0, [sp, #36]	; 0x24
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008a0c:	b240      	sxtb	r0, r0
 8008a0e:	597b      	ldr	r3, [r7, r5]
 8008a10:	22f9      	movs	r2, #249	; 0xf9
 8008a12:	5699      	ldrsb	r1, [r3, r2]
 8008a14:	1c02      	adds	r2, r0, #0
 8008a16:	4288      	cmp	r0, r1
 8008a18:	da00      	bge.n	8008a1c <ProcessMacCommands+0x3c4>
 8008a1a:	1c0a      	adds	r2, r1, #0
 8008a1c:	21f9      	movs	r1, #249	; 0xf9
 8008a1e:	545a      	strb	r2, [r3, r1]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008a20:	2200      	movs	r2, #0
 8008a22:	a90d      	add	r1, sp, #52	; 0x34
 8008a24:	2009      	movs	r0, #9
 8008a26:	f003 f8db 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                break;
 8008a2a:	e629      	b.n	8008680 <ProcessMacCommands+0x28>
 8008a2c:	0801107c 	.word	0x0801107c
 8008a30:	200008bc 	.word	0x200008bc
 8008a34:	00000459 	.word	0x00000459
 8008a38:	00000484 	.word	0x00000484
 8008a3c:	080112b0 	.word	0x080112b0
                status = 0x03;
 8008a40:	272f      	movs	r7, #47	; 0x2f
 8008a42:	ab02      	add	r3, sp, #8
 8008a44:	469c      	mov	ip, r3
 8008a46:	4467      	add	r7, ip
 8008a48:	2303      	movs	r3, #3
 8008a4a:	703b      	strb	r3, [r7, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8008a4c:	1ca3      	adds	r3, r4, #2
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	5d72      	ldrb	r2, [r6, r5]
 8008a52:	a909      	add	r1, sp, #36	; 0x24
 8008a54:	700a      	strb	r2, [r1, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008a56:	1ce2      	adds	r2, r4, #3
 8008a58:	b2d2      	uxtb	r2, r2
 8008a5a:	5cf3      	ldrb	r3, [r6, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008a5c:	1d20      	adds	r0, r4, #4
 8008a5e:	b2c0      	uxtb	r0, r0
 8008a60:	5cb2      	ldrb	r2, [r6, r2]
 8008a62:	0212      	lsls	r2, r2, #8
 8008a64:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008a66:	3405      	adds	r4, #5
 8008a68:	b2e4      	uxtb	r4, r4
 8008a6a:	5c32      	ldrb	r2, [r6, r0]
 8008a6c:	0412      	lsls	r2, r2, #16
 8008a6e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8008a70:	2264      	movs	r2, #100	; 0x64
 8008a72:	4353      	muls	r3, r2
 8008a74:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8008a76:	4a5e      	ldr	r2, [pc, #376]	; (8008bf0 <ProcessMacCommands+0x598>)
 8008a78:	4b5e      	ldr	r3, [pc, #376]	; (8008bf4 <ProcessMacCommands+0x59c>)
 8008a7a:	58d3      	ldr	r3, [r2, r3]
 8008a7c:	7818      	ldrb	r0, [r3, #0]
 8008a7e:	f004 f942 	bl	800cd06 <RegionDlChannelReq>
 8008a82:	7038      	strb	r0, [r7, #0]
                macCmdPayload[0] = status;
 8008a84:	a90d      	add	r1, sp, #52	; 0x34
 8008a86:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008a88:	2201      	movs	r2, #1
 8008a8a:	200a      	movs	r0, #10
 8008a8c:	f003 f8a8 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8008a90:	f7ff fb78 	bl	8008184 <SetMlmeScheduleUplinkIndication>
                break;
 8008a94:	e5f4      	b.n	8008680 <ProcessMacCommands+0x28>
                SysTime_t gpsEpochTime = { 0 };
 8008a96:	a805      	add	r0, sp, #20
 8008a98:	2300      	movs	r3, #0
 8008a9a:	80c3      	strh	r3, [r0, #6]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008a9c:	1ca2      	adds	r2, r4, #2
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	5d73      	ldrb	r3, [r6, r5]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008aa2:	1ce5      	adds	r5, r4, #3
 8008aa4:	b2ed      	uxtb	r5, r5
 8008aa6:	5cb2      	ldrb	r2, [r6, r2]
 8008aa8:	0212      	lsls	r2, r2, #8
 8008aaa:	4313      	orrs	r3, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008aac:	1d21      	adds	r1, r4, #4
 8008aae:	b2c9      	uxtb	r1, r1
 8008ab0:	5d72      	ldrb	r2, [r6, r5]
 8008ab2:	0412      	lsls	r2, r2, #16
 8008ab4:	4313      	orrs	r3, r2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008ab6:	1d62      	adds	r2, r4, #5
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	5c71      	ldrb	r1, [r6, r1]
 8008abc:	0609      	lsls	r1, r1, #24
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	9305      	str	r3, [sp, #20]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8008ac2:	3406      	adds	r4, #6
 8008ac4:	b2e4      	uxtb	r4, r4
 8008ac6:	5cb5      	ldrb	r5, [r6, r2]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008ac8:	016a      	lsls	r2, r5, #5
 8008aca:	1b52      	subs	r2, r2, r5
 8008acc:	0092      	lsls	r2, r2, #2
 8008ace:	1952      	adds	r2, r2, r5
 8008ad0:	1152      	asrs	r2, r2, #5
 8008ad2:	8082      	strh	r2, [r0, #4]
                sysTime = gpsEpochTime;
 8008ad4:	ad07      	add	r5, sp, #28
 8008ad6:	002a      	movs	r2, r5
 8008ad8:	c882      	ldmia	r0!, {r1, r7}
 8008ada:	c282      	stmia	r2!, {r1, r7}
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008adc:	4a46      	ldr	r2, [pc, #280]	; (8008bf8 <ProcessMacCommands+0x5a0>)
 8008ade:	4694      	mov	ip, r2
 8008ae0:	4463      	add	r3, ip
 8008ae2:	9307      	str	r3, [sp, #28]
                sysTimeCurrent = SysTimeGet( );
 8008ae4:	a809      	add	r0, sp, #36	; 0x24
 8008ae6:	f005 ff10 	bl	800e90a <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008aea:	4f41      	ldr	r7, [pc, #260]	; (8008bf0 <ProcessMacCommands+0x598>)
 8008aec:	23cf      	movs	r3, #207	; 0xcf
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	18fb      	adds	r3, r7, r3
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	23ce      	movs	r3, #206	; 0xce
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	58fb      	ldr	r3, [r7, r3]
 8008afc:	9907      	ldr	r1, [sp, #28]
 8008afe:	686a      	ldr	r2, [r5, #4]
 8008b00:	a80e      	add	r0, sp, #56	; 0x38
 8008b02:	f005 fecd 	bl	800e8a0 <SysTimeSub>
 8008b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b10:	0028      	movs	r0, r5
 8008b12:	f005 fea7 	bl	800e864 <SysTimeAdd>
                SysTimeSet( sysTime );
 8008b16:	9807      	ldr	r0, [sp, #28]
 8008b18:	6869      	ldr	r1, [r5, #4]
 8008b1a:	f005 feda 	bl	800e8d2 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8008b1e:	f002 ff9a 	bl	800ba56 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008b22:	2387      	movs	r3, #135	; 0x87
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	2201      	movs	r2, #1
 8008b28:	54fa      	strb	r2, [r7, r3]
                break;
 8008b2a:	e5a9      	b.n	8008680 <ProcessMacCommands+0x28>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008b2c:	4a30      	ldr	r2, [pc, #192]	; (8008bf0 <ProcessMacCommands+0x598>)
 8008b2e:	2390      	movs	r3, #144	; 0x90
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	5cd3      	ldrb	r3, [r2, r3]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d801      	bhi.n	8008b40 <ProcessMacCommands+0x4e8>
        switch( payload[macIndex++] )
 8008b3c:	002c      	movs	r4, r5
 8008b3e:	e59f      	b.n	8008680 <ProcessMacCommands+0x28>
                    LoRaMacClassBPingSlotInfoAns( );
 8008b40:	f002 ff85 	bl	800ba4e <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008b44:	002c      	movs	r4, r5
 8008b46:	e59b      	b.n	8008680 <ProcessMacCommands+0x28>
                frequency = ( uint32_t )payload[macIndex++];
 8008b48:	1ca2      	adds	r2, r4, #2
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	5d71      	ldrb	r1, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008b4e:	1ce3      	adds	r3, r4, #3
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	5cb2      	ldrb	r2, [r6, r2]
 8008b54:	0212      	lsls	r2, r2, #8
 8008b56:	4311      	orrs	r1, r2
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008b58:	1d22      	adds	r2, r4, #4
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	5cf3      	ldrb	r3, [r6, r3]
 8008b5e:	041b      	lsls	r3, r3, #16
 8008b60:	4319      	orrs	r1, r3
                frequency *= 100;
 8008b62:	2364      	movs	r3, #100	; 0x64
 8008b64:	4359      	muls	r1, r3
                datarate = payload[macIndex++] & 0x0F;
 8008b66:	3405      	adds	r4, #5
 8008b68:	b2e4      	uxtb	r4, r4
 8008b6a:	5cb3      	ldrb	r3, [r6, r2]
 8008b6c:	200f      	movs	r0, #15
 8008b6e:	4018      	ands	r0, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008b70:	f002 ff6e 	bl	800ba50 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008b74:	a90d      	add	r1, sp, #52	; 0x34
 8008b76:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008b78:	2201      	movs	r2, #1
 8008b7a:	2011      	movs	r0, #17
 8008b7c:	f003 f830 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                break;
 8008b80:	e57e      	b.n	8008680 <ProcessMacCommands+0x28>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008b82:	1ca2      	adds	r2, r4, #2
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	5d71      	ldrb	r1, [r6, r5]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008b88:	1ce3      	adds	r3, r4, #3
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	5cb0      	ldrb	r0, [r6, r2]
 8008b8e:	0200      	lsls	r0, r0, #8
 8008b90:	4308      	orrs	r0, r1
                beaconTimingChannel = payload[macIndex++];
 8008b92:	3404      	adds	r4, #4
 8008b94:	b2e4      	uxtb	r4, r4
 8008b96:	5cf1      	ldrb	r1, [r6, r3]
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008b98:	4b18      	ldr	r3, [pc, #96]	; (8008bfc <ProcessMacCommands+0x5a4>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f002 ff5a 	bl	800ba54 <LoRaMacClassBBeaconTimingAns>
                break;
 8008ba0:	e56e      	b.n	8008680 <ProcessMacCommands+0x28>
                    frequency = ( uint32_t )payload[macIndex++];
 8008ba2:	1ca2      	adds	r2, r4, #2
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	5d70      	ldrb	r0, [r6, r5]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008ba8:	1ce3      	adds	r3, r4, #3
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	5cb2      	ldrb	r2, [r6, r2]
 8008bae:	0212      	lsls	r2, r2, #8
 8008bb0:	4310      	orrs	r0, r2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008bb2:	3404      	adds	r4, #4
 8008bb4:	b2e4      	uxtb	r4, r4
 8008bb6:	5cf3      	ldrb	r3, [r6, r3]
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	4318      	orrs	r0, r3
                    frequency *= 100;
 8008bbc:	2364      	movs	r3, #100	; 0x64
 8008bbe:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008bc0:	f002 ff4a 	bl	800ba58 <LoRaMacClassBBeaconFreqReq>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d008      	beq.n	8008bda <ProcessMacCommands+0x582>
                        macCmdPayload[0] = 1;
 8008bc8:	ab0d      	add	r3, sp, #52	; 0x34
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008bce:	2201      	movs	r2, #1
 8008bd0:	a90d      	add	r1, sp, #52	; 0x34
 8008bd2:	2013      	movs	r0, #19
 8008bd4:	f003 f804 	bl	800bbe0 <LoRaMacCommandsAddCmd>
                break;
 8008bd8:	e552      	b.n	8008680 <ProcessMacCommands+0x28>
                        macCmdPayload[0] = 0;
 8008bda:	ab0d      	add	r3, sp, #52	; 0x34
 8008bdc:	2200      	movs	r2, #0
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	e7f5      	b.n	8008bce <ProcessMacCommands+0x576>
}
 8008be2:	b011      	add	sp, #68	; 0x44
 8008be4:	bcf0      	pop	{r4, r5, r6, r7}
 8008be6:	46bb      	mov	fp, r7
 8008be8:	46b2      	mov	sl, r6
 8008bea:	46a9      	mov	r9, r5
 8008bec:	46a0      	mov	r8, r4
 8008bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf0:	200008bc 	.word	0x200008bc
 8008bf4:	00000484 	.word	0x00000484
 8008bf8:	12d53d80 	.word	0x12d53d80
 8008bfc:	200015cc 	.word	0x200015cc

08008c00 <ProcessRadioTxTimeout>:
{
 8008c00:	b510      	push	{r4, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008c02:	4a11      	ldr	r2, [pc, #68]	; (8008c48 <ProcessRadioTxTimeout+0x48>)
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <ProcessRadioTxTimeout+0x4c>)
 8008c06:	58d2      	ldr	r2, [r2, r3]
 8008c08:	23f0      	movs	r3, #240	; 0xf0
 8008c0a:	5cd3      	ldrb	r3, [r2, r3]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d002      	beq.n	8008c16 <ProcessRadioTxTimeout+0x16>
        Radio.Sleep( );
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <ProcessRadioTxTimeout+0x50>)
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008c16:	f7ff fa3b 	bl	8008090 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008c1a:	4c0b      	ldr	r4, [pc, #44]	; (8008c48 <ProcessRadioTxTimeout+0x48>)
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <ProcessRadioTxTimeout+0x54>)
 8008c1e:	2202      	movs	r2, #2
 8008c20:	54e2      	strb	r2, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008c22:	2002      	movs	r0, #2
 8008c24:	f003 f94c 	bl	800bec0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008c28:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <ProcessRadioTxTimeout+0x58>)
 8008c2a:	5ce3      	ldrb	r3, [r4, r3]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <ProcessRadioTxTimeout+0x38>
        MacCtx.AckTimeoutRetry = true;
 8008c30:	4a05      	ldr	r2, [pc, #20]	; (8008c48 <ProcessRadioTxTimeout+0x48>)
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <ProcessRadioTxTimeout+0x5c>)
 8008c34:	2101      	movs	r1, #1
 8008c36:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008c38:	4903      	ldr	r1, [pc, #12]	; (8008c48 <ProcessRadioTxTimeout+0x48>)
 8008c3a:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <ProcessRadioTxTimeout+0x60>)
 8008c3c:	5c8b      	ldrb	r3, [r1, r2]
 8008c3e:	2020      	movs	r0, #32
 8008c40:	4303      	orrs	r3, r0
 8008c42:	548b      	strb	r3, [r1, r2]
}
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	200008bc 	.word	0x200008bc
 8008c4c:	00000484 	.word	0x00000484
 8008c50:	08010b84 	.word	0x08010b84
 8008c54:	0000043d 	.word	0x0000043d
 8008c58:	00000414 	.word	0x00000414
 8008c5c:	00000413 	.word	0x00000413
 8008c60:	00000481 	.word	0x00000481

08008c64 <HandleRadioRxErrorTimeout>:
{
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	0006      	movs	r6, r0
 8008c68:	000d      	movs	r5, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008c6a:	4a2f      	ldr	r2, [pc, #188]	; (8008d28 <HandleRadioRxErrorTimeout+0xc4>)
 8008c6c:	4b2f      	ldr	r3, [pc, #188]	; (8008d2c <HandleRadioRxErrorTimeout+0xc8>)
 8008c6e:	58d2      	ldr	r2, [r2, r3]
 8008c70:	23f0      	movs	r3, #240	; 0xf0
 8008c72:	5cd3      	ldrb	r3, [r2, r3]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d002      	beq.n	8008c7e <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 8008c78:	4b2d      	ldr	r3, [pc, #180]	; (8008d30 <HandleRadioRxErrorTimeout+0xcc>)
 8008c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008c7e:	f002 fed5 	bl	800ba2c <LoRaMacClassBIsBeaconExpected>
 8008c82:	1e04      	subs	r4, r0, #0
 8008c84:	d11a      	bne.n	8008cbc <HandleRadioRxErrorTimeout+0x58>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008c86:	4a28      	ldr	r2, [pc, #160]	; (8008d28 <HandleRadioRxErrorTimeout+0xc4>)
 8008c88:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <HandleRadioRxErrorTimeout+0xc8>)
 8008c8a:	58d2      	ldr	r2, [r2, r3]
 8008c8c:	23f0      	movs	r3, #240	; 0xf0
 8008c8e:	5cd3      	ldrb	r3, [r2, r3]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d01a      	beq.n	8008cca <HandleRadioRxErrorTimeout+0x66>
    if( classBRx == false )
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	d10e      	bne.n	8008cb6 <HandleRadioRxErrorTimeout+0x52>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008c98:	4a23      	ldr	r2, [pc, #140]	; (8008d28 <HandleRadioRxErrorTimeout+0xc4>)
 8008c9a:	2390      	movs	r3, #144	; 0x90
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d129      	bne.n	8008cf8 <HandleRadioRxErrorTimeout+0x94>
            if( MacCtx.NodeAckRequested == true )
 8008ca4:	4b23      	ldr	r3, [pc, #140]	; (8008d34 <HandleRadioRxErrorTimeout+0xd0>)
 8008ca6:	5cd3      	ldrb	r3, [r2, r3]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HandleRadioRxErrorTimeout+0x4c>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008cac:	4b22      	ldr	r3, [pc, #136]	; (8008d38 <HandleRadioRxErrorTimeout+0xd4>)
 8008cae:	54d6      	strb	r6, [r2, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008cb0:	0030      	movs	r0, r6
 8008cb2:	f003 f905 	bl	800bec0 <LoRaMacConfirmQueueSetStatusCmn>
    UpdateRxSlotIdleState( );
 8008cb6:	f7ff f9eb 	bl	8008090 <UpdateRxSlotIdleState>
}
 8008cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008cbc:	2002      	movs	r0, #2
 8008cbe:	f002 feab 	bl	800ba18 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	f002 fead 	bl	800ba22 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008cc8:	e7dd      	b.n	8008c86 <HandleRadioRxErrorTimeout+0x22>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008cca:	f002 feb1 	bl	800ba30 <LoRaMacClassBIsPingExpected>
 8008cce:	1e07      	subs	r7, r0, #0
 8008cd0:	d10a      	bne.n	8008ce8 <HandleRadioRxErrorTimeout+0x84>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008cd2:	f002 feaf 	bl	800ba34 <LoRaMacClassBIsMulticastExpected>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d0dc      	beq.n	8008c94 <HandleRadioRxErrorTimeout+0x30>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f002 fe9e 	bl	800ba1c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f002 fea0 	bl	800ba26 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008ce6:	e7e6      	b.n	8008cb6 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ce8:	2000      	movs	r0, #0
 8008cea:	f002 fe96 	bl	800ba1a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f002 fe98 	bl	800ba24 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008cf4:	003c      	movs	r4, r7
 8008cf6:	e7ec      	b.n	8008cd2 <HandleRadioRxErrorTimeout+0x6e>
            if( MacCtx.NodeAckRequested == true )
 8008cf8:	4a0b      	ldr	r2, [pc, #44]	; (8008d28 <HandleRadioRxErrorTimeout+0xc4>)
 8008cfa:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <HandleRadioRxErrorTimeout+0xd0>)
 8008cfc:	5cd3      	ldrb	r3, [r2, r3]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HandleRadioRxErrorTimeout+0xa2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <HandleRadioRxErrorTimeout+0xd4>)
 8008d04:	54d5      	strb	r5, [r2, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008d06:	0028      	movs	r0, r5
 8008d08:	f003 f8da 	bl	800bec0 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008d0c:	4a06      	ldr	r2, [pc, #24]	; (8008d28 <HandleRadioRxErrorTimeout+0xc4>)
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <HandleRadioRxErrorTimeout+0xc8>)
 8008d10:	58d2      	ldr	r2, [r2, r3]
 8008d12:	23f0      	movs	r3, #240	; 0xf0
 8008d14:	5cd3      	ldrb	r3, [r2, r3]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d0cd      	beq.n	8008cb6 <HandleRadioRxErrorTimeout+0x52>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008d1a:	4903      	ldr	r1, [pc, #12]	; (8008d28 <HandleRadioRxErrorTimeout+0xc4>)
 8008d1c:	4a07      	ldr	r2, [pc, #28]	; (8008d3c <HandleRadioRxErrorTimeout+0xd8>)
 8008d1e:	5c8b      	ldrb	r3, [r1, r2]
 8008d20:	2020      	movs	r0, #32
 8008d22:	4303      	orrs	r3, r0
 8008d24:	548b      	strb	r3, [r1, r2]
 8008d26:	e7c6      	b.n	8008cb6 <HandleRadioRxErrorTimeout+0x52>
 8008d28:	200008bc 	.word	0x200008bc
 8008d2c:	00000484 	.word	0x00000484
 8008d30:	08010b84 	.word	0x08010b84
 8008d34:	00000414 	.word	0x00000414
 8008d38:	0000043d 	.word	0x0000043d
 8008d3c:	00000481 	.word	0x00000481

08008d40 <ProcessRadioRxError>:
{
 8008d40:	b510      	push	{r4, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008d42:	2106      	movs	r1, #6
 8008d44:	2005      	movs	r0, #5
 8008d46:	f7ff ff8d 	bl	8008c64 <HandleRadioRxErrorTimeout>
}
 8008d4a:	bd10      	pop	{r4, pc}

08008d4c <ProcessRadioRxTimeout>:
{
 8008d4c:	b510      	push	{r4, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008d4e:	2104      	movs	r1, #4
 8008d50:	2003      	movs	r0, #3
 8008d52:	f7ff ff87 	bl	8008c64 <HandleRadioRxErrorTimeout>
}
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <LoRaMacHandleMlmeRequest>:
{
 8008d58:	b510      	push	{r4, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008d5a:	4a18      	ldr	r2, [pc, #96]	; (8008dbc <LoRaMacHandleMlmeRequest+0x64>)
 8008d5c:	4b18      	ldr	r3, [pc, #96]	; (8008dc0 <LoRaMacHandleMlmeRequest+0x68>)
 8008d5e:	5cd3      	ldrb	r3, [r2, r3]
 8008d60:	075b      	lsls	r3, r3, #29
 8008d62:	d400      	bmi.n	8008d66 <LoRaMacHandleMlmeRequest+0xe>
}
 8008d64:	bd10      	pop	{r4, pc}
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8008d66:	2000      	movs	r0, #0
 8008d68:	f003 f8c4 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d011      	beq.n	8008d94 <LoRaMacHandleMlmeRequest+0x3c>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d70:	2000      	movs	r0, #0
 8008d72:	f003 f88f 	bl	800be94 <LoRaMacConfirmQueueGetStatus>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d104      	bne.n	8008d84 <LoRaMacHandleMlmeRequest+0x2c>
                MacCtx.ChannelsNbTransCounter = 0;
 8008d7a:	4a10      	ldr	r2, [pc, #64]	; (8008dbc <LoRaMacHandleMlmeRequest+0x64>)
 8008d7c:	2382      	movs	r3, #130	; 0x82
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	2100      	movs	r1, #0
 8008d82:	54d1      	strb	r1, [r2, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d84:	490d      	ldr	r1, [pc, #52]	; (8008dbc <LoRaMacHandleMlmeRequest+0x64>)
 8008d86:	22d0      	movs	r2, #208	; 0xd0
 8008d88:	0092      	lsls	r2, r2, #2
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	5888      	ldr	r0, [r1, r2]
 8008d8e:	4398      	bics	r0, r3
 8008d90:	5088      	str	r0, [r1, r2]
 8008d92:	e7e7      	b.n	8008d64 <LoRaMacHandleMlmeRequest+0xc>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008d94:	2004      	movs	r0, #4
 8008d96:	f003 f8ad 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d007      	beq.n	8008dae <LoRaMacHandleMlmeRequest+0x56>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d9e:	4907      	ldr	r1, [pc, #28]	; (8008dbc <LoRaMacHandleMlmeRequest+0x64>)
 8008da0:	22d0      	movs	r2, #208	; 0xd0
 8008da2:	0092      	lsls	r2, r2, #2
 8008da4:	2302      	movs	r3, #2
 8008da6:	5888      	ldr	r0, [r1, r2]
 8008da8:	4398      	bics	r0, r3
 8008daa:	5088      	str	r0, [r1, r2]
}
 8008dac:	e7da      	b.n	8008d64 <LoRaMacHandleMlmeRequest+0xc>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008dae:	3005      	adds	r0, #5
 8008db0:	f003 f8a0 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d0d5      	beq.n	8008d64 <LoRaMacHandleMlmeRequest+0xc>
 8008db8:	e7f1      	b.n	8008d9e <LoRaMacHandleMlmeRequest+0x46>
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	200008bc 	.word	0x200008bc
 8008dc0:	00000481 	.word	0x00000481

08008dc4 <AckTimeoutRetriesFinalize>:
{
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	b082      	sub	sp, #8
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008dc8:	4a0f      	ldr	r2, [pc, #60]	; (8008e08 <AckTimeoutRetriesFinalize+0x44>)
 8008dca:	2388      	movs	r3, #136	; 0x88
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	5cd3      	ldrb	r3, [r2, r3]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d006      	beq.n	8008de2 <AckTimeoutRetriesFinalize+0x1e>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <AckTimeoutRetriesFinalize+0x44>)
 8008dd6:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <AckTimeoutRetriesFinalize+0x48>)
 8008dd8:	5c99      	ldrb	r1, [r3, r2]
 8008dda:	4a0d      	ldr	r2, [pc, #52]	; (8008e10 <AckTimeoutRetriesFinalize+0x4c>)
 8008ddc:	5499      	strb	r1, [r3, r2]
}
 8008dde:	b002      	add	sp, #8
 8008de0:	bd10      	pop	{r4, pc}
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8008de2:	3301      	adds	r3, #1
 8008de4:	466a      	mov	r2, sp
 8008de6:	7113      	strb	r3, [r2, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <AckTimeoutRetriesFinalize+0x50>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	9300      	str	r3, [sp, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008dee:	4c06      	ldr	r4, [pc, #24]	; (8008e08 <AckTimeoutRetriesFinalize+0x44>)
 8008df0:	4b09      	ldr	r3, [pc, #36]	; (8008e18 <AckTimeoutRetriesFinalize+0x54>)
 8008df2:	58e3      	ldr	r3, [r4, r3]
 8008df4:	7818      	ldrb	r0, [r3, #0]
 8008df6:	4669      	mov	r1, sp
 8008df8:	f003 ff09 	bl	800cc0e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <AckTimeoutRetriesFinalize+0x58>)
 8008e00:	54a3      	strb	r3, [r4, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8008e02:	322c      	adds	r2, #44	; 0x2c
 8008e04:	54a3      	strb	r3, [r4, r2]
 8008e06:	e7e5      	b.n	8008dd4 <AckTimeoutRetriesFinalize+0x10>
 8008e08:	200008bc 	.word	0x200008bc
 8008e0c:	00000412 	.word	0x00000412
 8008e10:	00000441 	.word	0x00000441
 8008e14:	200015dc 	.word	0x200015dc
 8008e18:	00000484 	.word	0x00000484
 8008e1c:	00000414 	.word	0x00000414

08008e20 <ResetMacParameters>:
{
 8008e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e22:	b083      	sub	sp, #12
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8008e24:	4c3d      	ldr	r4, [pc, #244]	; (8008f1c <ResetMacParameters+0xfc>)
 8008e26:	4d3e      	ldr	r5, [pc, #248]	; (8008f20 <ResetMacParameters+0x100>)
 8008e28:	2600      	movs	r6, #0
 8008e2a:	23ea      	movs	r3, #234	; 0xea
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	5962      	ldr	r2, [r4, r5]
 8008e30:	54d6      	strb	r6, [r2, r3]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8008e32:	3be0      	subs	r3, #224	; 0xe0
 8008e34:	5962      	ldr	r2, [r4, r5]
 8008e36:	50d6      	str	r6, [r2, r3]
    MacCtx.ChannelsNbTransCounter = 0;
 8008e38:	2382      	movs	r3, #130	; 0x82
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	54e6      	strb	r6, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4a38      	ldr	r2, [pc, #224]	; (8008f24 <ResetMacParameters+0x104>)
 8008e42:	54a3      	strb	r3, [r4, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008e44:	4a38      	ldr	r2, [pc, #224]	; (8008f28 <ResetMacParameters+0x108>)
 8008e46:	54a3      	strb	r3, [r4, r2]
    MacCtx.AckTimeoutRetry = false;
 8008e48:	4a38      	ldr	r2, [pc, #224]	; (8008f2c <ResetMacParameters+0x10c>)
 8008e4a:	54a6      	strb	r6, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8008e4c:	229e      	movs	r2, #158	; 0x9e
 8008e4e:	0052      	lsls	r2, r2, #1
 8008e50:	5961      	ldr	r1, [r4, r5]
 8008e52:	548e      	strb	r6, [r1, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8008e54:	3286      	adds	r2, #134	; 0x86
 8008e56:	5961      	ldr	r1, [r4, r5]
 8008e58:	528b      	strh	r3, [r1, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8008e5a:	5963      	ldr	r3, [r4, r5]
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	5659      	ldrsb	r1, [r3, r1]
 8008e60:	3aca      	subs	r2, #202	; 0xca
 8008e62:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8008e64:	5963      	ldr	r3, [r4, r5]
 8008e66:	2105      	movs	r1, #5
 8008e68:	5659      	ldrsb	r1, [r3, r1]
 8008e6a:	3201      	adds	r2, #1
 8008e6c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8008e6e:	5963      	ldr	r3, [r4, r5]
 8008e70:	3ad4      	subs	r2, #212	; 0xd4
 8008e72:	5c99      	ldrb	r1, [r3, r2]
 8008e74:	221a      	movs	r2, #26
 8008e76:	32ff      	adds	r2, #255	; 0xff
 8008e78:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8008e7a:	5963      	ldr	r3, [r4, r5]
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	321d      	adds	r2, #29
 8008e80:	32ff      	adds	r2, #255	; 0xff
 8008e82:	3328      	adds	r3, #40	; 0x28
 8008e84:	cb03      	ldmia	r3!, {r0, r1}
 8008e86:	c203      	stmia	r2!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8008e88:	5963      	ldr	r3, [r4, r5]
 8008e8a:	001a      	movs	r2, r3
 8008e8c:	3225      	adds	r2, #37	; 0x25
 8008e8e:	32ff      	adds	r2, #255	; 0xff
 8008e90:	3330      	adds	r3, #48	; 0x30
 8008e92:	cb03      	ldmia	r3!, {r0, r1}
 8008e94:	c203      	stmia	r2!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8008e96:	5963      	ldr	r3, [r4, r5]
 8008e98:	2238      	movs	r2, #56	; 0x38
 8008e9a:	5c99      	ldrb	r1, [r3, r2]
 8008e9c:	32f4      	adds	r2, #244	; 0xf4
 8008e9e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8008ea0:	5963      	ldr	r3, [r4, r5]
 8008ea2:	3af3      	subs	r2, #243	; 0xf3
 8008ea4:	5c9a      	ldrb	r2, [r3, r2]
 8008ea6:	272e      	movs	r7, #46	; 0x2e
 8008ea8:	37ff      	adds	r7, #255	; 0xff
 8008eaa:	55da      	strb	r2, [r3, r7]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8008eac:	5963      	ldr	r3, [r4, r5]
 8008eae:	2298      	movs	r2, #152	; 0x98
 8008eb0:	0052      	lsls	r2, r2, #1
 8008eb2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008eb4:	5099      	str	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8008eb6:	5963      	ldr	r3, [r4, r5]
 8008eb8:	3204      	adds	r2, #4
 8008eba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008ebc:	5099      	str	r1, [r3, r2]
    MacCtx.NodeAckRequested = false;
 8008ebe:	4b1c      	ldr	r3, [pc, #112]	; (8008f30 <ResetMacParameters+0x110>)
 8008ec0:	54e6      	strb	r6, [r4, r3]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8008ec2:	23e0      	movs	r3, #224	; 0xe0
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	5962      	ldr	r2, [r4, r5]
 8008ec8:	54d6      	strb	r6, [r2, r3]
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	466a      	mov	r2, sp
 8008ece:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = NULL;
 8008ed0:	9600      	str	r6, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008ed2:	5963      	ldr	r3, [r4, r5]
 8008ed4:	7818      	ldrb	r0, [r3, #0]
 8008ed6:	4669      	mov	r1, sp
 8008ed8:	f003 fe99 	bl	800cc0e <RegionInitDefaults>
    MacCtx.Channel = 0;
 8008edc:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <ResetMacParameters+0x114>)
 8008ede:	54e6      	strb	r6, [r4, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8008ee0:	239f      	movs	r3, #159	; 0x9f
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	5962      	ldr	r2, [r4, r5]
 8008ee6:	54d6      	strb	r6, [r2, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008ee8:	23f3      	movs	r3, #243	; 0xf3
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	54e6      	strb	r6, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8008eee:	5963      	ldr	r3, [r4, r5]
 8008ef0:	228e      	movs	r2, #142	; 0x8e
 8008ef2:	0052      	lsls	r2, r2, #1
 8008ef4:	5899      	ldr	r1, [r3, r2]
 8008ef6:	22f4      	movs	r2, #244	; 0xf4
 8008ef8:	0092      	lsls	r2, r2, #2
 8008efa:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008efc:	5dd9      	ldrb	r1, [r3, r7]
 8008efe:	320c      	adds	r2, #12
 8008f00:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008f02:	2240      	movs	r2, #64	; 0x40
 8008f04:	32ff      	adds	r2, #255	; 0xff
 8008f06:	5c9a      	ldrb	r2, [r3, r2]
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <ResetMacParameters+0x118>)
 8008f0a:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <ResetMacParameters+0x11c>)
 8008f0e:	54e6      	strb	r6, [r4, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008f10:	2201      	movs	r2, #1
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <ResetMacParameters+0x120>)
 8008f14:	54e2      	strb	r2, [r4, r3]
}
 8008f16:	b003      	add	sp, #12
 8008f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	200008bc 	.word	0x200008bc
 8008f20:	00000484 	.word	0x00000484
 8008f24:	00000411 	.word	0x00000411
 8008f28:	00000412 	.word	0x00000412
 8008f2c:	00000413 	.word	0x00000413
 8008f30:	00000414 	.word	0x00000414
 8008f34:	00000415 	.word	0x00000415
 8008f38:	000003dd 	.word	0x000003dd
 8008f3c:	000003de 	.word	0x000003de
 8008f40:	000003df 	.word	0x000003df

08008f44 <CalculateBackOff>:
{
 8008f44:	b530      	push	{r4, r5, lr}
 8008f46:	b085      	sub	sp, #20
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f48:	4a21      	ldr	r2, [pc, #132]	; (8008fd0 <CalculateBackOff+0x8c>)
 8008f4a:	4b22      	ldr	r3, [pc, #136]	; (8008fd4 <CalculateBackOff+0x90>)
 8008f4c:	58d3      	ldr	r3, [r2, r3]
 8008f4e:	22ea      	movs	r2, #234	; 0xea
 8008f50:	0052      	lsls	r2, r2, #1
 8008f52:	5c9a      	ldrb	r2, [r3, r2]
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d12e      	bne.n	8008fb6 <CalculateBackOff+0x72>
        calcBackOff.Joined = false;
 8008f58:	aa01      	add	r2, sp, #4
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	7011      	strb	r1, [r2, #0]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008f5e:	223e      	movs	r2, #62	; 0x3e
 8008f60:	32ff      	adds	r2, #255	; 0xff
 8008f62:	5c9a      	ldrb	r2, [r3, r2]
 8008f64:	ac01      	add	r4, sp, #4
 8008f66:	70a2      	strb	r2, [r4, #2]
    calcBackOff.Channel = channel;
 8008f68:	70e0      	strb	r0, [r4, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8008f6a:	22e6      	movs	r2, #230	; 0xe6
 8008f6c:	0052      	lsls	r2, r2, #1
 8008f6e:	5898      	ldr	r0, [r3, r2]
 8008f70:	f005 fe25 	bl	800ebbe <TimerGetElapsedTime>
 8008f74:	6060      	str	r0, [r4, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008f76:	4b16      	ldr	r3, [pc, #88]	; (8008fd0 <CalculateBackOff+0x8c>)
 8008f78:	2283      	movs	r2, #131	; 0x83
 8008f7a:	00d2      	lsls	r2, r2, #3
 8008f7c:	589a      	ldr	r2, [r3, r2]
 8008f7e:	60a2      	str	r2, [r4, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 8008f80:	2200      	movs	r2, #0
 8008f82:	7062      	strb	r2, [r4, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8008f84:	4a14      	ldr	r2, [pc, #80]	; (8008fd8 <CalculateBackOff+0x94>)
 8008f86:	5c9b      	ldrb	r3, [r3, r2]
 8008f88:	075b      	lsls	r3, r3, #29
 8008f8a:	d418      	bmi.n	8008fbe <CalculateBackOff+0x7a>
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8008f8c:	4c10      	ldr	r4, [pc, #64]	; (8008fd0 <CalculateBackOff+0x8c>)
 8008f8e:	4d11      	ldr	r5, [pc, #68]	; (8008fd4 <CalculateBackOff+0x90>)
 8008f90:	5963      	ldr	r3, [r4, r5]
 8008f92:	7818      	ldrb	r0, [r3, #0]
 8008f94:	a901      	add	r1, sp, #4
 8008f96:	f003 feca 	bl	800cd2e <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008f9a:	5961      	ldr	r1, [r4, r5]
 8008f9c:	23e1      	movs	r3, #225	; 0xe1
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	5aca      	ldrh	r2, [r1, r3]
 8008fa2:	2383      	movs	r3, #131	; 0x83
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	58e3      	ldr	r3, [r4, r3]
 8008fa8:	3a01      	subs	r2, #1
 8008faa:	4353      	muls	r3, r2
 8008fac:	22e4      	movs	r2, #228	; 0xe4
 8008fae:	0052      	lsls	r2, r2, #1
 8008fb0:	508b      	str	r3, [r1, r2]
}
 8008fb2:	b005      	add	sp, #20
 8008fb4:	bd30      	pop	{r4, r5, pc}
        calcBackOff.Joined = true;
 8008fb6:	aa01      	add	r2, sp, #4
 8008fb8:	2101      	movs	r1, #1
 8008fba:	7011      	strb	r1, [r2, #0]
 8008fbc:	e7cf      	b.n	8008f5e <CalculateBackOff+0x1a>
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	f002 ff98 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d0e1      	beq.n	8008f8c <CalculateBackOff+0x48>
        calcBackOff.LastTxIsJoinRequest = true;
 8008fc8:	ab01      	add	r3, sp, #4
 8008fca:	2201      	movs	r2, #1
 8008fcc:	705a      	strb	r2, [r3, #1]
 8008fce:	e7dd      	b.n	8008f8c <CalculateBackOff+0x48>
 8008fd0:	200008bc 	.word	0x200008bc
 8008fd4:	00000484 	.word	0x00000484
 8008fd8:	00000481 	.word	0x00000481

08008fdc <SecureFrame>:
{
 8008fdc:	b530      	push	{r4, r5, lr}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	0004      	movs	r4, r0
 8008fe2:	000d      	movs	r5, r1
    uint32_t fCntUp = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008fe8:	4a1d      	ldr	r2, [pc, #116]	; (8009060 <SecureFrame+0x84>)
 8008fea:	3305      	adds	r3, #5
 8008fec:	33ff      	adds	r3, #255	; 0xff
 8008fee:	5cd3      	ldrb	r3, [r2, r3]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d004      	beq.n	8008ffe <SecureFrame+0x22>
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d00d      	beq.n	8009014 <SecureFrame+0x38>
 8008ff8:	2003      	movs	r0, #3
}
 8008ffa:	b003      	add	sp, #12
 8008ffc:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008ffe:	4819      	ldr	r0, [pc, #100]	; (8009064 <SecureFrame+0x88>)
 8009000:	f003 fa6c 	bl	800c4dc <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009004:	2800      	cmp	r0, #0
 8009006:	d125      	bne.n	8009054 <SecureFrame+0x78>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009008:	4b15      	ldr	r3, [pc, #84]	; (8009060 <SecureFrame+0x84>)
 800900a:	2286      	movs	r2, #134	; 0x86
 800900c:	0052      	lsls	r2, r2, #1
 800900e:	5c9a      	ldrb	r2, [r3, r2]
 8009010:	801a      	strh	r2, [r3, #0]
            break;
 8009012:	e7f2      	b.n	8008ffa <SecureFrame+0x1e>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009014:	a801      	add	r0, sp, #4
 8009016:	f003 f9fd 	bl	800c414 <LoRaMacCryptoGetFCntUp>
 800901a:	2800      	cmp	r0, #0
 800901c:	d11c      	bne.n	8009058 <SecureFrame+0x7c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800901e:	4a10      	ldr	r2, [pc, #64]	; (8009060 <SecureFrame+0x84>)
 8009020:	2382      	movs	r3, #130	; 0x82
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	5cd3      	ldrb	r3, [r2, r3]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d103      	bne.n	8009032 <SecureFrame+0x56>
 800902a:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <SecureFrame+0x8c>)
 800902c:	5cd3      	ldrb	r3, [r2, r3]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d902      	bls.n	8009038 <SecureFrame+0x5c>
                fCntUp -= 1;
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	3b01      	subs	r3, #1
 8009036:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <SecureFrame+0x88>)
 800903a:	002a      	movs	r2, r5
 800903c:	0021      	movs	r1, r4
 800903e:	9801      	ldr	r0, [sp, #4]
 8009040:	f003 fa7e 	bl	800c540 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009044:	2800      	cmp	r0, #0
 8009046:	d109      	bne.n	800905c <SecureFrame+0x80>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <SecureFrame+0x84>)
 800904a:	2286      	movs	r2, #134	; 0x86
 800904c:	0052      	lsls	r2, r2, #1
 800904e:	5c9a      	ldrb	r2, [r3, r2]
 8009050:	801a      	strh	r2, [r3, #0]
            break;
 8009052:	e7d2      	b.n	8008ffa <SecureFrame+0x1e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009054:	2011      	movs	r0, #17
 8009056:	e7d0      	b.n	8008ffa <SecureFrame+0x1e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009058:	2012      	movs	r0, #18
 800905a:	e7ce      	b.n	8008ffa <SecureFrame+0x1e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800905c:	2011      	movs	r0, #17
 800905e:	e7cc      	b.n	8008ffa <SecureFrame+0x1e>
 8009060:	200008bc 	.word	0x200008bc
 8009064:	200009c4 	.word	0x200009c4
 8009068:	00000412 	.word	0x00000412

0800906c <LoRaMacHandleRequestEvents>:
{
 800906c:	b570      	push	{r4, r5, r6, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800906e:	4a22      	ldr	r2, [pc, #136]	; (80090f8 <LoRaMacHandleRequestEvents+0x8c>)
 8009070:	23d0      	movs	r3, #208	; 0xd0
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	58d3      	ldr	r3, [r2, r3]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d12f      	bne.n	80090da <LoRaMacHandleRequestEvents+0x6e>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800907a:	4b20      	ldr	r3, [pc, #128]	; (80090fc <LoRaMacHandleRequestEvents+0x90>)
 800907c:	5cd4      	ldrb	r4, [r2, r3]
 800907e:	2301      	movs	r3, #1
 8009080:	001d      	movs	r5, r3
 8009082:	4025      	ands	r5, r4
 8009084:	4223      	tst	r3, r4
 8009086:	d005      	beq.n	8009094 <LoRaMacHandleRequestEvents+0x28>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009088:	0011      	movs	r1, r2
 800908a:	4a1c      	ldr	r2, [pc, #112]	; (80090fc <LoRaMacHandleRequestEvents+0x90>)
 800908c:	0023      	movs	r3, r4
 800908e:	2001      	movs	r0, #1
 8009090:	4383      	bics	r3, r0
 8009092:	548b      	strb	r3, [r1, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009094:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <LoRaMacHandleRequestEvents+0x8c>)
 8009096:	4b19      	ldr	r3, [pc, #100]	; (80090fc <LoRaMacHandleRequestEvents+0x90>)
 8009098:	5cd3      	ldrb	r3, [r2, r3]
 800909a:	075b      	lsls	r3, r3, #29
 800909c:	d505      	bpl.n	80090aa <LoRaMacHandleRequestEvents+0x3e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800909e:	0011      	movs	r1, r2
 80090a0:	4a16      	ldr	r2, [pc, #88]	; (80090fc <LoRaMacHandleRequestEvents+0x90>)
 80090a2:	5c8b      	ldrb	r3, [r1, r2]
 80090a4:	2004      	movs	r0, #4
 80090a6:	4383      	bics	r3, r0
 80090a8:	548b      	strb	r3, [r1, r2]
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80090aa:	2001      	movs	r0, #1
 80090ac:	f7ff f808 	bl	80080c0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	d008      	beq.n	80090c6 <LoRaMacHandleRequestEvents+0x5a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80090b4:	4810      	ldr	r0, [pc, #64]	; (80090f8 <LoRaMacHandleRequestEvents+0x8c>)
 80090b6:	23d1      	movs	r3, #209	; 0xd1
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	58c3      	ldr	r3, [r0, r3]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a10      	ldr	r2, [pc, #64]	; (8009100 <LoRaMacHandleRequestEvents+0x94>)
 80090c0:	4694      	mov	ip, r2
 80090c2:	4460      	add	r0, ip
 80090c4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80090c6:	0763      	lsls	r3, r4, #29
 80090c8:	d408      	bmi.n	80090dc <LoRaMacHandleRequestEvents+0x70>
        LoRaMacClassBResumeBeaconing( );
 80090ca:	f002 fcb9 	bl	800ba40 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80090ce:	490a      	ldr	r1, [pc, #40]	; (80090f8 <LoRaMacHandleRequestEvents+0x8c>)
 80090d0:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <LoRaMacHandleRequestEvents+0x90>)
 80090d2:	5c8b      	ldrb	r3, [r1, r2]
 80090d4:	2020      	movs	r0, #32
 80090d6:	4383      	bics	r3, r0
 80090d8:	548b      	strb	r3, [r1, r2]
}
 80090da:	bd70      	pop	{r4, r5, r6, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80090dc:	4809      	ldr	r0, [pc, #36]	; (8009104 <LoRaMacHandleRequestEvents+0x98>)
 80090de:	f002 ff15 	bl	800bf0c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80090e2:	f002 ff41 	bl	800bf68 <LoRaMacConfirmQueueGetCnt>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d0ef      	beq.n	80090ca <LoRaMacHandleRequestEvents+0x5e>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80090ea:	4903      	ldr	r1, [pc, #12]	; (80090f8 <LoRaMacHandleRequestEvents+0x8c>)
 80090ec:	4a03      	ldr	r2, [pc, #12]	; (80090fc <LoRaMacHandleRequestEvents+0x90>)
 80090ee:	5c8b      	ldrb	r3, [r1, r2]
 80090f0:	2004      	movs	r0, #4
 80090f2:	4303      	orrs	r3, r0
 80090f4:	548b      	strb	r3, [r1, r2]
 80090f6:	e7e8      	b.n	80090ca <LoRaMacHandleRequestEvents+0x5e>
 80090f8:	200008bc 	.word	0x200008bc
 80090fc:	00000481 	.word	0x00000481
 8009100:	0000043c 	.word	0x0000043c
 8009104:	20000d0c 	.word	0x20000d0c

08009108 <LoRaMacHandleScheduleUplinkEvent>:
{
 8009108:	b500      	push	{lr}
 800910a:	b083      	sub	sp, #12
    if( MacCtx.MacState == LORAMAC_IDLE )
 800910c:	4a09      	ldr	r2, [pc, #36]	; (8009134 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 800910e:	23d0      	movs	r3, #208	; 0xd0
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	58d3      	ldr	r3, [r2, r3]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <LoRaMacHandleScheduleUplinkEvent+0x14>
}
 8009118:	b003      	add	sp, #12
 800911a:	bd00      	pop	{pc}
        bool isStickyMacCommandPending = false;
 800911c:	466a      	mov	r2, sp
 800911e:	71d3      	strb	r3, [r2, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009120:	1dd0      	adds	r0, r2, #7
 8009122:	f002 fe0f 	bl	800bd44 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009126:	466b      	mov	r3, sp
 8009128:	79db      	ldrb	r3, [r3, #7]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0f4      	beq.n	8009118 <LoRaMacHandleScheduleUplinkEvent+0x10>
            SetMlmeScheduleUplinkIndication( );
 800912e:	f7ff f829 	bl	8008184 <SetMlmeScheduleUplinkIndication>
}
 8009132:	e7f1      	b.n	8009118 <LoRaMacHandleScheduleUplinkEvent+0x10>
 8009134:	200008bc 	.word	0x200008bc

08009138 <OpenContinuousRxCWindow>:
{
 8009138:	b510      	push	{r4, lr}
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800913a:	490f      	ldr	r1, [pc, #60]	; (8009178 <OpenContinuousRxCWindow+0x40>)
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <OpenContinuousRxCWindow+0x44>)
 800913e:	2202      	movs	r2, #2
 8009140:	54ca      	strb	r2, [r1, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <OpenContinuousRxCWindow+0x48>)
 8009144:	3a01      	subs	r2, #1
 8009146:	54ca      	strb	r2, [r1, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009148:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <OpenContinuousRxCWindow+0x4c>)
 800914a:	58cb      	ldr	r3, [r1, r3]
 800914c:	2284      	movs	r2, #132	; 0x84
 800914e:	00d2      	lsls	r2, r2, #3
 8009150:	188a      	adds	r2, r1, r2
 8009152:	20f8      	movs	r0, #248	; 0xf8
 8009154:	0080      	lsls	r0, r0, #2
 8009156:	4684      	mov	ip, r0
 8009158:	4461      	add	r1, ip
 800915a:	7818      	ldrb	r0, [r3, #0]
 800915c:	f003 fd90 	bl	800cc80 <RegionRxConfig>
 8009160:	2800      	cmp	r0, #0
 8009162:	d008      	beq.n	8009176 <OpenContinuousRxCWindow+0x3e>
        Radio.Rx( 0 ); // Continuous mode
 8009164:	4b08      	ldr	r3, [pc, #32]	; (8009188 <OpenContinuousRxCWindow+0x50>)
 8009166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009168:	2000      	movs	r0, #0
 800916a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800916c:	4b02      	ldr	r3, [pc, #8]	; (8009178 <OpenContinuousRxCWindow+0x40>)
 800916e:	4a03      	ldr	r2, [pc, #12]	; (800917c <OpenContinuousRxCWindow+0x44>)
 8009170:	5c99      	ldrb	r1, [r3, r2]
 8009172:	328d      	adds	r2, #141	; 0x8d
 8009174:	5499      	strb	r1, [r3, r2]
}
 8009176:	bd10      	pop	{r4, pc}
 8009178:	200008bc 	.word	0x200008bc
 800917c:	000003f3 	.word	0x000003f3
 8009180:	000003f2 	.word	0x000003f2
 8009184:	00000484 	.word	0x00000484
 8009188:	08010b84 	.word	0x08010b84

0800918c <RxWindowSetup>:
{
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8009190:	f005 fcbc 	bl	800eb0c <TimerStop>
    Radio.Standby( );
 8009194:	4b0e      	ldr	r3, [pc, #56]	; (80091d0 <RxWindowSetup+0x44>)
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800919a:	4a0e      	ldr	r2, [pc, #56]	; (80091d4 <RxWindowSetup+0x48>)
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <RxWindowSetup+0x4c>)
 800919e:	58d3      	ldr	r3, [r2, r3]
 80091a0:	2184      	movs	r1, #132	; 0x84
 80091a2:	00c9      	lsls	r1, r1, #3
 80091a4:	468c      	mov	ip, r1
 80091a6:	4462      	add	r2, ip
 80091a8:	7818      	ldrb	r0, [r3, #0]
 80091aa:	0021      	movs	r1, r4
 80091ac:	f003 fd68 	bl	800cc80 <RegionRxConfig>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d00c      	beq.n	80091ce <RxWindowSetup+0x42>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80091b4:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <RxWindowSetup+0x44>)
 80091b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b8:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <RxWindowSetup+0x48>)
 80091ba:	4a07      	ldr	r2, [pc, #28]	; (80091d8 <RxWindowSetup+0x4c>)
 80091bc:	58a9      	ldr	r1, [r5, r2]
 80091be:	2282      	movs	r2, #130	; 0x82
 80091c0:	0052      	lsls	r2, r2, #1
 80091c2:	5888      	ldr	r0, [r1, r2]
 80091c4:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80091c6:	7ce2      	ldrb	r2, [r4, #19]
 80091c8:	2390      	movs	r3, #144	; 0x90
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	54ea      	strb	r2, [r5, r3]
}
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	08010b84 	.word	0x08010b84
 80091d4:	200008bc 	.word	0x200008bc
 80091d8:	00000484 	.word	0x00000484

080091dc <OnRxWindow2TimerEvent>:
{
 80091dc:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80091de:	4a16      	ldr	r2, [pc, #88]	; (8009238 <OnRxWindow2TimerEvent+0x5c>)
 80091e0:	2390      	movs	r3, #144	; 0x90
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	5cd3      	ldrb	r3, [r2, r3]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d100      	bne.n	80091ec <OnRxWindow2TimerEvent+0x10>
}
 80091ea:	bd10      	pop	{r4, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80091ec:	0010      	movs	r0, r2
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <OnRxWindow2TimerEvent+0x60>)
 80091f0:	5cd2      	ldrb	r2, [r2, r3]
 80091f2:	3b49      	subs	r3, #73	; 0x49
 80091f4:	54c2      	strb	r2, [r0, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80091f6:	4b12      	ldr	r3, [pc, #72]	; (8009240 <OnRxWindow2TimerEvent+0x64>)
 80091f8:	58c3      	ldr	r3, [r0, r3]
 80091fa:	228e      	movs	r2, #142	; 0x8e
 80091fc:	0052      	lsls	r2, r2, #1
 80091fe:	5899      	ldr	r1, [r3, r2]
 8009200:	22f4      	movs	r2, #244	; 0xf4
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	5081      	str	r1, [r0, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009206:	222e      	movs	r2, #46	; 0x2e
 8009208:	32ff      	adds	r2, #255	; 0xff
 800920a:	5c99      	ldrb	r1, [r3, r2]
 800920c:	22f7      	movs	r2, #247	; 0xf7
 800920e:	0092      	lsls	r2, r2, #2
 8009210:	5481      	strb	r1, [r0, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009212:	2240      	movs	r2, #64	; 0x40
 8009214:	32ff      	adds	r2, #255	; 0xff
 8009216:	5c9a      	ldrb	r2, [r3, r2]
 8009218:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <OnRxWindow2TimerEvent+0x68>)
 800921a:	54c2      	strb	r2, [r0, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800921c:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <OnRxWindow2TimerEvent+0x6c>)
 800921e:	2200      	movs	r2, #0
 8009220:	54c2      	strb	r2, [r0, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009222:	4b0a      	ldr	r3, [pc, #40]	; (800924c <OnRxWindow2TimerEvent+0x70>)
 8009224:	3201      	adds	r2, #1
 8009226:	54c2      	strb	r2, [r0, r3]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009228:	3b13      	subs	r3, #19
 800922a:	18c1      	adds	r1, r0, r3
 800922c:	3b34      	subs	r3, #52	; 0x34
 800922e:	469c      	mov	ip, r3
 8009230:	4460      	add	r0, ip
 8009232:	f7ff ffab 	bl	800918c <RxWindowSetup>
 8009236:	e7d8      	b.n	80091ea <OnRxWindow2TimerEvent+0xe>
 8009238:	200008bc 	.word	0x200008bc
 800923c:	00000415 	.word	0x00000415
 8009240:	00000484 	.word	0x00000484
 8009244:	000003dd 	.word	0x000003dd
 8009248:	000003de 	.word	0x000003de
 800924c:	000003df 	.word	0x000003df

08009250 <OnRxWindow1TimerEvent>:
{
 8009250:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009252:	4812      	ldr	r0, [pc, #72]	; (800929c <OnRxWindow1TimerEvent+0x4c>)
 8009254:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <OnRxWindow1TimerEvent+0x50>)
 8009256:	5cc2      	ldrb	r2, [r0, r3]
 8009258:	3b5d      	subs	r3, #93	; 0x5d
 800925a:	54c2      	strb	r2, [r0, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800925c:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <OnRxWindow1TimerEvent+0x54>)
 800925e:	58c3      	ldr	r3, [r0, r3]
 8009260:	221a      	movs	r2, #26
 8009262:	32ff      	adds	r2, #255	; 0xff
 8009264:	5699      	ldrsb	r1, [r3, r2]
 8009266:	4a10      	ldr	r2, [pc, #64]	; (80092a8 <OnRxWindow1TimerEvent+0x58>)
 8009268:	5481      	strb	r1, [r0, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800926a:	222e      	movs	r2, #46	; 0x2e
 800926c:	32ff      	adds	r2, #255	; 0xff
 800926e:	5c99      	ldrb	r1, [r3, r2]
 8009270:	22f2      	movs	r2, #242	; 0xf2
 8009272:	0092      	lsls	r2, r2, #2
 8009274:	5481      	strb	r1, [r0, r2]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009276:	2240      	movs	r2, #64	; 0x40
 8009278:	32ff      	adds	r2, #255	; 0xff
 800927a:	5c9a      	ldrb	r2, [r3, r2]
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <OnRxWindow1TimerEvent+0x5c>)
 800927e:	54c2      	strb	r2, [r0, r3]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009280:	2300      	movs	r3, #0
 8009282:	4a0b      	ldr	r2, [pc, #44]	; (80092b0 <OnRxWindow1TimerEvent+0x60>)
 8009284:	5483      	strb	r3, [r0, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009286:	4a0b      	ldr	r2, [pc, #44]	; (80092b4 <OnRxWindow1TimerEvent+0x64>)
 8009288:	5483      	strb	r3, [r0, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800928a:	23ee      	movs	r3, #238	; 0xee
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	18c1      	adds	r1, r0, r3
 8009290:	3b38      	subs	r3, #56	; 0x38
 8009292:	469c      	mov	ip, r3
 8009294:	4460      	add	r0, ip
 8009296:	f7ff ff79 	bl	800918c <RxWindowSetup>
}
 800929a:	bd10      	pop	{r4, pc}
 800929c:	200008bc 	.word	0x200008bc
 80092a0:	00000415 	.word	0x00000415
 80092a4:	00000484 	.word	0x00000484
 80092a8:	000003bb 	.word	0x000003bb
 80092ac:	000003c9 	.word	0x000003c9
 80092b0:	000003ca 	.word	0x000003ca
 80092b4:	000003cb 	.word	0x000003cb

080092b8 <SwitchClass>:
{
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	0004      	movs	r4, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 80092be:	4a56      	ldr	r2, [pc, #344]	; (8009418 <SwitchClass+0x160>)
 80092c0:	4b56      	ldr	r3, [pc, #344]	; (800941c <SwitchClass+0x164>)
 80092c2:	58d3      	ldr	r3, [r2, r3]
 80092c4:	22f0      	movs	r2, #240	; 0xf0
 80092c6:	5c9d      	ldrb	r5, [r3, r2]
 80092c8:	2d01      	cmp	r5, #1
 80092ca:	d100      	bne.n	80092ce <SwitchClass+0x16>
 80092cc:	e08e      	b.n	80093ec <SwitchClass+0x134>
 80092ce:	2d02      	cmp	r5, #2
 80092d0:	d100      	bne.n	80092d4 <SwitchClass+0x1c>
 80092d2:	e096      	b.n	8009402 <SwitchClass+0x14a>
 80092d4:	2d00      	cmp	r5, #0
 80092d6:	d002      	beq.n	80092de <SwitchClass+0x26>
 80092d8:	2003      	movs	r0, #3
}
 80092da:	b002      	add	sp, #8
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 80092de:	2800      	cmp	r0, #0
 80092e0:	d106      	bne.n	80092f0 <SwitchClass+0x38>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80092e2:	001a      	movs	r2, r3
 80092e4:	3225      	adds	r2, #37	; 0x25
 80092e6:	32ff      	adds	r2, #255	; 0xff
 80092e8:	331d      	adds	r3, #29
 80092ea:	33ff      	adds	r3, #255	; 0xff
 80092ec:	cb03      	ldmia	r3!, {r0, r1}
 80092ee:	c203      	stmia	r2!, {r0, r1}
            if( deviceClass == CLASS_B )
 80092f0:	2c01      	cmp	r4, #1
 80092f2:	d026      	beq.n	8009342 <SwitchClass+0x8a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80092f4:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 80092f6:	2c02      	cmp	r4, #2
 80092f8:	d1ef      	bne.n	80092da <SwitchClass+0x22>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80092fa:	4947      	ldr	r1, [pc, #284]	; (8009418 <SwitchClass+0x160>)
 80092fc:	4b47      	ldr	r3, [pc, #284]	; (800941c <SwitchClass+0x164>)
 80092fe:	58ca      	ldr	r2, [r1, r3]
 8009300:	23f0      	movs	r3, #240	; 0xf0
 8009302:	54d4      	strb	r4, [r2, r3]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009304:	23f8      	movs	r3, #248	; 0xf8
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	18cb      	adds	r3, r1, r3
 800930a:	22f3      	movs	r2, #243	; 0xf3
 800930c:	0092      	lsls	r2, r2, #2
 800930e:	188a      	adds	r2, r1, r2
 8009310:	ca51      	ldmia	r2!, {r0, r4, r6}
 8009312:	c351      	stmia	r3!, {r0, r4, r6}
 8009314:	ca11      	ldmia	r2!, {r0, r4}
 8009316:	c311      	stmia	r3!, {r0, r4}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <SwitchClass+0x168>)
 800931a:	2202      	movs	r2, #2
 800931c:	54ca      	strb	r2, [r1, r3]
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800931e:	2200      	movs	r2, #0
 8009320:	2a03      	cmp	r2, #3
 8009322:	dc46      	bgt.n	80093b2 <SwitchClass+0xfa>
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009324:	493c      	ldr	r1, [pc, #240]	; (8009418 <SwitchClass+0x160>)
 8009326:	4b3d      	ldr	r3, [pc, #244]	; (800941c <SwitchClass+0x164>)
 8009328:	58c8      	ldr	r0, [r1, r3]
 800932a:	0011      	movs	r1, r2
 800932c:	0093      	lsls	r3, r2, #2
 800932e:	189b      	adds	r3, r3, r2
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	18c3      	adds	r3, r0, r3
 8009334:	3351      	adds	r3, #81	; 0x51
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10d      	bne.n	8009358 <SwitchClass+0xa0>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800933c:	3201      	adds	r2, #1
 800933e:	b252      	sxtb	r2, r2
 8009340:	e7ee      	b.n	8009320 <SwitchClass+0x68>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009342:	0020      	movs	r0, r4
 8009344:	f002 fb7d 	bl	800ba42 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009348:	2800      	cmp	r0, #0
 800934a:	d1d4      	bne.n	80092f6 <SwitchClass+0x3e>
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800934c:	4a32      	ldr	r2, [pc, #200]	; (8009418 <SwitchClass+0x160>)
 800934e:	4b33      	ldr	r3, [pc, #204]	; (800941c <SwitchClass+0x164>)
 8009350:	58d2      	ldr	r2, [r2, r3]
 8009352:	23f0      	movs	r3, #240	; 0xf0
 8009354:	54d4      	strb	r4, [r2, r3]
 8009356:	e7ce      	b.n	80092f6 <SwitchClass+0x3e>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009358:	0093      	lsls	r3, r2, #2
 800935a:	189a      	adds	r2, r3, r2
 800935c:	00d2      	lsls	r2, r2, #3
 800935e:	1882      	adds	r2, r0, r2
 8009360:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009362:	2492      	movs	r4, #146	; 0x92
 8009364:	0064      	lsls	r4, r4, #1
 8009366:	5102      	str	r2, [r0, r4]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009368:	482b      	ldr	r0, [pc, #172]	; (8009418 <SwitchClass+0x160>)
 800936a:	4e2c      	ldr	r6, [pc, #176]	; (800941c <SwitchClass+0x164>)
 800936c:	5982      	ldr	r2, [r0, r6]
 800936e:	185b      	adds	r3, r3, r1
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	18d3      	adds	r3, r2, r3
 8009374:	3368      	adds	r3, #104	; 0x68
 8009376:	7819      	ldrb	r1, [r3, #0]
 8009378:	2394      	movs	r3, #148	; 0x94
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800937e:	4b29      	ldr	r3, [pc, #164]	; (8009424 <SwitchClass+0x16c>)
 8009380:	5cc2      	ldrb	r2, [r0, r3]
 8009382:	3b35      	subs	r3, #53	; 0x35
 8009384:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8009386:	5983      	ldr	r3, [r0, r6]
 8009388:	5919      	ldr	r1, [r3, r4]
 800938a:	22f9      	movs	r2, #249	; 0xf9
 800938c:	0092      	lsls	r2, r2, #2
 800938e:	5081      	str	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009390:	222e      	movs	r2, #46	; 0x2e
 8009392:	32ff      	adds	r2, #255	; 0xff
 8009394:	5c99      	ldrb	r1, [r3, r2]
 8009396:	22fc      	movs	r2, #252	; 0xfc
 8009398:	0092      	lsls	r2, r2, #2
 800939a:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800939c:	2240      	movs	r2, #64	; 0x40
 800939e:	32ff      	adds	r2, #255	; 0xff
 80093a0:	5c9a      	ldrb	r2, [r3, r2]
 80093a2:	4b21      	ldr	r3, [pc, #132]	; (8009428 <SwitchClass+0x170>)
 80093a4:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80093a6:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <SwitchClass+0x168>)
 80093a8:	2203      	movs	r2, #3
 80093aa:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80093ac:	4b1f      	ldr	r3, [pc, #124]	; (800942c <SwitchClass+0x174>)
 80093ae:	3a02      	subs	r2, #2
 80093b0:	54c2      	strb	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 80093b2:	4c19      	ldr	r4, [pc, #100]	; (8009418 <SwitchClass+0x160>)
 80093b4:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <SwitchClass+0x178>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	54e2      	strb	r2, [r4, r3]
                Radio.Sleep( );
 80093ba:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <SwitchClass+0x17c>)
 80093bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093be:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80093c0:	4b16      	ldr	r3, [pc, #88]	; (800941c <SwitchClass+0x164>)
 80093c2:	58e0      	ldr	r0, [r4, r3]
 80093c4:	23fc      	movs	r3, #252	; 0xfc
 80093c6:	58c3      	ldr	r3, [r0, r3]
 80093c8:	2280      	movs	r2, #128	; 0x80
 80093ca:	0052      	lsls	r2, r2, #1
 80093cc:	5c82      	ldrb	r2, [r0, r2]
 80093ce:	2194      	movs	r1, #148	; 0x94
 80093d0:	0049      	lsls	r1, r1, #1
 80093d2:	5641      	ldrsb	r1, [r0, r1]
 80093d4:	7800      	ldrb	r0, [r0, #0]
 80093d6:	26f8      	movs	r6, #248	; 0xf8
 80093d8:	00b6      	lsls	r6, r6, #2
 80093da:	46b4      	mov	ip, r6
 80093dc:	4464      	add	r4, ip
 80093de:	9400      	str	r4, [sp, #0]
 80093e0:	f003 fc42 	bl	800cc68 <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 80093e4:	f7ff fea8 	bl	8009138 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 80093e8:	0028      	movs	r0, r5
 80093ea:	e776      	b.n	80092da <SwitchClass+0x22>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80093ec:	f002 fb29 	bl	800ba42 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d000      	beq.n	80093f6 <SwitchClass+0x13e>
 80093f4:	e771      	b.n	80092da <SwitchClass+0x22>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80093f6:	4a08      	ldr	r2, [pc, #32]	; (8009418 <SwitchClass+0x160>)
 80093f8:	4b08      	ldr	r3, [pc, #32]	; (800941c <SwitchClass+0x164>)
 80093fa:	58d2      	ldr	r2, [r2, r3]
 80093fc:	23f0      	movs	r3, #240	; 0xf0
 80093fe:	54d4      	strb	r4, [r2, r3]
 8009400:	e76b      	b.n	80092da <SwitchClass+0x22>
            if( deviceClass == CLASS_A )
 8009402:	2800      	cmp	r0, #0
 8009404:	d106      	bne.n	8009414 <SwitchClass+0x15c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8009406:	22f0      	movs	r2, #240	; 0xf0
 8009408:	5498      	strb	r0, [r3, r2]
                Radio.Sleep( );
 800940a:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <SwitchClass+0x17c>)
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009410:	0020      	movs	r0, r4
 8009412:	e762      	b.n	80092da <SwitchClass+0x22>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009414:	2003      	movs	r0, #3
 8009416:	e760      	b.n	80092da <SwitchClass+0x22>
 8009418:	200008bc 	.word	0x200008bc
 800941c:	00000484 	.word	0x00000484
 8009420:	000003f3 	.word	0x000003f3
 8009424:	00000415 	.word	0x00000415
 8009428:	000003f1 	.word	0x000003f1
 800942c:	000003f2 	.word	0x000003f2
 8009430:	00000414 	.word	0x00000414
 8009434:	08010b84 	.word	0x08010b84

08009438 <OnRadioRxTimeout>:
{
 8009438:	b500      	push	{lr}
 800943a:	b083      	sub	sp, #12
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800943c:	4a0e      	ldr	r2, [pc, #56]	; (8009478 <OnRadioRxTimeout+0x40>)
 800943e:	7813      	ldrb	r3, [r2, #0]
 8009440:	2101      	movs	r1, #1
 8009442:	430b      	orrs	r3, r1
 8009444:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009446:	4a0d      	ldr	r2, [pc, #52]	; (800947c <OnRadioRxTimeout+0x44>)
 8009448:	23d2      	movs	r3, #210	; 0xd2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	58d3      	ldr	r3, [r2, r3]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <OnRadioRxTimeout+0x22>
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d000      	beq.n	800945a <OnRadioRxTimeout+0x22>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009458:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800945a:	4668      	mov	r0, sp
 800945c:	f005 fa6f 	bl	800e93e <SysTimeGetMcuTime>
 8009460:	466b      	mov	r3, sp
 8009462:	2204      	movs	r2, #4
 8009464:	5e9a      	ldrsh	r2, [r3, r2]
 8009466:	9900      	ldr	r1, [sp, #0]
 8009468:	4805      	ldr	r0, [pc, #20]	; (8009480 <OnRadioRxTimeout+0x48>)
 800946a:	f005 fbf7 	bl	800ec5c <TraceSend>
 800946e:	4805      	ldr	r0, [pc, #20]	; (8009484 <OnRadioRxTimeout+0x4c>)
 8009470:	f005 fbf4 	bl	800ec5c <TraceSend>
}
 8009474:	b003      	add	sp, #12
 8009476:	bd00      	pop	{pc}
 8009478:	200006dc 	.word	0x200006dc
 800947c:	200008bc 	.word	0x200008bc
 8009480:	0801150c 	.word	0x0801150c
 8009484:	08011518 	.word	0x08011518

08009488 <OnRadioTxTimeout>:
{
 8009488:	b500      	push	{lr}
 800948a:	b083      	sub	sp, #12
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800948c:	4a0e      	ldr	r2, [pc, #56]	; (80094c8 <OnRadioTxTimeout+0x40>)
 800948e:	7813      	ldrb	r3, [r2, #0]
 8009490:	2104      	movs	r1, #4
 8009492:	430b      	orrs	r3, r1
 8009494:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009496:	4a0d      	ldr	r2, [pc, #52]	; (80094cc <OnRadioTxTimeout+0x44>)
 8009498:	23d2      	movs	r3, #210	; 0xd2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	58d3      	ldr	r3, [r2, r3]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <OnRadioTxTimeout+0x22>
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d000      	beq.n	80094aa <OnRadioTxTimeout+0x22>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80094a8:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 80094aa:	4668      	mov	r0, sp
 80094ac:	f005 fa47 	bl	800e93e <SysTimeGetMcuTime>
 80094b0:	466b      	mov	r3, sp
 80094b2:	2204      	movs	r2, #4
 80094b4:	5e9a      	ldrsh	r2, [r3, r2]
 80094b6:	9900      	ldr	r1, [sp, #0]
 80094b8:	4805      	ldr	r0, [pc, #20]	; (80094d0 <OnRadioTxTimeout+0x48>)
 80094ba:	f005 fbcf 	bl	800ec5c <TraceSend>
 80094be:	4805      	ldr	r0, [pc, #20]	; (80094d4 <OnRadioTxTimeout+0x4c>)
 80094c0:	f005 fbcc 	bl	800ec5c <TraceSend>
}
 80094c4:	b003      	add	sp, #12
 80094c6:	bd00      	pop	{pc}
 80094c8:	200006dc 	.word	0x200006dc
 80094cc:	200008bc 	.word	0x200008bc
 80094d0:	0801150c 	.word	0x0801150c
 80094d4:	08011528 	.word	0x08011528

080094d8 <OnRadioRxDone>:
{
 80094d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094da:	46c6      	mov	lr, r8
 80094dc:	b500      	push	{lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	4680      	mov	r8, r0
 80094e2:	000f      	movs	r7, r1
 80094e4:	0016      	movs	r6, r2
 80094e6:	001d      	movs	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80094e8:	f005 fb63 	bl	800ebb2 <TimerGetCurrentTime>
 80094ec:	4c13      	ldr	r4, [pc, #76]	; (800953c <OnRadioRxDone+0x64>)
 80094ee:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 80094f0:	4643      	mov	r3, r8
 80094f2:	6063      	str	r3, [r4, #4]
    RxDoneParams.Size = size;
 80094f4:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 80094f6:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 80094f8:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80094fa:	4a11      	ldr	r2, [pc, #68]	; (8009540 <OnRadioRxDone+0x68>)
 80094fc:	7813      	ldrb	r3, [r2, #0]
 80094fe:	2108      	movs	r1, #8
 8009500:	430b      	orrs	r3, r1
 8009502:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009504:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <OnRadioRxDone+0x6c>)
 8009506:	23d2      	movs	r3, #210	; 0xd2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	58d3      	ldr	r3, [r2, r3]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <OnRadioRxDone+0x40>
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d000      	beq.n	8009518 <OnRadioRxDone+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009516:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 8009518:	4668      	mov	r0, sp
 800951a:	f005 fa10 	bl	800e93e <SysTimeGetMcuTime>
 800951e:	466b      	mov	r3, sp
 8009520:	2204      	movs	r2, #4
 8009522:	5e9a      	ldrsh	r2, [r3, r2]
 8009524:	9900      	ldr	r1, [sp, #0]
 8009526:	4808      	ldr	r0, [pc, #32]	; (8009548 <OnRadioRxDone+0x70>)
 8009528:	f005 fb98 	bl	800ec5c <TraceSend>
 800952c:	4807      	ldr	r0, [pc, #28]	; (800954c <OnRadioRxDone+0x74>)
 800952e:	f005 fb95 	bl	800ec5c <TraceSend>
}
 8009532:	b002      	add	sp, #8
 8009534:	bc80      	pop	{r7}
 8009536:	46b8      	mov	r8, r7
 8009538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	200015cc 	.word	0x200015cc
 8009540:	200006dc 	.word	0x200006dc
 8009544:	200008bc 	.word	0x200008bc
 8009548:	0801150c 	.word	0x0801150c
 800954c:	08011538 	.word	0x08011538

08009550 <OnRadioTxDone>:
{
 8009550:	b530      	push	{r4, r5, lr}
 8009552:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009554:	f005 fb2d 	bl	800ebb2 <TimerGetCurrentTime>
 8009558:	4b14      	ldr	r3, [pc, #80]	; (80095ac <OnRadioTxDone+0x5c>)
 800955a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800955c:	4d14      	ldr	r5, [pc, #80]	; (80095b0 <OnRadioTxDone+0x60>)
 800955e:	466c      	mov	r4, sp
 8009560:	0020      	movs	r0, r4
 8009562:	f005 f9d2 	bl	800e90a <SysTimeGet>
 8009566:	23ce      	movs	r3, #206	; 0xce
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	18eb      	adds	r3, r5, r3
 800956c:	cc06      	ldmia	r4!, {r1, r2}
 800956e:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009570:	4a10      	ldr	r2, [pc, #64]	; (80095b4 <OnRadioTxDone+0x64>)
 8009572:	7813      	ldrb	r3, [r2, #0]
 8009574:	2110      	movs	r1, #16
 8009576:	430b      	orrs	r3, r1
 8009578:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800957a:	23d2      	movs	r3, #210	; 0xd2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	58eb      	ldr	r3, [r5, r3]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d003      	beq.n	800958c <OnRadioTxDone+0x3c>
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d000      	beq.n	800958c <OnRadioTxDone+0x3c>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800958a:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800958c:	ac02      	add	r4, sp, #8
 800958e:	0020      	movs	r0, r4
 8009590:	f005 f9d5 	bl	800e93e <SysTimeGetMcuTime>
 8009594:	2304      	movs	r3, #4
 8009596:	5ee2      	ldrsh	r2, [r4, r3]
 8009598:	9902      	ldr	r1, [sp, #8]
 800959a:	4807      	ldr	r0, [pc, #28]	; (80095b8 <OnRadioTxDone+0x68>)
 800959c:	f005 fb5e 	bl	800ec5c <TraceSend>
 80095a0:	4806      	ldr	r0, [pc, #24]	; (80095bc <OnRadioTxDone+0x6c>)
 80095a2:	f005 fb5b 	bl	800ec5c <TraceSend>
}
 80095a6:	b005      	add	sp, #20
 80095a8:	bd30      	pop	{r4, r5, pc}
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	200015c8 	.word	0x200015c8
 80095b0:	200008bc 	.word	0x200008bc
 80095b4:	200006dc 	.word	0x200006dc
 80095b8:	0801150c 	.word	0x0801150c
 80095bc:	08011548 	.word	0x08011548

080095c0 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80095c0:	4a07      	ldr	r2, [pc, #28]	; (80095e0 <LoRaMacIsBusy+0x20>)
 80095c2:	23d0      	movs	r3, #208	; 0xd0
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	58d3      	ldr	r3, [r2, r3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d105      	bne.n	80095d8 <LoRaMacIsBusy+0x18>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80095cc:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <LoRaMacIsBusy+0x24>)
 80095ce:	5cd3      	ldrb	r3, [r2, r3]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d003      	beq.n	80095dc <LoRaMacIsBusy+0x1c>
    return true;
 80095d4:	2001      	movs	r0, #1
 80095d6:	e000      	b.n	80095da <LoRaMacIsBusy+0x1a>
 80095d8:	2001      	movs	r0, #1
}
 80095da:	4770      	bx	lr
        return false;
 80095dc:	2000      	movs	r0, #0
 80095de:	e7fc      	b.n	80095da <LoRaMacIsBusy+0x1a>
 80095e0:	200008bc 	.word	0x200008bc
 80095e4:	00000482 	.word	0x00000482

080095e8 <PrepareFrame>:
{
 80095e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ea:	b085      	sub	sp, #20
 80095ec:	0007      	movs	r7, r0
 80095ee:	9100      	str	r1, [sp, #0]
 80095f0:	9201      	str	r2, [sp, #4]
 80095f2:	001d      	movs	r5, r3
 80095f4:	ab0a      	add	r3, sp, #40	; 0x28
 80095f6:	881e      	ldrh	r6, [r3, #0]
    MacCtx.PktBufferLen = 0;
 80095f8:	4a6a      	ldr	r2, [pc, #424]	; (80097a4 <PrepareFrame+0x1bc>)
 80095fa:	2300      	movs	r3, #0
 80095fc:	8013      	strh	r3, [r2, #0]
    MacCtx.NodeAckRequested = false;
 80095fe:	2000      	movs	r0, #0
 8009600:	4969      	ldr	r1, [pc, #420]	; (80097a8 <PrepareFrame+0x1c0>)
 8009602:	5450      	strb	r0, [r2, r1]
    uint32_t fCntUp = 0;
 8009604:	9303      	str	r3, [sp, #12]
    size_t macCmdsSize = 0;
 8009606:	9302      	str	r3, [sp, #8]
    if( fBuffer == NULL )
 8009608:	2d00      	cmp	r5, #0
 800960a:	d019      	beq.n	8009640 <PrepareFrame+0x58>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800960c:	4c67      	ldr	r4, [pc, #412]	; (80097ac <PrepareFrame+0x1c4>)
 800960e:	0032      	movs	r2, r6
 8009610:	0029      	movs	r1, r5
 8009612:	0020      	movs	r0, r4
 8009614:	f005 fb87 	bl	800ed26 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009618:	b2f0      	uxtb	r0, r6
 800961a:	0023      	movs	r3, r4
 800961c:	3b39      	subs	r3, #57	; 0x39
 800961e:	3bff      	subs	r3, #255	; 0xff
 8009620:	4a63      	ldr	r2, [pc, #396]	; (80097b0 <PrepareFrame+0x1c8>)
 8009622:	5498      	strb	r0, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009624:	783a      	ldrb	r2, [r7, #0]
 8009626:	709a      	strb	r2, [r3, #2]
    switch( macHdr->Bits.MType )
 8009628:	783a      	ldrb	r2, [r7, #0]
 800962a:	0952      	lsrs	r2, r2, #5
 800962c:	2a04      	cmp	r2, #4
 800962e:	d009      	beq.n	8009644 <PrepareFrame+0x5c>
 8009630:	2a07      	cmp	r2, #7
 8009632:	d100      	bne.n	8009636 <PrepareFrame+0x4e>
 8009634:	e097      	b.n	8009766 <PrepareFrame+0x17e>
 8009636:	2a02      	cmp	r2, #2
 8009638:	d008      	beq.n	800964c <PrepareFrame+0x64>
 800963a:	2002      	movs	r0, #2
}
 800963c:	b005      	add	sp, #20
 800963e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fBufferSize = 0;
 8009640:	2600      	movs	r6, #0
 8009642:	e7e3      	b.n	800960c <PrepareFrame+0x24>
            MacCtx.NodeAckRequested = true;
 8009644:	4a57      	ldr	r2, [pc, #348]	; (80097a4 <PrepareFrame+0x1bc>)
 8009646:	4b58      	ldr	r3, [pc, #352]	; (80097a8 <PrepareFrame+0x1c0>)
 8009648:	2101      	movs	r1, #1
 800964a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800964c:	4b55      	ldr	r3, [pc, #340]	; (80097a4 <PrepareFrame+0x1bc>)
 800964e:	2282      	movs	r2, #130	; 0x82
 8009650:	0052      	lsls	r2, r2, #1
 8009652:	2104      	movs	r1, #4
 8009654:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009656:	1c99      	adds	r1, r3, #2
 8009658:	3204      	adds	r2, #4
 800965a:	5099      	str	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800965c:	3204      	adds	r2, #4
 800965e:	21ff      	movs	r1, #255	; 0xff
 8009660:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009662:	7839      	ldrb	r1, [r7, #0]
 8009664:	220e      	movs	r2, #14
 8009666:	32ff      	adds	r2, #255	; 0xff
 8009668:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800966a:	321b      	adds	r2, #27
 800966c:	9901      	ldr	r1, [sp, #4]
 800966e:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8009670:	4a50      	ldr	r2, [pc, #320]	; (80097b4 <PrepareFrame+0x1cc>)
 8009672:	589a      	ldr	r2, [r3, r2]
 8009674:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8009676:	2288      	movs	r2, #136	; 0x88
 8009678:	0052      	lsls	r2, r2, #1
 800967a:	5099      	str	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800967c:	9a00      	ldr	r2, [sp, #0]
 800967e:	7811      	ldrb	r1, [r2, #0]
 8009680:	228a      	movs	r2, #138	; 0x8a
 8009682:	0052      	lsls	r2, r2, #1
 8009684:	5499      	strb	r1, [r3, r2]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009686:	321c      	adds	r2, #28
 8009688:	5498      	strb	r0, [r3, r2]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800968a:	0019      	movs	r1, r3
 800968c:	3139      	adds	r1, #57	; 0x39
 800968e:	31ff      	adds	r1, #255	; 0xff
 8009690:	3a04      	subs	r2, #4
 8009692:	5099      	str	r1, [r3, r2]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009694:	a803      	add	r0, sp, #12
 8009696:	f002 febd 	bl	800c414 <LoRaMacCryptoGetFCntUp>
 800969a:	2800      	cmp	r0, #0
 800969c:	d175      	bne.n	800978a <PrepareFrame+0x1a2>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800969e:	9a03      	ldr	r2, [sp, #12]
 80096a0:	4b40      	ldr	r3, [pc, #256]	; (80097a4 <PrepareFrame+0x1bc>)
 80096a2:	218b      	movs	r1, #139	; 0x8b
 80096a4:	0049      	lsls	r1, r1, #1
 80096a6:	525a      	strh	r2, [r3, r1]
            MacCtx.McpsConfirm.NbRetries = 0;
 80096a8:	2100      	movs	r1, #0
 80096aa:	4843      	ldr	r0, [pc, #268]	; (80097b8 <PrepareFrame+0x1d0>)
 80096ac:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsConfirm.AckReceived = false;
 80096ae:	3801      	subs	r0, #1
 80096b0:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80096b2:	2189      	movs	r1, #137	; 0x89
 80096b4:	00c9      	lsls	r1, r1, #3
 80096b6:	505a      	str	r2, [r3, r1]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80096b8:	a802      	add	r0, sp, #8
 80096ba:	f002 fb0f 	bl	800bcdc <LoRaMacCommandsGetSizeSerializedCmds>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d165      	bne.n	800978e <PrepareFrame+0x1a6>
            if( macCmdsSize > 0 )
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0b9      	beq.n	800963c <PrepareFrame+0x54>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80096c8:	4d36      	ldr	r5, [pc, #216]	; (80097a4 <PrepareFrame+0x1bc>)
 80096ca:	4b3a      	ldr	r3, [pc, #232]	; (80097b4 <PrepareFrame+0x1cc>)
 80096cc:	58ea      	ldr	r2, [r5, r3]
 80096ce:	23f9      	movs	r3, #249	; 0xf9
 80096d0:	56d0      	ldrsb	r0, [r2, r3]
 80096d2:	f7fe fe49 	bl	8008368 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80096d6:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <PrepareFrame+0x1c8>)
 80096d8:	5ceb      	ldrb	r3, [r5, r3]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <PrepareFrame+0xfc>
 80096de:	9a02      	ldr	r2, [sp, #8]
 80096e0:	2a0f      	cmp	r2, #15
 80096e2:	d91f      	bls.n	8009724 <PrepareFrame+0x13c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <PrepareFrame+0x106>
 80096e8:	9b02      	ldr	r3, [sp, #8]
 80096ea:	2b0f      	cmp	r3, #15
 80096ec:	d82f      	bhi.n	800974e <PrepareFrame+0x166>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80096ee:	4a2d      	ldr	r2, [pc, #180]	; (80097a4 <PrepareFrame+0x1bc>)
 80096f0:	4b30      	ldr	r3, [pc, #192]	; (80097b4 <PrepareFrame+0x1cc>)
 80096f2:	58d2      	ldr	r2, [r2, r3]
 80096f4:	3241      	adds	r2, #65	; 0x41
 80096f6:	32ff      	adds	r2, #255	; 0xff
 80096f8:	a902      	add	r1, sp, #8
 80096fa:	f002 fafb 	bl	800bcf4 <LoRaMacCommandsSerializeCmds>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d14b      	bne.n	800979a <PrepareFrame+0x1b2>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009702:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <PrepareFrame+0x1bc>)
 8009704:	2294      	movs	r2, #148	; 0x94
 8009706:	0052      	lsls	r2, r2, #1
 8009708:	2100      	movs	r1, #0
 800970a:	5499      	strb	r1, [r3, r2]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800970c:	4a29      	ldr	r2, [pc, #164]	; (80097b4 <PrepareFrame+0x1cc>)
 800970e:	589a      	ldr	r2, [r3, r2]
 8009710:	3241      	adds	r2, #65	; 0x41
 8009712:	32ff      	adds	r2, #255	; 0xff
 8009714:	312d      	adds	r1, #45	; 0x2d
 8009716:	31ff      	adds	r1, #255	; 0xff
 8009718:	505a      	str	r2, [r3, r1]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800971a:	2298      	movs	r2, #152	; 0x98
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	9902      	ldr	r1, [sp, #8]
 8009720:	5499      	strb	r1, [r3, r2]
 8009722:	e78b      	b.n	800963c <PrepareFrame+0x54>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009724:	4a25      	ldr	r2, [pc, #148]	; (80097bc <PrepareFrame+0x1d4>)
 8009726:	a902      	add	r1, sp, #8
 8009728:	200f      	movs	r0, #15
 800972a:	f002 fae3 	bl	800bcf4 <LoRaMacCommandsSerializeCmds>
 800972e:	2800      	cmp	r0, #0
 8009730:	d12f      	bne.n	8009792 <PrepareFrame+0x1aa>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009732:	220f      	movs	r2, #15
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	401a      	ands	r2, r3
 8009738:	9c00      	ldr	r4, [sp, #0]
 800973a:	7823      	ldrb	r3, [r4, #0]
 800973c:	210f      	movs	r1, #15
 800973e:	438b      	bics	r3, r1
 8009740:	4313      	orrs	r3, r2
 8009742:	7023      	strb	r3, [r4, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009744:	4917      	ldr	r1, [pc, #92]	; (80097a4 <PrepareFrame+0x1bc>)
 8009746:	228a      	movs	r2, #138	; 0x8a
 8009748:	0052      	lsls	r2, r2, #1
 800974a:	548b      	strb	r3, [r1, r2]
 800974c:	e776      	b.n	800963c <PrepareFrame+0x54>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800974e:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <PrepareFrame+0x1bc>)
 8009750:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <PrepareFrame+0x1cc>)
 8009752:	58d2      	ldr	r2, [r2, r3]
 8009754:	3241      	adds	r2, #65	; 0x41
 8009756:	32ff      	adds	r2, #255	; 0xff
 8009758:	a902      	add	r1, sp, #8
 800975a:	f002 facb 	bl	800bcf4 <LoRaMacCommandsSerializeCmds>
 800975e:	2800      	cmp	r0, #0
 8009760:	d019      	beq.n	8009796 <PrepareFrame+0x1ae>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009762:	2013      	movs	r0, #19
 8009764:	e76a      	b.n	800963c <PrepareFrame+0x54>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009766:	2d00      	cmp	r5, #0
 8009768:	d019      	beq.n	800979e <PrepareFrame+0x1b6>
 800976a:	2800      	cmp	r0, #0
 800976c:	d100      	bne.n	8009770 <PrepareFrame+0x188>
 800976e:	e765      	b.n	800963c <PrepareFrame+0x54>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009770:	b282      	uxth	r2, r0
 8009772:	4c13      	ldr	r4, [pc, #76]	; (80097c0 <PrepareFrame+0x1d8>)
 8009774:	0029      	movs	r1, r5
 8009776:	0020      	movs	r0, r4
 8009778:	f005 fad5 	bl	800ed26 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800977c:	3c03      	subs	r4, #3
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <PrepareFrame+0x1c8>)
 8009780:	5ce3      	ldrb	r3, [r4, r3]
 8009782:	3301      	adds	r3, #1
 8009784:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009786:	2000      	movs	r0, #0
 8009788:	e758      	b.n	800963c <PrepareFrame+0x54>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800978a:	2012      	movs	r0, #18
 800978c:	e756      	b.n	800963c <PrepareFrame+0x54>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800978e:	2013      	movs	r0, #19
 8009790:	e754      	b.n	800963c <PrepareFrame+0x54>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009792:	2013      	movs	r0, #19
 8009794:	e752      	b.n	800963c <PrepareFrame+0x54>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009796:	200a      	movs	r0, #10
 8009798:	e750      	b.n	800963c <PrepareFrame+0x54>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800979a:	2013      	movs	r0, #19
 800979c:	e74e      	b.n	800963c <PrepareFrame+0x54>
    return LORAMAC_STATUS_OK;
 800979e:	2000      	movs	r0, #0
 80097a0:	e74c      	b.n	800963c <PrepareFrame+0x54>
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	200008bc 	.word	0x200008bc
 80097a8:	00000414 	.word	0x00000414
 80097ac:	200009f4 	.word	0x200009f4
 80097b0:	00000237 	.word	0x00000237
 80097b4:	00000484 	.word	0x00000484
 80097b8:	00000441 	.word	0x00000441
 80097bc:	200009d4 	.word	0x200009d4
 80097c0:	200008bf 	.word	0x200008bf

080097c4 <SendFrameOnChannel>:
{
 80097c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097c6:	b087      	sub	sp, #28
 80097c8:	0005      	movs	r5, r0
    int8_t txPower = 0;
 80097ca:	466b      	mov	r3, sp
 80097cc:	2200      	movs	r2, #0
 80097ce:	71da      	strb	r2, [r3, #7]
    txConfig.Channel = channel;
 80097d0:	ab02      	add	r3, sp, #8
 80097d2:	7018      	strb	r0, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80097d4:	493b      	ldr	r1, [pc, #236]	; (80098c4 <SendFrameOnChannel+0x100>)
 80097d6:	4a3c      	ldr	r2, [pc, #240]	; (80098c8 <SendFrameOnChannel+0x104>)
 80097d8:	588a      	ldr	r2, [r1, r2]
 80097da:	20f9      	movs	r0, #249	; 0xf9
 80097dc:	5610      	ldrsb	r0, [r2, r0]
 80097de:	7058      	strb	r0, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80097e0:	20f8      	movs	r0, #248	; 0xf8
 80097e2:	5610      	ldrsb	r0, [r2, r0]
 80097e4:	7098      	strb	r0, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80097e6:	2098      	movs	r0, #152	; 0x98
 80097e8:	0040      	lsls	r0, r0, #1
 80097ea:	5810      	ldr	r0, [r2, r0]
 80097ec:	9003      	str	r0, [sp, #12]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80097ee:	209a      	movs	r0, #154	; 0x9a
 80097f0:	0040      	lsls	r0, r0, #1
 80097f2:	5812      	ldr	r2, [r2, r0]
 80097f4:	9204      	str	r2, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80097f6:	880a      	ldrh	r2, [r1, #0]
 80097f8:	819a      	strh	r2, [r3, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80097fa:	f002 f917 	bl	800ba2c <LoRaMacClassBIsBeaconExpected>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d158      	bne.n	80098b4 <SendFrameOnChannel+0xf0>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009802:	4a30      	ldr	r2, [pc, #192]	; (80098c4 <SendFrameOnChannel+0x100>)
 8009804:	4b30      	ldr	r3, [pc, #192]	; (80098c8 <SendFrameOnChannel+0x104>)
 8009806:	58d2      	ldr	r2, [r2, r3]
 8009808:	23f0      	movs	r3, #240	; 0xf0
 800980a:	5cd3      	ldrb	r3, [r2, r3]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d046      	beq.n	800989e <SendFrameOnChannel+0xda>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009810:	4c2c      	ldr	r4, [pc, #176]	; (80098c4 <SendFrameOnChannel+0x100>)
 8009812:	4f2d      	ldr	r7, [pc, #180]	; (80098c8 <SendFrameOnChannel+0x104>)
 8009814:	2383      	movs	r3, #131	; 0x83
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	18e3      	adds	r3, r4, r3
 800981a:	466a      	mov	r2, sp
 800981c:	1dd6      	adds	r6, r2, #7
 800981e:	59e2      	ldr	r2, [r4, r7]
 8009820:	7810      	ldrb	r0, [r2, #0]
 8009822:	0032      	movs	r2, r6
 8009824:	a902      	add	r1, sp, #8
 8009826:	f003 fa36 	bl	800cc96 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800982a:	4b28      	ldr	r3, [pc, #160]	; (80098cc <SendFrameOnChannel+0x108>)
 800982c:	2201      	movs	r2, #1
 800982e:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009830:	59e2      	ldr	r2, [r4, r7]
 8009832:	23f9      	movs	r3, #249	; 0xf9
 8009834:	5cd2      	ldrb	r2, [r2, r3]
 8009836:	4b26      	ldr	r3, [pc, #152]	; (80098d0 <SendFrameOnChannel+0x10c>)
 8009838:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 800983a:	7832      	ldrb	r2, [r6, #0]
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <SendFrameOnChannel+0x110>)
 800983e:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8009840:	4b25      	ldr	r3, [pc, #148]	; (80098d8 <SendFrameOnChannel+0x114>)
 8009842:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009844:	3b34      	subs	r3, #52	; 0x34
 8009846:	58e3      	ldr	r3, [r4, r3]
 8009848:	4a24      	ldr	r2, [pc, #144]	; (80098dc <SendFrameOnChannel+0x118>)
 800984a:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800984c:	4a24      	ldr	r2, [pc, #144]	; (80098e0 <SendFrameOnChannel+0x11c>)
 800984e:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009850:	f002 f8f2 	bl	800ba38 <LoRaMacClassBIsBeaconModeActive>
 8009854:	2800      	cmp	r0, #0
 8009856:	d007      	beq.n	8009868 <SendFrameOnChannel+0xa4>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8009858:	4a1a      	ldr	r2, [pc, #104]	; (80098c4 <SendFrameOnChannel+0x100>)
 800985a:	2383      	movs	r3, #131	; 0x83
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	58d0      	ldr	r0, [r2, r3]
 8009860:	f002 f8fc 	bl	800ba5c <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8009864:	2800      	cmp	r0, #0
 8009866:	d12b      	bne.n	80098c0 <SendFrameOnChannel+0xfc>
    LoRaMacClassBHaltBeaconing( );
 8009868:	f002 f8e9 	bl	800ba3e <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800986c:	4b15      	ldr	r3, [pc, #84]	; (80098c4 <SendFrameOnChannel+0x100>)
 800986e:	21d0      	movs	r1, #208	; 0xd0
 8009870:	0089      	lsls	r1, r1, #2
 8009872:	2202      	movs	r2, #2
 8009874:	5858      	ldr	r0, [r3, r1]
 8009876:	4302      	orrs	r2, r0
 8009878:	505a      	str	r2, [r3, r1]
    if( MacCtx.NodeAckRequested == false )
 800987a:	4a1a      	ldr	r2, [pc, #104]	; (80098e4 <SendFrameOnChannel+0x120>)
 800987c:	5c9b      	ldrb	r3, [r3, r2]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d104      	bne.n	800988c <SendFrameOnChannel+0xc8>
        MacCtx.ChannelsNbTransCounter++;
 8009882:	4910      	ldr	r1, [pc, #64]	; (80098c4 <SendFrameOnChannel+0x100>)
 8009884:	3a04      	subs	r2, #4
 8009886:	5c8b      	ldrb	r3, [r1, r2]
 8009888:	3301      	adds	r3, #1
 800988a:	548b      	strb	r3, [r1, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800988c:	4b16      	ldr	r3, [pc, #88]	; (80098e8 <SendFrameOnChannel+0x124>)
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	480c      	ldr	r0, [pc, #48]	; (80098c4 <SendFrameOnChannel+0x100>)
 8009892:	7801      	ldrb	r1, [r0, #0]
 8009894:	3002      	adds	r0, #2
 8009896:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8009898:	2000      	movs	r0, #0
}
 800989a:	b007      	add	sp, #28
 800989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800989e:	f002 f8c7 	bl	800ba30 <LoRaMacClassBIsPingExpected>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d108      	bne.n	80098b8 <SendFrameOnChannel+0xf4>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80098a6:	f002 f8c5 	bl	800ba34 <LoRaMacClassBIsMulticastExpected>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d106      	bne.n	80098bc <SendFrameOnChannel+0xf8>
            LoRaMacClassBStopRxSlots( );
 80098ae:	f002 f8d7 	bl	800ba60 <LoRaMacClassBStopRxSlots>
 80098b2:	e7ad      	b.n	8009810 <SendFrameOnChannel+0x4c>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80098b4:	200e      	movs	r0, #14
 80098b6:	e7f0      	b.n	800989a <SendFrameOnChannel+0xd6>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80098b8:	200f      	movs	r0, #15
 80098ba:	e7ee      	b.n	800989a <SendFrameOnChannel+0xd6>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80098bc:	200f      	movs	r0, #15
 80098be:	e7ec      	b.n	800989a <SendFrameOnChannel+0xd6>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80098c0:	2010      	movs	r0, #16
 80098c2:	e7ea      	b.n	800989a <SendFrameOnChannel+0xd6>
 80098c4:	200008bc 	.word	0x200008bc
 80098c8:	00000484 	.word	0x00000484
 80098cc:	0000043d 	.word	0x0000043d
 80098d0:	0000043e 	.word	0x0000043e
 80098d4:	0000043f 	.word	0x0000043f
 80098d8:	0000044c 	.word	0x0000044c
 80098dc:	00000444 	.word	0x00000444
 80098e0:	00000454 	.word	0x00000454
 80098e4:	00000414 	.word	0x00000414
 80098e8:	08010b84 	.word	0x08010b84

080098ec <ScheduleTx>:
{
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	46c6      	mov	lr, r8
 80098f0:	b500      	push	{lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	0004      	movs	r4, r0
    TimerTime_t dutyCycleTimeOff = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	9307      	str	r3, [sp, #28]
    size_t macCmdsSize = 0;
 80098fa:	9303      	str	r3, [sp, #12]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 80098fc:	4e69      	ldr	r6, [pc, #420]	; (8009aa4 <ScheduleTx+0x1b8>)
 80098fe:	4d6a      	ldr	r5, [pc, #424]	; (8009aa8 <ScheduleTx+0x1bc>)
 8009900:	333f      	adds	r3, #63	; 0x3f
 8009902:	33ff      	adds	r3, #255	; 0xff
 8009904:	5972      	ldr	r2, [r6, r5]
 8009906:	5cd0      	ldrb	r0, [r2, r3]
 8009908:	f7ff fb1c 	bl	8008f44 <CalculateBackOff>
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800990c:	5973      	ldr	r3, [r6, r5]
 800990e:	22e4      	movs	r2, #228	; 0xe4
 8009910:	0052      	lsls	r2, r2, #1
 8009912:	589a      	ldr	r2, [r3, r2]
 8009914:	9204      	str	r2, [sp, #16]
 8009916:	aa04      	add	r2, sp, #16
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009918:	21f9      	movs	r1, #249	; 0xf9
 800991a:	5659      	ldrsb	r1, [r3, r1]
 800991c:	7211      	strb	r1, [r2, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800991e:	213e      	movs	r1, #62	; 0x3e
 8009920:	31ff      	adds	r1, #255	; 0xff
 8009922:	5c59      	ldrb	r1, [r3, r1]
 8009924:	7291      	strb	r1, [r2, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009926:	22ea      	movs	r2, #234	; 0xea
 8009928:	0052      	lsls	r2, r2, #1
 800992a:	5c9a      	ldrb	r2, [r3, r2]
 800992c:	2a00      	cmp	r2, #0
 800992e:	d11d      	bne.n	800996c <ScheduleTx+0x80>
        nextChan.Joined = false;
 8009930:	aa04      	add	r2, sp, #16
 8009932:	2100      	movs	r1, #0
 8009934:	7251      	strb	r1, [r2, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8009936:	22e2      	movs	r2, #226	; 0xe2
 8009938:	0052      	lsls	r2, r2, #1
 800993a:	589a      	ldr	r2, [r3, r2]
 800993c:	9205      	str	r2, [sp, #20]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 800993e:	7818      	ldrb	r0, [r3, #0]
 8009940:	33c9      	adds	r3, #201	; 0xc9
 8009942:	33ff      	adds	r3, #255	; 0xff
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	ab07      	add	r3, sp, #28
 8009948:	4a58      	ldr	r2, [pc, #352]	; (8009aac <ScheduleTx+0x1c0>)
 800994a:	a904      	add	r1, sp, #16
 800994c:	f003 f9f7 	bl	800cd3e <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8009950:	2800      	cmp	r0, #0
 8009952:	d021      	beq.n	8009998 <ScheduleTx+0xac>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009954:	280b      	cmp	r0, #11
 8009956:	d105      	bne.n	8009964 <ScheduleTx+0x78>
 8009958:	2c00      	cmp	r4, #0
 800995a:	d003      	beq.n	8009964 <ScheduleTx+0x78>
            if( dutyCycleTimeOff != 0 )
 800995c:	9907      	ldr	r1, [sp, #28]
 800995e:	2900      	cmp	r1, #0
 8009960:	d108      	bne.n	8009974 <ScheduleTx+0x88>
            return LORAMAC_STATUS_OK;
 8009962:	2000      	movs	r0, #0
}
 8009964:	b008      	add	sp, #32
 8009966:	bc80      	pop	{r7}
 8009968:	46b8      	mov	r8, r7
 800996a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nextChan.Joined = true;
 800996c:	aa04      	add	r2, sp, #16
 800996e:	2101      	movs	r1, #1
 8009970:	7251      	strb	r1, [r2, #9]
 8009972:	e7e0      	b.n	8009936 <ScheduleTx+0x4a>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009974:	4c4b      	ldr	r4, [pc, #300]	; (8009aa4 <ScheduleTx+0x1b8>)
 8009976:	22d0      	movs	r2, #208	; 0xd0
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	2320      	movs	r3, #32
 800997c:	58a0      	ldr	r0, [r4, r2]
 800997e:	4303      	orrs	r3, r0
 8009980:	50a3      	str	r3, [r4, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8009982:	23da      	movs	r3, #218	; 0xda
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	469c      	mov	ip, r3
 8009988:	4464      	add	r4, ip
 800998a:	0020      	movs	r0, r4
 800998c:	f005 f900 	bl	800eb90 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009990:	0020      	movs	r0, r4
 8009992:	f005 f83b 	bl	800ea0c <TimerStart>
 8009996:	e7e4      	b.n	8009962 <ScheduleTx+0x76>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009998:	4c42      	ldr	r4, [pc, #264]	; (8009aa4 <ScheduleTx+0x1b8>)
 800999a:	4d43      	ldr	r5, [pc, #268]	; (8009aa8 <ScheduleTx+0x1bc>)
 800999c:	5961      	ldr	r1, [r4, r5]
 800999e:	780b      	ldrb	r3, [r1, #0]
 80099a0:	4698      	mov	r8, r3
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80099a2:	231a      	movs	r3, #26
 80099a4:	33ff      	adds	r3, #255	; 0xff
 80099a6:	56cb      	ldrsb	r3, [r1, r3]
 80099a8:	22f9      	movs	r2, #249	; 0xf9
 80099aa:	568a      	ldrsb	r2, [r1, r2]
 80099ac:	202e      	movs	r0, #46	; 0x2e
 80099ae:	30ff      	adds	r0, #255	; 0xff
 80099b0:	5c09      	ldrb	r1, [r1, r0]
 80099b2:	4640      	mov	r0, r8
 80099b4:	f003 f9d8 	bl	800cd68 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80099b8:	5962      	ldr	r2, [r4, r5]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80099ba:	27fc      	movs	r7, #252	; 0xfc
 80099bc:	59d3      	ldr	r3, [r2, r7]
 80099be:	2680      	movs	r6, #128	; 0x80
 80099c0:	0076      	lsls	r6, r6, #1
 80099c2:	5d92      	ldrb	r2, [r2, r6]
 80099c4:	b241      	sxtb	r1, r0
 80099c6:	20ee      	movs	r0, #238	; 0xee
 80099c8:	0080      	lsls	r0, r0, #2
 80099ca:	1820      	adds	r0, r4, r0
 80099cc:	9000      	str	r0, [sp, #0]
 80099ce:	4640      	mov	r0, r8
 80099d0:	f003 f94a 	bl	800cc68 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80099d4:	5960      	ldr	r0, [r4, r5]
 80099d6:	59c3      	ldr	r3, [r0, r7]
 80099d8:	5d82      	ldrb	r2, [r0, r6]
 80099da:	2190      	movs	r1, #144	; 0x90
 80099dc:	0049      	lsls	r1, r1, #1
 80099de:	5641      	ldrsb	r1, [r0, r1]
 80099e0:	7800      	ldrb	r0, [r0, #0]
 80099e2:	26f3      	movs	r6, #243	; 0xf3
 80099e4:	00b6      	lsls	r6, r6, #2
 80099e6:	19a6      	adds	r6, r4, r6
 80099e8:	9600      	str	r6, [sp, #0]
 80099ea:	f003 f93d 	bl	800cc68 <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80099ee:	5962      	ldr	r2, [r4, r5]
 80099f0:	23ea      	movs	r3, #234	; 0xea
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	5cd3      	ldrb	r3, [r2, r3]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d126      	bne.n	8009a48 <ScheduleTx+0x15c>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80099fa:	3311      	adds	r3, #17
 80099fc:	33ff      	adds	r3, #255	; 0xff
 80099fe:	58d1      	ldr	r1, [r2, r3]
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <ScheduleTx+0x1b8>)
 8009a02:	20f1      	movs	r0, #241	; 0xf1
 8009a04:	0080      	lsls	r0, r0, #2
 8009a06:	5818      	ldr	r0, [r3, r0]
 8009a08:	1809      	adds	r1, r1, r0
 8009a0a:	20ec      	movs	r0, #236	; 0xec
 8009a0c:	0080      	lsls	r0, r0, #2
 8009a0e:	5019      	str	r1, [r3, r0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009a10:	218a      	movs	r1, #138	; 0x8a
 8009a12:	0049      	lsls	r1, r1, #1
 8009a14:	5852      	ldr	r2, [r2, r1]
 8009a16:	21f6      	movs	r1, #246	; 0xf6
 8009a18:	0089      	lsls	r1, r1, #2
 8009a1a:	5859      	ldr	r1, [r3, r1]
 8009a1c:	1852      	adds	r2, r2, r1
 8009a1e:	21ed      	movs	r1, #237	; 0xed
 8009a20:	0089      	lsls	r1, r1, #2
 8009a22:	505a      	str	r2, [r3, r1]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8009a24:	4b1f      	ldr	r3, [pc, #124]	; (8009aa4 <ScheduleTx+0x1b8>)
 8009a26:	4a20      	ldr	r2, [pc, #128]	; (8009aa8 <ScheduleTx+0x1bc>)
 8009a28:	589a      	ldr	r2, [r3, r2]
 8009a2a:	4921      	ldr	r1, [pc, #132]	; (8009ab0 <ScheduleTx+0x1c4>)
 8009a2c:	5c59      	ldrb	r1, [r3, r1]
 8009a2e:	23f9      	movs	r3, #249	; 0xf9
 8009a30:	5cd0      	ldrb	r0, [r2, r3]
 8009a32:	f7ff fad3 	bl	8008fdc <SecureFrame>
    if( retval != LORAMAC_STATUS_OK )
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d000      	beq.n	8009a3c <ScheduleTx+0x150>
 8009a3a:	e793      	b.n	8009964 <ScheduleTx+0x78>
    return SendFrameOnChannel( MacCtx.Channel );
 8009a3c:	4a19      	ldr	r2, [pc, #100]	; (8009aa4 <ScheduleTx+0x1b8>)
 8009a3e:	4b1c      	ldr	r3, [pc, #112]	; (8009ab0 <ScheduleTx+0x1c4>)
 8009a40:	5cd0      	ldrb	r0, [r2, r3]
 8009a42:	f7ff febf 	bl	80097c4 <SendFrameOnChannel>
 8009a46:	e78d      	b.n	8009964 <ScheduleTx+0x78>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009a48:	a803      	add	r0, sp, #12
 8009a4a:	f002 f947 	bl	800bcdc <LoRaMacCommandsGetSizeSerializedCmds>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d124      	bne.n	8009a9c <ScheduleTx+0x1b0>
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <ScheduleTx+0x1b8>)
 8009a54:	4a14      	ldr	r2, [pc, #80]	; (8009aa8 <ScheduleTx+0x1bc>)
 8009a56:	5898      	ldr	r0, [r3, r2]
 8009a58:	9a03      	ldr	r2, [sp, #12]
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	21f9      	movs	r1, #249	; 0xf9
 8009a5e:	5641      	ldrsb	r1, [r0, r1]
 8009a60:	4814      	ldr	r0, [pc, #80]	; (8009ab4 <ScheduleTx+0x1c8>)
 8009a62:	5c18      	ldrb	r0, [r3, r0]
 8009a64:	f7fe fca0 	bl	80083a8 <ValidatePayloadLength>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d019      	beq.n	8009aa0 <ScheduleTx+0x1b4>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <ScheduleTx+0x1b8>)
 8009a6e:	4a0e      	ldr	r2, [pc, #56]	; (8009aa8 <ScheduleTx+0x1bc>)
 8009a70:	5899      	ldr	r1, [r3, r2]
 8009a72:	2284      	movs	r2, #132	; 0x84
 8009a74:	0052      	lsls	r2, r2, #1
 8009a76:	588a      	ldr	r2, [r1, r2]
 8009a78:	20f1      	movs	r0, #241	; 0xf1
 8009a7a:	0080      	lsls	r0, r0, #2
 8009a7c:	5818      	ldr	r0, [r3, r0]
 8009a7e:	1812      	adds	r2, r2, r0
 8009a80:	20ec      	movs	r0, #236	; 0xec
 8009a82:	0080      	lsls	r0, r0, #2
 8009a84:	501a      	str	r2, [r3, r0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009a86:	2286      	movs	r2, #134	; 0x86
 8009a88:	0052      	lsls	r2, r2, #1
 8009a8a:	588a      	ldr	r2, [r1, r2]
 8009a8c:	21f6      	movs	r1, #246	; 0xf6
 8009a8e:	0089      	lsls	r1, r1, #2
 8009a90:	5859      	ldr	r1, [r3, r1]
 8009a92:	1852      	adds	r2, r2, r1
 8009a94:	21ed      	movs	r1, #237	; 0xed
 8009a96:	0089      	lsls	r1, r1, #2
 8009a98:	505a      	str	r2, [r3, r1]
 8009a9a:	e7c3      	b.n	8009a24 <ScheduleTx+0x138>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009a9c:	2013      	movs	r0, #19
 8009a9e:	e761      	b.n	8009964 <ScheduleTx+0x78>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009aa0:	2008      	movs	r0, #8
 8009aa2:	e75f      	b.n	8009964 <ScheduleTx+0x78>
 8009aa4:	200008bc 	.word	0x200008bc
 8009aa8:	00000484 	.word	0x00000484
 8009aac:	20000cd1 	.word	0x20000cd1
 8009ab0:	00000415 	.word	0x00000415
 8009ab4:	00000237 	.word	0x00000237

08009ab8 <OnTxDelayedTimerEvent>:
{
 8009ab8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009aba:	4c14      	ldr	r4, [pc, #80]	; (8009b0c <OnTxDelayedTimerEvent+0x54>)
 8009abc:	0020      	movs	r0, r4
 8009abe:	f005 f825 	bl	800eb0c <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009ac2:	4b13      	ldr	r3, [pc, #76]	; (8009b10 <OnTxDelayedTimerEvent+0x58>)
 8009ac4:	469c      	mov	ip, r3
 8009ac6:	4464      	add	r4, ip
 8009ac8:	22d0      	movs	r2, #208	; 0xd0
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	2320      	movs	r3, #32
 8009ace:	58a1      	ldr	r1, [r4, r2]
 8009ad0:	4399      	bics	r1, r3
 8009ad2:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	f7ff ff09 	bl	80098ec <ScheduleTx>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d001      	beq.n	8009ae2 <OnTxDelayedTimerEvent+0x2a>
 8009ade:	280b      	cmp	r0, #11
 8009ae0:	d100      	bne.n	8009ae4 <OnTxDelayedTimerEvent+0x2c>
}
 8009ae2:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <OnTxDelayedTimerEvent+0x5c>)
 8009ae6:	4a0c      	ldr	r2, [pc, #48]	; (8009b18 <OnTxDelayedTimerEvent+0x60>)
 8009ae8:	5899      	ldr	r1, [r3, r2]
 8009aea:	22f9      	movs	r2, #249	; 0xf9
 8009aec:	5c89      	ldrb	r1, [r1, r2]
 8009aee:	4a0b      	ldr	r2, [pc, #44]	; (8009b1c <OnTxDelayedTimerEvent+0x64>)
 8009af0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009af2:	4a0b      	ldr	r2, [pc, #44]	; (8009b20 <OnTxDelayedTimerEvent+0x68>)
 8009af4:	5c99      	ldrb	r1, [r3, r2]
 8009af6:	4a0b      	ldr	r2, [pc, #44]	; (8009b24 <OnTxDelayedTimerEvent+0x6c>)
 8009af8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009afa:	4a0b      	ldr	r2, [pc, #44]	; (8009b28 <OnTxDelayedTimerEvent+0x70>)
 8009afc:	2109      	movs	r1, #9
 8009afe:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009b00:	2009      	movs	r0, #9
 8009b02:	f002 f9dd 	bl	800bec0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009b06:	f7fe fb8f 	bl	8008228 <StopRetransmission>
}
 8009b0a:	e7ea      	b.n	8009ae2 <OnTxDelayedTimerEvent+0x2a>
 8009b0c:	20000c24 	.word	0x20000c24
 8009b10:	fffffc98 	.word	0xfffffc98
 8009b14:	200008bc 	.word	0x200008bc
 8009b18:	00000484 	.word	0x00000484
 8009b1c:	0000043e 	.word	0x0000043e
 8009b20:	00000412 	.word	0x00000412
 8009b24:	00000441 	.word	0x00000441
 8009b28:	0000043d 	.word	0x0000043d

08009b2c <LoRaMacHandleMcpsRequest>:
{
 8009b2c:	b510      	push	{r4, lr}
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009b2e:	4a27      	ldr	r2, [pc, #156]	; (8009bcc <LoRaMacHandleMcpsRequest+0xa0>)
 8009b30:	4b27      	ldr	r3, [pc, #156]	; (8009bd0 <LoRaMacHandleMcpsRequest+0xa4>)
 8009b32:	5cd3      	ldrb	r3, [r2, r3]
 8009b34:	07db      	lsls	r3, r3, #31
 8009b36:	d510      	bpl.n	8009b5a <LoRaMacHandleMcpsRequest+0x2e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009b38:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <LoRaMacHandleMcpsRequest+0xa8>)
 8009b3a:	5cd3      	ldrb	r3, [r2, r3]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <LoRaMacHandleMcpsRequest+0x20>
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d003      	beq.n	8009b4c <LoRaMacHandleMcpsRequest+0x20>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d009      	beq.n	8009b5c <LoRaMacHandleMcpsRequest+0x30>
        bool waitForRetransmission = false;
 8009b48:	2400      	movs	r4, #0
 8009b4a:	e004      	b.n	8009b56 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009b4c:	f7fe fb26 	bl	800819c <CheckRetransUnconfirmedUplink>
 8009b50:	0004      	movs	r4, r0
        if( stopRetransmission == true )
 8009b52:	2c00      	cmp	r4, #0
 8009b54:	d11a      	bne.n	8009b8c <LoRaMacHandleMcpsRequest+0x60>
        else if( waitForRetransmission == false )
 8009b56:	2c00      	cmp	r4, #0
 8009b58:	d02a      	beq.n	8009bb0 <LoRaMacHandleMcpsRequest+0x84>
}
 8009b5a:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 8009b5c:	4a1b      	ldr	r2, [pc, #108]	; (8009bcc <LoRaMacHandleMcpsRequest+0xa0>)
 8009b5e:	4b1e      	ldr	r3, [pc, #120]	; (8009bd8 <LoRaMacHandleMcpsRequest+0xac>)
 8009b60:	5cd3      	ldrb	r3, [r2, r3]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d022      	beq.n	8009bac <LoRaMacHandleMcpsRequest+0x80>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009b66:	f7fe fb43 	bl	80081f0 <CheckRetransConfirmedUplink>
 8009b6a:	0004      	movs	r4, r0
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009b6c:	4a17      	ldr	r2, [pc, #92]	; (8009bcc <LoRaMacHandleMcpsRequest+0xa0>)
 8009b6e:	4b1b      	ldr	r3, [pc, #108]	; (8009bdc <LoRaMacHandleMcpsRequest+0xb0>)
 8009b70:	58d2      	ldr	r2, [r2, r3]
 8009b72:	23e9      	movs	r3, #233	; 0xe9
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	5cd3      	ldrb	r3, [r2, r3]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ea      	bne.n	8009b52 <LoRaMacHandleMcpsRequest+0x26>
                    if( stopRetransmission == false )
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d102      	bne.n	8009b86 <LoRaMacHandleMcpsRequest+0x5a>
                        AckTimeoutRetriesProcess( );
 8009b80:	f7fe fbc4 	bl	800830c <AckTimeoutRetriesProcess>
 8009b84:	e7e5      	b.n	8009b52 <LoRaMacHandleMcpsRequest+0x26>
                        AckTimeoutRetriesFinalize( );
 8009b86:	f7ff f91d 	bl	8008dc4 <AckTimeoutRetriesFinalize>
 8009b8a:	e7e2      	b.n	8009b52 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009b8c:	4c14      	ldr	r4, [pc, #80]	; (8009be0 <LoRaMacHandleMcpsRequest+0xb4>)
 8009b8e:	0020      	movs	r0, r4
 8009b90:	f004 ffbc 	bl	800eb0c <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b94:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <LoRaMacHandleMcpsRequest+0xb8>)
 8009b96:	469c      	mov	ip, r3
 8009b98:	4464      	add	r4, ip
 8009b9a:	22d0      	movs	r2, #208	; 0xd0
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	2320      	movs	r3, #32
 8009ba0:	58a1      	ldr	r1, [r4, r2]
 8009ba2:	4399      	bics	r1, r3
 8009ba4:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8009ba6:	f7fe fb3f 	bl	8008228 <StopRetransmission>
 8009baa:	e7d6      	b.n	8009b5a <LoRaMacHandleMcpsRequest+0x2e>
                waitForRetransmission = true;
 8009bac:	2401      	movs	r4, #1
 8009bae:	e7d2      	b.n	8009b56 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009bb0:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <LoRaMacHandleMcpsRequest+0xa0>)
 8009bb2:	4907      	ldr	r1, [pc, #28]	; (8009bd0 <LoRaMacHandleMcpsRequest+0xa4>)
 8009bb4:	5c5a      	ldrb	r2, [r3, r1]
 8009bb6:	2020      	movs	r0, #32
 8009bb8:	4382      	bics	r2, r0
 8009bba:	545a      	strb	r2, [r3, r1]
            MacCtx.AckTimeoutRetry = false;
 8009bbc:	4a06      	ldr	r2, [pc, #24]	; (8009bd8 <LoRaMacHandleMcpsRequest+0xac>)
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	f7ff ff78 	bl	8009ab8 <OnTxDelayedTimerEvent>
}
 8009bc8:	e7c7      	b.n	8009b5a <LoRaMacHandleMcpsRequest+0x2e>
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	200008bc 	.word	0x200008bc
 8009bd0:	00000481 	.word	0x00000481
 8009bd4:	0000043c 	.word	0x0000043c
 8009bd8:	00000413 	.word	0x00000413
 8009bdc:	00000484 	.word	0x00000484
 8009be0:	20000c24 	.word	0x20000c24
 8009be4:	fffffc98 	.word	0xfffffc98

08009be8 <Send>:
{
 8009be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bea:	46de      	mov	lr, fp
 8009bec:	4657      	mov	r7, sl
 8009bee:	464e      	mov	r6, r9
 8009bf0:	4645      	mov	r5, r8
 8009bf2:	b5e0      	push	{r5, r6, r7, lr}
 8009bf4:	b08d      	sub	sp, #52	; 0x34
 8009bf6:	4683      	mov	fp, r0
 8009bf8:	4688      	mov	r8, r1
 8009bfa:	4691      	mov	r9, r2
 8009bfc:	001f      	movs	r7, r3
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009bfe:	4a54      	ldr	r2, [pc, #336]	; (8009d50 <Send+0x168>)
 8009c00:	4b54      	ldr	r3, [pc, #336]	; (8009d54 <Send+0x16c>)
 8009c02:	58d2      	ldr	r2, [r2, r3]
 8009c04:	23f9      	movs	r3, #249	; 0xf9
 8009c06:	56d6      	ldrsb	r6, [r2, r3]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	56d3      	ldrsb	r3, [r2, r3]
 8009c0c:	9303      	str	r3, [sp, #12]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8009c0e:	23f4      	movs	r3, #244	; 0xf4
 8009c10:	58d3      	ldr	r3, [r2, r3]
 8009c12:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009c14:	23ea      	movs	r3, #234	; 0xea
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	5cd3      	ldrb	r3, [r2, r3]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d100      	bne.n	8009c20 <Send+0x38>
 8009c1e:	e095      	b.n	8009d4c <Send+0x164>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8009c20:	239e      	movs	r3, #158	; 0x9e
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	5cd3      	ldrb	r3, [r2, r3]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d103      	bne.n	8009c32 <Send+0x4a>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8009c2a:	33c9      	adds	r3, #201	; 0xc9
 8009c2c:	33ff      	adds	r3, #255	; 0xff
 8009c2e:	2100      	movs	r1, #0
 8009c30:	50d1      	str	r1, [r2, r3]
    fCtrl.Value = 0;
 8009c32:	aa0b      	add	r2, sp, #44	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	7013      	strb	r3, [r2, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8009c38:	4945      	ldr	r1, [pc, #276]	; (8009d50 <Send+0x168>)
 8009c3a:	4b46      	ldr	r3, [pc, #280]	; (8009d54 <Send+0x16c>)
 8009c3c:	58c9      	ldr	r1, [r1, r3]
 8009c3e:	23f2      	movs	r3, #242	; 0xf2
 8009c40:	5ccc      	ldrb	r4, [r1, r3]
 8009c42:	01e0      	lsls	r0, r4, #7
 8009c44:	7813      	ldrb	r3, [r2, #0]
 8009c46:	469a      	mov	sl, r3
 8009c48:	237f      	movs	r3, #127	; 0x7f
 8009c4a:	4655      	mov	r5, sl
 8009c4c:	402b      	ands	r3, r5
 8009c4e:	4303      	orrs	r3, r0
 8009c50:	7013      	strb	r3, [r2, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009c52:	23f0      	movs	r3, #240	; 0xf0
 8009c54:	5ccb      	ldrb	r3, [r1, r3]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d062      	beq.n	8009d20 <Send+0x138>
        fCtrl.Bits.FPending      = 0;
 8009c5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c5c:	7813      	ldrb	r3, [r2, #0]
 8009c5e:	2010      	movs	r0, #16
 8009c60:	4383      	bics	r3, r0
 8009c62:	7013      	strb	r3, [r2, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8009c64:	23e0      	movs	r3, #224	; 0xe0
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	5ccb      	ldrb	r3, [r1, r3]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <Send+0x90>
        fCtrl.Bits.Ack = 1;
 8009c6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c70:	7813      	ldrb	r3, [r2, #0]
 8009c72:	2020      	movs	r0, #32
 8009c74:	4303      	orrs	r3, r0
 8009c76:	7013      	strb	r3, [r2, #0]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8009c78:	a805      	add	r0, sp, #20
 8009c7a:	23e8      	movs	r3, #232	; 0xe8
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	58cb      	ldr	r3, [r1, r3]
 8009c80:	9305      	str	r3, [sp, #20]
    adrNext.UpdateChanMask = true;
 8009c82:	2301      	movs	r3, #1
 8009c84:	7103      	strb	r3, [r0, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009c86:	7144      	strb	r4, [r0, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8009c88:	33f3      	adds	r3, #243	; 0xf3
 8009c8a:	58cb      	ldr	r3, [r1, r3]
 8009c8c:	6083      	str	r3, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009c8e:	4b30      	ldr	r3, [pc, #192]	; (8009d50 <Send+0x168>)
 8009c90:	22fd      	movs	r2, #253	; 0xfd
 8009c92:	0092      	lsls	r2, r2, #2
 8009c94:	5a9a      	ldrh	r2, [r3, r2]
 8009c96:	8182      	strh	r2, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009c98:	4a2f      	ldr	r2, [pc, #188]	; (8009d58 <Send+0x170>)
 8009c9a:	5a9b      	ldrh	r3, [r3, r2]
 8009c9c:	81c3      	strh	r3, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009c9e:	23f9      	movs	r3, #249	; 0xf9
 8009ca0:	56cb      	ldrsb	r3, [r1, r3]
 8009ca2:	7403      	strb	r3, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009ca4:	23f8      	movs	r3, #248	; 0xf8
 8009ca6:	56cb      	ldrsb	r3, [r1, r3]
 8009ca8:	7443      	strb	r3, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009caa:	2396      	movs	r3, #150	; 0x96
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	5ccb      	ldrb	r3, [r1, r3]
 8009cb0:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8009cb2:	780b      	ldrb	r3, [r1, #0]
 8009cb4:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8009cb6:	000a      	movs	r2, r1
 8009cb8:	32f8      	adds	r2, #248	; 0xf8
 8009cba:	31f9      	adds	r1, #249	; 0xf9
 8009cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8009cbe:	f001 fe9b 	bl	800b9f8 <LoRaMacAdrCalcNext>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4003      	ands	r3, r0
 8009cc6:	019b      	lsls	r3, r3, #6
 8009cc8:	aa02      	add	r2, sp, #8
 8009cca:	2124      	movs	r1, #36	; 0x24
 8009ccc:	1852      	adds	r2, r2, r1
 8009cce:	7810      	ldrb	r0, [r2, #0]
 8009cd0:	2240      	movs	r2, #64	; 0x40
 8009cd2:	4390      	bics	r0, r2
 8009cd4:	4318      	orrs	r0, r3
 8009cd6:	ab02      	add	r3, sp, #8
 8009cd8:	185b      	adds	r3, r3, r1
 8009cda:	7018      	strb	r0, [r3, #0]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009cdc:	9700      	str	r7, [sp, #0]
 8009cde:	464b      	mov	r3, r9
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	a90b      	add	r1, sp, #44	; 0x2c
 8009ce4:	4658      	mov	r0, fp
 8009ce6:	f7ff fc7f 	bl	80095e8 <PrepareFrame>
 8009cea:	1e04      	subs	r4, r0, #0
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009cec:	d001      	beq.n	8009cf2 <Send+0x10a>
 8009cee:	280a      	cmp	r0, #10
 8009cf0:	d103      	bne.n	8009cfa <Send+0x112>
        status = ScheduleTx( false );
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	f7ff fdfa 	bl	80098ec <ScheduleTx>
 8009cf8:	0004      	movs	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009cfa:	2c00      	cmp	r4, #0
 8009cfc:	d015      	beq.n	8009d2a <Send+0x142>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8009cfe:	4a14      	ldr	r2, [pc, #80]	; (8009d50 <Send+0x168>)
 8009d00:	4b14      	ldr	r3, [pc, #80]	; (8009d54 <Send+0x16c>)
 8009d02:	21f9      	movs	r1, #249	; 0xf9
 8009d04:	58d0      	ldr	r0, [r2, r3]
 8009d06:	5446      	strb	r6, [r0, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8009d08:	58d2      	ldr	r2, [r2, r3]
 8009d0a:	23f8      	movs	r3, #248	; 0xf8
 8009d0c:	9903      	ldr	r1, [sp, #12]
 8009d0e:	54d1      	strb	r1, [r2, r3]
}
 8009d10:	0020      	movs	r0, r4
 8009d12:	b00d      	add	sp, #52	; 0x34
 8009d14:	bcf0      	pop	{r4, r5, r6, r7}
 8009d16:	46bb      	mov	fp, r7
 8009d18:	46b2      	mov	sl, r6
 8009d1a:	46a9      	mov	r9, r5
 8009d1c:	46a0      	mov	r8, r4
 8009d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fCtrl.Bits.FPending      = 1;
 8009d20:	7813      	ldrb	r3, [r2, #0]
 8009d22:	2010      	movs	r0, #16
 8009d24:	4303      	orrs	r3, r0
 8009d26:	7013      	strb	r3, [r2, #0]
 8009d28:	e79c      	b.n	8009c64 <Send+0x7c>
        MacCtx.NvmCtx->SrvAckRequested = false;
 8009d2a:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <Send+0x168>)
 8009d2c:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <Send+0x16c>)
 8009d2e:	21e0      	movs	r1, #224	; 0xe0
 8009d30:	0049      	lsls	r1, r1, #1
 8009d32:	2000      	movs	r0, #0
 8009d34:	58d5      	ldr	r5, [r2, r3]
 8009d36:	5468      	strb	r0, [r5, r1]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8009d38:	58d2      	ldr	r2, [r2, r3]
 8009d3a:	23f4      	movs	r3, #244	; 0xf4
 8009d3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d3e:	50d1      	str	r1, [r2, r3]
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009d40:	f001 ff9e 	bl	800bc80 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d0e3      	beq.n	8009d10 <Send+0x128>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009d48:	2413      	movs	r4, #19
 8009d4a:	e7e1      	b.n	8009d10 <Send+0x128>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009d4c:	2407      	movs	r4, #7
 8009d4e:	e7df      	b.n	8009d10 <Send+0x128>
 8009d50:	200008bc 	.word	0x200008bc
 8009d54:	00000484 	.word	0x00000484
 8009d58:	000003f6 	.word	0x000003f6

08009d5c <SendReJoinReq>:
{
 8009d5c:	b510      	push	{r4, lr}
    switch( joinReqType )
 8009d5e:	28ff      	cmp	r0, #255	; 0xff
 8009d60:	d003      	beq.n	8009d6a <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009d62:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009d64:	f7ff fdc2 	bl	80098ec <ScheduleTx>
}
 8009d68:	bd10      	pop	{r4, pc}
            SwitchClass( CLASS_A );
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f7ff faa4 	bl	80092b8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009d70:	4c11      	ldr	r4, [pc, #68]	; (8009db8 <SendReJoinReq+0x5c>)
 8009d72:	2382      	movs	r3, #130	; 0x82
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	2200      	movs	r2, #0
 8009d78:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009d7a:	1ca2      	adds	r2, r4, #2
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	50e2      	str	r2, [r4, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009d80:	3304      	adds	r3, #4
 8009d82:	22ff      	movs	r2, #255	; 0xff
 8009d84:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009d86:	2200      	movs	r2, #0
 8009d88:	230e      	movs	r3, #14
 8009d8a:	33ff      	adds	r3, #255	; 0xff
 8009d8c:	54e2      	strb	r2, [r4, r3]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009d8e:	f7fe f965 	bl	800805c <SecureElementGetJoinEui>
 8009d92:	0001      	movs	r1, r0
 8009d94:	0020      	movs	r0, r4
 8009d96:	300f      	adds	r0, #15
 8009d98:	30ff      	adds	r0, #255	; 0xff
 8009d9a:	2208      	movs	r2, #8
 8009d9c:	f004 ffc3 	bl	800ed26 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009da0:	f7fe f946 	bl	8008030 <SecureElementGetDevEui>
 8009da4:	0001      	movs	r1, r0
 8009da6:	0020      	movs	r0, r4
 8009da8:	3017      	adds	r0, #23
 8009daa:	30ff      	adds	r0, #255	; 0xff
 8009dac:	2208      	movs	r2, #8
 8009dae:	f004 ffba 	bl	800ed26 <memcpy1>
            allowDelayedTx = false;
 8009db2:	2000      	movs	r0, #0
            break;
 8009db4:	e7d6      	b.n	8009d64 <SendReJoinReq+0x8>
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	200008bc 	.word	0x200008bc

08009dbc <SetTxContinuousWave>:
{
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	b086      	sub	sp, #24
    continuousWave.Channel = MacCtx.Channel;
 8009dc0:	4c11      	ldr	r4, [pc, #68]	; (8009e08 <SetTxContinuousWave+0x4c>)
 8009dc2:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <SetTxContinuousWave+0x50>)
 8009dc4:	5ce3      	ldrb	r3, [r4, r3]
 8009dc6:	aa02      	add	r2, sp, #8
 8009dc8:	7013      	strb	r3, [r2, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009dca:	4b11      	ldr	r3, [pc, #68]	; (8009e10 <SetTxContinuousWave+0x54>)
 8009dcc:	58e3      	ldr	r3, [r4, r3]
 8009dce:	22f9      	movs	r2, #249	; 0xf9
 8009dd0:	569a      	ldrsb	r2, [r3, r2]
 8009dd2:	a902      	add	r1, sp, #8
 8009dd4:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009dd6:	22f8      	movs	r2, #248	; 0xf8
 8009dd8:	569a      	ldrsb	r2, [r3, r2]
 8009dda:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8009ddc:	2298      	movs	r2, #152	; 0x98
 8009dde:	0052      	lsls	r2, r2, #1
 8009de0:	589a      	ldr	r2, [r3, r2]
 8009de2:	9203      	str	r2, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009de4:	229a      	movs	r2, #154	; 0x9a
 8009de6:	0052      	lsls	r2, r2, #1
 8009de8:	589a      	ldr	r2, [r3, r2]
 8009dea:	9201      	str	r2, [sp, #4]
 8009dec:	9204      	str	r2, [sp, #16]
    continuousWave.Timeout = timeout;
 8009dee:	8188      	strh	r0, [r1, #12]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8009df0:	7818      	ldrb	r0, [r3, #0]
 8009df2:	f002 ffb1 	bl	800cd58 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009df6:	22d0      	movs	r2, #208	; 0xd0
 8009df8:	0092      	lsls	r2, r2, #2
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	58a1      	ldr	r1, [r4, r2]
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	50a3      	str	r3, [r4, r2]
}
 8009e02:	2000      	movs	r0, #0
 8009e04:	b006      	add	sp, #24
 8009e06:	bd10      	pop	{r4, pc}
 8009e08:	200008bc 	.word	0x200008bc
 8009e0c:	00000415 	.word	0x00000415
 8009e10:	00000484 	.word	0x00000484

08009e14 <SetTxContinuousWave1>:
{
 8009e14:	b510      	push	{r4, lr}
 8009e16:	0003      	movs	r3, r0
 8009e18:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009e1a:	4907      	ldr	r1, [pc, #28]	; (8009e38 <SetTxContinuousWave1+0x24>)
 8009e1c:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8009e1e:	b251      	sxtb	r1, r2
 8009e20:	001a      	movs	r2, r3
 8009e22:	47a0      	blx	r4
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009e24:	4905      	ldr	r1, [pc, #20]	; (8009e3c <SetTxContinuousWave1+0x28>)
 8009e26:	22d0      	movs	r2, #208	; 0xd0
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	5888      	ldr	r0, [r1, r2]
 8009e2e:	4303      	orrs	r3, r0
 8009e30:	508b      	str	r3, [r1, r2]
}
 8009e32:	2000      	movs	r0, #0
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	08010b84 	.word	0x08010b84
 8009e3c:	200008bc 	.word	0x200008bc

08009e40 <GetCtxs>:
{
 8009e40:	b510      	push	{r4, lr}
 8009e42:	b082      	sub	sp, #8
    Contexts.MacNvmCtx = &NvmMacCtx;
 8009e44:	4c16      	ldr	r4, [pc, #88]	; (8009ea0 <GetCtxs+0x60>)
 8009e46:	4b17      	ldr	r3, [pc, #92]	; (8009ea4 <GetCtxs+0x64>)
 8009e48:	6023      	str	r3, [r4, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8009e4a:	23ee      	movs	r3, #238	; 0xee
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8009e50:	0020      	movs	r0, r4
 8009e52:	3014      	adds	r0, #20
 8009e54:	f002 fad6 	bl	800c404 <LoRaMacCryptoGetNvmCtx>
 8009e58:	6120      	str	r0, [r4, #16]
    GetNvmCtxParams_t params ={ 0 };
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	9301      	str	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <GetCtxs+0x68>)
 8009e60:	4b12      	ldr	r3, [pc, #72]	; (8009eac <GetCtxs+0x6c>)
 8009e62:	58d3      	ldr	r3, [r2, r3]
 8009e64:	7818      	ldrb	r0, [r3, #0]
 8009e66:	a901      	add	r1, sp, #4
 8009e68:	f002 fed9 	bl	800cc1e <RegionGetNvmCtx>
 8009e6c:	60a0      	str	r0, [r4, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8009e6e:	9b01      	ldr	r3, [sp, #4]
 8009e70:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8009e72:	0020      	movs	r0, r4
 8009e74:	301c      	adds	r0, #28
 8009e76:	f7fd ffc9 	bl	8007e0c <SecureElementGetNvmCtx>
 8009e7a:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8009e7c:	0020      	movs	r0, r4
 8009e7e:	3024      	adds	r0, #36	; 0x24
 8009e80:	f001 fea8 	bl	800bbd4 <LoRaMacCommandsGetNvmCtx>
 8009e84:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8009e86:	0020      	movs	r0, r4
 8009e88:	302c      	adds	r0, #44	; 0x2c
 8009e8a:	f001 fdc1 	bl	800ba10 <LoRaMacClassBGetNvmCtx>
 8009e8e:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8009e90:	0020      	movs	r0, r4
 8009e92:	3034      	adds	r0, #52	; 0x34
 8009e94:	f001 ffae 	bl	800bdf4 <LoRaMacConfirmQueueGetNvmCtx>
 8009e98:	6320      	str	r0, [r4, #48]	; 0x30
}
 8009e9a:	0020      	movs	r0, r4
 8009e9c:	b002      	add	sp, #8
 8009e9e:	bd10      	pop	{r4, pc}
 8009ea0:	200015dc 	.word	0x200015dc
 8009ea4:	200006e0 	.word	0x200006e0
 8009ea8:	200008bc 	.word	0x200008bc
 8009eac:	00000484 	.word	0x00000484

08009eb0 <RestoreCtxs>:
{
 8009eb0:	b530      	push	{r4, r5, lr}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	1e04      	subs	r4, r0, #0
    if( contexts == NULL )
 8009eb6:	d033      	beq.n	8009f20 <RestoreCtxs+0x70>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009eb8:	4a20      	ldr	r2, [pc, #128]	; (8009f3c <RestoreCtxs+0x8c>)
 8009eba:	23d0      	movs	r3, #208	; 0xd0
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	58d3      	ldr	r3, [r2, r3]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d12f      	bne.n	8009f24 <RestoreCtxs+0x74>
    if( contexts->MacNvmCtx != NULL )
 8009ec4:	6801      	ldr	r1, [r0, #0]
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	d003      	beq.n	8009ed2 <RestoreCtxs+0x22>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8009eca:	8882      	ldrh	r2, [r0, #4]
 8009ecc:	481c      	ldr	r0, [pc, #112]	; (8009f40 <RestoreCtxs+0x90>)
 8009ece:	f004 ff2a 	bl	800ed26 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	466a      	mov	r2, sp
 8009ed6:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	9300      	str	r3, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009edc:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <RestoreCtxs+0x8c>)
 8009ede:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <RestoreCtxs+0x94>)
 8009ee0:	58d3      	ldr	r3, [r2, r3]
 8009ee2:	7818      	ldrb	r0, [r3, #0]
 8009ee4:	4669      	mov	r1, sp
 8009ee6:	f002 fe92 	bl	800cc0e <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8009eea:	69a0      	ldr	r0, [r4, #24]
 8009eec:	f7fd ff80 	bl	8007df0 <SecureElementRestoreNvmCtx>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d11b      	bne.n	8009f2c <RestoreCtxs+0x7c>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8009ef4:	6920      	ldr	r0, [r4, #16]
 8009ef6:	f002 fa77 	bl	800c3e8 <LoRaMacCryptoRestoreNvmCtx>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d118      	bne.n	8009f30 <RestoreCtxs+0x80>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8009efe:	6a20      	ldr	r0, [r4, #32]
 8009f00:	f001 fe5a 	bl	800bbb8 <LoRaMacCommandsRestoreNvmCtx>
 8009f04:	1e05      	subs	r5, r0, #0
 8009f06:	d115      	bne.n	8009f34 <RestoreCtxs+0x84>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8009f08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009f0a:	f001 fd7f 	bl	800ba0c <LoRaMacClassBRestoreNvmCtx>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d012      	beq.n	8009f38 <RestoreCtxs+0x88>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8009f12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009f14:	f001 ff60 	bl	800bdd8 <LoRaMacConfirmQueueRestoreNvmCtx>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d104      	bne.n	8009f26 <RestoreCtxs+0x76>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8009f1c:	2515      	movs	r5, #21
 8009f1e:	e002      	b.n	8009f26 <RestoreCtxs+0x76>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f20:	2503      	movs	r5, #3
 8009f22:	e000      	b.n	8009f26 <RestoreCtxs+0x76>
        return LORAMAC_STATUS_BUSY;
 8009f24:	2501      	movs	r5, #1
}
 8009f26:	0028      	movs	r0, r5
 8009f28:	b003      	add	sp, #12
 8009f2a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f2c:	2511      	movs	r5, #17
 8009f2e:	e7fa      	b.n	8009f26 <RestoreCtxs+0x76>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f30:	2511      	movs	r5, #17
 8009f32:	e7f8      	b.n	8009f26 <RestoreCtxs+0x76>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f34:	2513      	movs	r5, #19
 8009f36:	e7f6      	b.n	8009f26 <RestoreCtxs+0x76>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8009f38:	2514      	movs	r5, #20
 8009f3a:	e7f4      	b.n	8009f26 <RestoreCtxs+0x76>
 8009f3c:	200008bc 	.word	0x200008bc
 8009f40:	200006e0 	.word	0x200006e0
 8009f44:	00000484 	.word	0x00000484

08009f48 <DetermineFrameType>:
{
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	1e03      	subs	r3, r0, #0
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8009f4c:	d029      	beq.n	8009fa2 <DetermineFrameType+0x5a>
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	d029      	beq.n	8009fa6 <DetermineFrameType+0x5e>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009f52:	7b02      	ldrb	r2, [r0, #12]
 8009f54:	200f      	movs	r0, #15
 8009f56:	0004      	movs	r4, r0
 8009f58:	4014      	ands	r4, r2
 8009f5a:	4210      	tst	r0, r2
 8009f5c:	d007      	beq.n	8009f6e <DetermineFrameType+0x26>
 8009f5e:	2220      	movs	r2, #32
 8009f60:	5c9a      	ldrb	r2, [r3, r2]
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d003      	beq.n	8009f6e <DetermineFrameType+0x26>
        *fType = FRAME_TYPE_A;
 8009f66:	2300      	movs	r3, #0
 8009f68:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 8009f6a:	2000      	movs	r0, #0
        *fType = FRAME_TYPE_A;
 8009f6c:	e005      	b.n	8009f7a <DetermineFrameType+0x32>
    else if( macMsg->FRMPayloadSize == 0 )
 8009f6e:	2228      	movs	r2, #40	; 0x28
 8009f70:	5c98      	ldrb	r0, [r3, r2]
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d102      	bne.n	8009f7c <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_B;
 8009f76:	2301      	movs	r3, #1
 8009f78:	700b      	strb	r3, [r1, #0]
}
 8009f7a:	bd10      	pop	{r4, pc}
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009f7c:	2c00      	cmp	r4, #0
 8009f7e:	d106      	bne.n	8009f8e <DetermineFrameType+0x46>
 8009f80:	2220      	movs	r2, #32
 8009f82:	5c98      	ldrb	r0, [r3, r2]
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d102      	bne.n	8009f8e <DetermineFrameType+0x46>
        *fType = FRAME_TYPE_C;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	700b      	strb	r3, [r1, #0]
 8009f8c:	e7f5      	b.n	8009f7a <DetermineFrameType+0x32>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d10b      	bne.n	8009faa <DetermineFrameType+0x62>
 8009f92:	2220      	movs	r2, #32
 8009f94:	5c9b      	ldrb	r3, [r3, r2]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <DetermineFrameType+0x66>
        *fType = FRAME_TYPE_D;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 8009f9e:	0020      	movs	r0, r4
        *fType = FRAME_TYPE_D;
 8009fa0:	e7eb      	b.n	8009f7a <DetermineFrameType+0x32>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009fa2:	2003      	movs	r0, #3
 8009fa4:	e7e9      	b.n	8009f7a <DetermineFrameType+0x32>
 8009fa6:	2003      	movs	r0, #3
 8009fa8:	e7e7      	b.n	8009f7a <DetermineFrameType+0x32>
        return LORAMAC_STATUS_ERROR;
 8009faa:	2017      	movs	r0, #23
 8009fac:	e7e5      	b.n	8009f7a <DetermineFrameType+0x32>
 8009fae:	2017      	movs	r0, #23
 8009fb0:	e7e3      	b.n	8009f7a <DetermineFrameType+0x32>
	...

08009fb4 <ProcessRadioRxDone>:
{
 8009fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb6:	46d6      	mov	lr, sl
 8009fb8:	464f      	mov	r7, r9
 8009fba:	4646      	mov	r6, r8
 8009fbc:	b5c0      	push	{r6, r7, lr}
 8009fbe:	b0a2      	sub	sp, #136	; 0x88
    uint8_t *payload = RxDoneParams.Payload;
 8009fc0:	4bd1      	ldr	r3, [pc, #836]	; (800a308 <ProcessRadioRxDone+0x354>)
 8009fc2:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8009fc4:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009fc6:	210a      	movs	r1, #10
 8009fc8:	5e5a      	ldrsh	r2, [r3, r1]
 8009fca:	4690      	mov	r8, r2
    int8_t snr = RxDoneParams.Snr;
 8009fcc:	270c      	movs	r7, #12
 8009fce:	57df      	ldrsb	r7, [r3, r7]
    uint32_t downLinkCounter = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9307      	str	r3, [sp, #28]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009fd4:	4ccd      	ldr	r4, [pc, #820]	; (800a30c <ProcessRadioRxDone+0x358>)
 8009fd6:	4ace      	ldr	r2, [pc, #824]	; (800a310 <ProcessRadioRxDone+0x35c>)
 8009fd8:	58a2      	ldr	r2, [r4, r2]
 8009fda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009fdc:	4691      	mov	r9, r2
    MacCtx.McpsConfirm.AckReceived = false;
 8009fde:	2288      	movs	r2, #136	; 0x88
 8009fe0:	00d2      	lsls	r2, r2, #3
 8009fe2:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 8009fe4:	4acb      	ldr	r2, [pc, #812]	; (800a314 <ProcessRadioRxDone+0x360>)
 8009fe6:	4641      	mov	r1, r8
 8009fe8:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 8009fea:	4acb      	ldr	r2, [pc, #812]	; (800a318 <ProcessRadioRxDone+0x364>)
 8009fec:	54a7      	strb	r7, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009fee:	3254      	adds	r2, #84	; 0x54
 8009ff0:	5ca1      	ldrb	r1, [r4, r2]
 8009ff2:	4aca      	ldr	r2, [pc, #808]	; (800a31c <ProcessRadioRxDone+0x368>)
 8009ff4:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.Port = 0;
 8009ff6:	4aca      	ldr	r2, [pc, #808]	; (800a320 <ProcessRadioRxDone+0x36c>)
 8009ff8:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009ffa:	4aca      	ldr	r2, [pc, #808]	; (800a324 <ProcessRadioRxDone+0x370>)
 8009ffc:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8009ffe:	4aca      	ldr	r2, [pc, #808]	; (800a328 <ProcessRadioRxDone+0x374>)
 800a000:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a002:	4aca      	ldr	r2, [pc, #808]	; (800a32c <ProcessRadioRxDone+0x378>)
 800a004:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800a006:	3204      	adds	r2, #4
 800a008:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.RxData = false;
 800a00a:	4ac9      	ldr	r2, [pc, #804]	; (800a330 <ProcessRadioRxDone+0x37c>)
 800a00c:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a00e:	4ac9      	ldr	r2, [pc, #804]	; (800a334 <ProcessRadioRxDone+0x380>)
 800a010:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a012:	3202      	adds	r2, #2
 800a014:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a016:	4ac8      	ldr	r2, [pc, #800]	; (800a338 <ProcessRadioRxDone+0x384>)
 800a018:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800a01a:	4ac8      	ldr	r2, [pc, #800]	; (800a33c <ProcessRadioRxDone+0x388>)
 800a01c:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a01e:	3204      	adds	r2, #4
 800a020:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 800a022:	4bc7      	ldr	r3, [pc, #796]	; (800a340 <ProcessRadioRxDone+0x38c>)
 800a024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a026:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a028:	23e6      	movs	r3, #230	; 0xe6
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	18e0      	adds	r0, r4, r3
 800a02e:	f004 fd6d 	bl	800eb0c <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a032:	0029      	movs	r1, r5
 800a034:	0030      	movs	r0, r6
 800a036:	f001 fcf7 	bl	800ba28 <LoRaMacClassBRxBeacon>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d160      	bne.n	800a100 <ProcessRadioRxDone+0x14c>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a03e:	4ab3      	ldr	r2, [pc, #716]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a040:	4bb3      	ldr	r3, [pc, #716]	; (800a310 <ProcessRadioRxDone+0x35c>)
 800a042:	58d2      	ldr	r2, [r2, r3]
 800a044:	23f0      	movs	r3, #240	; 0xf0
 800a046:	5cd3      	ldrb	r3, [r2, r3]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d060      	beq.n	800a10e <ProcessRadioRxDone+0x15a>
    macHdr.Value = payload[pktHeaderLen++];
 800a04c:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a04e:	0963      	lsrs	r3, r4, #5
 800a050:	2b05      	cmp	r3, #5
 800a052:	d100      	bne.n	800a056 <ProcessRadioRxDone+0xa2>
 800a054:	e135      	b.n	800a2c2 <ProcessRadioRxDone+0x30e>
 800a056:	d878      	bhi.n	800a14a <ProcessRadioRxDone+0x196>
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d100      	bne.n	800a05e <ProcessRadioRxDone+0xaa>
 800a05c:	e0a1      	b.n	800a1a2 <ProcessRadioRxDone+0x1ee>
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d000      	beq.n	800a064 <ProcessRadioRxDone+0xb0>
 800a062:	e2de      	b.n	800a622 <ProcessRadioRxDone+0x66e>
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a064:	49a9      	ldr	r1, [pc, #676]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a066:	4baa      	ldr	r3, [pc, #680]	; (800a310 <ProcessRadioRxDone+0x35c>)
 800a068:	58cb      	ldr	r3, [r1, r3]
 800a06a:	222e      	movs	r2, #46	; 0x2e
 800a06c:	32ff      	adds	r2, #255	; 0xff
 800a06e:	5c98      	ldrb	r0, [r3, r2]
 800a070:	aa1f      	add	r2, sp, #124	; 0x7c
 800a072:	7090      	strb	r0, [r2, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a074:	2084      	movs	r0, #132	; 0x84
 800a076:	00c0      	lsls	r0, r0, #3
 800a078:	5609      	ldrsb	r1, [r1, r0]
 800a07a:	7051      	strb	r1, [r2, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a07c:	210d      	movs	r1, #13
 800a07e:	7011      	strb	r1, [r2, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a080:	2240      	movs	r2, #64	; 0x40
 800a082:	32ff      	adds	r2, #255	; 0xff
 800a084:	5c9a      	ldrb	r2, [r3, r2]
 800a086:	2a00      	cmp	r2, #0
 800a088:	d002      	beq.n	800a090 <ProcessRadioRxDone+0xdc>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a08a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a08c:	3101      	adds	r1, #1
 800a08e:	7011      	strb	r1, [r2, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a090:	7818      	ldrb	r0, [r3, #0]
 800a092:	a91f      	add	r1, sp, #124	; 0x7c
 800a094:	f002 fda3 	bl	800cbde <RegionGetPhyParam>
 800a098:	901e      	str	r0, [sp, #120]	; 0x78
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800a09a:	002b      	movs	r3, r5
 800a09c:	3b0d      	subs	r3, #13
 800a09e:	b21b      	sxth	r3, r3
 800a0a0:	1c1a      	adds	r2, r3, #0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da00      	bge.n	800a0a8 <ProcessRadioRxDone+0xf4>
 800a0a6:	e111      	b.n	800a2cc <ProcessRadioRxDone+0x318>
 800a0a8:	b212      	sxth	r2, r2
 800a0aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0ac:	b21b      	sxth	r3, r3
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	dd00      	ble.n	800a0b4 <ProcessRadioRxDone+0x100>
 800a0b2:	e10d      	b.n	800a2d0 <ProcessRadioRxDone+0x31c>
            macMsgData.Buffer = payload;
 800a0b4:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800a0b6:	ab02      	add	r3, sp, #8
 800a0b8:	2244      	movs	r2, #68	; 0x44
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	701d      	strb	r5, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a0be:	4ba1      	ldr	r3, [pc, #644]	; (800a344 <ProcessRadioRxDone+0x390>)
 800a0c0:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a0c2:	2328      	movs	r3, #40	; 0x28
 800a0c4:	32bb      	adds	r2, #187	; 0xbb
 800a0c6:	a902      	add	r1, sp, #8
 800a0c8:	2040      	movs	r0, #64	; 0x40
 800a0ca:	1809      	adds	r1, r1, r0
 800a0cc:	54ca      	strb	r2, [r1, r3]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a0ce:	a812      	add	r0, sp, #72	; 0x48
 800a0d0:	f002 fc77 	bl	800c9c2 <LoRaMacParserData>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d000      	beq.n	800a0da <ProcessRadioRxDone+0x126>
 800a0d8:	e101      	b.n	800a2de <ProcessRadioRxDone+0x32a>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a0da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0dc:	9305      	str	r3, [sp, #20]
 800a0de:	4a8b      	ldr	r2, [pc, #556]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a0e0:	4b96      	ldr	r3, [pc, #600]	; (800a33c <ProcessRadioRxDone+0x388>)
 800a0e2:	9905      	ldr	r1, [sp, #20]
 800a0e4:	50d1      	str	r1, [r2, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a0e6:	2112      	movs	r1, #18
 800a0e8:	ab02      	add	r3, sp, #8
 800a0ea:	469c      	mov	ip, r3
 800a0ec:	4461      	add	r1, ip
 800a0ee:	a812      	add	r0, sp, #72	; 0x48
 800a0f0:	f7ff ff2a 	bl	8009f48 <DetermineFrameType>
 800a0f4:	1e05      	subs	r5, r0, #0
 800a0f6:	d000      	beq.n	800a0fa <ProcessRadioRxDone+0x146>
 800a0f8:	e0f8      	b.n	800a2ec <ProcessRadioRxDone+0x338>
            downLinkCounter = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a0fe:	e12f      	b.n	800a360 <ProcessRadioRxDone+0x3ac>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a100:	4b82      	ldr	r3, [pc, #520]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a102:	4a91      	ldr	r2, [pc, #580]	; (800a348 <ProcessRadioRxDone+0x394>)
 800a104:	4641      	mov	r1, r8
 800a106:	5299      	strh	r1, [r3, r2]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a108:	3202      	adds	r2, #2
 800a10a:	549f      	strb	r7, [r3, r2]
        return;
 800a10c:	e29f      	b.n	800a64e <ProcessRadioRxDone+0x69a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a10e:	f001 fc8f 	bl	800ba30 <LoRaMacClassBIsPingExpected>
 800a112:	2800      	cmp	r0, #0
 800a114:	d00a      	beq.n	800a12c <ProcessRadioRxDone+0x178>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a116:	2000      	movs	r0, #0
 800a118:	f001 fc7f 	bl	800ba1a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a11c:	2000      	movs	r0, #0
 800a11e:	f001 fc81 	bl	800ba24 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a122:	4a7a      	ldr	r2, [pc, #488]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a124:	4b7d      	ldr	r3, [pc, #500]	; (800a31c <ProcessRadioRxDone+0x368>)
 800a126:	2104      	movs	r1, #4
 800a128:	54d1      	strb	r1, [r2, r3]
 800a12a:	e78f      	b.n	800a04c <ProcessRadioRxDone+0x98>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a12c:	f001 fc82 	bl	800ba34 <LoRaMacClassBIsMulticastExpected>
 800a130:	2800      	cmp	r0, #0
 800a132:	d08b      	beq.n	800a04c <ProcessRadioRxDone+0x98>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a134:	2000      	movs	r0, #0
 800a136:	f001 fc71 	bl	800ba1c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a13a:	2000      	movs	r0, #0
 800a13c:	f001 fc73 	bl	800ba26 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a140:	4a72      	ldr	r2, [pc, #456]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a142:	4b76      	ldr	r3, [pc, #472]	; (800a31c <ProcessRadioRxDone+0x368>)
 800a144:	2105      	movs	r1, #5
 800a146:	54d1      	strb	r1, [r2, r3]
 800a148:	e780      	b.n	800a04c <ProcessRadioRxDone+0x98>
    switch( macHdr.Bits.MType )
 800a14a:	2b07      	cmp	r3, #7
 800a14c:	d000      	beq.n	800a150 <ProcessRadioRxDone+0x19c>
 800a14e:	e268      	b.n	800a622 <ProcessRadioRxDone+0x66e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a150:	1c71      	adds	r1, r6, #1
 800a152:	1e6a      	subs	r2, r5, #1
 800a154:	b292      	uxth	r2, r2
 800a156:	4c7b      	ldr	r4, [pc, #492]	; (800a344 <ProcessRadioRxDone+0x390>)
 800a158:	0020      	movs	r0, r4
 800a15a:	f004 fde4 	bl	800ed26 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a15e:	4b7b      	ldr	r3, [pc, #492]	; (800a34c <ProcessRadioRxDone+0x398>)
 800a160:	18e3      	adds	r3, r4, r3
 800a162:	4a75      	ldr	r2, [pc, #468]	; (800a338 <ProcessRadioRxDone+0x384>)
 800a164:	2103      	movs	r1, #3
 800a166:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a168:	4a79      	ldr	r2, [pc, #484]	; (800a350 <ProcessRadioRxDone+0x39c>)
 800a16a:	2100      	movs	r1, #0
 800a16c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a16e:	4a6f      	ldr	r2, [pc, #444]	; (800a32c <ProcessRadioRxDone+0x378>)
 800a170:	509c      	str	r4, [r3, r2]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a172:	3d01      	subs	r5, #1
 800a174:	3204      	adds	r2, #4
 800a176:	549d      	strb	r5, [r3, r2]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a178:	4976      	ldr	r1, [pc, #472]	; (800a354 <ProcessRadioRxDone+0x3a0>)
 800a17a:	5c5a      	ldrb	r2, [r3, r1]
 800a17c:	2002      	movs	r0, #2
 800a17e:	4302      	orrs	r2, r0
 800a180:	545a      	strb	r2, [r3, r1]
    if( MacCtx.NodeAckRequested == true )
 800a182:	4a62      	ldr	r2, [pc, #392]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a184:	4b74      	ldr	r3, [pc, #464]	; (800a358 <ProcessRadioRxDone+0x3a4>)
 800a186:	5cd3      	ldrb	r3, [r2, r3]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d100      	bne.n	800a18e <ProcessRadioRxDone+0x1da>
 800a18c:	e250      	b.n	800a630 <ProcessRadioRxDone+0x67c>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a18e:	2388      	movs	r3, #136	; 0x88
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	5cd3      	ldrb	r3, [r2, r3]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d100      	bne.n	800a19a <ProcessRadioRxDone+0x1e6>
 800a198:	e251      	b.n	800a63e <ProcessRadioRxDone+0x68a>
            OnAckTimeoutTimerEvent( NULL );
 800a19a:	2000      	movs	r0, #0
 800a19c:	f7fe f994 	bl	80084c8 <OnAckTimeoutTimerEvent>
 800a1a0:	e24d      	b.n	800a63e <ProcessRadioRxDone+0x68a>
            macMsgJoinAccept.Buffer = payload;
 800a1a2:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800a1a4:	b2ed      	uxtb	r5, r5
 800a1a6:	ab08      	add	r3, sp, #32
 800a1a8:	711d      	strb	r5, [r3, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a1aa:	4a58      	ldr	r2, [pc, #352]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a1ac:	4b58      	ldr	r3, [pc, #352]	; (800a310 <ProcessRadioRxDone+0x35c>)
 800a1ae:	58d2      	ldr	r2, [r2, r3]
 800a1b0:	23ea      	movs	r3, #234	; 0xea
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	5cd3      	ldrb	r3, [r2, r3]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d171      	bne.n	800a29e <ProcessRadioRxDone+0x2ea>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a1ba:	f7fd ff4f 	bl	800805c <SecureElementGetJoinEui>
 800a1be:	0001      	movs	r1, r0
 800a1c0:	aa08      	add	r2, sp, #32
 800a1c2:	20ff      	movs	r0, #255	; 0xff
 800a1c4:	f002 fad2 	bl	800c76c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d16f      	bne.n	800a2ac <ProcessRadioRxDone+0x2f8>
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a1cc:	a808      	add	r0, sp, #32
 800a1ce:	7a44      	ldrb	r4, [r0, #9]
 800a1d0:	494e      	ldr	r1, [pc, #312]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a1d2:	4a4f      	ldr	r2, [pc, #316]	; (800a310 <ProcessRadioRxDone+0x35c>)
 800a1d4:	588b      	ldr	r3, [r1, r2]
 800a1d6:	649c      	str	r4, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a1d8:	588c      	ldr	r4, [r1, r2]
 800a1da:	7a83      	ldrb	r3, [r0, #10]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800a1e0:	4333      	orrs	r3, r6
 800a1e2:	64a3      	str	r3, [r4, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a1e4:	588c      	ldr	r4, [r1, r2]
 800a1e6:	7ac3      	ldrb	r3, [r0, #11]
 800a1e8:	041b      	lsls	r3, r3, #16
 800a1ea:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800a1ec:	4333      	orrs	r3, r6
 800a1ee:	64a3      	str	r3, [r4, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a1f0:	588b      	ldr	r3, [r1, r2]
 800a1f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a1f4:	64dc      	str	r4, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a1f6:	7c03      	ldrb	r3, [r0, #16]
 800a1f8:	065c      	lsls	r4, r3, #25
 800a1fa:	0f64      	lsrs	r4, r4, #29
 800a1fc:	261a      	movs	r6, #26
 800a1fe:	36ff      	adds	r6, #255	; 0xff
 800a200:	588f      	ldr	r7, [r1, r2]
 800a202:	55bc      	strb	r4, [r7, r6]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a204:	071b      	lsls	r3, r3, #28
 800a206:	0f1b      	lsrs	r3, r3, #28
 800a208:	2490      	movs	r4, #144	; 0x90
 800a20a:	0064      	lsls	r4, r4, #1
 800a20c:	588e      	ldr	r6, [r1, r2]
 800a20e:	5533      	strb	r3, [r6, r4]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a210:	3408      	adds	r4, #8
 800a212:	588e      	ldr	r6, [r1, r2]
 800a214:	5533      	strb	r3, [r6, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a216:	7c40      	ldrb	r0, [r0, #17]
 800a218:	2384      	movs	r3, #132	; 0x84
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	588c      	ldr	r4, [r1, r2]
 800a21e:	50e0      	str	r0, [r4, r3]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800a220:	588a      	ldr	r2, [r1, r2]
 800a222:	58d3      	ldr	r3, [r2, r3]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <ProcessRadioRxDone+0x27c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800a228:	3309      	adds	r3, #9
 800a22a:	33ff      	adds	r3, #255	; 0xff
 800a22c:	2101      	movs	r1, #1
 800a22e:	50d1      	str	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a230:	4e36      	ldr	r6, [pc, #216]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a232:	4c37      	ldr	r4, [pc, #220]	; (800a310 <ProcessRadioRxDone+0x35c>)
 800a234:	5932      	ldr	r2, [r6, r4]
 800a236:	2084      	movs	r0, #132	; 0x84
 800a238:	0040      	lsls	r0, r0, #1
 800a23a:	5811      	ldr	r1, [r2, r0]
 800a23c:	014b      	lsls	r3, r1, #5
 800a23e:	1a5b      	subs	r3, r3, r1
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	185b      	adds	r3, r3, r1
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	5013      	str	r3, [r2, r0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a248:	5932      	ldr	r2, [r6, r4]
 800a24a:	5813      	ldr	r3, [r2, r0]
 800a24c:	21fa      	movs	r1, #250	; 0xfa
 800a24e:	0089      	lsls	r1, r1, #2
 800a250:	468c      	mov	ip, r1
 800a252:	4463      	add	r3, ip
 800a254:	2186      	movs	r1, #134	; 0x86
 800a256:	0049      	lsls	r1, r1, #1
 800a258:	5053      	str	r3, [r2, r1]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800a25a:	23e9      	movs	r3, #233	; 0xe9
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	2200      	movs	r2, #0
 800a260:	5931      	ldr	r1, [r6, r4]
 800a262:	54ca      	strb	r2, [r1, r3]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a264:	a920      	add	r1, sp, #128	; 0x80
 800a266:	3ba9      	subs	r3, #169	; 0xa9
 800a268:	3bff      	subs	r3, #255	; 0xff
 800a26a:	aa02      	add	r2, sp, #8
 800a26c:	4694      	mov	ip, r2
 800a26e:	4463      	add	r3, ip
 800a270:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 800a272:	3d11      	subs	r5, #17
 800a274:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a276:	5933      	ldr	r3, [r6, r4]
 800a278:	7818      	ldrb	r0, [r3, #0]
 800a27a:	f002 fce4 	bl	800cc46 <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a27e:	5932      	ldr	r2, [r6, r4]
 800a280:	23ea      	movs	r3, #234	; 0xea
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	2102      	movs	r1, #2
 800a286:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a288:	2000      	movs	r0, #0
 800a28a:	f001 fe33 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d100      	bne.n	800a294 <ProcessRadioRxDone+0x2e0>
 800a292:	e776      	b.n	800a182 <ProcessRadioRxDone+0x1ce>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a294:	2100      	movs	r1, #0
 800a296:	2000      	movs	r0, #0
 800a298:	f001 fde6 	bl	800be68 <LoRaMacConfirmQueueSetStatus>
 800a29c:	e771      	b.n	800a182 <ProcessRadioRxDone+0x1ce>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a29e:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a2a0:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <ProcessRadioRxDone+0x39c>)
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a2a6:	f7fe f947 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800a2aa:	e1d0      	b.n	800a64e <ProcessRadioRxDone+0x69a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f001 fe21 	bl	800bef4 <LoRaMacConfirmQueueIsCmdActive>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d100      	bne.n	800a2b8 <ProcessRadioRxDone+0x304>
 800a2b6:	e764      	b.n	800a182 <ProcessRadioRxDone+0x1ce>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	2007      	movs	r0, #7
 800a2bc:	f001 fdd4 	bl	800be68 <LoRaMacConfirmQueueSetStatus>
 800a2c0:	e75f      	b.n	800a182 <ProcessRadioRxDone+0x1ce>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a2c2:	4a12      	ldr	r2, [pc, #72]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a2c4:	4b1c      	ldr	r3, [pc, #112]	; (800a338 <ProcessRadioRxDone+0x384>)
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	54d1      	strb	r1, [r2, r3]
 800a2ca:	e6cb      	b.n	800a064 <ProcessRadioRxDone+0xb0>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	e6eb      	b.n	800a0a8 <ProcessRadioRxDone+0xf4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2d0:	4a0e      	ldr	r2, [pc, #56]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a2d2:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <ProcessRadioRxDone+0x39c>)
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a2d8:	f7fe f92e 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800a2dc:	e1b7      	b.n	800a64e <ProcessRadioRxDone+0x69a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2de:	4a0b      	ldr	r2, [pc, #44]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a2e0:	4b1b      	ldr	r3, [pc, #108]	; (800a350 <ProcessRadioRxDone+0x39c>)
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a2e6:	f7fe f927 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800a2ea:	e1b0      	b.n	800a64e <ProcessRadioRxDone+0x69a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2ec:	4a07      	ldr	r2, [pc, #28]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a2ee:	4b18      	ldr	r3, [pc, #96]	; (800a350 <ProcessRadioRxDone+0x39c>)
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a2f4:	f7fe f920 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800a2f8:	e1a9      	b.n	800a64e <ProcessRadioRxDone+0x69a>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a2fa:	4a04      	ldr	r2, [pc, #16]	; (800a30c <ProcessRadioRxDone+0x358>)
 800a2fc:	4b07      	ldr	r3, [pc, #28]	; (800a31c <ProcessRadioRxDone+0x368>)
 800a2fe:	2103      	movs	r1, #3
 800a300:	54d1      	strb	r1, [r2, r3]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800a302:	46b1      	mov	r9, r6
                    multicast = 1;
 800a304:	2501      	movs	r5, #1
 800a306:	e057      	b.n	800a3b8 <ProcessRadioRxDone+0x404>
 800a308:	200015cc 	.word	0x200015cc
 800a30c:	200008bc 	.word	0x200008bc
 800a310:	00000484 	.word	0x00000484
 800a314:	0000042a 	.word	0x0000042a
 800a318:	0000042c 	.word	0x0000042c
 800a31c:	0000042d 	.word	0x0000042d
 800a320:	0000041f 	.word	0x0000041f
 800a324:	0000041e 	.word	0x0000041e
 800a328:	00000421 	.word	0x00000421
 800a32c:	00000424 	.word	0x00000424
 800a330:	00000429 	.word	0x00000429
 800a334:	0000042e 	.word	0x0000042e
 800a338:	0000041c 	.word	0x0000041c
 800a33c:	00000434 	.word	0x00000434
 800a340:	08010b84 	.word	0x08010b84
 800a344:	20000af4 	.word	0x20000af4
 800a348:	00000476 	.word	0x00000476
 800a34c:	fffffdc8 	.word	0xfffffdc8
 800a350:	0000041d 	.word	0x0000041d
 800a354:	00000481 	.word	0x00000481
 800a358:	00000414 	.word	0x00000414
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a35c:	3001      	adds	r0, #1
 800a35e:	b2c0      	uxtb	r0, r0
 800a360:	2803      	cmp	r0, #3
 800a362:	d827      	bhi.n	800a3b4 <ProcessRadioRxDone+0x400>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a364:	4abf      	ldr	r2, [pc, #764]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a366:	4bc0      	ldr	r3, [pc, #768]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a368:	58d1      	ldr	r1, [r2, r3]
 800a36a:	0002      	movs	r2, r0
 800a36c:	0083      	lsls	r3, r0, #2
 800a36e:	181b      	adds	r3, r3, r0
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	18cb      	adds	r3, r1, r3
 800a374:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800a376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a378:	429e      	cmp	r6, r3
 800a37a:	d1ef      	bne.n	800a35c <ProcessRadioRxDone+0x3a8>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a37c:	0083      	lsls	r3, r0, #2
 800a37e:	181b      	adds	r3, r3, r0
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	18cb      	adds	r3, r1, r3
 800a384:	3351      	adds	r3, #81	; 0x51
 800a386:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0e7      	beq.n	800a35c <ProcessRadioRxDone+0x3a8>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800a38c:	0083      	lsls	r3, r0, #2
 800a38e:	1818      	adds	r0, r3, r0
 800a390:	00c0      	lsls	r0, r0, #3
 800a392:	1808      	adds	r0, r1, r0
 800a394:	3052      	adds	r0, #82	; 0x52
 800a396:	7800      	ldrb	r0, [r0, #0]
 800a398:	4680      	mov	r8, r0
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a39a:	189b      	adds	r3, r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	18cb      	adds	r3, r1, r3
 800a3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	9307      	str	r3, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a3a6:	23f0      	movs	r3, #240	; 0xf0
 800a3a8:	5ccb      	ldrb	r3, [r1, r3]
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d0a5      	beq.n	800a2fa <ProcessRadioRxDone+0x346>
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800a3ae:	46b1      	mov	r9, r6
                    multicast = 1;
 800a3b0:	2501      	movs	r5, #1
 800a3b2:	e001      	b.n	800a3b8 <ProcessRadioRxDone+0x404>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	4698      	mov	r8, r3
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a3b8:	a91f      	add	r1, sp, #124	; 0x7c
 800a3ba:	2315      	movs	r3, #21
 800a3bc:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a3be:	4ba9      	ldr	r3, [pc, #676]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a3c0:	469a      	mov	sl, r3
 800a3c2:	4ea9      	ldr	r6, [pc, #676]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a3c4:	599b      	ldr	r3, [r3, r6]
 800a3c6:	7818      	ldrb	r0, [r3, #0]
 800a3c8:	f002 fc09 	bl	800cbde <RegionGetPhyParam>
 800a3cc:	901e      	str	r0, [sp, #120]	; 0x78
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a3ce:	4653      	mov	r3, sl
 800a3d0:	599a      	ldr	r2, [r3, r6]
 800a3d2:	23e8      	movs	r3, #232	; 0xe8
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	58d3      	ldr	r3, [r2, r3]
 800a3d8:	2212      	movs	r2, #18
 800a3da:	a902      	add	r1, sp, #8
 800a3dc:	468c      	mov	ip, r1
 800a3de:	4462      	add	r2, ip
 800a3e0:	7811      	ldrb	r1, [r2, #0]
 800a3e2:	aa07      	add	r2, sp, #28
 800a3e4:	9202      	str	r2, [sp, #8]
 800a3e6:	2213      	movs	r2, #19
 800a3e8:	4462      	add	r2, ip
 800a3ea:	9201      	str	r2, [sp, #4]
 800a3ec:	b280      	uxth	r0, r0
 800a3ee:	9000      	str	r0, [sp, #0]
 800a3f0:	aa12      	add	r2, sp, #72	; 0x48
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	f7fe f8e4 	bl	80085c0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d02e      	beq.n	800a45a <ProcessRadioRxDone+0x4a6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a3fc:	2807      	cmp	r0, #7
 800a3fe:	d00d      	beq.n	800a41c <ProcessRadioRxDone+0x468>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a400:	2808      	cmp	r0, #8
 800a402:	d025      	beq.n	800a450 <ProcessRadioRxDone+0x49c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a404:	4a97      	ldr	r2, [pc, #604]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a406:	4b99      	ldr	r3, [pc, #612]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a408:	2101      	movs	r1, #1
 800a40a:	54d1      	strb	r1, [r2, r3]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a40c:	4a95      	ldr	r2, [pc, #596]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a40e:	2386      	movs	r3, #134	; 0x86
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	9907      	ldr	r1, [sp, #28]
 800a414:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a416:	f7fe f88f 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800a41a:	e118      	b.n	800a64e <ProcessRadioRxDone+0x69a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a41c:	4b91      	ldr	r3, [pc, #580]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a41e:	4a93      	ldr	r2, [pc, #588]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a420:	2108      	movs	r1, #8
 800a422:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800a424:	4a90      	ldr	r2, [pc, #576]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a426:	589b      	ldr	r3, [r3, r2]
 800a428:	22e9      	movs	r2, #233	; 0xe9
 800a42a:	0052      	lsls	r2, r2, #1
 800a42c:	5c9a      	ldrb	r2, [r3, r2]
 800a42e:	2a00      	cmp	r2, #0
 800a430:	d1ec      	bne.n	800a40c <ProcessRadioRxDone+0x458>
 800a432:	321f      	adds	r2, #31
 800a434:	4394      	bics	r4, r2
 800a436:	2ca0      	cmp	r4, #160	; 0xa0
 800a438:	d1e8      	bne.n	800a40c <ProcessRadioRxDone+0x458>
 800a43a:	32ba      	adds	r2, #186	; 0xba
 800a43c:	32ff      	adds	r2, #255	; 0xff
 800a43e:	589a      	ldr	r2, [r3, r2]
 800a440:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a442:	428a      	cmp	r2, r1
 800a444:	d1e2      	bne.n	800a40c <ProcessRadioRxDone+0x458>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800a446:	22e0      	movs	r2, #224	; 0xe0
 800a448:	0052      	lsls	r2, r2, #1
 800a44a:	2101      	movs	r1, #1
 800a44c:	5499      	strb	r1, [r3, r2]
 800a44e:	e7dd      	b.n	800a40c <ProcessRadioRxDone+0x458>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a450:	4a84      	ldr	r2, [pc, #528]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a452:	4b86      	ldr	r3, [pc, #536]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a454:	210a      	movs	r1, #10
 800a456:	54d1      	strb	r1, [r2, r3]
 800a458:	e7d8      	b.n	800a40c <ProcessRadioRxDone+0x458>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a45a:	2313      	movs	r3, #19
 800a45c:	aa02      	add	r2, sp, #8
 800a45e:	4694      	mov	ip, r2
 800a460:	4463      	add	r3, ip
 800a462:	781a      	ldrb	r2, [r3, #0]
 800a464:	ab12      	add	r3, sp, #72	; 0x48
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	9b07      	ldr	r3, [sp, #28]
 800a46a:	4649      	mov	r1, r9
 800a46c:	4640      	mov	r0, r8
 800a46e:	f002 f8b1 	bl	800c5d4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a472:	2800      	cmp	r0, #0
 800a474:	d156      	bne.n	800a524 <ProcessRadioRxDone+0x570>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a476:	4b7b      	ldr	r3, [pc, #492]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a478:	2100      	movs	r1, #0
 800a47a:	4a7c      	ldr	r2, [pc, #496]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a47c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a47e:	4a7c      	ldr	r2, [pc, #496]	; (800a670 <ProcessRadioRxDone+0x6bc>)
 800a480:	549d      	strb	r5, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a482:	aa12      	add	r2, sp, #72	; 0x48
 800a484:	7b12      	ldrb	r2, [r2, #12]
 800a486:	06d0      	lsls	r0, r2, #27
 800a488:	0fc0      	lsrs	r0, r0, #31
 800a48a:	4e7a      	ldr	r6, [pc, #488]	; (800a674 <ProcessRadioRxDone+0x6c0>)
 800a48c:	5598      	strb	r0, [r3, r6]
            MacCtx.McpsIndication.Buffer = NULL;
 800a48e:	487a      	ldr	r0, [pc, #488]	; (800a678 <ProcessRadioRxDone+0x6c4>)
 800a490:	5019      	str	r1, [r3, r0]
            MacCtx.McpsIndication.BufferSize = 0;
 800a492:	3004      	adds	r0, #4
 800a494:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a496:	3008      	adds	r0, #8
 800a498:	9e07      	ldr	r6, [sp, #28]
 800a49a:	501e      	str	r6, [r3, r0]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a49c:	0692      	lsls	r2, r2, #26
 800a49e:	0fd2      	lsrs	r2, r2, #31
 800a4a0:	4876      	ldr	r0, [pc, #472]	; (800a67c <ProcessRadioRxDone+0x6c8>)
 800a4a2:	541a      	strb	r2, [r3, r0]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a4a4:	4876      	ldr	r0, [pc, #472]	; (800a680 <ProcessRadioRxDone+0x6cc>)
 800a4a6:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a4a8:	2188      	movs	r1, #136	; 0x88
 800a4aa:	00c9      	lsls	r1, r1, #3
 800a4ac:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a4ae:	4a75      	ldr	r2, [pc, #468]	; (800a684 <ProcessRadioRxDone+0x6d0>)
 800a4b0:	5c9b      	ldrb	r3, [r3, r2]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d944      	bls.n	800a540 <ProcessRadioRxDone+0x58c>
            if( multicast == 1 )
 800a4b6:	2d01      	cmp	r5, #1
 800a4b8:	d049      	beq.n	800a54e <ProcessRadioRxDone+0x59a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a4ba:	231f      	movs	r3, #31
 800a4bc:	439c      	bics	r4, r3
 800a4be:	2ca0      	cmp	r4, #160	; 0xa0
 800a4c0:	d04a      	beq.n	800a558 <ProcessRadioRxDone+0x5a4>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a4c2:	4b68      	ldr	r3, [pc, #416]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a4c4:	4a68      	ldr	r2, [pc, #416]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a4c6:	5898      	ldr	r0, [r3, r2]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	21e0      	movs	r1, #224	; 0xe0
 800a4cc:	0049      	lsls	r1, r1, #1
 800a4ce:	5442      	strb	r2, [r0, r1]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a4d0:	496d      	ldr	r1, [pc, #436]	; (800a688 <ProcessRadioRxDone+0x6d4>)
 800a4d2:	545a      	strb	r2, [r3, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a4d4:	4b63      	ldr	r3, [pc, #396]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a4d6:	4a6d      	ldr	r2, [pc, #436]	; (800a68c <ProcessRadioRxDone+0x6d8>)
 800a4d8:	5c9a      	ldrb	r2, [r3, r2]
 800a4da:	a912      	add	r1, sp, #72	; 0x48
 800a4dc:	7b09      	ldrb	r1, [r1, #12]
 800a4de:	4869      	ldr	r0, [pc, #420]	; (800a684 <ProcessRadioRxDone+0x6d0>)
 800a4e0:	5c18      	ldrb	r0, [r3, r0]
 800a4e2:	f7fe f8ab 	bl	800863c <RemoveMacCommands>
            switch( fType )
 800a4e6:	2312      	movs	r3, #18
 800a4e8:	aa02      	add	r2, sp, #8
 800a4ea:	4694      	mov	ip, r2
 800a4ec:	4463      	add	r3, ip
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d07e      	beq.n	800a5f2 <ProcessRadioRxDone+0x63e>
 800a4f4:	d846      	bhi.n	800a584 <ProcessRadioRxDone+0x5d0>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d058      	beq.n	800a5ac <ProcessRadioRxDone+0x5f8>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d000      	beq.n	800a500 <ProcessRadioRxDone+0x54c>
 800a4fe:	e089      	b.n	800a614 <ProcessRadioRxDone+0x660>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a500:	ac12      	add	r4, sp, #72	; 0x48
 800a502:	7b22      	ldrb	r2, [r4, #12]
 800a504:	0712      	lsls	r2, r2, #28
 800a506:	0f12      	lsrs	r2, r2, #28
 800a508:	4d56      	ldr	r5, [pc, #344]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a50a:	4b5e      	ldr	r3, [pc, #376]	; (800a684 <ProcessRadioRxDone+0x6d0>)
 800a50c:	5ceb      	ldrb	r3, [r5, r3]
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	003b      	movs	r3, r7
 800a512:	2100      	movs	r1, #0
 800a514:	a816      	add	r0, sp, #88	; 0x58
 800a516:	f7fe f89f 	bl	8008658 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a51a:	2320      	movs	r3, #32
 800a51c:	5ce2      	ldrb	r2, [r4, r3]
 800a51e:	4b5c      	ldr	r3, [pc, #368]	; (800a690 <ProcessRadioRxDone+0x6dc>)
 800a520:	54ea      	strb	r2, [r5, r3]
                    break;
 800a522:	e05f      	b.n	800a5e4 <ProcessRadioRxDone+0x630>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a524:	2802      	cmp	r0, #2
 800a526:	d006      	beq.n	800a536 <ProcessRadioRxDone+0x582>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a528:	4a4e      	ldr	r2, [pc, #312]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a52a:	4b50      	ldr	r3, [pc, #320]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a52c:	210c      	movs	r1, #12
 800a52e:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a530:	f7fe f802 	bl	8008538 <PrepareRxDoneAbort>
                return;
 800a534:	e08b      	b.n	800a64e <ProcessRadioRxDone+0x69a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a536:	4a4b      	ldr	r2, [pc, #300]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a538:	4b4c      	ldr	r3, [pc, #304]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a53a:	210b      	movs	r1, #11
 800a53c:	54d1      	strb	r1, [r2, r3]
 800a53e:	e7f7      	b.n	800a530 <ProcessRadioRxDone+0x57c>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a540:	4a48      	ldr	r2, [pc, #288]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a542:	4b49      	ldr	r3, [pc, #292]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a544:	58d2      	ldr	r2, [r2, r3]
 800a546:	23f4      	movs	r3, #244	; 0xf4
 800a548:	2100      	movs	r1, #0
 800a54a:	50d1      	str	r1, [r2, r3]
 800a54c:	e7b3      	b.n	800a4b6 <ProcessRadioRxDone+0x502>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a54e:	4a45      	ldr	r2, [pc, #276]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a550:	4b4d      	ldr	r3, [pc, #308]	; (800a688 <ProcessRadioRxDone+0x6d4>)
 800a552:	2102      	movs	r1, #2
 800a554:	54d1      	strb	r1, [r2, r3]
 800a556:	e7bd      	b.n	800a4d4 <ProcessRadioRxDone+0x520>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a558:	4a42      	ldr	r2, [pc, #264]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a55a:	4b43      	ldr	r3, [pc, #268]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a55c:	21e0      	movs	r1, #224	; 0xe0
 800a55e:	0049      	lsls	r1, r1, #1
 800a560:	2001      	movs	r0, #1
 800a562:	58d4      	ldr	r4, [r2, r3]
 800a564:	5460      	strb	r0, [r4, r1]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a566:	58d3      	ldr	r3, [r2, r3]
 800a568:	22e9      	movs	r2, #233	; 0xe9
 800a56a:	0052      	lsls	r2, r2, #1
 800a56c:	5c9a      	ldrb	r2, [r3, r2]
 800a56e:	2a00      	cmp	r2, #0
 800a570:	d103      	bne.n	800a57a <ProcessRadioRxDone+0x5c6>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a572:	32d9      	adds	r2, #217	; 0xd9
 800a574:	32ff      	adds	r2, #255	; 0xff
 800a576:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a578:	5099      	str	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a57a:	4a3a      	ldr	r2, [pc, #232]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a57c:	4b42      	ldr	r3, [pc, #264]	; (800a688 <ProcessRadioRxDone+0x6d4>)
 800a57e:	2101      	movs	r1, #1
 800a580:	54d1      	strb	r1, [r2, r3]
 800a582:	e7a7      	b.n	800a4d4 <ProcessRadioRxDone+0x520>
 800a584:	2b03      	cmp	r3, #3
 800a586:	d145      	bne.n	800a614 <ProcessRadioRxDone+0x660>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a588:	aa12      	add	r2, sp, #72	; 0x48
 800a58a:	2320      	movs	r3, #32
 800a58c:	5cd0      	ldrb	r0, [r2, r3]
 800a58e:	4b35      	ldr	r3, [pc, #212]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a590:	493f      	ldr	r1, [pc, #252]	; (800a690 <ProcessRadioRxDone+0x6dc>)
 800a592:	5458      	strb	r0, [r3, r1]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a594:	4938      	ldr	r1, [pc, #224]	; (800a678 <ProcessRadioRxDone+0x6c4>)
 800a596:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a598:	5058      	str	r0, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a59a:	2128      	movs	r1, #40	; 0x28
 800a59c:	5c51      	ldrb	r1, [r2, r1]
 800a59e:	2285      	movs	r2, #133	; 0x85
 800a5a0:	00d2      	lsls	r2, r2, #3
 800a5a2:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800a5a4:	4a3b      	ldr	r2, [pc, #236]	; (800a694 <ProcessRadioRxDone+0x6e0>)
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	5499      	strb	r1, [r3, r2]
                    break;
 800a5aa:	e01b      	b.n	800a5e4 <ProcessRadioRxDone+0x630>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a5ac:	ad12      	add	r5, sp, #72	; 0x48
 800a5ae:	7b2a      	ldrb	r2, [r5, #12]
 800a5b0:	0712      	lsls	r2, r2, #28
 800a5b2:	0f12      	lsrs	r2, r2, #28
 800a5b4:	4c2b      	ldr	r4, [pc, #172]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a5b6:	4b33      	ldr	r3, [pc, #204]	; (800a684 <ProcessRadioRxDone+0x6d0>)
 800a5b8:	5ce3      	ldrb	r3, [r4, r3]
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	003b      	movs	r3, r7
 800a5be:	2100      	movs	r1, #0
 800a5c0:	a816      	add	r0, sp, #88	; 0x58
 800a5c2:	f7fe f849 	bl	8008658 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a5c6:	2320      	movs	r3, #32
 800a5c8:	5cea      	ldrb	r2, [r5, r3]
 800a5ca:	4b31      	ldr	r3, [pc, #196]	; (800a690 <ProcessRadioRxDone+0x6dc>)
 800a5cc:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a5ce:	4b2a      	ldr	r3, [pc, #168]	; (800a678 <ProcessRadioRxDone+0x6c4>)
 800a5d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a5d2:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a5d4:	2328      	movs	r3, #40	; 0x28
 800a5d6:	5cea      	ldrb	r2, [r5, r3]
 800a5d8:	2385      	movs	r3, #133	; 0x85
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a5de:	4b2d      	ldr	r3, [pc, #180]	; (800a694 <ProcessRadioRxDone+0x6e0>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a5e4:	491f      	ldr	r1, [pc, #124]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a5e6:	4a2c      	ldr	r2, [pc, #176]	; (800a698 <ProcessRadioRxDone+0x6e4>)
 800a5e8:	5c8b      	ldrb	r3, [r1, r2]
 800a5ea:	2002      	movs	r0, #2
 800a5ec:	4303      	orrs	r3, r0
 800a5ee:	548b      	strb	r3, [r1, r2]
            break;
 800a5f0:	e5c7      	b.n	800a182 <ProcessRadioRxDone+0x1ce>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a5f2:	ac12      	add	r4, sp, #72	; 0x48
 800a5f4:	2328      	movs	r3, #40	; 0x28
 800a5f6:	5ce2      	ldrb	r2, [r4, r3]
 800a5f8:	4d1a      	ldr	r5, [pc, #104]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a5fa:	4b22      	ldr	r3, [pc, #136]	; (800a684 <ProcessRadioRxDone+0x6d0>)
 800a5fc:	5ceb      	ldrb	r3, [r5, r3]
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	003b      	movs	r3, r7
 800a602:	2100      	movs	r1, #0
 800a604:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a606:	f7fe f827 	bl	8008658 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a60a:	2320      	movs	r3, #32
 800a60c:	5ce2      	ldrb	r2, [r4, r3]
 800a60e:	4b20      	ldr	r3, [pc, #128]	; (800a690 <ProcessRadioRxDone+0x6dc>)
 800a610:	54ea      	strb	r2, [r5, r3]
                    break;
 800a612:	e7e7      	b.n	800a5e4 <ProcessRadioRxDone+0x630>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a614:	4a13      	ldr	r2, [pc, #76]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a616:	4b15      	ldr	r3, [pc, #84]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a618:	2101      	movs	r1, #1
 800a61a:	54d1      	strb	r1, [r2, r3]
                    PrepareRxDoneAbort( );
 800a61c:	f7fd ff8c 	bl	8008538 <PrepareRxDoneAbort>
                    break;
 800a620:	e7e0      	b.n	800a5e4 <ProcessRadioRxDone+0x630>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a622:	4a10      	ldr	r2, [pc, #64]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a624:	4b11      	ldr	r3, [pc, #68]	; (800a66c <ProcessRadioRxDone+0x6b8>)
 800a626:	2101      	movs	r1, #1
 800a628:	54d1      	strb	r1, [r2, r3]
            PrepareRxDoneAbort( );
 800a62a:	f7fd ff85 	bl	8008538 <PrepareRxDoneAbort>
            break;
 800a62e:	e5a8      	b.n	800a182 <ProcessRadioRxDone+0x1ce>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a630:	4a0c      	ldr	r2, [pc, #48]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <ProcessRadioRxDone+0x6b4>)
 800a634:	58d2      	ldr	r2, [r2, r3]
 800a636:	23f0      	movs	r3, #240	; 0xf0
 800a638:	5cd3      	ldrb	r3, [r2, r3]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d00d      	beq.n	800a65a <ProcessRadioRxDone+0x6a6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a63e:	4909      	ldr	r1, [pc, #36]	; (800a664 <ProcessRadioRxDone+0x6b0>)
 800a640:	4a15      	ldr	r2, [pc, #84]	; (800a698 <ProcessRadioRxDone+0x6e4>)
 800a642:	5c8b      	ldrb	r3, [r1, r2]
 800a644:	2020      	movs	r0, #32
 800a646:	4303      	orrs	r3, r0
 800a648:	548b      	strb	r3, [r1, r2]
    UpdateRxSlotIdleState( );
 800a64a:	f7fd fd21 	bl	8008090 <UpdateRxSlotIdleState>
}
 800a64e:	b022      	add	sp, #136	; 0x88
 800a650:	bce0      	pop	{r5, r6, r7}
 800a652:	46ba      	mov	sl, r7
 800a654:	46b1      	mov	r9, r6
 800a656:	46a8      	mov	r8, r5
 800a658:	bdf0      	pop	{r4, r5, r6, r7, pc}
            OnAckTimeoutTimerEvent( NULL );
 800a65a:	2000      	movs	r0, #0
 800a65c:	f7fd ff34 	bl	80084c8 <OnAckTimeoutTimerEvent>
 800a660:	e7ed      	b.n	800a63e <ProcessRadioRxDone+0x68a>
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	200008bc 	.word	0x200008bc
 800a668:	00000484 	.word	0x00000484
 800a66c:	0000041d 	.word	0x0000041d
 800a670:	0000041e 	.word	0x0000041e
 800a674:	00000421 	.word	0x00000421
 800a678:	00000424 	.word	0x00000424
 800a67c:	0000042e 	.word	0x0000042e
 800a680:	0000043d 	.word	0x0000043d
 800a684:	0000042d 	.word	0x0000042d
 800a688:	0000041c 	.word	0x0000041c
 800a68c:	0000043c 	.word	0x0000043c
 800a690:	0000041f 	.word	0x0000041f
 800a694:	00000429 	.word	0x00000429
 800a698:	00000481 	.word	0x00000481

0800a69c <LoRaMacHandleIrqEvents>:
{
 800a69c:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a69e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a6a2:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a6a4:	4a11      	ldr	r2, [pc, #68]	; (800a6ec <LoRaMacHandleIrqEvents+0x50>)
 800a6a6:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	6010      	str	r0, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ac:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00a      	beq.n	800a6ca <LoRaMacHandleIrqEvents+0x2e>
        if( events.Events.TxDone == 1 )
 800a6b4:	b2dc      	uxtb	r4, r3
 800a6b6:	06db      	lsls	r3, r3, #27
 800a6b8:	d408      	bmi.n	800a6cc <LoRaMacHandleIrqEvents+0x30>
        if( events.Events.RxDone == 1 )
 800a6ba:	0723      	lsls	r3, r4, #28
 800a6bc:	d409      	bmi.n	800a6d2 <LoRaMacHandleIrqEvents+0x36>
        if( events.Events.TxTimeout == 1 )
 800a6be:	0763      	lsls	r3, r4, #29
 800a6c0:	d40a      	bmi.n	800a6d8 <LoRaMacHandleIrqEvents+0x3c>
        if( events.Events.RxError == 1 )
 800a6c2:	07a3      	lsls	r3, r4, #30
 800a6c4:	d40b      	bmi.n	800a6de <LoRaMacHandleIrqEvents+0x42>
        if( events.Events.RxTimeout == 1 )
 800a6c6:	07e3      	lsls	r3, r4, #31
 800a6c8:	d40c      	bmi.n	800a6e4 <LoRaMacHandleIrqEvents+0x48>
}
 800a6ca:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a6cc:	f7fd fe7e 	bl	80083cc <ProcessRadioTxDone>
 800a6d0:	e7f3      	b.n	800a6ba <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a6d2:	f7ff fc6f 	bl	8009fb4 <ProcessRadioRxDone>
 800a6d6:	e7f2      	b.n	800a6be <LoRaMacHandleIrqEvents+0x22>
            ProcessRadioTxTimeout( );
 800a6d8:	f7fe fa92 	bl	8008c00 <ProcessRadioTxTimeout>
 800a6dc:	e7f1      	b.n	800a6c2 <LoRaMacHandleIrqEvents+0x26>
            ProcessRadioRxError( );
 800a6de:	f7fe fb2f 	bl	8008d40 <ProcessRadioRxError>
 800a6e2:	e7f0      	b.n	800a6c6 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxTimeout( );
 800a6e4:	f7fe fb32 	bl	8008d4c <ProcessRadioRxTimeout>
}
 800a6e8:	e7ef      	b.n	800a6ca <LoRaMacHandleIrqEvents+0x2e>
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	200006dc 	.word	0x200006dc

0800a6f0 <LoRaMacProcess>:
{
 800a6f0:	b510      	push	{r4, lr}
    LoRaMacHandleIrqEvents( );
 800a6f2:	f7ff ffd3 	bl	800a69c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a6f6:	f001 f9b4 	bl	800ba62 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a6fa:	4a15      	ldr	r2, [pc, #84]	; (800a750 <LoRaMacProcess+0x60>)
 800a6fc:	4b15      	ldr	r3, [pc, #84]	; (800a754 <LoRaMacProcess+0x64>)
 800a6fe:	5cd3      	ldrb	r3, [r2, r3]
 800a700:	069b      	lsls	r3, r3, #26
 800a702:	d408      	bmi.n	800a716 <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 800a704:	f7fd fce4 	bl	80080d0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a708:	4a11      	ldr	r2, [pc, #68]	; (800a750 <LoRaMacProcess+0x60>)
 800a70a:	2390      	movs	r3, #144	; 0x90
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	5cd3      	ldrb	r3, [r2, r3]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d019      	beq.n	800a748 <LoRaMacProcess+0x58>
}
 800a714:	bd10      	pop	{r4, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a716:	2000      	movs	r0, #0
 800a718:	f7fd fcd2 	bl	80080c0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a71c:	f7fd fd20 	bl	8008160 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a720:	f7fd fde4 	bl	80082ec <IsRequestPending>
 800a724:	2800      	cmp	r0, #0
 800a726:	d003      	beq.n	800a730 <LoRaMacProcess+0x40>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a728:	f7fd ff28 	bl	800857c <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d103      	bne.n	800a738 <LoRaMacProcess+0x48>
            LoRaMacHandleMlmeRequest( );
 800a730:	f7fe fb12 	bl	8008d58 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a734:	f7ff f9fa 	bl	8009b2c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a738:	f7fe fc98 	bl	800906c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800a73c:	f7fe fce4 	bl	8009108 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a740:	2001      	movs	r0, #1
 800a742:	f7fd fcbd 	bl	80080c0 <LoRaMacEnableRequests>
 800a746:	e7dd      	b.n	800a704 <LoRaMacProcess+0x14>
        OpenContinuousRxCWindow( );
 800a748:	f7fe fcf6 	bl	8009138 <OpenContinuousRxCWindow>
}
 800a74c:	e7e2      	b.n	800a714 <LoRaMacProcess+0x24>
 800a74e:	46c0      	nop			; (mov r8, r8)
 800a750:	200008bc 	.word	0x200008bc
 800a754:	00000481 	.word	0x00000481

0800a758 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75a:	46de      	mov	lr, fp
 800a75c:	4657      	mov	r7, sl
 800a75e:	464e      	mov	r6, r9
 800a760:	4645      	mov	r5, r8
 800a762:	b5e0      	push	{r5, r6, r7, lr}
 800a764:	b091      	sub	sp, #68	; 0x44
 800a766:	1e07      	subs	r7, r0, #0
 800a768:	4688      	mov	r8, r1
 800a76a:	4693      	mov	fp, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800a76c:	d100      	bne.n	800a770 <LoRaMacInitialization+0x18>
 800a76e:	e1cd      	b.n	800ab0c <LoRaMacInitialization+0x3b4>
 800a770:	2900      	cmp	r1, #0
 800a772:	d100      	bne.n	800a776 <LoRaMacInitialization+0x1e>
 800a774:	e1cc      	b.n	800ab10 <LoRaMacInitialization+0x3b8>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a776:	6803      	ldr	r3, [r0, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d100      	bne.n	800a77e <LoRaMacInitialization+0x26>
 800a77c:	e1ca      	b.n	800ab14 <LoRaMacInitialization+0x3bc>
 800a77e:	6843      	ldr	r3, [r0, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d100      	bne.n	800a786 <LoRaMacInitialization+0x2e>
 800a784:	e1c8      	b.n	800ab18 <LoRaMacInitialization+0x3c0>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a786:	6883      	ldr	r3, [r0, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d100      	bne.n	800a78e <LoRaMacInitialization+0x36>
 800a78c:	e1c6      	b.n	800ab1c <LoRaMacInitialization+0x3c4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a78e:	68c3      	ldr	r3, [r0, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d100      	bne.n	800a796 <LoRaMacInitialization+0x3e>
 800a794:	e1c4      	b.n	800ab20 <LoRaMacInitialization+0x3c8>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a796:	0010      	movs	r0, r2
 800a798:	f002 fa1b 	bl	800cbd2 <RegionIsActive>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d100      	bne.n	800a7a2 <LoRaMacInitialization+0x4a>
 800a7a0:	e1c0      	b.n	800ab24 <LoRaMacInitialization+0x3cc>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800a7a2:	49e9      	ldr	r1, [pc, #932]	; (800ab48 <LoRaMacInitialization+0x3f0>)
 800a7a4:	0038      	movs	r0, r7
 800a7a6:	f001 faff 	bl	800bda8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800a7aa:	22ee      	movs	r2, #238	; 0xee
 800a7ac:	4ee7      	ldr	r6, [pc, #924]	; (800ab4c <LoRaMacInitialization+0x3f4>)
 800a7ae:	0052      	lsls	r2, r2, #1
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	0030      	movs	r0, r6
 800a7b4:	f004 facf 	bl	800ed56 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a7b8:	2291      	movs	r2, #145	; 0x91
 800a7ba:	4ce5      	ldr	r4, [pc, #916]	; (800ab50 <LoRaMacInitialization+0x3f8>)
 800a7bc:	00d2      	lsls	r2, r2, #3
 800a7be:	2100      	movs	r1, #0
 800a7c0:	0020      	movs	r0, r4
 800a7c2:	f004 fac8 	bl	800ed56 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800a7c6:	4de3      	ldr	r5, [pc, #908]	; (800ab54 <LoRaMacInitialization+0x3fc>)
 800a7c8:	5166      	str	r6, [r4, r5]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	469a      	mov	sl, r3
 800a7ce:	4be2      	ldr	r3, [pc, #904]	; (800ab58 <LoRaMacInitialization+0x400>)
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	54e2      	strb	r2, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800a7d4:	4be1      	ldr	r3, [pc, #900]	; (800ab5c <LoRaMacInitialization+0x404>)
 800a7d6:	54e2      	strb	r2, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 800a7d8:	465b      	mov	r3, fp
 800a7da:	7033      	strb	r3, [r6, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4699      	mov	r9, r3
 800a7e0:	33f0      	adds	r3, #240	; 0xf0
 800a7e2:	464a      	mov	r2, r9
 800a7e4:	54f2      	strb	r2, [r6, r3]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800a7e6:	2340      	movs	r3, #64	; 0x40
 800a7e8:	33ff      	adds	r3, #255	; 0xff
 800a7ea:	54f2      	strb	r2, [r6, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
    lrWanVersion.Fields.Minor    = 0;
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
 800a7ec:	2280      	movs	r2, #128	; 0x80
 800a7ee:	0452      	lsls	r2, r2, #17
 800a7f0:	33c2      	adds	r3, #194	; 0xc2
 800a7f2:	33ff      	adds	r3, #255	; 0xff
 800a7f4:	4313      	orrs	r3, r2
    MacCtx.NvmCtx->Version = lrWanVersion;
 800a7f6:	22e8      	movs	r2, #232	; 0xe8
 800a7f8:	0052      	lsls	r2, r2, #1
 800a7fa:	50b3      	str	r3, [r6, r2]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a7fc:	ae0f      	add	r6, sp, #60	; 0x3c
 800a7fe:	230f      	movs	r3, #15
 800a800:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a802:	0031      	movs	r1, r6
 800a804:	4658      	mov	r0, fp
 800a806:	f002 f9ea 	bl	800cbde <RegionGetPhyParam>
 800a80a:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a80c:	1e43      	subs	r3, r0, #1
 800a80e:	4198      	sbcs	r0, r3
 800a810:	233e      	movs	r3, #62	; 0x3e
 800a812:	33ff      	adds	r3, #255	; 0xff
 800a814:	5962      	ldr	r2, [r4, r5]
 800a816:	54d0      	strb	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a818:	3b34      	subs	r3, #52	; 0x34
 800a81a:	3bff      	subs	r3, #255	; 0xff
 800a81c:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a81e:	5963      	ldr	r3, [r4, r5]
 800a820:	7818      	ldrb	r0, [r3, #0]
 800a822:	0031      	movs	r1, r6
 800a824:	f002 f9db 	bl	800cbde <RegionGetPhyParam>
 800a828:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a82a:	5963      	ldr	r3, [r4, r5]
 800a82c:	7118      	strb	r0, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a82e:	2306      	movs	r3, #6
 800a830:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a832:	5962      	ldr	r2, [r4, r5]
 800a834:	7810      	ldrb	r0, [r2, #0]
 800a836:	0031      	movs	r1, r6
 800a838:	f002 f9d1 	bl	800cbde <RegionGetPhyParam>
 800a83c:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a83e:	5962      	ldr	r2, [r4, r5]
 800a840:	7150      	strb	r0, [r2, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a842:	2310      	movs	r3, #16
 800a844:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a846:	5962      	ldr	r2, [r4, r5]
 800a848:	7810      	ldrb	r0, [r2, #0]
 800a84a:	0031      	movs	r1, r6
 800a84c:	f002 f9c7 	bl	800cbde <RegionGetPhyParam>
 800a850:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a852:	5963      	ldr	r3, [r4, r5]
 800a854:	6118      	str	r0, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a856:	2311      	movs	r3, #17
 800a858:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a85a:	5962      	ldr	r2, [r4, r5]
 800a85c:	7810      	ldrb	r0, [r2, #0]
 800a85e:	0031      	movs	r1, r6
 800a860:	f002 f9bd 	bl	800cbde <RegionGetPhyParam>
 800a864:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a866:	5963      	ldr	r3, [r4, r5]
 800a868:	6158      	str	r0, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a86a:	2312      	movs	r3, #18
 800a86c:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a86e:	5962      	ldr	r2, [r4, r5]
 800a870:	7810      	ldrb	r0, [r2, #0]
 800a872:	0031      	movs	r1, r6
 800a874:	f002 f9b3 	bl	800cbde <RegionGetPhyParam>
 800a878:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a87a:	5963      	ldr	r3, [r4, r5]
 800a87c:	6198      	str	r0, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a87e:	2313      	movs	r3, #19
 800a880:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a882:	5962      	ldr	r2, [r4, r5]
 800a884:	7810      	ldrb	r0, [r2, #0]
 800a886:	0031      	movs	r1, r6
 800a888:	f002 f9a9 	bl	800cbde <RegionGetPhyParam>
 800a88c:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a88e:	5963      	ldr	r3, [r4, r5]
 800a890:	61d8      	str	r0, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a892:	2214      	movs	r2, #20
 800a894:	4693      	mov	fp, r2
 800a896:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a898:	5962      	ldr	r2, [r4, r5]
 800a89a:	7810      	ldrb	r0, [r2, #0]
 800a89c:	0031      	movs	r1, r6
 800a89e:	f002 f99e 	bl	800cbde <RegionGetPhyParam>
 800a8a2:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a8a4:	5963      	ldr	r3, [r4, r5]
 800a8a6:	6218      	str	r0, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a8a8:	2317      	movs	r3, #23
 800a8aa:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8ac:	5962      	ldr	r2, [r4, r5]
 800a8ae:	7810      	ldrb	r0, [r2, #0]
 800a8b0:	0031      	movs	r1, r6
 800a8b2:	f002 f994 	bl	800cbde <RegionGetPhyParam>
 800a8b6:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a8b8:	2325      	movs	r3, #37	; 0x25
 800a8ba:	5962      	ldr	r2, [r4, r5]
 800a8bc:	54d0      	strb	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a8be:	3b0d      	subs	r3, #13
 800a8c0:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8c2:	5962      	ldr	r2, [r4, r5]
 800a8c4:	7810      	ldrb	r0, [r2, #0]
 800a8c6:	0031      	movs	r1, r6
 800a8c8:	f002 f989 	bl	800cbde <RegionGetPhyParam>
 800a8cc:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a8ce:	5963      	ldr	r3, [r4, r5]
 800a8d0:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a8d2:	5963      	ldr	r3, [r4, r5]
 800a8d4:	6318      	str	r0, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a8d6:	2319      	movs	r3, #25
 800a8d8:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8da:	5962      	ldr	r2, [r4, r5]
 800a8dc:	7810      	ldrb	r0, [r2, #0]
 800a8de:	0031      	movs	r1, r6
 800a8e0:	f002 f97d 	bl	800cbde <RegionGetPhyParam>
 800a8e4:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a8e6:	b2c0      	uxtb	r0, r0
 800a8e8:	232c      	movs	r3, #44	; 0x2c
 800a8ea:	5962      	ldr	r2, [r4, r5]
 800a8ec:	54d0      	strb	r0, [r2, r3]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	5962      	ldr	r2, [r4, r5]
 800a8f2:	54d0      	strb	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a8f4:	3b16      	subs	r3, #22
 800a8f6:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8f8:	5962      	ldr	r2, [r4, r5]
 800a8fa:	7810      	ldrb	r0, [r2, #0]
 800a8fc:	0031      	movs	r1, r6
 800a8fe:	f002 f96e 	bl	800cbde <RegionGetPhyParam>
 800a902:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a904:	2338      	movs	r3, #56	; 0x38
 800a906:	5962      	ldr	r2, [r4, r5]
 800a908:	54d0      	strb	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a90a:	3b19      	subs	r3, #25
 800a90c:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a90e:	5962      	ldr	r2, [r4, r5]
 800a910:	7810      	ldrb	r0, [r2, #0]
 800a912:	0031      	movs	r1, r6
 800a914:	f002 f963 	bl	800cbde <RegionGetPhyParam>
 800a918:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a91a:	2339      	movs	r3, #57	; 0x39
 800a91c:	5962      	ldr	r2, [r4, r5]
 800a91e:	54d0      	strb	r0, [r2, r3]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a920:	3b19      	subs	r3, #25
 800a922:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a924:	5962      	ldr	r2, [r4, r5]
 800a926:	7810      	ldrb	r0, [r2, #0]
 800a928:	0031      	movs	r1, r6
 800a92a:	f002 f958 	bl	800cbde <RegionGetPhyParam>
 800a92e:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a930:	5963      	ldr	r3, [r4, r5]
 800a932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a934:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a936:	2321      	movs	r3, #33	; 0x21
 800a938:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a93a:	5962      	ldr	r2, [r4, r5]
 800a93c:	7810      	ldrb	r0, [r2, #0]
 800a93e:	0031      	movs	r1, r6
 800a940:	f002 f94d 	bl	800cbde <RegionGetPhyParam>
 800a944:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a946:	5963      	ldr	r3, [r4, r5]
 800a948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a94a:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a94c:	230b      	movs	r3, #11
 800a94e:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a950:	5962      	ldr	r2, [r4, r5]
 800a952:	7810      	ldrb	r0, [r2, #0]
 800a954:	0031      	movs	r1, r6
 800a956:	f002 f942 	bl	800cbde <RegionGetPhyParam>
 800a95a:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.AdrAckLimit = phyParam.Value;
 800a95c:	23fd      	movs	r3, #253	; 0xfd
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a962:	230c      	movs	r3, #12
 800a964:	7033      	strb	r3, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a966:	5962      	ldr	r2, [r4, r5]
 800a968:	7810      	ldrb	r0, [r2, #0]
 800a96a:	0031      	movs	r1, r6
 800a96c:	f002 f937 	bl	800cbde <RegionGetPhyParam>
 800a970:	900e      	str	r0, [sp, #56]	; 0x38
    MacCtx.AdrAckDelay = phyParam.Value;
 800a972:	4b7b      	ldr	r3, [pc, #492]	; (800ab60 <LoRaMacInitialization+0x408>)
 800a974:	52e0      	strh	r0, [r4, r3]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a976:	2224      	movs	r2, #36	; 0x24
 800a978:	5961      	ldr	r1, [r4, r5]
 800a97a:	4650      	mov	r0, sl
 800a97c:	5488      	strb	r0, [r1, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800a97e:	5963      	ldr	r3, [r4, r5]
 800a980:	4659      	mov	r1, fp
 800a982:	6099      	str	r1, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a984:	5961      	ldr	r1, [r4, r5]
 800a986:	2306      	movs	r3, #6
 800a988:	730b      	strb	r3, [r1, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a98a:	5963      	ldr	r3, [r4, r5]
 800a98c:	21fc      	movs	r1, #252	; 0xfc
 800a98e:	6898      	ldr	r0, [r3, #8]
 800a990:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800a992:	5963      	ldr	r3, [r4, r5]
 800a994:	7b18      	ldrb	r0, [r3, #12]
 800a996:	3104      	adds	r1, #4
 800a998:	5458      	strb	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a99a:	5963      	ldr	r3, [r4, r5]
 800a99c:	3104      	adds	r1, #4
 800a99e:	6918      	ldr	r0, [r3, #16]
 800a9a0:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a9a2:	5963      	ldr	r3, [r4, r5]
 800a9a4:	3104      	adds	r1, #4
 800a9a6:	6958      	ldr	r0, [r3, #20]
 800a9a8:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800a9aa:	5963      	ldr	r3, [r4, r5]
 800a9ac:	3104      	adds	r1, #4
 800a9ae:	6998      	ldr	r0, [r3, #24]
 800a9b0:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800a9b2:	5963      	ldr	r3, [r4, r5]
 800a9b4:	3104      	adds	r1, #4
 800a9b6:	69d8      	ldr	r0, [r3, #28]
 800a9b8:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800a9ba:	5963      	ldr	r3, [r4, r5]
 800a9bc:	3104      	adds	r1, #4
 800a9be:	6a18      	ldr	r0, [r3, #32]
 800a9c0:	5058      	str	r0, [r3, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800a9c2:	5963      	ldr	r3, [r4, r5]
 800a9c4:	5c99      	ldrb	r1, [r3, r2]
 800a9c6:	32f4      	adds	r2, #244	; 0xf4
 800a9c8:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
 800a9ca:	f7fe fa29 	bl	8008e20 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800a9ce:	23f1      	movs	r3, #241	; 0xf1
 800a9d0:	5962      	ldr	r2, [r4, r5]
 800a9d2:	4651      	mov	r1, sl
 800a9d4:	54d1      	strb	r1, [r2, r3]

    MacCtx.MacPrimitives = primitives;
 800a9d6:	23d1      	movs	r3, #209	; 0xd1
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	50e7      	str	r7, [r4, r3]
    MacCtx.MacCallbacks = callbacks;
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4642      	mov	r2, r8
 800a9e0:	50e2      	str	r2, [r4, r3]
    MacCtx.MacFlags.Value = 0;
 800a9e2:	4b60      	ldr	r3, [pc, #384]	; (800ab64 <LoRaMacInitialization+0x40c>)
 800a9e4:	464a      	mov	r2, r9
 800a9e6:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 800a9e8:	3b42      	subs	r3, #66	; 0x42
 800a9ea:	3bff      	subs	r3, #255	; 0xff
 800a9ec:	50e1      	str	r1, [r4, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a9ee:	3b7d      	subs	r3, #125	; 0x7d
 800a9f0:	3bff      	subs	r3, #255	; 0xff
 800a9f2:	5962      	ldr	r2, [r4, r5]
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	5962      	ldr	r2, [r4, r5]
 800a9fc:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a9fe:	33a1      	adds	r3, #161	; 0xa1
 800aa00:	33ff      	adds	r3, #255	; 0xff
 800aa02:	18e0      	adds	r0, r4, r3
 800aa04:	4958      	ldr	r1, [pc, #352]	; (800ab68 <LoRaMacInitialization+0x410>)
 800aa06:	f003 fff7 	bl	800e9f8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800aa0a:	23e0      	movs	r3, #224	; 0xe0
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	18e0      	adds	r0, r4, r3
 800aa10:	4956      	ldr	r1, [pc, #344]	; (800ab6c <LoRaMacInitialization+0x414>)
 800aa12:	f003 fff1 	bl	800e9f8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800aa16:	23e6      	movs	r3, #230	; 0xe6
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	18e0      	adds	r0, r4, r3
 800aa1c:	4954      	ldr	r1, [pc, #336]	; (800ab70 <LoRaMacInitialization+0x418>)
 800aa1e:	f003 ffeb 	bl	800e9f8 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800aa22:	23fe      	movs	r3, #254	; 0xfe
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	18e0      	adds	r0, r4, r3
 800aa28:	4952      	ldr	r1, [pc, #328]	; (800ab74 <LoRaMacInitialization+0x41c>)
 800aa2a:	f003 ffe5 	bl	800e9f8 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 800aa2e:	5966      	ldr	r6, [r4, r5]
 800aa30:	f004 f8bf 	bl	800ebb2 <TimerGetCurrentTime>
 800aa34:	23e6      	movs	r3, #230	; 0xe6
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	50f0      	str	r0, [r6, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800aa3a:	3381      	adds	r3, #129	; 0x81
 800aa3c:	33ff      	adds	r3, #255	; 0xff
 800aa3e:	4a4e      	ldr	r2, [pc, #312]	; (800ab78 <LoRaMacInitialization+0x420>)
 800aa40:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800aa42:	3308      	adds	r3, #8
 800aa44:	4a4d      	ldr	r2, [pc, #308]	; (800ab7c <LoRaMacInitialization+0x424>)
 800aa46:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800aa48:	3308      	adds	r3, #8
 800aa4a:	4a4d      	ldr	r2, [pc, #308]	; (800ab80 <LoRaMacInitialization+0x428>)
 800aa4c:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800aa4e:	3b0c      	subs	r3, #12
 800aa50:	4a4c      	ldr	r2, [pc, #304]	; (800ab84 <LoRaMacInitialization+0x42c>)
 800aa52:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800aa54:	3308      	adds	r3, #8
 800aa56:	4a4c      	ldr	r2, [pc, #304]	; (800ab88 <LoRaMacInitialization+0x430>)
 800aa58:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800aa5a:	4b4c      	ldr	r3, [pc, #304]	; (800ab8c <LoRaMacInitialization+0x434>)
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	22d3      	movs	r2, #211	; 0xd3
 800aa60:	0092      	lsls	r2, r2, #2
 800aa62:	18a0      	adds	r0, r4, r2
 800aa64:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800aa66:	ab02      	add	r3, sp, #8
 800aa68:	464a      	mov	r2, r9
 800aa6a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800aa6c:	9202      	str	r2, [sp, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800aa6e:	5963      	ldr	r3, [r4, r5]
 800aa70:	7818      	ldrb	r0, [r3, #0]
 800aa72:	a902      	add	r1, sp, #8
 800aa74:	f002 f8cb 	bl	800cc0e <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800aa78:	4845      	ldr	r0, [pc, #276]	; (800ab90 <LoRaMacInitialization+0x438>)
 800aa7a:	f7fd f91f 	bl	8007cbc <SecureElementInit>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d159      	bne.n	800ab36 <LoRaMacInitialization+0x3de>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800aa82:	4844      	ldr	r0, [pc, #272]	; (800ab94 <LoRaMacInitialization+0x43c>)
 800aa84:	f001 fc86 	bl	800c394 <LoRaMacCryptoInit>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d156      	bne.n	800ab3a <LoRaMacInitialization+0x3e2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800aa8c:	4842      	ldr	r0, [pc, #264]	; (800ab98 <LoRaMacInitialization+0x440>)
 800aa8e:	f001 f87f 	bl	800bb90 <LoRaMacCommandsInit>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d153      	bne.n	800ab3e <LoRaMacInitialization+0x3e6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800aa96:	4a2e      	ldr	r2, [pc, #184]	; (800ab50 <LoRaMacInitialization+0x3f8>)
 800aa98:	5950      	ldr	r0, [r2, r5]
 800aa9a:	3050      	adds	r0, #80	; 0x50
 800aa9c:	f001 fd0a 	bl	800c4b4 <LoRaMacCryptoSetMulticastReference>
 800aaa0:	1e04      	subs	r4, r0, #0
 800aaa2:	d14e      	bne.n	800ab42 <LoRaMacInitialization+0x3ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800aaa4:	4e39      	ldr	r6, [pc, #228]	; (800ab8c <LoRaMacInitialization+0x434>)
 800aaa6:	69f3      	ldr	r3, [r6, #28]
 800aaa8:	4798      	blx	r3
 800aaaa:	f004 f92b 	bl	800ed04 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800aaae:	4d28      	ldr	r5, [pc, #160]	; (800ab50 <LoRaMacInitialization+0x3f8>)
 800aab0:	4f28      	ldr	r7, [pc, #160]	; (800ab54 <LoRaMacInitialization+0x3fc>)
 800aab2:	23f1      	movs	r3, #241	; 0xf1
 800aab4:	59ea      	ldr	r2, [r5, r7]
 800aab6:	5cd0      	ldrb	r0, [r2, r3]
 800aab8:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800aaba:	4798      	blx	r3
    Radio.Sleep( );
 800aabc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800aabe:	4798      	blx	r3
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    classBCallbacks.MacProcessNotify = NULL;
    if( callbacks != NULL )
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800aac0:	4643      	mov	r3, r8
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	930c      	str	r3, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800aac6:	4643      	mov	r3, r8
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	930d      	str	r3, [sp, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800aace:	4b33      	ldr	r3, [pc, #204]	; (800ab9c <LoRaMacInitialization+0x444>)
 800aad0:	18eb      	adds	r3, r5, r3
 800aad2:	9304      	str	r3, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800aad4:	4b32      	ldr	r3, [pc, #200]	; (800aba0 <LoRaMacInitialization+0x448>)
 800aad6:	18eb      	adds	r3, r5, r3
 800aad8:	9305      	str	r3, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800aada:	238a      	movs	r3, #138	; 0x8a
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	18eb      	adds	r3, r5, r3
 800aae0:	9306      	str	r3, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800aae2:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <LoRaMacInitialization+0x40c>)
 800aae4:	18eb      	adds	r3, r5, r3
 800aae6:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800aae8:	59eb      	ldr	r3, [r5, r7]
 800aaea:	001a      	movs	r2, r3
 800aaec:	324c      	adds	r2, #76	; 0x4c
 800aaee:	9208      	str	r2, [sp, #32]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800aaf0:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800aaf2:	32ac      	adds	r2, #172	; 0xac
 800aaf4:	920a      	str	r2, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800aaf6:	3350      	adds	r3, #80	; 0x50
 800aaf8:	930b      	str	r3, [sp, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800aafa:	4a2a      	ldr	r2, [pc, #168]	; (800aba4 <LoRaMacInitialization+0x44c>)
 800aafc:	a90c      	add	r1, sp, #48	; 0x30
 800aafe:	a804      	add	r0, sp, #16
 800ab00:	f000 ff83 	bl	800ba0a <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ab04:	2001      	movs	r0, #1
 800ab06:	f7fd fadb 	bl	80080c0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800ab0a:	e00c      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab0c:	2403      	movs	r4, #3
 800ab0e:	e00a      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
 800ab10:	2403      	movs	r4, #3
 800ab12:	e008      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab14:	2403      	movs	r4, #3
 800ab16:	e006      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
 800ab18:	2403      	movs	r4, #3
 800ab1a:	e004      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
 800ab1c:	2403      	movs	r4, #3
 800ab1e:	e002      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
 800ab20:	2403      	movs	r4, #3
 800ab22:	e000      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ab24:	2409      	movs	r4, #9
}
 800ab26:	0020      	movs	r0, r4
 800ab28:	b011      	add	sp, #68	; 0x44
 800ab2a:	bcf0      	pop	{r4, r5, r6, r7}
 800ab2c:	46bb      	mov	fp, r7
 800ab2e:	46b2      	mov	sl, r6
 800ab30:	46a9      	mov	r9, r5
 800ab32:	46a0      	mov	r8, r4
 800ab34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab36:	2411      	movs	r4, #17
 800ab38:	e7f5      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab3a:	2411      	movs	r4, #17
 800ab3c:	e7f3      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ab3e:	2413      	movs	r4, #19
 800ab40:	e7f1      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ab42:	2411      	movs	r4, #17
 800ab44:	e7ef      	b.n	800ab26 <LoRaMacInitialization+0x3ce>
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	080082e1 	.word	0x080082e1
 800ab4c:	200006e0 	.word	0x200006e0
 800ab50:	200008bc 	.word	0x200008bc
 800ab54:	00000484 	.word	0x00000484
 800ab58:	00000412 	.word	0x00000412
 800ab5c:	00000411 	.word	0x00000411
 800ab60:	000003f6 	.word	0x000003f6
 800ab64:	00000481 	.word	0x00000481
 800ab68:	08009ab9 	.word	0x08009ab9
 800ab6c:	08009251 	.word	0x08009251
 800ab70:	080091dd 	.word	0x080091dd
 800ab74:	080084c9 	.word	0x080084c9
 800ab78:	08009551 	.word	0x08009551
 800ab7c:	080094d9 	.word	0x080094d9
 800ab80:	08008065 	.word	0x08008065
 800ab84:	08009489 	.word	0x08009489
 800ab88:	08009439 	.word	0x08009439
 800ab8c:	08010b84 	.word	0x08010b84
 800ab90:	080082c3 	.word	0x080082c3
 800ab94:	080082b9 	.word	0x080082b9
 800ab98:	080082cd 	.word	0x080082cd
 800ab9c:	00000464 	.word	0x00000464
 800aba0:	0000041c 	.word	0x0000041c
 800aba4:	080082d7 	.word	0x080082d7

0800aba8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800aba8:	4a03      	ldr	r2, [pc, #12]	; (800abb8 <LoRaMacStart+0x10>)
 800abaa:	23d0      	movs	r3, #208	; 0xd0
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	2100      	movs	r1, #0
 800abb0:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800abb2:	2000      	movs	r0, #0
 800abb4:	4770      	bx	lr
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	200008bc 	.word	0x200008bc

0800abbc <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	0005      	movs	r5, r0
 800abc2:	000c      	movs	r4, r1
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800abc4:	4a2d      	ldr	r2, [pc, #180]	; (800ac7c <LoRaMacQueryTxPossible+0xc0>)
 800abc6:	4b2e      	ldr	r3, [pc, #184]	; (800ac80 <LoRaMacQueryTxPossible+0xc4>)
 800abc8:	58d3      	ldr	r3, [r2, r3]
 800abca:	22f4      	movs	r2, #244	; 0xf4
 800abcc:	589a      	ldr	r2, [r3, r2]
 800abce:	9202      	str	r2, [sp, #8]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800abd0:	2005      	movs	r0, #5
 800abd2:	5618      	ldrsb	r0, [r3, r0]
 800abd4:	4669      	mov	r1, sp
 800abd6:	71c8      	strb	r0, [r1, #7]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800abd8:	2004      	movs	r0, #4
 800abda:	5618      	ldrsb	r0, [r3, r0]
 800abdc:	4669      	mov	r1, sp
 800abde:	7188      	strb	r0, [r1, #6]
    size_t macCmdsSize = 0;
 800abe0:	2100      	movs	r1, #0
 800abe2:	9100      	str	r1, [sp, #0]

    if( txInfo == NULL )
 800abe4:	2c00      	cmp	r4, #0
 800abe6:	d043      	beq.n	800ac70 <LoRaMacQueryTxPossible+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800abe8:	a803      	add	r0, sp, #12
 800abea:	31d1      	adds	r1, #209	; 0xd1
 800abec:	31ff      	adds	r1, #255	; 0xff
 800abee:	5859      	ldr	r1, [r3, r1]
 800abf0:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 800abf2:	2100      	movs	r1, #0
 800abf4:	7101      	strb	r1, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800abf6:	31f2      	adds	r1, #242	; 0xf2
 800abf8:	5c59      	ldrb	r1, [r3, r1]
 800abfa:	7141      	strb	r1, [r0, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800abfc:	6082      	str	r2, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800abfe:	4a1f      	ldr	r2, [pc, #124]	; (800ac7c <LoRaMacQueryTxPossible+0xc0>)
 800ac00:	21fd      	movs	r1, #253	; 0xfd
 800ac02:	0089      	lsls	r1, r1, #2
 800ac04:	5a51      	ldrh	r1, [r2, r1]
 800ac06:	8181      	strh	r1, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800ac08:	491e      	ldr	r1, [pc, #120]	; (800ac84 <LoRaMacQueryTxPossible+0xc8>)
 800ac0a:	5a52      	ldrh	r2, [r2, r1]
 800ac0c:	81c2      	strh	r2, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ac0e:	22f9      	movs	r2, #249	; 0xf9
 800ac10:	569a      	ldrsb	r2, [r3, r2]
 800ac12:	7402      	strb	r2, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ac14:	22f8      	movs	r2, #248	; 0xf8
 800ac16:	569a      	ldrsb	r2, [r3, r2]
 800ac18:	7442      	strb	r2, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ac1a:	2296      	movs	r2, #150	; 0x96
 800ac1c:	0052      	lsls	r2, r2, #1
 800ac1e:	5c9a      	ldrb	r2, [r3, r2]
 800ac20:	7482      	strb	r2, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	74c3      	strb	r3, [r0, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ac26:	466b      	mov	r3, sp
 800ac28:	1dde      	adds	r6, r3, #7
 800ac2a:	ab02      	add	r3, sp, #8
 800ac2c:	466a      	mov	r2, sp
 800ac2e:	3206      	adds	r2, #6
 800ac30:	0031      	movs	r1, r6
 800ac32:	f000 fee1 	bl	800b9f8 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ac36:	2000      	movs	r0, #0
 800ac38:	5630      	ldrsb	r0, [r6, r0]
 800ac3a:	f7fd fb95 	bl	8008368 <GetMaxAppPayloadWithoutFOptsLength>
 800ac3e:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ac40:	4668      	mov	r0, sp
 800ac42:	f001 f84b 	bl	800bcdc <LoRaMacCommandsGetSizeSerializedCmds>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d114      	bne.n	800ac74 <LoRaMacQueryTxPossible+0xb8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800ac4a:	9a00      	ldr	r2, [sp, #0]
 800ac4c:	2a0f      	cmp	r2, #15
 800ac4e:	d80b      	bhi.n	800ac68 <LoRaMacQueryTxPossible+0xac>
 800ac50:	7863      	ldrb	r3, [r4, #1]
 800ac52:	0019      	movs	r1, r3
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d807      	bhi.n	800ac68 <LoRaMacQueryTxPossible+0xac>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ac58:	1a9b      	subs	r3, r3, r2
 800ac5a:	7023      	strb	r3, [r4, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ac5c:	4694      	mov	ip, r2
 800ac5e:	4465      	add	r5, ip
 800ac60:	42a9      	cmp	r1, r5
 800ac62:	d309      	bcc.n	800ac78 <LoRaMacQueryTxPossible+0xbc>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800ac64:	b008      	add	sp, #32
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800ac6c:	2008      	movs	r0, #8
 800ac6e:	e7f9      	b.n	800ac64 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac70:	2003      	movs	r0, #3
 800ac72:	e7f7      	b.n	800ac64 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac74:	2013      	movs	r0, #19
 800ac76:	e7f5      	b.n	800ac64 <LoRaMacQueryTxPossible+0xa8>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800ac78:	2008      	movs	r0, #8
 800ac7a:	e7f3      	b.n	800ac64 <LoRaMacQueryTxPossible+0xa8>
 800ac7c:	200008bc 	.word	0x200008bc
 800ac80:	00000484 	.word	0x00000484
 800ac84:	000003f6 	.word	0x000003f6

0800ac88 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800ac8e:	d100      	bne.n	800ac92 <LoRaMacMibGetRequestConfirm+0xa>
 800ac90:	e112      	b.n	800aeb8 <LoRaMacMibGetRequestConfirm+0x230>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800ac92:	7800      	ldrb	r0, [r0, #0]
 800ac94:	2834      	cmp	r0, #52	; 0x34
 800ac96:	d900      	bls.n	800ac9a <LoRaMacMibGetRequestConfirm+0x12>
 800ac98:	e10a      	b.n	800aeb0 <LoRaMacMibGetRequestConfirm+0x228>
 800ac9a:	0083      	lsls	r3, r0, #2
 800ac9c:	4a88      	ldr	r2, [pc, #544]	; (800aec0 <LoRaMacMibGetRequestConfirm+0x238>)
 800ac9e:	58d3      	ldr	r3, [r2, r3]
 800aca0:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800aca2:	4a88      	ldr	r2, [pc, #544]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800aca4:	4b88      	ldr	r3, [pc, #544]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800aca6:	58d2      	ldr	r2, [r2, r3]
 800aca8:	23f0      	movs	r3, #240	; 0xf0
 800acaa:	5cd3      	ldrb	r3, [r2, r3]
 800acac:	7123      	strb	r3, [r4, #4]
            break;
 800acae:	e104      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800acb0:	4a84      	ldr	r2, [pc, #528]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800acb2:	4b85      	ldr	r3, [pc, #532]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800acb4:	58d2      	ldr	r2, [r2, r3]
 800acb6:	23ea      	movs	r3, #234	; 0xea
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	5cd3      	ldrb	r3, [r2, r3]
 800acbc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acbe:	2000      	movs	r0, #0
            break;
 800acc0:	e0fb      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800acc2:	f7fd f9b5 	bl	8008030 <SecureElementGetDevEui>
 800acc6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acc8:	2000      	movs	r0, #0
            break;
 800acca:	e0f6      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800accc:	f7fd f9c6 	bl	800805c <SecureElementGetJoinEui>
 800acd0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acd2:	2000      	movs	r0, #0
            break;
 800acd4:	e0f1      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800acd6:	4a7b      	ldr	r2, [pc, #492]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800acd8:	4b7b      	ldr	r3, [pc, #492]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800acda:	58d2      	ldr	r2, [r2, r3]
 800acdc:	23f2      	movs	r3, #242	; 0xf2
 800acde:	5cd3      	ldrb	r3, [r2, r3]
 800ace0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ace2:	2000      	movs	r0, #0
            break;
 800ace4:	e0e9      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800ace6:	4a77      	ldr	r2, [pc, #476]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ace8:	4b77      	ldr	r3, [pc, #476]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800acea:	58d3      	ldr	r3, [r2, r3]
 800acec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acee:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acf0:	2000      	movs	r0, #0
            break;
 800acf2:	e0e2      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800acf4:	4a73      	ldr	r2, [pc, #460]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800acf6:	4b74      	ldr	r3, [pc, #464]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800acf8:	58d3      	ldr	r3, [r2, r3]
 800acfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acfc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acfe:	2000      	movs	r0, #0
            break;
 800ad00:	e0db      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800ad02:	4a70      	ldr	r2, [pc, #448]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad04:	4b70      	ldr	r3, [pc, #448]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad06:	58d2      	ldr	r2, [r2, r3]
 800ad08:	23f1      	movs	r3, #241	; 0xf1
 800ad0a:	5cd3      	ldrb	r3, [r2, r3]
 800ad0c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad0e:	2000      	movs	r0, #0
            break;
 800ad10:	e0d3      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ad12:	4a6c      	ldr	r2, [pc, #432]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad14:	4b6c      	ldr	r3, [pc, #432]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad16:	58d2      	ldr	r2, [r2, r3]
 800ad18:	2340      	movs	r3, #64	; 0x40
 800ad1a:	33ff      	adds	r3, #255	; 0xff
 800ad1c:	5cd3      	ldrb	r3, [r2, r3]
 800ad1e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad20:	2000      	movs	r0, #0
            break;
 800ad22:	e0ca      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800ad24:	a901      	add	r1, sp, #4
 800ad26:	231d      	movs	r3, #29
 800ad28:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ad2a:	4a66      	ldr	r2, [pc, #408]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad2c:	4b66      	ldr	r3, [pc, #408]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad2e:	58d3      	ldr	r3, [r2, r3]
 800ad30:	7818      	ldrb	r0, [r3, #0]
 800ad32:	f001 ff54 	bl	800cbde <RegionGetPhyParam>

            mibGet->Param.ChannelList = phyParam.Channels;
 800ad36:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad38:	2000      	movs	r0, #0
            break;
 800ad3a:	e0be      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800ad3c:	4a61      	ldr	r2, [pc, #388]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad3e:	4b62      	ldr	r3, [pc, #392]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad40:	58d3      	ldr	r3, [r2, r3]
 800ad42:	3404      	adds	r4, #4
 800ad44:	331d      	adds	r3, #29
 800ad46:	33ff      	adds	r3, #255	; 0xff
 800ad48:	cb06      	ldmia	r3!, {r1, r2}
 800ad4a:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad4c:	2000      	movs	r0, #0
            break;
 800ad4e:	e0b4      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800ad50:	4a5c      	ldr	r2, [pc, #368]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad52:	4b5d      	ldr	r3, [pc, #372]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad54:	58d3      	ldr	r3, [r2, r3]
 800ad56:	3404      	adds	r4, #4
 800ad58:	3328      	adds	r3, #40	; 0x28
 800ad5a:	cb06      	ldmia	r3!, {r1, r2}
 800ad5c:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad5e:	2000      	movs	r0, #0
            break;
 800ad60:	e0ab      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800ad62:	4a58      	ldr	r2, [pc, #352]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad64:	4b58      	ldr	r3, [pc, #352]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad66:	58d3      	ldr	r3, [r2, r3]
 800ad68:	3404      	adds	r4, #4
 800ad6a:	3325      	adds	r3, #37	; 0x25
 800ad6c:	33ff      	adds	r3, #255	; 0xff
 800ad6e:	cb06      	ldmia	r3!, {r1, r2}
 800ad70:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad72:	2000      	movs	r0, #0
            break;
 800ad74:	e0a1      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800ad76:	4a53      	ldr	r2, [pc, #332]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad78:	4b53      	ldr	r3, [pc, #332]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad7a:	58d3      	ldr	r3, [r2, r3]
 800ad7c:	3404      	adds	r4, #4
 800ad7e:	3330      	adds	r3, #48	; 0x30
 800ad80:	cb06      	ldmia	r3!, {r1, r2}
 800ad82:	c406      	stmia	r4!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad84:	2000      	movs	r0, #0
            break;
 800ad86:	e098      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800ad88:	a901      	add	r1, sp, #4
 800ad8a:	231b      	movs	r3, #27
 800ad8c:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ad8e:	4a4d      	ldr	r2, [pc, #308]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ad90:	4b4d      	ldr	r3, [pc, #308]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ad92:	58d3      	ldr	r3, [r2, r3]
 800ad94:	7818      	ldrb	r0, [r3, #0]
 800ad96:	f001 ff22 	bl	800cbde <RegionGetPhyParam>

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800ad9a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad9c:	2000      	movs	r0, #0
            break;
 800ad9e:	e08c      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ada0:	a901      	add	r1, sp, #4
 800ada2:	231a      	movs	r3, #26
 800ada4:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ada6:	4a47      	ldr	r2, [pc, #284]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ada8:	4b47      	ldr	r3, [pc, #284]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800adaa:	58d3      	ldr	r3, [r2, r3]
 800adac:	7818      	ldrb	r0, [r3, #0]
 800adae:	f001 ff16 	bl	800cbde <RegionGetPhyParam>

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800adb2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adb4:	2000      	movs	r0, #0
            break;
 800adb6:	e080      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800adb8:	4a42      	ldr	r2, [pc, #264]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800adba:	4b43      	ldr	r3, [pc, #268]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800adbc:	58d2      	ldr	r2, [r2, r3]
 800adbe:	238c      	movs	r3, #140	; 0x8c
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	5cd3      	ldrb	r3, [r2, r3]
 800adc4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adc6:	2000      	movs	r0, #0
            break;
 800adc8:	e077      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800adca:	4a3e      	ldr	r2, [pc, #248]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800adcc:	4b3e      	ldr	r3, [pc, #248]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800adce:	58d2      	ldr	r2, [r2, r3]
 800add0:	2382      	movs	r3, #130	; 0x82
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	58d3      	ldr	r3, [r2, r3]
 800add6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800add8:	2000      	movs	r0, #0
            break;
 800adda:	e06e      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800addc:	4a39      	ldr	r2, [pc, #228]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800adde:	4b3a      	ldr	r3, [pc, #232]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ade0:	58d2      	ldr	r2, [r2, r3]
 800ade2:	2384      	movs	r3, #132	; 0x84
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	58d3      	ldr	r3, [r2, r3]
 800ade8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adea:	2000      	movs	r0, #0
            break;
 800adec:	e065      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800adee:	4a35      	ldr	r2, [pc, #212]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800adf0:	4b35      	ldr	r3, [pc, #212]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800adf2:	58d2      	ldr	r2, [r2, r3]
 800adf4:	2386      	movs	r3, #134	; 0x86
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	58d3      	ldr	r3, [r2, r3]
 800adfa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adfc:	2000      	movs	r0, #0
            break;
 800adfe:	e05c      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800ae00:	4a30      	ldr	r2, [pc, #192]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae02:	4b31      	ldr	r3, [pc, #196]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae04:	58d2      	ldr	r2, [r2, r3]
 800ae06:	2388      	movs	r3, #136	; 0x88
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	58d3      	ldr	r3, [r2, r3]
 800ae0c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae0e:	2000      	movs	r0, #0
            break;
 800ae10:	e053      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800ae12:	4a2c      	ldr	r2, [pc, #176]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae14:	4b2c      	ldr	r3, [pc, #176]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae16:	58d2      	ldr	r2, [r2, r3]
 800ae18:	238a      	movs	r3, #138	; 0x8a
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	58d3      	ldr	r3, [r2, r3]
 800ae1e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae20:	2000      	movs	r0, #0
            break;
 800ae22:	e04a      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ae24:	4a27      	ldr	r2, [pc, #156]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae26:	4b28      	ldr	r3, [pc, #160]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae28:	58d3      	ldr	r3, [r2, r3]
 800ae2a:	795b      	ldrb	r3, [r3, #5]
 800ae2c:	b25b      	sxtb	r3, r3
 800ae2e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae30:	2000      	movs	r0, #0
            break;
 800ae32:	e042      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ae34:	4a23      	ldr	r2, [pc, #140]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae36:	4b24      	ldr	r3, [pc, #144]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae38:	58d2      	ldr	r2, [r2, r3]
 800ae3a:	23f9      	movs	r3, #249	; 0xf9
 800ae3c:	56d3      	ldrsb	r3, [r2, r3]
 800ae3e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae40:	2000      	movs	r0, #0
            break;
 800ae42:	e03a      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ae44:	4a1f      	ldr	r2, [pc, #124]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae46:	4b20      	ldr	r3, [pc, #128]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae48:	58d3      	ldr	r3, [r2, r3]
 800ae4a:	791b      	ldrb	r3, [r3, #4]
 800ae4c:	b25b      	sxtb	r3, r3
 800ae4e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae50:	2000      	movs	r0, #0
            break;
 800ae52:	e032      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ae54:	4a1b      	ldr	r2, [pc, #108]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae56:	4b1c      	ldr	r3, [pc, #112]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae58:	58d2      	ldr	r2, [r2, r3]
 800ae5a:	23f8      	movs	r3, #248	; 0xf8
 800ae5c:	56d3      	ldrsb	r3, [r2, r3]
 800ae5e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae60:	2000      	movs	r0, #0
            break;
 800ae62:	e02a      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800ae64:	4a17      	ldr	r2, [pc, #92]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae66:	4b18      	ldr	r3, [pc, #96]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae68:	58d2      	ldr	r2, [r2, r3]
 800ae6a:	23fc      	movs	r3, #252	; 0xfc
 800ae6c:	58d3      	ldr	r3, [r2, r3]
 800ae6e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae70:	2000      	movs	r0, #0
            break;
 800ae72:	e022      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800ae74:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae76:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae78:	58d2      	ldr	r2, [r2, r3]
 800ae7a:	2380      	movs	r3, #128	; 0x80
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	5cd3      	ldrb	r3, [r2, r3]
 800ae80:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae82:	2000      	movs	r0, #0
            break;
 800ae84:	e019      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ae86:	4a0f      	ldr	r2, [pc, #60]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800ae88:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800ae8a:	58d2      	ldr	r2, [r2, r3]
 800ae8c:	239a      	movs	r3, #154	; 0x9a
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	58d3      	ldr	r3, [r2, r3]
 800ae92:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae94:	2000      	movs	r0, #0
            break;
 800ae96:	e010      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800ae98:	f7fe ffd2 	bl	8009e40 <GetCtxs>
 800ae9c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae9e:	2000      	movs	r0, #0
            break;
 800aea0:	e00b      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800aea2:	4a08      	ldr	r2, [pc, #32]	; (800aec4 <LoRaMacMibGetRequestConfirm+0x23c>)
 800aea4:	4b08      	ldr	r3, [pc, #32]	; (800aec8 <LoRaMacMibGetRequestConfirm+0x240>)
 800aea6:	58d3      	ldr	r3, [r2, r3]
 800aea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeaa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aeac:	2000      	movs	r0, #0
            break;
 800aeae:	e004      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800aeb0:	0020      	movs	r0, r4
 800aeb2:	f000 fdc8 	bl	800ba46 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800aeb6:	e000      	b.n	800aeba <LoRaMacMibGetRequestConfirm+0x232>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aeb8:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800aeba:	b002      	add	sp, #8
 800aebc:	bd10      	pop	{r4, pc}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	080110cc 	.word	0x080110cc
 800aec4:	200008bc 	.word	0x200008bc
 800aec8:	00000484 	.word	0x00000484

0800aecc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800aecc:	b530      	push	{r4, r5, lr}
 800aece:	b087      	sub	sp, #28
 800aed0:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800aed2:	d100      	bne.n	800aed6 <LoRaMacMibSetRequestConfirm+0xa>
 800aed4:	e356      	b.n	800b584 <LoRaMacMibSetRequestConfirm+0x6b8>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800aed6:	4ab2      	ldr	r2, [pc, #712]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800aed8:	23d0      	movs	r3, #208	; 0xd0
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	58d3      	ldr	r3, [r2, r3]
 800aede:	079b      	lsls	r3, r3, #30
 800aee0:	d500      	bpl.n	800aee4 <LoRaMacMibSetRequestConfirm+0x18>
 800aee2:	e351      	b.n	800b588 <LoRaMacMibSetRequestConfirm+0x6bc>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800aee4:	7805      	ldrb	r5, [r0, #0]
 800aee6:	2d35      	cmp	r5, #53	; 0x35
 800aee8:	d900      	bls.n	800aeec <LoRaMacMibSetRequestConfirm+0x20>
 800aeea:	e2f8      	b.n	800b4de <LoRaMacMibSetRequestConfirm+0x612>
 800aeec:	00ab      	lsls	r3, r5, #2
 800aeee:	4aad      	ldr	r2, [pc, #692]	; (800b1a4 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800aef0:	58d3      	ldr	r3, [r2, r3]
 800aef2:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800aef4:	7900      	ldrb	r0, [r0, #4]
 800aef6:	f7fe f9df 	bl	80092b8 <SwitchClass>
 800aefa:	0005      	movs	r5, r0
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    EventRegionNvmCtxChanged( );
 800aefc:	f7fd f9d7 	bl	80082ae <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800af00:	f7fd f9d0 	bl	80082a4 <EventMacNvmCtxChanged>
    return status;
}
 800af04:	0028      	movs	r0, r5
 800af06:	b007      	add	sp, #28
 800af08:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800af0a:	7903      	ldrb	r3, [r0, #4]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d100      	bne.n	800af12 <LoRaMacMibSetRequestConfirm+0x46>
 800af10:	e2ea      	b.n	800b4e8 <LoRaMacMibSetRequestConfirm+0x61c>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800af12:	49a3      	ldr	r1, [pc, #652]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800af14:	4aa4      	ldr	r2, [pc, #656]	; (800b1a8 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800af16:	5889      	ldr	r1, [r1, r2]
 800af18:	22ea      	movs	r2, #234	; 0xea
 800af1a:	0052      	lsls	r2, r2, #1
 800af1c:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af1e:	2500      	movs	r5, #0
 800af20:	e7ec      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800af22:	6840      	ldr	r0, [r0, #4]
 800af24:	f7fd f872 	bl	800800c <SecureElementSetDevEui>
 800af28:	1e05      	subs	r5, r0, #0
 800af2a:	d0e7      	beq.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800af2c:	2503      	movs	r5, #3
 800af2e:	e7e5      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800af30:	6840      	ldr	r0, [r0, #4]
 800af32:	f7fd f881 	bl	8008038 <SecureElementSetJoinEui>
 800af36:	2800      	cmp	r0, #0
 800af38:	d1e0      	bne.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af3a:	0005      	movs	r5, r0
 800af3c:	e7de      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800af3e:	4a98      	ldr	r2, [pc, #608]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800af40:	4b99      	ldr	r3, [pc, #612]	; (800b1a8 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800af42:	58d2      	ldr	r2, [r2, r3]
 800af44:	7901      	ldrb	r1, [r0, #4]
 800af46:	23f2      	movs	r3, #242	; 0xf2
 800af48:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af4a:	2500      	movs	r5, #0
            break;
 800af4c:	e7d6      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800af4e:	4a94      	ldr	r2, [pc, #592]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800af50:	4b95      	ldr	r3, [pc, #596]	; (800b1a8 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800af52:	58d3      	ldr	r3, [r2, r3]
 800af54:	6842      	ldr	r2, [r0, #4]
 800af56:	649a      	str	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af58:	2500      	movs	r5, #0
            break;
 800af5a:	e7cf      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800af5c:	4a90      	ldr	r2, [pc, #576]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800af5e:	4b92      	ldr	r3, [pc, #584]	; (800b1a8 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800af60:	58d3      	ldr	r3, [r2, r3]
 800af62:	6842      	ldr	r2, [r0, #4]
 800af64:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af66:	2500      	movs	r5, #0
            break;
 800af68:	e7c8      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( mibSet->Param.GenAppKey != NULL )
 800af6a:	6841      	ldr	r1, [r0, #4]
 800af6c:	2900      	cmp	r1, #0
 800af6e:	d100      	bne.n	800af72 <LoRaMacMibSetRequestConfirm+0xa6>
 800af70:	e2bc      	b.n	800b4ec <LoRaMacMibSetRequestConfirm+0x620>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 800af72:	2001      	movs	r0, #1
 800af74:	f001 fbe0 	bl	800c738 <LoRaMacCryptoSetKey>
 800af78:	1e05      	subs	r5, r0, #0
 800af7a:	d0bf      	beq.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af7c:	2511      	movs	r5, #17
 800af7e:	e7c1      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.AppKey != NULL )
 800af80:	6841      	ldr	r1, [r0, #4]
 800af82:	2900      	cmp	r1, #0
 800af84:	d100      	bne.n	800af88 <LoRaMacMibSetRequestConfirm+0xbc>
 800af86:	e2b3      	b.n	800b4f0 <LoRaMacMibSetRequestConfirm+0x624>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800af88:	2000      	movs	r0, #0
 800af8a:	f001 fbd5 	bl	800c738 <LoRaMacCryptoSetKey>
 800af8e:	1e05      	subs	r5, r0, #0
 800af90:	d0b4      	beq.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800af92:	2511      	movs	r5, #17
 800af94:	e7b6      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.NwkKey != NULL )
 800af96:	6841      	ldr	r1, [r0, #4]
 800af98:	2900      	cmp	r1, #0
 800af9a:	d100      	bne.n	800af9e <LoRaMacMibSetRequestConfirm+0xd2>
 800af9c:	e2aa      	b.n	800b4f4 <LoRaMacMibSetRequestConfirm+0x628>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800af9e:	2002      	movs	r0, #2
 800afa0:	f001 fbca 	bl	800c738 <LoRaMacCryptoSetKey>
 800afa4:	1e05      	subs	r5, r0, #0
 800afa6:	d0a9      	beq.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afa8:	2511      	movs	r5, #17
 800afaa:	e7ab      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.JSIntKey != NULL )
 800afac:	6841      	ldr	r1, [r0, #4]
 800afae:	2900      	cmp	r1, #0
 800afb0:	d100      	bne.n	800afb4 <LoRaMacMibSetRequestConfirm+0xe8>
 800afb2:	e2a1      	b.n	800b4f8 <LoRaMacMibSetRequestConfirm+0x62c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800afb4:	2003      	movs	r0, #3
 800afb6:	f001 fbbf 	bl	800c738 <LoRaMacCryptoSetKey>
 800afba:	1e05      	subs	r5, r0, #0
 800afbc:	d09e      	beq.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afbe:	2511      	movs	r5, #17
 800afc0:	e7a0      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.JSEncKey != NULL )
 800afc2:	6841      	ldr	r1, [r0, #4]
 800afc4:	2900      	cmp	r1, #0
 800afc6:	d100      	bne.n	800afca <LoRaMacMibSetRequestConfirm+0xfe>
 800afc8:	e298      	b.n	800b4fc <LoRaMacMibSetRequestConfirm+0x630>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800afca:	2004      	movs	r0, #4
 800afcc:	f001 fbb4 	bl	800c738 <LoRaMacCryptoSetKey>
 800afd0:	1e05      	subs	r5, r0, #0
 800afd2:	d100      	bne.n	800afd6 <LoRaMacMibSetRequestConfirm+0x10a>
 800afd4:	e792      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afd6:	2511      	movs	r5, #17
 800afd8:	e794      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.FNwkSIntKey != NULL )
 800afda:	6841      	ldr	r1, [r0, #4]
 800afdc:	2900      	cmp	r1, #0
 800afde:	d100      	bne.n	800afe2 <LoRaMacMibSetRequestConfirm+0x116>
 800afe0:	e28e      	b.n	800b500 <LoRaMacMibSetRequestConfirm+0x634>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800afe2:	2005      	movs	r0, #5
 800afe4:	f001 fba8 	bl	800c738 <LoRaMacCryptoSetKey>
 800afe8:	1e05      	subs	r5, r0, #0
 800afea:	d100      	bne.n	800afee <LoRaMacMibSetRequestConfirm+0x122>
 800afec:	e786      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afee:	2511      	movs	r5, #17
 800aff0:	e788      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.SNwkSIntKey != NULL )
 800aff2:	6841      	ldr	r1, [r0, #4]
 800aff4:	2900      	cmp	r1, #0
 800aff6:	d100      	bne.n	800affa <LoRaMacMibSetRequestConfirm+0x12e>
 800aff8:	e284      	b.n	800b504 <LoRaMacMibSetRequestConfirm+0x638>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800affa:	2006      	movs	r0, #6
 800affc:	f001 fb9c 	bl	800c738 <LoRaMacCryptoSetKey>
 800b000:	1e05      	subs	r5, r0, #0
 800b002:	d100      	bne.n	800b006 <LoRaMacMibSetRequestConfirm+0x13a>
 800b004:	e77a      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b006:	2511      	movs	r5, #17
 800b008:	e77c      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.NwkSEncKey != NULL )
 800b00a:	6841      	ldr	r1, [r0, #4]
 800b00c:	2900      	cmp	r1, #0
 800b00e:	d100      	bne.n	800b012 <LoRaMacMibSetRequestConfirm+0x146>
 800b010:	e27a      	b.n	800b508 <LoRaMacMibSetRequestConfirm+0x63c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800b012:	2007      	movs	r0, #7
 800b014:	f001 fb90 	bl	800c738 <LoRaMacCryptoSetKey>
 800b018:	1e05      	subs	r5, r0, #0
 800b01a:	d100      	bne.n	800b01e <LoRaMacMibSetRequestConfirm+0x152>
 800b01c:	e76e      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b01e:	2511      	movs	r5, #17
 800b020:	e770      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.AppSKey != NULL )
 800b022:	6841      	ldr	r1, [r0, #4]
 800b024:	2900      	cmp	r1, #0
 800b026:	d100      	bne.n	800b02a <LoRaMacMibSetRequestConfirm+0x15e>
 800b028:	e270      	b.n	800b50c <LoRaMacMibSetRequestConfirm+0x640>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b02a:	2008      	movs	r0, #8
 800b02c:	f001 fb84 	bl	800c738 <LoRaMacCryptoSetKey>
 800b030:	1e05      	subs	r5, r0, #0
 800b032:	d100      	bne.n	800b036 <LoRaMacMibSetRequestConfirm+0x16a>
 800b034:	e762      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b036:	2511      	movs	r5, #17
 800b038:	e764      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McKEKey != NULL )
 800b03a:	6841      	ldr	r1, [r0, #4]
 800b03c:	2900      	cmp	r1, #0
 800b03e:	d100      	bne.n	800b042 <LoRaMacMibSetRequestConfirm+0x176>
 800b040:	e266      	b.n	800b510 <LoRaMacMibSetRequestConfirm+0x644>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b042:	207f      	movs	r0, #127	; 0x7f
 800b044:	f001 fb78 	bl	800c738 <LoRaMacCryptoSetKey>
 800b048:	1e05      	subs	r5, r0, #0
 800b04a:	d100      	bne.n	800b04e <LoRaMacMibSetRequestConfirm+0x182>
 800b04c:	e756      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b04e:	2511      	movs	r5, #17
 800b050:	e758      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McKey0 != NULL )
 800b052:	6841      	ldr	r1, [r0, #4]
 800b054:	2900      	cmp	r1, #0
 800b056:	d100      	bne.n	800b05a <LoRaMacMibSetRequestConfirm+0x18e>
 800b058:	e25c      	b.n	800b514 <LoRaMacMibSetRequestConfirm+0x648>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b05a:	2080      	movs	r0, #128	; 0x80
 800b05c:	f001 fb6c 	bl	800c738 <LoRaMacCryptoSetKey>
 800b060:	2800      	cmp	r0, #0
 800b062:	d000      	beq.n	800b066 <LoRaMacMibSetRequestConfirm+0x19a>
 800b064:	e74e      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b066:	0005      	movs	r5, r0
 800b068:	e748      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b06a:	6841      	ldr	r1, [r0, #4]
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d100      	bne.n	800b072 <LoRaMacMibSetRequestConfirm+0x1a6>
 800b070:	e252      	b.n	800b518 <LoRaMacMibSetRequestConfirm+0x64c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b072:	2081      	movs	r0, #129	; 0x81
 800b074:	f001 fb60 	bl	800c738 <LoRaMacCryptoSetKey>
 800b078:	1e05      	subs	r5, r0, #0
 800b07a:	d100      	bne.n	800b07e <LoRaMacMibSetRequestConfirm+0x1b2>
 800b07c:	e73e      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b07e:	2511      	movs	r5, #17
 800b080:	e740      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b082:	6841      	ldr	r1, [r0, #4]
 800b084:	2900      	cmp	r1, #0
 800b086:	d100      	bne.n	800b08a <LoRaMacMibSetRequestConfirm+0x1be>
 800b088:	e248      	b.n	800b51c <LoRaMacMibSetRequestConfirm+0x650>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b08a:	2082      	movs	r0, #130	; 0x82
 800b08c:	f001 fb54 	bl	800c738 <LoRaMacCryptoSetKey>
 800b090:	1e05      	subs	r5, r0, #0
 800b092:	d100      	bne.n	800b096 <LoRaMacMibSetRequestConfirm+0x1ca>
 800b094:	e732      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b096:	2511      	movs	r5, #17
 800b098:	e734      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McKey1 != NULL )
 800b09a:	6841      	ldr	r1, [r0, #4]
 800b09c:	2900      	cmp	r1, #0
 800b09e:	d100      	bne.n	800b0a2 <LoRaMacMibSetRequestConfirm+0x1d6>
 800b0a0:	e246      	b.n	800b530 <LoRaMacMibSetRequestConfirm+0x664>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800b0a2:	2083      	movs	r0, #131	; 0x83
 800b0a4:	f001 fb48 	bl	800c738 <LoRaMacCryptoSetKey>
 800b0a8:	1e05      	subs	r5, r0, #0
 800b0aa:	d100      	bne.n	800b0ae <LoRaMacMibSetRequestConfirm+0x1e2>
 800b0ac:	e726      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b0ae:	2511      	movs	r5, #17
 800b0b0:	e728      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McAppSKey1 != NULL )
 800b0b2:	6841      	ldr	r1, [r0, #4]
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	d100      	bne.n	800b0ba <LoRaMacMibSetRequestConfirm+0x1ee>
 800b0b8:	e23c      	b.n	800b534 <LoRaMacMibSetRequestConfirm+0x668>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800b0ba:	2084      	movs	r0, #132	; 0x84
 800b0bc:	f001 fb3c 	bl	800c738 <LoRaMacCryptoSetKey>
 800b0c0:	1e05      	subs	r5, r0, #0
 800b0c2:	d100      	bne.n	800b0c6 <LoRaMacMibSetRequestConfirm+0x1fa>
 800b0c4:	e71a      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b0c6:	2511      	movs	r5, #17
 800b0c8:	e71c      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McNwkSKey1 != NULL )
 800b0ca:	6841      	ldr	r1, [r0, #4]
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	d100      	bne.n	800b0d2 <LoRaMacMibSetRequestConfirm+0x206>
 800b0d0:	e232      	b.n	800b538 <LoRaMacMibSetRequestConfirm+0x66c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800b0d2:	2085      	movs	r0, #133	; 0x85
 800b0d4:	f001 fb30 	bl	800c738 <LoRaMacCryptoSetKey>
 800b0d8:	1e05      	subs	r5, r0, #0
 800b0da:	d100      	bne.n	800b0de <LoRaMacMibSetRequestConfirm+0x212>
 800b0dc:	e70e      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b0de:	2511      	movs	r5, #17
 800b0e0:	e710      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McKey2 != NULL )
 800b0e2:	6841      	ldr	r1, [r0, #4]
 800b0e4:	2900      	cmp	r1, #0
 800b0e6:	d100      	bne.n	800b0ea <LoRaMacMibSetRequestConfirm+0x21e>
 800b0e8:	e228      	b.n	800b53c <LoRaMacMibSetRequestConfirm+0x670>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800b0ea:	2086      	movs	r0, #134	; 0x86
 800b0ec:	f001 fb24 	bl	800c738 <LoRaMacCryptoSetKey>
 800b0f0:	1e05      	subs	r5, r0, #0
 800b0f2:	d100      	bne.n	800b0f6 <LoRaMacMibSetRequestConfirm+0x22a>
 800b0f4:	e702      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b0f6:	2511      	movs	r5, #17
 800b0f8:	e704      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McAppSKey2 != NULL )
 800b0fa:	6841      	ldr	r1, [r0, #4]
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d100      	bne.n	800b102 <LoRaMacMibSetRequestConfirm+0x236>
 800b100:	e21e      	b.n	800b540 <LoRaMacMibSetRequestConfirm+0x674>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800b102:	2087      	movs	r0, #135	; 0x87
 800b104:	f001 fb18 	bl	800c738 <LoRaMacCryptoSetKey>
 800b108:	1e05      	subs	r5, r0, #0
 800b10a:	d100      	bne.n	800b10e <LoRaMacMibSetRequestConfirm+0x242>
 800b10c:	e6f6      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b10e:	2511      	movs	r5, #17
 800b110:	e6f8      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McNwkSKey2 != NULL )
 800b112:	6841      	ldr	r1, [r0, #4]
 800b114:	2900      	cmp	r1, #0
 800b116:	d100      	bne.n	800b11a <LoRaMacMibSetRequestConfirm+0x24e>
 800b118:	e214      	b.n	800b544 <LoRaMacMibSetRequestConfirm+0x678>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800b11a:	2088      	movs	r0, #136	; 0x88
 800b11c:	f001 fb0c 	bl	800c738 <LoRaMacCryptoSetKey>
 800b120:	1e05      	subs	r5, r0, #0
 800b122:	d100      	bne.n	800b126 <LoRaMacMibSetRequestConfirm+0x25a>
 800b124:	e6ea      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b126:	2511      	movs	r5, #17
 800b128:	e6ec      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McKey3 != NULL )
 800b12a:	6841      	ldr	r1, [r0, #4]
 800b12c:	2900      	cmp	r1, #0
 800b12e:	d100      	bne.n	800b132 <LoRaMacMibSetRequestConfirm+0x266>
 800b130:	e20a      	b.n	800b548 <LoRaMacMibSetRequestConfirm+0x67c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800b132:	2089      	movs	r0, #137	; 0x89
 800b134:	f001 fb00 	bl	800c738 <LoRaMacCryptoSetKey>
 800b138:	1e05      	subs	r5, r0, #0
 800b13a:	d100      	bne.n	800b13e <LoRaMacMibSetRequestConfirm+0x272>
 800b13c:	e6de      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b13e:	2511      	movs	r5, #17
 800b140:	e6e0      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McAppSKey3 != NULL )
 800b142:	6841      	ldr	r1, [r0, #4]
 800b144:	2900      	cmp	r1, #0
 800b146:	d100      	bne.n	800b14a <LoRaMacMibSetRequestConfirm+0x27e>
 800b148:	e200      	b.n	800b54c <LoRaMacMibSetRequestConfirm+0x680>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800b14a:	208a      	movs	r0, #138	; 0x8a
 800b14c:	f001 faf4 	bl	800c738 <LoRaMacCryptoSetKey>
 800b150:	1e05      	subs	r5, r0, #0
 800b152:	d100      	bne.n	800b156 <LoRaMacMibSetRequestConfirm+0x28a>
 800b154:	e6d2      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b156:	2511      	movs	r5, #17
 800b158:	e6d4      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            if( mibSet->Param.McNwkSKey3 != NULL )
 800b15a:	6841      	ldr	r1, [r0, #4]
 800b15c:	2900      	cmp	r1, #0
 800b15e:	d100      	bne.n	800b162 <LoRaMacMibSetRequestConfirm+0x296>
 800b160:	e1f6      	b.n	800b550 <LoRaMacMibSetRequestConfirm+0x684>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800b162:	208b      	movs	r0, #139	; 0x8b
 800b164:	f001 fae8 	bl	800c738 <LoRaMacCryptoSetKey>
 800b168:	1e05      	subs	r5, r0, #0
 800b16a:	d100      	bne.n	800b16e <LoRaMacMibSetRequestConfirm+0x2a2>
 800b16c:	e6c6      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b16e:	2511      	movs	r5, #17
 800b170:	e6c8      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b172:	490b      	ldr	r1, [pc, #44]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800b174:	4a0c      	ldr	r2, [pc, #48]	; (800b1a8 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800b176:	7900      	ldrb	r0, [r0, #4]
 800b178:	23f1      	movs	r3, #241	; 0xf1
 800b17a:	588c      	ldr	r4, [r1, r2]
 800b17c:	54e0      	strb	r0, [r4, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800b17e:	480b      	ldr	r0, [pc, #44]	; (800b1ac <LoRaMacMibSetRequestConfirm+0x2e0>)
 800b180:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800b182:	588a      	ldr	r2, [r1, r2]
 800b184:	5cd0      	ldrb	r0, [r2, r3]
 800b186:	47a0      	blx	r4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b188:	2500      	movs	r5, #0
            break;
 800b18a:	e6b7      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b18c:	4a04      	ldr	r2, [pc, #16]	; (800b1a0 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800b18e:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800b190:	58d2      	ldr	r2, [r2, r3]
 800b192:	7901      	ldrb	r1, [r0, #4]
 800b194:	2340      	movs	r3, #64	; 0x40
 800b196:	33ff      	adds	r3, #255	; 0xff
 800b198:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b19a:	2500      	movs	r5, #0
            break;
 800b19c:	e6ae      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	200008bc 	.word	0x200008bc
 800b1a4:	080111a0 	.word	0x080111a0
 800b1a8:	00000484 	.word	0x00000484
 800b1ac:	08010b84 	.word	0x08010b84
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b1b0:	2308      	movs	r3, #8
 800b1b2:	56c3      	ldrsb	r3, [r0, r3]
 800b1b4:	466a      	mov	r2, sp
 800b1b6:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b1b8:	4ad9      	ldr	r2, [pc, #868]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b1ba:	4bda      	ldr	r3, [pc, #872]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b1bc:	58d3      	ldr	r3, [r2, r3]
 800b1be:	222e      	movs	r2, #46	; 0x2e
 800b1c0:	32ff      	adds	r2, #255	; 0xff
 800b1c2:	5c9a      	ldrb	r2, [r3, r2]
 800b1c4:	4669      	mov	r1, sp
 800b1c6:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b1c8:	7818      	ldrb	r0, [r3, #0]
 800b1ca:	2207      	movs	r2, #7
 800b1cc:	a903      	add	r1, sp, #12
 800b1ce:	f001 fd2f 	bl	800cc30 <RegionVerify>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d100      	bne.n	800b1d8 <LoRaMacMibSetRequestConfirm+0x30c>
 800b1d6:	e1bd      	b.n	800b554 <LoRaMacMibSetRequestConfirm+0x688>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b1d8:	4ad1      	ldr	r2, [pc, #836]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b1da:	4bd2      	ldr	r3, [pc, #840]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b1dc:	58d3      	ldr	r3, [r2, r3]
 800b1de:	331d      	adds	r3, #29
 800b1e0:	33ff      	adds	r3, #255	; 0xff
 800b1e2:	3404      	adds	r4, #4
 800b1e4:	cc06      	ldmia	r4!, {r1, r2}
 800b1e6:	c306      	stmia	r3!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1e8:	2500      	movs	r5, #0
 800b1ea:	e687      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b1ec:	2308      	movs	r3, #8
 800b1ee:	56c3      	ldrsb	r3, [r0, r3]
 800b1f0:	466a      	mov	r2, sp
 800b1f2:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b1f4:	4aca      	ldr	r2, [pc, #808]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b1f6:	4bcb      	ldr	r3, [pc, #812]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b1f8:	58d3      	ldr	r3, [r2, r3]
 800b1fa:	222e      	movs	r2, #46	; 0x2e
 800b1fc:	32ff      	adds	r2, #255	; 0xff
 800b1fe:	5c9a      	ldrb	r2, [r3, r2]
 800b200:	4669      	mov	r1, sp
 800b202:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b204:	7818      	ldrb	r0, [r3, #0]
 800b206:	2207      	movs	r2, #7
 800b208:	a903      	add	r1, sp, #12
 800b20a:	f001 fd11 	bl	800cc30 <RegionVerify>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d100      	bne.n	800b214 <LoRaMacMibSetRequestConfirm+0x348>
 800b212:	e1a1      	b.n	800b558 <LoRaMacMibSetRequestConfirm+0x68c>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b214:	4ac2      	ldr	r2, [pc, #776]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b216:	4bc3      	ldr	r3, [pc, #780]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b218:	58d3      	ldr	r3, [r2, r3]
 800b21a:	3328      	adds	r3, #40	; 0x28
 800b21c:	3404      	adds	r4, #4
 800b21e:	cc06      	ldmia	r4!, {r1, r2}
 800b220:	c306      	stmia	r3!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b222:	2500      	movs	r5, #0
 800b224:	e66a      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b226:	2308      	movs	r3, #8
 800b228:	56c3      	ldrsb	r3, [r0, r3]
 800b22a:	466a      	mov	r2, sp
 800b22c:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b22e:	4abc      	ldr	r2, [pc, #752]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b230:	4bbc      	ldr	r3, [pc, #752]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b232:	58d3      	ldr	r3, [r2, r3]
 800b234:	222e      	movs	r2, #46	; 0x2e
 800b236:	32ff      	adds	r2, #255	; 0xff
 800b238:	5c9a      	ldrb	r2, [r3, r2]
 800b23a:	4669      	mov	r1, sp
 800b23c:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b23e:	7818      	ldrb	r0, [r3, #0]
 800b240:	2207      	movs	r2, #7
 800b242:	a903      	add	r1, sp, #12
 800b244:	f001 fcf4 	bl	800cc30 <RegionVerify>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d100      	bne.n	800b24e <LoRaMacMibSetRequestConfirm+0x382>
 800b24c:	e186      	b.n	800b55c <LoRaMacMibSetRequestConfirm+0x690>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b24e:	49b4      	ldr	r1, [pc, #720]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b250:	4ab4      	ldr	r2, [pc, #720]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b252:	588b      	ldr	r3, [r1, r2]
 800b254:	3325      	adds	r3, #37	; 0x25
 800b256:	33ff      	adds	r3, #255	; 0xff
 800b258:	3404      	adds	r4, #4
 800b25a:	cc21      	ldmia	r4!, {r0, r5}
 800b25c:	c321      	stmia	r3!, {r0, r5}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b25e:	588b      	ldr	r3, [r1, r2]
 800b260:	22f0      	movs	r2, #240	; 0xf0
 800b262:	5c9a      	ldrb	r2, [r3, r2]
 800b264:	2a02      	cmp	r2, #2
 800b266:	d001      	beq.n	800b26c <LoRaMacMibSetRequestConfirm+0x3a0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b268:	2500      	movs	r5, #0
 800b26a:	e647      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b26c:	32d3      	adds	r2, #211	; 0xd3
 800b26e:	32ff      	adds	r2, #255	; 0xff
 800b270:	5c9d      	ldrb	r5, [r3, r2]
 800b272:	2d00      	cmp	r5, #0
 800b274:	d100      	bne.n	800b278 <LoRaMacMibSetRequestConfirm+0x3ac>
 800b276:	e641      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    Radio.Sleep( );
 800b278:	4bab      	ldr	r3, [pc, #684]	; (800b528 <LoRaMacMibSetRequestConfirm+0x65c>)
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b27e:	4aa8      	ldr	r2, [pc, #672]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b280:	4ba8      	ldr	r3, [pc, #672]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b282:	58d3      	ldr	r3, [r2, r3]
 800b284:	2280      	movs	r2, #128	; 0x80
 800b286:	0052      	lsls	r2, r2, #1
 800b288:	5c9a      	ldrb	r2, [r3, r2]
 800b28a:	2194      	movs	r1, #148	; 0x94
 800b28c:	0049      	lsls	r1, r1, #1
 800b28e:	5659      	ldrsb	r1, [r3, r1]
 800b290:	7818      	ldrb	r0, [r3, #0]
 800b292:	4ca6      	ldr	r4, [pc, #664]	; (800b52c <LoRaMacMibSetRequestConfirm+0x660>)
 800b294:	9400      	str	r4, [sp, #0]
 800b296:	24fc      	movs	r4, #252	; 0xfc
 800b298:	591b      	ldr	r3, [r3, r4]
 800b29a:	f001 fce5 	bl	800cc68 <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 800b29e:	f7fd ff4b 	bl	8009138 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2a2:	2500      	movs	r5, #0
 800b2a4:	e62a      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b2a6:	2308      	movs	r3, #8
 800b2a8:	56c3      	ldrsb	r3, [r0, r3]
 800b2aa:	466a      	mov	r2, sp
 800b2ac:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b2ae:	4a9c      	ldr	r2, [pc, #624]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b2b0:	4b9c      	ldr	r3, [pc, #624]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b2b2:	58d3      	ldr	r3, [r2, r3]
 800b2b4:	222e      	movs	r2, #46	; 0x2e
 800b2b6:	32ff      	adds	r2, #255	; 0xff
 800b2b8:	5c9a      	ldrb	r2, [r3, r2]
 800b2ba:	4669      	mov	r1, sp
 800b2bc:	734a      	strb	r2, [r1, #13]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b2be:	7818      	ldrb	r0, [r3, #0]
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	a903      	add	r1, sp, #12
 800b2c4:	f001 fcb4 	bl	800cc30 <RegionVerify>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d100      	bne.n	800b2ce <LoRaMacMibSetRequestConfirm+0x402>
 800b2cc:	e148      	b.n	800b560 <LoRaMacMibSetRequestConfirm+0x694>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b2ce:	4a94      	ldr	r2, [pc, #592]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b2d0:	4b94      	ldr	r3, [pc, #592]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b2d2:	58d3      	ldr	r3, [r2, r3]
 800b2d4:	3330      	adds	r3, #48	; 0x30
 800b2d6:	3404      	adds	r4, #4
 800b2d8:	cc06      	ldmia	r4!, {r1, r2}
 800b2da:	c306      	stmia	r3!, {r1, r2}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2dc:	2500      	movs	r5, #0
 800b2de:	e60d      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b2e0:	6843      	ldr	r3, [r0, #4]
 800b2e2:	9304      	str	r3, [sp, #16]
 800b2e4:	a904      	add	r1, sp, #16
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800b2ea:	4a8d      	ldr	r2, [pc, #564]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b2ec:	4b8d      	ldr	r3, [pc, #564]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b2ee:	58d3      	ldr	r3, [r2, r3]
 800b2f0:	7818      	ldrb	r0, [r3, #0]
 800b2f2:	f001 fcb0 	bl	800cc56 <RegionChanMaskSet>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d100      	bne.n	800b2fc <LoRaMacMibSetRequestConfirm+0x430>
 800b2fa:	e133      	b.n	800b564 <LoRaMacMibSetRequestConfirm+0x698>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2fc:	2500      	movs	r5, #0
 800b2fe:	e5fd      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b300:	6843      	ldr	r3, [r0, #4]
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	a904      	add	r1, sp, #16
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b306:	2300      	movs	r3, #0
 800b308:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800b30a:	4a85      	ldr	r2, [pc, #532]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b30c:	4b85      	ldr	r3, [pc, #532]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b30e:	58d3      	ldr	r3, [r2, r3]
 800b310:	7818      	ldrb	r0, [r3, #0]
 800b312:	f001 fca0 	bl	800cc56 <RegionChanMaskSet>
 800b316:	2800      	cmp	r0, #0
 800b318:	d100      	bne.n	800b31c <LoRaMacMibSetRequestConfirm+0x450>
 800b31a:	e125      	b.n	800b568 <LoRaMacMibSetRequestConfirm+0x69c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b31c:	2500      	movs	r5, #0
 800b31e:	e5ed      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b320:	7902      	ldrb	r2, [r0, #4]
 800b322:	1e53      	subs	r3, r2, #1
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b0e      	cmp	r3, #14
 800b328:	d900      	bls.n	800b32c <LoRaMacMibSetRequestConfirm+0x460>
 800b32a:	e11f      	b.n	800b56c <LoRaMacMibSetRequestConfirm+0x6a0>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b32c:	497c      	ldr	r1, [pc, #496]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b32e:	4b7d      	ldr	r3, [pc, #500]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b330:	58c9      	ldr	r1, [r1, r3]
 800b332:	238c      	movs	r3, #140	; 0x8c
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	54ca      	strb	r2, [r1, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b338:	2500      	movs	r5, #0
 800b33a:	e5df      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b33c:	4a78      	ldr	r2, [pc, #480]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b33e:	4b79      	ldr	r3, [pc, #484]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b340:	58d2      	ldr	r2, [r2, r3]
 800b342:	6841      	ldr	r1, [r0, #4]
 800b344:	2382      	movs	r3, #130	; 0x82
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b34a:	2500      	movs	r5, #0
            break;
 800b34c:	e5d6      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b34e:	4a74      	ldr	r2, [pc, #464]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b350:	4b74      	ldr	r3, [pc, #464]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b352:	58d2      	ldr	r2, [r2, r3]
 800b354:	6841      	ldr	r1, [r0, #4]
 800b356:	2384      	movs	r3, #132	; 0x84
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b35c:	2500      	movs	r5, #0
            break;
 800b35e:	e5cd      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b360:	4a6f      	ldr	r2, [pc, #444]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b362:	4b70      	ldr	r3, [pc, #448]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b364:	58d2      	ldr	r2, [r2, r3]
 800b366:	6841      	ldr	r1, [r0, #4]
 800b368:	2386      	movs	r3, #134	; 0x86
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b36e:	2500      	movs	r5, #0
            break;
 800b370:	e5c4      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b372:	4a6b      	ldr	r2, [pc, #428]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b374:	4b6b      	ldr	r3, [pc, #428]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b376:	58d2      	ldr	r2, [r2, r3]
 800b378:	6841      	ldr	r1, [r0, #4]
 800b37a:	2388      	movs	r3, #136	; 0x88
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b380:	2500      	movs	r5, #0
            break;
 800b382:	e5bb      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b384:	4a66      	ldr	r2, [pc, #408]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b386:	4b67      	ldr	r3, [pc, #412]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b388:	58d2      	ldr	r2, [r2, r3]
 800b38a:	6841      	ldr	r1, [r0, #4]
 800b38c:	238a      	movs	r3, #138	; 0x8a
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b392:	2500      	movs	r5, #0
            break;
 800b394:	e5b2      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b396:	2304      	movs	r3, #4
 800b398:	56c3      	ldrsb	r3, [r0, r3]
 800b39a:	a903      	add	r1, sp, #12
 800b39c:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b39e:	4a60      	ldr	r2, [pc, #384]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b3a0:	4b60      	ldr	r3, [pc, #384]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b3a2:	58d3      	ldr	r3, [r2, r3]
 800b3a4:	7818      	ldrb	r0, [r3, #0]
 800b3a6:	2206      	movs	r2, #6
 800b3a8:	f001 fc42 	bl	800cc30 <RegionVerify>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d100      	bne.n	800b3b2 <LoRaMacMibSetRequestConfirm+0x4e6>
 800b3b0:	e0de      	b.n	800b570 <LoRaMacMibSetRequestConfirm+0x6a4>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b3b2:	4a5b      	ldr	r2, [pc, #364]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b3b4:	4b5b      	ldr	r3, [pc, #364]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b3b6:	58d3      	ldr	r3, [r2, r3]
 800b3b8:	aa03      	add	r2, sp, #12
 800b3ba:	7812      	ldrb	r2, [r2, #0]
 800b3bc:	b252      	sxtb	r2, r2
 800b3be:	715a      	strb	r2, [r3, #5]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b3c0:	2500      	movs	r5, #0
 800b3c2:	e59b      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	56c3      	ldrsb	r3, [r0, r3]
 800b3c8:	466a      	mov	r2, sp
 800b3ca:	7313      	strb	r3, [r2, #12]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b3cc:	4a54      	ldr	r2, [pc, #336]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b3ce:	4b55      	ldr	r3, [pc, #340]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b3d0:	58d3      	ldr	r3, [r2, r3]
 800b3d2:	2296      	movs	r2, #150	; 0x96
 800b3d4:	0052      	lsls	r2, r2, #1
 800b3d6:	5c9a      	ldrb	r2, [r3, r2]
 800b3d8:	4669      	mov	r1, sp
 800b3da:	738a      	strb	r2, [r1, #14]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b3dc:	7818      	ldrb	r0, [r3, #0]
 800b3de:	2205      	movs	r2, #5
 800b3e0:	a903      	add	r1, sp, #12
 800b3e2:	f001 fc25 	bl	800cc30 <RegionVerify>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d100      	bne.n	800b3ec <LoRaMacMibSetRequestConfirm+0x520>
 800b3ea:	e0c3      	b.n	800b574 <LoRaMacMibSetRequestConfirm+0x6a8>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b3ec:	4a4c      	ldr	r2, [pc, #304]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b3ee:	4b4d      	ldr	r3, [pc, #308]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b3f0:	58d2      	ldr	r2, [r2, r3]
 800b3f2:	ab03      	add	r3, sp, #12
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	5659      	ldrsb	r1, [r3, r1]
 800b3f8:	23f9      	movs	r3, #249	; 0xf9
 800b3fa:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b3fc:	2500      	movs	r5, #0
 800b3fe:	e57d      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b400:	2304      	movs	r3, #4
 800b402:	56c3      	ldrsb	r3, [r0, r3]
 800b404:	a903      	add	r1, sp, #12
 800b406:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b408:	4a45      	ldr	r2, [pc, #276]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b40a:	4b46      	ldr	r3, [pc, #280]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b40c:	58d3      	ldr	r3, [r2, r3]
 800b40e:	7818      	ldrb	r0, [r3, #0]
 800b410:	220a      	movs	r2, #10
 800b412:	f001 fc0d 	bl	800cc30 <RegionVerify>
 800b416:	2800      	cmp	r0, #0
 800b418:	d100      	bne.n	800b41c <LoRaMacMibSetRequestConfirm+0x550>
 800b41a:	e0ad      	b.n	800b578 <LoRaMacMibSetRequestConfirm+0x6ac>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800b41c:	4a40      	ldr	r2, [pc, #256]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b41e:	4b41      	ldr	r3, [pc, #260]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b420:	58d3      	ldr	r3, [r2, r3]
 800b422:	aa03      	add	r2, sp, #12
 800b424:	7812      	ldrb	r2, [r2, #0]
 800b426:	b252      	sxtb	r2, r2
 800b428:	711a      	strb	r2, [r3, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b42a:	2500      	movs	r5, #0
 800b42c:	e566      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b42e:	2304      	movs	r3, #4
 800b430:	56c3      	ldrsb	r3, [r0, r3]
 800b432:	a903      	add	r1, sp, #12
 800b434:	700b      	strb	r3, [r1, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b436:	4a3a      	ldr	r2, [pc, #232]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b438:	4b3a      	ldr	r3, [pc, #232]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b43a:	58d3      	ldr	r3, [r2, r3]
 800b43c:	7818      	ldrb	r0, [r3, #0]
 800b43e:	2209      	movs	r2, #9
 800b440:	f001 fbf6 	bl	800cc30 <RegionVerify>
 800b444:	2800      	cmp	r0, #0
 800b446:	d100      	bne.n	800b44a <LoRaMacMibSetRequestConfirm+0x57e>
 800b448:	e098      	b.n	800b57c <LoRaMacMibSetRequestConfirm+0x6b0>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800b44a:	4a35      	ldr	r2, [pc, #212]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b44c:	4b35      	ldr	r3, [pc, #212]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b44e:	58d2      	ldr	r2, [r2, r3]
 800b450:	ab03      	add	r3, sp, #12
 800b452:	2100      	movs	r1, #0
 800b454:	5659      	ldrsb	r1, [r3, r1]
 800b456:	23f8      	movs	r3, #248	; 0xf8
 800b458:	54d1      	strb	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b45a:	2500      	movs	r5, #0
 800b45c:	e54e      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b45e:	4930      	ldr	r1, [pc, #192]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b460:	4a30      	ldr	r2, [pc, #192]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b462:	5888      	ldr	r0, [r1, r2]
 800b464:	6863      	ldr	r3, [r4, #4]
 800b466:	6083      	str	r3, [r0, #8]
 800b468:	5889      	ldr	r1, [r1, r2]
 800b46a:	22fc      	movs	r2, #252	; 0xfc
 800b46c:	508b      	str	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b46e:	2500      	movs	r5, #0
            break;
 800b470:	e544      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b472:	492b      	ldr	r1, [pc, #172]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b474:	4a2b      	ldr	r2, [pc, #172]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b476:	7903      	ldrb	r3, [r0, #4]
 800b478:	5888      	ldr	r0, [r1, r2]
 800b47a:	7303      	strb	r3, [r0, #12]
 800b47c:	5889      	ldr	r1, [r1, r2]
 800b47e:	2280      	movs	r2, #128	; 0x80
 800b480:	0052      	lsls	r2, r2, #1
 800b482:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b484:	2500      	movs	r5, #0
            break;
 800b486:	e539      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b488:	4a25      	ldr	r2, [pc, #148]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b48a:	4b26      	ldr	r3, [pc, #152]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b48c:	58d2      	ldr	r2, [r2, r3]
 800b48e:	6841      	ldr	r1, [r0, #4]
 800b490:	239a      	movs	r3, #154	; 0x9a
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	50d1      	str	r1, [r2, r3]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b496:	2500      	movs	r5, #0
            break;
 800b498:	e530      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b49a:	4a21      	ldr	r2, [pc, #132]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b49c:	4b21      	ldr	r3, [pc, #132]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b49e:	58d3      	ldr	r3, [r2, r3]
 800b4a0:	6842      	ldr	r2, [r0, #4]
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4a4:	2500      	movs	r5, #0
            break;
 800b4a6:	e529      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( mibSet->Param.Contexts != 0 )
 800b4a8:	6840      	ldr	r0, [r0, #4]
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d068      	beq.n	800b580 <LoRaMacMibSetRequestConfirm+0x6b4>
                status = RestoreCtxs( mibSet->Param.Contexts );
 800b4ae:	f7fe fcff 	bl	8009eb0 <RestoreCtxs>
 800b4b2:	0005      	movs	r5, r0
 800b4b4:	e522      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b4b6:	7983      	ldrb	r3, [r0, #6]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d901      	bls.n	800b4c0 <LoRaMacMibSetRequestConfirm+0x5f4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4bc:	2503      	movs	r5, #3
 800b4be:	e51d      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b4c0:	4a17      	ldr	r2, [pc, #92]	; (800b520 <LoRaMacMibSetRequestConfirm+0x654>)
 800b4c2:	4b18      	ldr	r3, [pc, #96]	; (800b524 <LoRaMacMibSetRequestConfirm+0x658>)
 800b4c4:	58d2      	ldr	r2, [r2, r3]
 800b4c6:	23e8      	movs	r3, #232	; 0xe8
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	6841      	ldr	r1, [r0, #4]
 800b4cc:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b4ce:	6840      	ldr	r0, [r0, #4]
 800b4d0:	f000 ff82 	bl	800c3d8 <LoRaMacCryptoSetLrWanVersion>
 800b4d4:	1e05      	subs	r5, r0, #0
 800b4d6:	d100      	bne.n	800b4da <LoRaMacMibSetRequestConfirm+0x60e>
 800b4d8:	e510      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b4da:	2511      	movs	r5, #17
 800b4dc:	e512      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b4de:	0020      	movs	r0, r4
 800b4e0:	f000 fab3 	bl	800ba4a <LoRaMacMibClassBSetRequestConfirm>
 800b4e4:	0005      	movs	r5, r0
            break;
 800b4e6:	e509      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4e8:	2503      	movs	r5, #3
 800b4ea:	e507      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4ec:	2503      	movs	r5, #3
 800b4ee:	e505      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4f0:	2503      	movs	r5, #3
 800b4f2:	e503      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4f4:	2503      	movs	r5, #3
 800b4f6:	e501      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4f8:	2503      	movs	r5, #3
 800b4fa:	e4ff      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4fc:	2503      	movs	r5, #3
 800b4fe:	e4fd      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b500:	2503      	movs	r5, #3
 800b502:	e4fb      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b504:	2503      	movs	r5, #3
 800b506:	e4f9      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b508:	2503      	movs	r5, #3
 800b50a:	e4f7      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b50c:	2503      	movs	r5, #3
 800b50e:	e4f5      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b510:	2503      	movs	r5, #3
 800b512:	e4f3      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b514:	2503      	movs	r5, #3
 800b516:	e4f1      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b518:	2503      	movs	r5, #3
 800b51a:	e4ef      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b51c:	2503      	movs	r5, #3
 800b51e:	e4ed      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
 800b520:	200008bc 	.word	0x200008bc
 800b524:	00000484 	.word	0x00000484
 800b528:	08010b84 	.word	0x08010b84
 800b52c:	20000c9c 	.word	0x20000c9c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b530:	2503      	movs	r5, #3
 800b532:	e4e3      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b534:	2503      	movs	r5, #3
 800b536:	e4e1      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b538:	2503      	movs	r5, #3
 800b53a:	e4df      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b53c:	2503      	movs	r5, #3
 800b53e:	e4dd      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b540:	2503      	movs	r5, #3
 800b542:	e4db      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b544:	2503      	movs	r5, #3
 800b546:	e4d9      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b548:	2503      	movs	r5, #3
 800b54a:	e4d7      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b54c:	2503      	movs	r5, #3
 800b54e:	e4d5      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b550:	2503      	movs	r5, #3
 800b552:	e4d3      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b554:	2503      	movs	r5, #3
 800b556:	e4d1      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b558:	2503      	movs	r5, #3
 800b55a:	e4cf      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b55c:	2503      	movs	r5, #3
 800b55e:	e4cd      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b560:	2503      	movs	r5, #3
 800b562:	e4cb      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b564:	2503      	movs	r5, #3
 800b566:	e4c9      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b568:	2503      	movs	r5, #3
 800b56a:	e4c7      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b56c:	2503      	movs	r5, #3
 800b56e:	e4c5      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b570:	2503      	movs	r5, #3
 800b572:	e4c3      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b574:	2503      	movs	r5, #3
 800b576:	e4c1      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b578:	2503      	movs	r5, #3
 800b57a:	e4bf      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b57c:	2503      	movs	r5, #3
 800b57e:	e4bd      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b580:	2503      	movs	r5, #3
 800b582:	e4bb      	b.n	800aefc <LoRaMacMibSetRequestConfirm+0x30>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b584:	2503      	movs	r5, #3
 800b586:	e4bd      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>
        return LORAMAC_STATUS_BUSY;
 800b588:	2501      	movs	r5, #1
 800b58a:	e4bb      	b.n	800af04 <LoRaMacMibSetRequestConfirm+0x38>

0800b58c <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	0004      	movs	r4, r0
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b592:	2300      	movs	r3, #0
 800b594:	466a      	mov	r2, sp
 800b596:	8013      	strh	r3, [r2, #0]

    if( mlmeRequest == NULL )
 800b598:	2800      	cmp	r0, #0
 800b59a:	d100      	bne.n	800b59e <LoRaMacMlmeRequest+0x12>
 800b59c:	e0bd      	b.n	800b71a <LoRaMacMlmeRequest+0x18e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800b59e:	f7fe f80f 	bl	80095c0 <LoRaMacIsBusy>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d003      	beq.n	800b5ae <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b5a6:	2501      	movs	r5, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800b5a8:	0028      	movs	r0, r5
 800b5aa:	b002      	add	sp, #8
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b5ae:	f000 fce1 	bl	800bf74 <LoRaMacConfirmQueueIsFull>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d001      	beq.n	800b5ba <LoRaMacMlmeRequest+0x2e>
        return LORAMAC_STATUS_BUSY;
 800b5b6:	2501      	movs	r5, #1
 800b5b8:	e7f6      	b.n	800b5a8 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b5ba:	f000 fcd5 	bl	800bf68 <LoRaMacConfirmQueueGetCnt>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d015      	beq.n	800b5ee <LoRaMacMlmeRequest+0x62>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5c2:	4b57      	ldr	r3, [pc, #348]	; (800b720 <LoRaMacMlmeRequest+0x194>)
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	4a57      	ldr	r2, [pc, #348]	; (800b724 <LoRaMacMlmeRequest+0x198>)
 800b5c8:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b5ca:	4857      	ldr	r0, [pc, #348]	; (800b728 <LoRaMacMlmeRequest+0x19c>)
 800b5cc:	5c1a      	ldrb	r2, [r3, r0]
 800b5ce:	2504      	movs	r5, #4
 800b5d0:	432a      	orrs	r2, r5
 800b5d2:	541a      	strb	r2, [r3, r0]
    queueElement.Request = mlmeRequest->Type;
 800b5d4:	7823      	ldrb	r3, [r4, #0]
 800b5d6:	aa01      	add	r2, sp, #4
 800b5d8:	7013      	strb	r3, [r2, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5da:	7051      	strb	r1, [r2, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800b5dc:	2100      	movs	r1, #0
 800b5de:	70d1      	strb	r1, [r2, #3]
    switch( mlmeRequest->Type )
 800b5e0:	2b0d      	cmp	r3, #13
 800b5e2:	d900      	bls.n	800b5e6 <LoRaMacMlmeRequest+0x5a>
 800b5e4:	e089      	b.n	800b6fa <LoRaMacMlmeRequest+0x16e>
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4a50      	ldr	r2, [pc, #320]	; (800b72c <LoRaMacMlmeRequest+0x1a0>)
 800b5ea:	58d3      	ldr	r3, [r2, r3]
 800b5ec:	469f      	mov	pc, r3
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b5ee:	2214      	movs	r2, #20
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	484f      	ldr	r0, [pc, #316]	; (800b730 <LoRaMacMlmeRequest+0x1a4>)
 800b5f4:	f003 fbaf 	bl	800ed56 <memset1>
 800b5f8:	e7e3      	b.n	800b5c2 <LoRaMacMlmeRequest+0x36>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b5fa:	4a49      	ldr	r2, [pc, #292]	; (800b720 <LoRaMacMlmeRequest+0x194>)
 800b5fc:	23d0      	movs	r3, #208	; 0xd0
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	58d3      	ldr	r3, [r2, r3]
 800b602:	069b      	lsls	r3, r3, #26
 800b604:	d501      	bpl.n	800b60a <LoRaMacMlmeRequest+0x7e>
                return LORAMAC_STATUS_BUSY;
 800b606:	2501      	movs	r5, #1
 800b608:	e7ce      	b.n	800b5a8 <LoRaMacMlmeRequest+0x1c>
            ResetMacParameters( );
 800b60a:	f7fd fc09 	bl	8008e20 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b60e:	4a44      	ldr	r2, [pc, #272]	; (800b720 <LoRaMacMlmeRequest+0x194>)
 800b610:	4b48      	ldr	r3, [pc, #288]	; (800b734 <LoRaMacMlmeRequest+0x1a8>)
 800b612:	58d5      	ldr	r5, [r2, r3]
 800b614:	2104      	movs	r1, #4
 800b616:	5661      	ldrsb	r1, [r4, r1]
 800b618:	7828      	ldrb	r0, [r5, #0]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f001 fb7c 	bl	800cd18 <RegionAlternateDr>
 800b620:	23f9      	movs	r3, #249	; 0xf9
 800b622:	54e8      	strb	r0, [r5, r3]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b624:	ab01      	add	r3, sp, #4
 800b626:	2207      	movs	r2, #7
 800b628:	705a      	strb	r2, [r3, #1]
            status = SendReJoinReq( JOIN_REQ );
 800b62a:	20ff      	movs	r0, #255	; 0xff
 800b62c:	f7fe fb96 	bl	8009d5c <SendReJoinReq>
 800b630:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800b632:	d018      	beq.n	800b666 <LoRaMacMlmeRequest+0xda>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b634:	4a3a      	ldr	r2, [pc, #232]	; (800b720 <LoRaMacMlmeRequest+0x194>)
 800b636:	4b3f      	ldr	r3, [pc, #252]	; (800b734 <LoRaMacMlmeRequest+0x1a8>)
 800b638:	58d6      	ldr	r6, [r2, r3]
 800b63a:	2104      	movs	r1, #4
 800b63c:	5661      	ldrsb	r1, [r4, r1]
 800b63e:	7830      	ldrb	r0, [r6, #0]
 800b640:	2201      	movs	r2, #1
 800b642:	f001 fb69 	bl	800cd18 <RegionAlternateDr>
 800b646:	23f9      	movs	r3, #249	; 0xf9
 800b648:	54f0      	strb	r0, [r6, r3]
 800b64a:	e00c      	b.n	800b666 <LoRaMacMlmeRequest+0xda>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b64c:	2200      	movs	r2, #0
 800b64e:	4669      	mov	r1, sp
 800b650:	2002      	movs	r0, #2
 800b652:	f000 fac5 	bl	800bbe0 <LoRaMacCommandsAddCmd>
 800b656:	1e05      	subs	r5, r0, #0
 800b658:	d007      	beq.n	800b66a <LoRaMacMlmeRequest+0xde>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b65a:	2513      	movs	r5, #19
 800b65c:	e04e      	b.n	800b6fc <LoRaMacMlmeRequest+0x170>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b65e:	88a0      	ldrh	r0, [r4, #4]
 800b660:	f7fe fbac 	bl	8009dbc <SetTxContinuousWave>
 800b664:	0005      	movs	r5, r0
    if( status != LORAMAC_STATUS_OK )
 800b666:	2d00      	cmp	r5, #0
 800b668:	d148      	bne.n	800b6fc <LoRaMacMlmeRequest+0x170>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b66a:	a801      	add	r0, sp, #4
 800b66c:	f000 fbca 	bl	800be04 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800b670:	f7fc fe18 	bl	80082a4 <EventMacNvmCtxChanged>
 800b674:	e798      	b.n	800b5a8 <LoRaMacMlmeRequest+0x1c>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b676:	7b22      	ldrb	r2, [r4, #12]
 800b678:	68a1      	ldr	r1, [r4, #8]
 800b67a:	88a0      	ldrh	r0, [r4, #4]
 800b67c:	f7fe fbca 	bl	8009e14 <SetTxContinuousWave1>
 800b680:	0005      	movs	r5, r0
            break;
 800b682:	e7f0      	b.n	800b666 <LoRaMacMlmeRequest+0xda>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b684:	2200      	movs	r2, #0
 800b686:	4669      	mov	r1, sp
 800b688:	200d      	movs	r0, #13
 800b68a:	f000 faa9 	bl	800bbe0 <LoRaMacCommandsAddCmd>
 800b68e:	1e05      	subs	r5, r0, #0
 800b690:	d0eb      	beq.n	800b66a <LoRaMacMlmeRequest+0xde>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b692:	2513      	movs	r5, #19
 800b694:	e032      	b.n	800b6fc <LoRaMacMlmeRequest+0x170>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b696:	4a22      	ldr	r2, [pc, #136]	; (800b720 <LoRaMacMlmeRequest+0x194>)
 800b698:	4b26      	ldr	r3, [pc, #152]	; (800b734 <LoRaMacMlmeRequest+0x1a8>)
 800b69a:	58d2      	ldr	r2, [r2, r3]
 800b69c:	23f0      	movs	r3, #240	; 0xf0
 800b69e:	5cd3      	ldrb	r3, [r2, r3]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <LoRaMacMlmeRequest+0x11c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b6a4:	2502      	movs	r5, #2
 800b6a6:	e029      	b.n	800b6fc <LoRaMacMlmeRequest+0x170>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b6a8:	7924      	ldrb	r4, [r4, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b6aa:	0760      	lsls	r0, r4, #29
 800b6ac:	0f40      	lsrs	r0, r0, #29
 800b6ae:	f000 f9c5 	bl	800ba3c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b6b2:	466b      	mov	r3, sp
 800b6b4:	701c      	strb	r4, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	4669      	mov	r1, sp
 800b6ba:	2010      	movs	r0, #16
 800b6bc:	f000 fa90 	bl	800bbe0 <LoRaMacCommandsAddCmd>
 800b6c0:	1e05      	subs	r5, r0, #0
 800b6c2:	d0d2      	beq.n	800b66a <LoRaMacMlmeRequest+0xde>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b6c4:	2513      	movs	r5, #19
 800b6c6:	e019      	b.n	800b6fc <LoRaMacMlmeRequest+0x170>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4669      	mov	r1, sp
 800b6cc:	2012      	movs	r0, #18
 800b6ce:	f000 fa87 	bl	800bbe0 <LoRaMacCommandsAddCmd>
 800b6d2:	1e05      	subs	r5, r0, #0
 800b6d4:	d0c9      	beq.n	800b66a <LoRaMacMlmeRequest+0xde>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b6d6:	2513      	movs	r5, #19
 800b6d8:	e010      	b.n	800b6fc <LoRaMacMlmeRequest+0x170>
            queueElement.RestrictCommonReadyToHandle = true;
 800b6da:	ab01      	add	r3, sp, #4
 800b6dc:	2201      	movs	r2, #1
 800b6de:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b6e0:	f000 f99d 	bl	800ba1e <LoRaMacClassBIsAcquisitionInProgress>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d001      	beq.n	800b6ec <LoRaMacMlmeRequest+0x160>
                status = LORAMAC_STATUS_BUSY;
 800b6e8:	2501      	movs	r5, #1
 800b6ea:	e007      	b.n	800b6fc <LoRaMacMlmeRequest+0x170>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b6ec:	f000 f994 	bl	800ba18 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f000 f996 	bl	800ba22 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b6f6:	2500      	movs	r5, #0
 800b6f8:	e7b7      	b.n	800b66a <LoRaMacMlmeRequest+0xde>
    switch( mlmeRequest->Type )
 800b6fa:	2502      	movs	r5, #2
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b6fc:	f000 fc34 	bl	800bf68 <LoRaMacConfirmQueueGetCnt>
 800b700:	2800      	cmp	r0, #0
 800b702:	d000      	beq.n	800b706 <LoRaMacMlmeRequest+0x17a>
 800b704:	e750      	b.n	800b5a8 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b706:	4b06      	ldr	r3, [pc, #24]	; (800b720 <LoRaMacMlmeRequest+0x194>)
 800b708:	4a0b      	ldr	r2, [pc, #44]	; (800b738 <LoRaMacMlmeRequest+0x1ac>)
 800b70a:	2100      	movs	r1, #0
 800b70c:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b70e:	4906      	ldr	r1, [pc, #24]	; (800b728 <LoRaMacMlmeRequest+0x19c>)
 800b710:	5c5a      	ldrb	r2, [r3, r1]
 800b712:	3004      	adds	r0, #4
 800b714:	4382      	bics	r2, r0
 800b716:	545a      	strb	r2, [r3, r1]
 800b718:	e746      	b.n	800b5a8 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b71a:	2503      	movs	r5, #3
 800b71c:	e744      	b.n	800b5a8 <LoRaMacMlmeRequest+0x1c>
 800b71e:	46c0      	nop			; (mov r8, r8)
 800b720:	200008bc 	.word	0x200008bc
 800b724:	00000451 	.word	0x00000451
 800b728:	00000481 	.word	0x00000481
 800b72c:	08011278 	.word	0x08011278
 800b730:	20000d0c 	.word	0x20000d0c
 800b734:	00000484 	.word	0x00000484
 800b738:	00000414 	.word	0x00000414

0800b73c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800b73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73e:	46ce      	mov	lr, r9
 800b740:	4647      	mov	r7, r8
 800b742:	b580      	push	{r7, lr}
 800b744:	b085      	sub	sp, #20
 800b746:	0004      	movs	r4, r0
 800b748:	2600      	movs	r6, #0
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d100      	bne.n	800b750 <LoRaMacMcpsRequest+0x14>
 800b74e:	e0b2      	b.n	800b8b6 <LoRaMacMcpsRequest+0x17a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800b750:	f7fd ff36 	bl	80095c0 <LoRaMacIsBusy>
 800b754:	1e05      	subs	r5, r0, #0
 800b756:	d006      	beq.n	800b766 <LoRaMacMcpsRequest+0x2a>
    {
        return LORAMAC_STATUS_BUSY;
 800b758:	2501      	movs	r5, #1
        }
    }

    EventMacNvmCtxChanged( );
    return status;
}
 800b75a:	0028      	movs	r0, r5
 800b75c:	b005      	add	sp, #20
 800b75e:	bcc0      	pop	{r6, r7}
 800b760:	46b9      	mov	r9, r7
 800b762:	46b0      	mov	r8, r6
 800b764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    macHdr.Value = 0;
 800b766:	ab01      	add	r3, sp, #4
 800b768:	2200      	movs	r2, #0
 800b76a:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b76c:	4f54      	ldr	r7, [pc, #336]	; (800b8c0 <LoRaMacMcpsRequest+0x184>)
 800b76e:	3214      	adds	r2, #20
 800b770:	2100      	movs	r1, #0
 800b772:	0038      	movs	r0, r7
 800b774:	f003 faef 	bl	800ed56 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b778:	4b52      	ldr	r3, [pc, #328]	; (800b8c4 <LoRaMacMcpsRequest+0x188>)
 800b77a:	469c      	mov	ip, r3
 800b77c:	4467      	add	r7, ip
 800b77e:	2301      	movs	r3, #1
 800b780:	4a51      	ldr	r2, [pc, #324]	; (800b8c8 <LoRaMacMcpsRequest+0x18c>)
 800b782:	54bb      	strb	r3, [r7, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b784:	4a51      	ldr	r2, [pc, #324]	; (800b8cc <LoRaMacMcpsRequest+0x190>)
 800b786:	54bb      	strb	r3, [r7, r2]
    switch( mcpsRequest->Type )
 800b788:	7823      	ldrb	r3, [r4, #0]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d05f      	beq.n	800b84e <LoRaMacMcpsRequest+0x112>
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d075      	beq.n	800b87e <LoRaMacMcpsRequest+0x142>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d047      	beq.n	800b826 <LoRaMacMcpsRequest+0xea>
 800b796:	2700      	movs	r7, #0
 800b798:	2300      	movs	r3, #0
 800b79a:	4698      	mov	r8, r3
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b79c:	2302      	movs	r3, #2
 800b79e:	466a      	mov	r2, sp
 800b7a0:	7313      	strb	r3, [r2, #12]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b7a2:	4a4b      	ldr	r2, [pc, #300]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b7a4:	4b4b      	ldr	r3, [pc, #300]	; (800b8d4 <LoRaMacMcpsRequest+0x198>)
 800b7a6:	58d3      	ldr	r3, [r2, r3]
 800b7a8:	2296      	movs	r2, #150	; 0x96
 800b7aa:	0052      	lsls	r2, r2, #1
 800b7ac:	5c9a      	ldrb	r2, [r3, r2]
 800b7ae:	4669      	mov	r1, sp
 800b7b0:	738a      	strb	r2, [r1, #14]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b7b2:	7818      	ldrb	r0, [r3, #0]
 800b7b4:	a903      	add	r1, sp, #12
 800b7b6:	f001 fa12 	bl	800cbde <RegionGetPhyParam>
 800b7ba:	9002      	str	r0, [sp, #8]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b7bc:	b240      	sxtb	r0, r0
 800b7be:	1c03      	adds	r3, r0, #0
 800b7c0:	42b8      	cmp	r0, r7
 800b7c2:	da00      	bge.n	800b7c6 <LoRaMacMcpsRequest+0x8a>
 800b7c4:	1c3b      	adds	r3, r7, #0
 800b7c6:	b25b      	sxtb	r3, r3
    if( readyToSend == true )
 800b7c8:	2d00      	cmp	r5, #0
 800b7ca:	d070      	beq.n	800b8ae <LoRaMacMcpsRequest+0x172>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800b7cc:	4940      	ldr	r1, [pc, #256]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b7ce:	4a41      	ldr	r2, [pc, #260]	; (800b8d4 <LoRaMacMcpsRequest+0x198>)
 800b7d0:	588a      	ldr	r2, [r1, r2]
 800b7d2:	21f2      	movs	r1, #242	; 0xf2
 800b7d4:	5c51      	ldrb	r1, [r2, r1]
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	d113      	bne.n	800b802 <LoRaMacMcpsRequest+0xc6>
            verify.DatarateParams.Datarate = datarate;
 800b7da:	4669      	mov	r1, sp
 800b7dc:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b7de:	2396      	movs	r3, #150	; 0x96
 800b7e0:	005b      	lsls	r3, r3, #1
 800b7e2:	5cd3      	ldrb	r3, [r2, r3]
 800b7e4:	708b      	strb	r3, [r1, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b7e6:	7810      	ldrb	r0, [r2, #0]
 800b7e8:	2205      	movs	r2, #5
 800b7ea:	f001 fa21 	bl	800cc30 <RegionVerify>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d063      	beq.n	800b8ba <LoRaMacMcpsRequest+0x17e>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b7f2:	4a37      	ldr	r2, [pc, #220]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b7f4:	4b37      	ldr	r3, [pc, #220]	; (800b8d4 <LoRaMacMcpsRequest+0x198>)
 800b7f6:	58d2      	ldr	r2, [r2, r3]
 800b7f8:	466b      	mov	r3, sp
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	5659      	ldrsb	r1, [r3, r1]
 800b7fe:	23f9      	movs	r3, #249	; 0xf9
 800b800:	54d1      	strb	r1, [r2, r3]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800b802:	0033      	movs	r3, r6
 800b804:	464a      	mov	r2, r9
 800b806:	4641      	mov	r1, r8
 800b808:	a801      	add	r0, sp, #4
 800b80a:	f7fe f9ed 	bl	8009be8 <Send>
 800b80e:	1e05      	subs	r5, r0, #0
        if( status == LORAMAC_STATUS_OK )
 800b810:	d148      	bne.n	800b8a4 <LoRaMacMcpsRequest+0x168>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b812:	7821      	ldrb	r1, [r4, #0]
 800b814:	4b2e      	ldr	r3, [pc, #184]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b816:	4a30      	ldr	r2, [pc, #192]	; (800b8d8 <LoRaMacMcpsRequest+0x19c>)
 800b818:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b81a:	4930      	ldr	r1, [pc, #192]	; (800b8dc <LoRaMacMcpsRequest+0x1a0>)
 800b81c:	5c5a      	ldrb	r2, [r3, r1]
 800b81e:	2001      	movs	r0, #1
 800b820:	4302      	orrs	r2, r0
 800b822:	545a      	strb	r2, [r3, r1]
 800b824:	e044      	b.n	800b8b0 <LoRaMacMcpsRequest+0x174>
            MacCtx.AckTimeoutRetries = 1;
 800b826:	4a2a      	ldr	r2, [pc, #168]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b828:	4b2d      	ldr	r3, [pc, #180]	; (800b8e0 <LoRaMacMcpsRequest+0x1a4>)
 800b82a:	2101      	movs	r1, #1
 800b82c:	54d1      	strb	r1, [r2, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b82e:	aa01      	add	r2, sp, #4
 800b830:	7811      	ldrb	r1, [r2, #0]
 800b832:	231f      	movs	r3, #31
 800b834:	400b      	ands	r3, r1
 800b836:	2140      	movs	r1, #64	; 0x40
 800b838:	430b      	orrs	r3, r1
 800b83a:	7013      	strb	r3, [r2, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800b83c:	7923      	ldrb	r3, [r4, #4]
 800b83e:	4698      	mov	r8, r3
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800b840:	68a3      	ldr	r3, [r4, #8]
 800b842:	4699      	mov	r9, r3
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800b844:	89a6      	ldrh	r6, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800b846:	270e      	movs	r7, #14
 800b848:	57e7      	ldrsb	r7, [r4, r7]
            readyToSend = true;
 800b84a:	3501      	adds	r5, #1
            break;
 800b84c:	e7a6      	b.n	800b79c <LoRaMacMcpsRequest+0x60>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b84e:	7be3      	ldrb	r3, [r4, #15]
 800b850:	1c1a      	adds	r2, r3, #0
 800b852:	2b08      	cmp	r3, #8
 800b854:	d900      	bls.n	800b858 <LoRaMacMcpsRequest+0x11c>
 800b856:	2208      	movs	r2, #8
 800b858:	491d      	ldr	r1, [pc, #116]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b85a:	4b21      	ldr	r3, [pc, #132]	; (800b8e0 <LoRaMacMcpsRequest+0x1a4>)
 800b85c:	54ca      	strb	r2, [r1, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b85e:	a901      	add	r1, sp, #4
 800b860:	780a      	ldrb	r2, [r1, #0]
 800b862:	231f      	movs	r3, #31
 800b864:	401a      	ands	r2, r3
 800b866:	3b9f      	subs	r3, #159	; 0x9f
 800b868:	4313      	orrs	r3, r2
 800b86a:	700b      	strb	r3, [r1, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b86c:	7923      	ldrb	r3, [r4, #4]
 800b86e:	4698      	mov	r8, r3
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b870:	68a3      	ldr	r3, [r4, #8]
 800b872:	4699      	mov	r9, r3
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b874:	89a6      	ldrh	r6, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b876:	270e      	movs	r7, #14
 800b878:	57e7      	ldrsb	r7, [r4, r7]
            readyToSend = true;
 800b87a:	2501      	movs	r5, #1
            break;
 800b87c:	e78e      	b.n	800b79c <LoRaMacMcpsRequest+0x60>
            MacCtx.AckTimeoutRetries = 1;
 800b87e:	4a14      	ldr	r2, [pc, #80]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b880:	4b17      	ldr	r3, [pc, #92]	; (800b8e0 <LoRaMacMcpsRequest+0x1a4>)
 800b882:	2101      	movs	r1, #1
 800b884:	54d1      	strb	r1, [r2, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b886:	aa01      	add	r2, sp, #4
 800b888:	7811      	ldrb	r1, [r2, #0]
 800b88a:	2320      	movs	r3, #32
 800b88c:	425b      	negs	r3, r3
 800b88e:	430b      	orrs	r3, r1
 800b890:	7013      	strb	r3, [r2, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b892:	6863      	ldr	r3, [r4, #4]
 800b894:	4699      	mov	r9, r3
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b896:	8926      	ldrh	r6, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b898:	270a      	movs	r7, #10
 800b89a:	57e7      	ldrsb	r7, [r4, r7]
            readyToSend = true;
 800b89c:	2501      	movs	r5, #1
    uint8_t fPort = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4698      	mov	r8, r3
            break;
 800b8a2:	e77b      	b.n	800b79c <LoRaMacMcpsRequest+0x60>
            MacCtx.NodeAckRequested = false;
 800b8a4:	4a0a      	ldr	r2, [pc, #40]	; (800b8d0 <LoRaMacMcpsRequest+0x194>)
 800b8a6:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <LoRaMacMcpsRequest+0x1a8>)
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	54d1      	strb	r1, [r2, r3]
 800b8ac:	e000      	b.n	800b8b0 <LoRaMacMcpsRequest+0x174>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b8ae:	2502      	movs	r5, #2
    EventMacNvmCtxChanged( );
 800b8b0:	f7fc fcf8 	bl	80082a4 <EventMacNvmCtxChanged>
    return status;
 800b8b4:	e751      	b.n	800b75a <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b8b6:	2503      	movs	r5, #3
 800b8b8:	e74f      	b.n	800b75a <LoRaMacMcpsRequest+0x1e>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b8ba:	2503      	movs	r5, #3
 800b8bc:	e74d      	b.n	800b75a <LoRaMacMcpsRequest+0x1e>
 800b8be:	46c0      	nop			; (mov r8, r8)
 800b8c0:	20000cf8 	.word	0x20000cf8
 800b8c4:	fffffbc4 	.word	0xfffffbc4
 800b8c8:	0000043d 	.word	0x0000043d
 800b8cc:	00000412 	.word	0x00000412
 800b8d0:	200008bc 	.word	0x200008bc
 800b8d4:	00000484 	.word	0x00000484
 800b8d8:	0000043c 	.word	0x0000043c
 800b8dc:	00000481 	.word	0x00000481
 800b8e0:	00000411 	.word	0x00000411
 800b8e4:	00000414 	.word	0x00000414

0800b8e8 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	0004      	movs	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b8ee:	a901      	add	r1, sp, #4
 800b8f0:	7008      	strb	r0, [r1, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b8f2:	4a08      	ldr	r2, [pc, #32]	; (800b914 <LoRaMacTestSetDutyCycleOn+0x2c>)
 800b8f4:	4b08      	ldr	r3, [pc, #32]	; (800b918 <LoRaMacTestSetDutyCycleOn+0x30>)
 800b8f6:	58d3      	ldr	r3, [r2, r3]
 800b8f8:	7818      	ldrb	r0, [r3, #0]
 800b8fa:	220f      	movs	r2, #15
 800b8fc:	f001 f998 	bl	800cc30 <RegionVerify>
 800b900:	2800      	cmp	r0, #0
 800b902:	d005      	beq.n	800b910 <LoRaMacTestSetDutyCycleOn+0x28>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800b904:	4a03      	ldr	r2, [pc, #12]	; (800b914 <LoRaMacTestSetDutyCycleOn+0x2c>)
 800b906:	4b04      	ldr	r3, [pc, #16]	; (800b918 <LoRaMacTestSetDutyCycleOn+0x30>)
 800b908:	58d2      	ldr	r2, [r2, r3]
 800b90a:	233e      	movs	r3, #62	; 0x3e
 800b90c:	33ff      	adds	r3, #255	; 0xff
 800b90e:	54d4      	strb	r4, [r2, r3]
    }
}
 800b910:	b002      	add	sp, #8
 800b912:	bd10      	pop	{r4, pc}
 800b914:	200008bc 	.word	0x200008bc
 800b918:	00000484 	.word	0x00000484

0800b91c <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b91e:	46de      	mov	lr, fp
 800b920:	4657      	mov	r7, sl
 800b922:	464e      	mov	r6, r9
 800b924:	4645      	mov	r5, r8
 800b926:	b5e0      	push	{r5, r6, r7, lr}
 800b928:	b087      	sub	sp, #28
 800b92a:	0004      	movs	r4, r0
 800b92c:	9101      	str	r1, [sp, #4]
 800b92e:	4691      	mov	r9, r2
 800b930:	001d      	movs	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b932:	2710      	movs	r7, #16
 800b934:	57c7      	ldrsb	r7, [r0, r7]
    int8_t txPower = adrNext->TxPower;
 800b936:	2311      	movs	r3, #17
 800b938:	56c3      	ldrsb	r3, [r0, r3]
 800b93a:	469a      	mov	sl, r3
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b93c:	6883      	ldr	r3, [r0, #8]
 800b93e:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800b940:	7946      	ldrb	r6, [r0, #5]
 800b942:	2e00      	cmp	r6, #0
 800b944:	d10c      	bne.n	800b960 <CalcNextV10X+0x44>
                }
            }
        }
    }

    *drOut = datarate;
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800b94a:	464b      	mov	r3, r9
 800b94c:	4652      	mov	r2, sl
 800b94e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
}
 800b950:	0030      	movs	r0, r6
 800b952:	b007      	add	sp, #28
 800b954:	bcf0      	pop	{r4, r5, r6, r7}
 800b956:	46bb      	mov	fp, r7
 800b958:	46b2      	mov	sl, r6
 800b95a:	46a9      	mov	r9, r5
 800b95c:	46a0      	mov	r8, r4
 800b95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b960:	2302      	movs	r3, #2
 800b962:	aa02      	add	r2, sp, #8
 800b964:	7313      	strb	r3, [r2, #12]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b966:	7c83      	ldrb	r3, [r0, #18]
 800b968:	7393      	strb	r3, [r2, #14]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b96a:	7cc0      	ldrb	r0, [r0, #19]
 800b96c:	a905      	add	r1, sp, #20
 800b96e:	f001 f936 	bl	800cbde <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800b972:	b243      	sxtb	r3, r0
 800b974:	469b      	mov	fp, r3
        datarate = MAX( datarate, minTxDatarate );
 800b976:	1c3b      	adds	r3, r7, #0
 800b978:	455f      	cmp	r7, fp
 800b97a:	da00      	bge.n	800b97e <CalcNextV10X+0x62>
 800b97c:	465b      	mov	r3, fp
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	4698      	mov	r8, r3
        if( datarate == minTxDatarate )
 800b982:	455f      	cmp	r7, fp
 800b984:	dc04      	bgt.n	800b990 <CalcNextV10X+0x74>
            *adrAckCounter = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800b98a:	4647      	mov	r7, r8
            adrAckReq = false;
 800b98c:	2600      	movs	r6, #0
 800b98e:	e7da      	b.n	800b946 <CalcNextV10X+0x2a>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b990:	68a2      	ldr	r2, [r4, #8]
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	429a      	cmp	r2, r3
 800b996:	d200      	bcs.n	800b99a <CalcNextV10X+0x7e>
                adrAckReq = false;
 800b998:	2600      	movs	r6, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b99a:	89e1      	ldrh	r1, [r4, #14]
 800b99c:	185b      	adds	r3, r3, r1
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d201      	bcs.n	800b9a6 <CalcNextV10X+0x8a>
        datarate = MAX( datarate, minTxDatarate );
 800b9a2:	4647      	mov	r7, r8
 800b9a4:	e7cf      	b.n	800b946 <CalcNextV10X+0x2a>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b9a6:	a905      	add	r1, sp, #20
 800b9a8:	2308      	movs	r3, #8
 800b9aa:	700b      	strb	r3, [r1, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b9ac:	7ce0      	ldrb	r0, [r4, #19]
 800b9ae:	f001 f916 	bl	800cbde <RegionGetPhyParam>
                txPower = phyParam.Value;
 800b9b2:	b243      	sxtb	r3, r0
 800b9b4:	469a      	mov	sl, r3
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b9b6:	89e1      	ldrh	r1, [r4, #14]
 800b9b8:	68a0      	ldr	r0, [r4, #8]
 800b9ba:	f7f4 fc35 	bl	8000228 <__aeabi_uidivmod>
 800b9be:	2901      	cmp	r1, #1
 800b9c0:	d001      	beq.n	800b9c6 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800b9c2:	4647      	mov	r7, r8
 800b9c4:	e7bf      	b.n	800b946 <CalcNextV10X+0x2a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b9c6:	a905      	add	r1, sp, #20
 800b9c8:	2322      	movs	r3, #34	; 0x22
 800b9ca:	700b      	strb	r3, [r1, #0]
                    getPhy.Datarate = datarate;
 800b9cc:	4643      	mov	r3, r8
 800b9ce:	704b      	strb	r3, [r1, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b9d0:	7ca3      	ldrb	r3, [r4, #18]
 800b9d2:	708b      	strb	r3, [r1, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b9d4:	7ce0      	ldrb	r0, [r4, #19]
 800b9d6:	f001 f902 	bl	800cbde <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800b9da:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800b9dc:	45bb      	cmp	fp, r7
 800b9de:	d1b2      	bne.n	800b946 <CalcNextV10X+0x2a>
                        if( adrNext->UpdateChanMask == true )
 800b9e0:	7926      	ldrb	r6, [r4, #4]
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	d0af      	beq.n	800b946 <CalcNextV10X+0x2a>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	aa02      	add	r2, sp, #8
 800b9ea:	7113      	strb	r3, [r2, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800b9ec:	7ce0      	ldrb	r0, [r4, #19]
 800b9ee:	0011      	movs	r1, r2
 800b9f0:	f001 f90d 	bl	800cc0e <RegionInitDefaults>
                        adrAckReq = false;
 800b9f4:	2600      	movs	r6, #0
 800b9f6:	e7a6      	b.n	800b946 <CalcNextV10X+0x2a>

0800b9f8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b9f8:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800b9fa:	7884      	ldrb	r4, [r0, #2]
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	d001      	beq.n	800ba04 <LoRaMacAdrCalcNext+0xc>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ba00:	2000      	movs	r0, #0
}
 800ba02:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800ba04:	f7ff ff8a 	bl	800b91c <CalcNextV10X>
 800ba08:	e7fb      	b.n	800ba02 <LoRaMacAdrCalcNext+0xa>

0800ba0a <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba0a:	4770      	bx	lr

0800ba0c <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba0c:	2001      	movs	r0, #1
 800ba0e:	4770      	bx	lr

0800ba10 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba14:	2000      	movs	r0, #0
 800ba16:	4770      	bx	lr

0800ba18 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba18:	4770      	bx	lr

0800ba1a <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba1a:	4770      	bx	lr

0800ba1c <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba1c:	4770      	bx	lr

0800ba1e <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba1e:	2000      	movs	r0, #0
 800ba20:	4770      	bx	lr

0800ba22 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba22:	4770      	bx	lr

0800ba24 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba24:	4770      	bx	lr

0800ba26 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba26:	4770      	bx	lr

0800ba28 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4770      	bx	lr

0800ba2c <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	4770      	bx	lr

0800ba30 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba30:	2000      	movs	r0, #0
 800ba32:	4770      	bx	lr

0800ba34 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba34:	2000      	movs	r0, #0
 800ba36:	4770      	bx	lr

0800ba38 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba38:	2000      	movs	r0, #0
 800ba3a:	4770      	bx	lr

0800ba3c <LoRaMacClassBSetPingSlotInfo>:
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba3c:	4770      	bx	lr

0800ba3e <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba3e:	4770      	bx	lr

0800ba40 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba40:	4770      	bx	lr

0800ba42 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba42:	2002      	movs	r0, #2
 800ba44:	4770      	bx	lr

0800ba46 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba46:	2002      	movs	r0, #2
 800ba48:	4770      	bx	lr

0800ba4a <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba4a:	2002      	movs	r0, #2
 800ba4c:	4770      	bx	lr

0800ba4e <LoRaMacClassBPingSlotInfoAns>:
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba4e:	4770      	bx	lr

0800ba50 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba50:	2000      	movs	r0, #0
 800ba52:	4770      	bx	lr

0800ba54 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba54:	4770      	bx	lr

0800ba56 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba56:	4770      	bx	lr

0800ba58 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba58:	2000      	movs	r0, #0
 800ba5a:	4770      	bx	lr

0800ba5c <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	4770      	bx	lr

0800ba60 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba60:	4770      	bx	lr

0800ba62 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800ba62:	4770      	bx	lr

0800ba64 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ba64:	2300      	movs	r3, #0
 800ba66:	2b0f      	cmp	r3, #15
 800ba68:	d805      	bhi.n	800ba76 <IsSlotFree+0x12>
    {
        if( mem[size] != 0x00 )
 800ba6a:	5cc2      	ldrb	r2, [r0, r3]
 800ba6c:	2a00      	cmp	r2, #0
 800ba6e:	d104      	bne.n	800ba7a <IsSlotFree+0x16>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ba70:	3301      	adds	r3, #1
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	e7f7      	b.n	800ba66 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ba76:	2001      	movs	r0, #1
}
 800ba78:	4770      	bx	lr
            return false;
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	e7fc      	b.n	800ba78 <IsSlotFree+0x14>
	...

0800ba80 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ba80:	b570      	push	{r4, r5, r6, lr}
    uint8_t itr = 0;
 800ba82:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800ba84:	012c      	lsls	r4, r5, #4
 800ba86:	3408      	adds	r4, #8
 800ba88:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <MallocNewMacCommandSlot+0x24>)
 800ba8a:	18e4      	adds	r4, r4, r3
 800ba8c:	0020      	movs	r0, r4
 800ba8e:	f7ff ffe9 	bl	800ba64 <IsSlotFree>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d104      	bne.n	800baa0 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800ba96:	3501      	adds	r5, #1
 800ba98:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800ba9a:	2d0f      	cmp	r5, #15
 800ba9c:	d1f2      	bne.n	800ba84 <MallocNewMacCommandSlot+0x4>
        {
            return 0;
 800ba9e:	2400      	movs	r4, #0
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
}
 800baa0:	0020      	movs	r0, r4
 800baa2:	bd70      	pop	{r4, r5, r6, pc}
 800baa4:	20000d48 	.word	0x20000d48

0800baa8 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == 0 )
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d004      	beq.n	800bab6 <LinkedListInit+0xe>
    {
        return false;
    }

    list->First = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	6003      	str	r3, [r0, #0]
    list->Last = 0;
 800bab0:	6043      	str	r3, [r0, #4]

    return true;
 800bab2:	2001      	movs	r0, #1
}
 800bab4:	4770      	bx	lr
        return false;
 800bab6:	2000      	movs	r0, #0
 800bab8:	e7fc      	b.n	800bab4 <LinkedListInit+0xc>

0800baba <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == 0 ) && ( element == 0 ) )
 800baba:	2800      	cmp	r0, #0
 800babc:	d00b      	beq.n	800bad6 <LinkedListAdd+0x1c>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 800babe:	6803      	ldr	r3, [r0, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00c      	beq.n	800bade <LinkedListAdd+0x24>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800bac4:	6843      	ldr	r3, [r0, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d000      	beq.n	800bacc <LinkedListAdd+0x12>
    {
        list->Last->Next = element;
 800baca:	6019      	str	r1, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	600b      	str	r3, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800bad0:	6041      	str	r1, [r0, #4]

    return true;
 800bad2:	2001      	movs	r0, #1
}
 800bad4:	4770      	bx	lr
    if( ( list == 0 ) && ( element == 0 ) )
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d1f1      	bne.n	800babe <LinkedListAdd+0x4>
        return false;
 800bada:	2000      	movs	r0, #0
 800badc:	e7fa      	b.n	800bad4 <LinkedListAdd+0x1a>
        list->First = element;
 800bade:	6001      	str	r1, [r0, #0]
 800bae0:	e7f0      	b.n	800bac4 <LinkedListAdd+0xa>

0800bae2 <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == 0 ) && ( element == 0 ) )
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d004      	beq.n	800baf0 <LinkedListGetPrevious+0xe>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800bae6:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800bae8:	4281      	cmp	r1, r0
 800baea:	d106      	bne.n	800bafa <LinkedListGetPrevious+0x18>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800baec:	2000      	movs	r0, #0
 800baee:	e009      	b.n	800bb04 <LinkedListGetPrevious+0x22>
    if( ( list == 0 ) && ( element == 0 ) )
 800baf0:	2900      	cmp	r1, #0
 800baf2:	d1f8      	bne.n	800bae6 <LinkedListGetPrevious+0x4>
        return NULL;
 800baf4:	0008      	movs	r0, r1
 800baf6:	e005      	b.n	800bb04 <LinkedListGetPrevious+0x22>
            curElement = curElement->Next;
 800baf8:	0018      	movs	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d002      	beq.n	800bb04 <LinkedListGetPrevious+0x22>
 800bafe:	6803      	ldr	r3, [r0, #0]
 800bb00:	428b      	cmp	r3, r1
 800bb02:	d1f9      	bne.n	800baf8 <LinkedListGetPrevious+0x16>
    }

    return curElement;
}
 800bb04:	4770      	bx	lr

0800bb06 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800bb06:	b570      	push	{r4, r5, r6, lr}
 800bb08:	0005      	movs	r5, r0
 800bb0a:	000c      	movs	r4, r1
    if( ( list == 0 ) && ( element == 0 ) )
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d011      	beq.n	800bb34 <LinkedListRemove+0x2e>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800bb10:	0021      	movs	r1, r4
 800bb12:	0028      	movs	r0, r5
 800bb14:	f7ff ffe5 	bl	800bae2 <LinkedListGetPrevious>

    if( list->First == element )
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	d00e      	beq.n	800bb3c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800bb1e:	686b      	ldr	r3, [r5, #4]
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d00e      	beq.n	800bb42 <LinkedListRemove+0x3c>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d001      	beq.n	800bb2c <LinkedListRemove+0x26>
    {
        PrevElement->Next = element->Next;
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	6023      	str	r3, [r4, #0]

    return true;
 800bb30:	2001      	movs	r0, #1
}
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
    if( ( list == 0 ) && ( element == 0 ) )
 800bb34:	2900      	cmp	r1, #0
 800bb36:	d1eb      	bne.n	800bb10 <LinkedListRemove+0xa>
        return false;
 800bb38:	2000      	movs	r0, #0
 800bb3a:	e7fa      	b.n	800bb32 <LinkedListRemove+0x2c>
        list->First = element->Next;
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	e7ed      	b.n	800bb1e <LinkedListRemove+0x18>
        list->Last = PrevElement;
 800bb42:	6068      	str	r0, [r5, #4]
 800bb44:	e7ee      	b.n	800bb24 <LinkedListRemove+0x1e>

0800bb46 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800bb46:	0003      	movs	r3, r0
    switch( cid )
 800bb48:	280a      	cmp	r0, #10
 800bb4a:	d808      	bhi.n	800bb5e <IsSticky+0x18>
 800bb4c:	2001      	movs	r0, #1
 800bb4e:	4098      	lsls	r0, r3
 800bb50:	23a4      	movs	r3, #164	; 0xa4
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	4018      	ands	r0, r3
 800bb56:	1e43      	subs	r3, r0, #1
 800bb58:	4198      	sbcs	r0, r3
 800bb5a:	b2c0      	uxtb	r0, r0
 800bb5c:	e000      	b.n	800bb60 <IsSticky+0x1a>
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
        default:
            return false;
 800bb5e:	2000      	movs	r0, #0
    }
}
 800bb60:	4770      	bx	lr
	...

0800bb64 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800bb64:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800bb66:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <NvmCtxCallback+0x10>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d000      	beq.n	800bb70 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800bb6e:	4798      	blx	r3
    }
}
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	46c0      	nop			; (mov r8, r8)
 800bb74:	20000d44 	.word	0x20000d44

0800bb78 <FreeMacCommandSlot>:
{
 800bb78:	b510      	push	{r4, lr}
    if( slot == 0 )
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d005      	beq.n	800bb8a <FreeMacCommandSlot+0x12>
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800bb7e:	2210      	movs	r2, #16
 800bb80:	2100      	movs	r1, #0
 800bb82:	f003 f8e8 	bl	800ed56 <memset1>
    return true;
 800bb86:	2001      	movs	r0, #1
}
 800bb88:	bd10      	pop	{r4, pc}
        return false;
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	e7fc      	b.n	800bb88 <FreeMacCommandSlot+0x10>
	...

0800bb90 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	0004      	movs	r4, r0
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800bb94:	4d06      	ldr	r5, [pc, #24]	; (800bbb0 <LoRaMacCommandsInit+0x20>)
 800bb96:	22fc      	movs	r2, #252	; 0xfc
 800bb98:	2100      	movs	r1, #0
 800bb9a:	0028      	movs	r0, r5
 800bb9c:	f003 f8db 	bl	800ed56 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 800bba0:	0028      	movs	r0, r5
 800bba2:	f7ff ff81 	bl	800baa8 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800bba6:	4b03      	ldr	r3, [pc, #12]	; (800bbb4 <LoRaMacCommandsInit+0x24>)
 800bba8:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bbaa:	2000      	movs	r0, #0
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	20000d48 	.word	0x20000d48
 800bbb4:	20000d44 	.word	0x20000d44

0800bbb8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	1e01      	subs	r1, r0, #0
    // Restore module context
    if( commandsNvmCtx != NULL )
 800bbbc:	d005      	beq.n	800bbca <LoRaMacCommandsRestoreNvmCtx+0x12>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800bbbe:	22fc      	movs	r2, #252	; 0xfc
 800bbc0:	4803      	ldr	r0, [pc, #12]	; (800bbd0 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800bbc2:	f003 f8b0 	bl	800ed26 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800bbc6:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
}
 800bbc8:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bbca:	2001      	movs	r0, #1
 800bbcc:	e7fc      	b.n	800bbc8 <LoRaMacCommandsRestoreNvmCtx+0x10>
 800bbce:	46c0      	nop			; (mov r8, r8)
 800bbd0:	20000d48 	.word	0x20000d48

0800bbd4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800bbd4:	23fc      	movs	r3, #252	; 0xfc
 800bbd6:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800bbd8:	4800      	ldr	r0, [pc, #0]	; (800bbdc <LoRaMacCommandsGetNvmCtx+0x8>)
 800bbda:	4770      	bx	lr
 800bbdc:	20000d48 	.word	0x20000d48

0800bbe0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	0007      	movs	r7, r0
 800bbe4:	000e      	movs	r6, r1
 800bbe6:	0014      	movs	r4, r2
    if( payload == 0 )
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	d01f      	beq.n	800bc2c <LoRaMacCommandsAddCmd+0x4c>
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800bbec:	f7ff ff48 	bl	800ba80 <MallocNewMacCommandSlot>
 800bbf0:	1e05      	subs	r5, r0, #0

    if( newCmd == 0 )
 800bbf2:	d01d      	beq.n	800bc30 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800bbf4:	0001      	movs	r1, r0
 800bbf6:	4810      	ldr	r0, [pc, #64]	; (800bc38 <LoRaMacCommandsAddCmd+0x58>)
 800bbf8:	f7ff ff5f 	bl	800baba <LinkedListAdd>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d019      	beq.n	800bc34 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800bc00:	712f      	strb	r7, [r5, #4]
    newCmd->PayloadSize = payloadSize;
 800bc02:	60ac      	str	r4, [r5, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800bc04:	1d68      	adds	r0, r5, #5
 800bc06:	b2a2      	uxth	r2, r4
 800bc08:	0031      	movs	r1, r6
 800bc0a:	f003 f88c 	bl	800ed26 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800bc0e:	0038      	movs	r0, r7
 800bc10:	f7ff ff99 	bl	800bb46 <IsSticky>
 800bc14:	7328      	strb	r0, [r5, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800bc16:	4a08      	ldr	r2, [pc, #32]	; (800bc38 <LoRaMacCommandsAddCmd+0x58>)
 800bc18:	23f8      	movs	r3, #248	; 0xf8
 800bc1a:	58d1      	ldr	r1, [r2, r3]
 800bc1c:	468c      	mov	ip, r1
 800bc1e:	4464      	add	r4, ip
 800bc20:	3401      	adds	r4, #1
 800bc22:	50d4      	str	r4, [r2, r3]

    NvmCtxCallback( );
 800bc24:	f7ff ff9e 	bl	800bb64 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800bc28:	2000      	movs	r0, #0
}
 800bc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	e7fc      	b.n	800bc2a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800bc30:	2002      	movs	r0, #2
 800bc32:	e7fa      	b.n	800bc2a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800bc34:	2005      	movs	r0, #5
 800bc36:	e7f8      	b.n	800bc2a <LoRaMacCommandsAddCmd+0x4a>
 800bc38:	20000d48 	.word	0x20000d48

0800bc3c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	1e04      	subs	r4, r0, #0
    if( macCmd == NULL )
 800bc40:	d015      	beq.n	800bc6e <LoRaMacCommandsRemoveCmd+0x32>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800bc42:	0001      	movs	r1, r0
 800bc44:	480d      	ldr	r0, [pc, #52]	; (800bc7c <LoRaMacCommandsRemoveCmd+0x40>)
 800bc46:	f7ff ff5e 	bl	800bb06 <LinkedListRemove>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d011      	beq.n	800bc72 <LoRaMacCommandsRemoveCmd+0x36>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800bc4e:	490b      	ldr	r1, [pc, #44]	; (800bc7c <LoRaMacCommandsRemoveCmd+0x40>)
 800bc50:	22f8      	movs	r2, #248	; 0xf8
 800bc52:	588b      	ldr	r3, [r1, r2]
 800bc54:	68a0      	ldr	r0, [r4, #8]
 800bc56:	1a1b      	subs	r3, r3, r0
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	508b      	str	r3, [r1, r2]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	f7ff ff8b 	bl	800bb78 <FreeMacCommandSlot>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d007      	beq.n	800bc76 <LoRaMacCommandsRemoveCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800bc66:	f7ff ff7d 	bl	800bb64 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	e000      	b.n	800bc70 <LoRaMacCommandsRemoveCmd+0x34>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bc6e:	2001      	movs	r0, #1
}
 800bc70:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800bc72:	2003      	movs	r0, #3
 800bc74:	e7fc      	b.n	800bc70 <LoRaMacCommandsRemoveCmd+0x34>
        return LORAMAC_COMMANDS_ERROR;
 800bc76:	2005      	movs	r0, #5
 800bc78:	e7fa      	b.n	800bc70 <LoRaMacCommandsRemoveCmd+0x34>
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	20000d48 	.word	0x20000d48

0800bc80 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800bc80:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800bc82:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <LoRaMacCommandsRemoveNoneStickyCmds+0x28>)
 800bc84:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bc86:	e003      	b.n	800bc90 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
        {
            nexElement = curElement->Next;
 800bc88:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800bc8a:	f7ff ffd7 	bl	800bc3c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800bc8e:	0020      	movs	r0, r4
    while( curElement != NULL )
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d004      	beq.n	800bc9e <LoRaMacCommandsRemoveNoneStickyCmds+0x1e>
        if( curElement->IsSticky == false )
 800bc94:	7b03      	ldrb	r3, [r0, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0f6      	beq.n	800bc88 <LoRaMacCommandsRemoveNoneStickyCmds+0x8>
        }
        else
        {
            curElement = curElement->Next;
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	e7f8      	b.n	800bc90 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
        }
    }

    NvmCtxCallback( );
 800bc9e:	f7ff ff61 	bl	800bb64 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bca2:	2000      	movs	r0, #0
 800bca4:	bd10      	pop	{r4, pc}
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	20000d48 	.word	0x20000d48

0800bcac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800bcac:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800bcae:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
 800bcb0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bcb2:	e003      	b.n	800bcbc <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800bcb4:	0020      	movs	r0, r4
 800bcb6:	f7ff ffc1 	bl	800bc3c <LoRaMacCommandsRemoveCmd>
{
 800bcba:	002c      	movs	r4, r5
    while( curElement != NULL )
 800bcbc:	2c00      	cmp	r4, #0
 800bcbe:	d006      	beq.n	800bcce <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
        nexElement = curElement->Next;
 800bcc0:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800bcc2:	7920      	ldrb	r0, [r4, #4]
 800bcc4:	f7ff ff3f 	bl	800bb46 <IsSticky>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d0f6      	beq.n	800bcba <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 800bccc:	e7f2      	b.n	800bcb4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800bcce:	f7ff ff49 	bl	800bb64 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	46c0      	nop			; (mov r8, r8)
 800bcd8:	20000d48 	.word	0x20000d48

0800bcdc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d005      	beq.n	800bcec <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = NvmCtx.SerializedCmdsSize;
 800bce0:	4a03      	ldr	r2, [pc, #12]	; (800bcf0 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800bce2:	23f8      	movs	r3, #248	; 0xf8
 800bce4:	58d3      	ldr	r3, [r2, r3]
 800bce6:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800bce8:	2000      	movs	r0, #0
}
 800bcea:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bcec:	2001      	movs	r0, #1
 800bcee:	e7fc      	b.n	800bcea <LoRaMacCommandsGetSizeSerializedCmds+0xe>
 800bcf0:	20000d48 	.word	0x20000d48

0800bcf4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	0007      	movs	r7, r0
 800bcf8:	1e16      	subs	r6, r2, #0
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800bcfa:	d01b      	beq.n	800bd34 <LoRaMacCommandsSerializeCmds+0x40>
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	d01b      	beq.n	800bd38 <LoRaMacCommandsSerializeCmds+0x44>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800bd00:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <LoRaMacCommandsSerializeCmds+0x4c>)
 800bd02:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800bd04:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 800bd06:	2c00      	cmp	r4, #0
 800bd08:	d012      	beq.n	800bd30 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800bd0a:	1afa      	subs	r2, r7, r3
 800bd0c:	68a1      	ldr	r1, [r4, #8]
 800bd0e:	3101      	adds	r1, #1
 800bd10:	428a      	cmp	r2, r1
 800bd12:	d313      	bcc.n	800bd3c <LoRaMacCommandsSerializeCmds+0x48>
        {
            buffer[itr++] = curElement->CID;
 800bd14:	1c5d      	adds	r5, r3, #1
 800bd16:	b2ed      	uxtb	r5, r5
 800bd18:	7922      	ldrb	r2, [r4, #4]
 800bd1a:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800bd1c:	1d61      	adds	r1, r4, #5
 800bd1e:	8922      	ldrh	r2, [r4, #8]
 800bd20:	1970      	adds	r0, r6, r5
 800bd22:	f003 f800 	bl	800ed26 <memcpy1>
            itr = itr + curElement->PayloadSize;
 800bd26:	7a23      	ldrb	r3, [r4, #8]
 800bd28:	195b      	adds	r3, r3, r5
 800bd2a:	b2db      	uxtb	r3, r3
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800bd2c:	6824      	ldr	r4, [r4, #0]
 800bd2e:	e7ea      	b.n	800bd06 <LoRaMacCommandsSerializeCmds+0x12>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800bd30:	2000      	movs	r0, #0
}
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bd34:	2001      	movs	r0, #1
 800bd36:	e7fc      	b.n	800bd32 <LoRaMacCommandsSerializeCmds+0x3e>
 800bd38:	2001      	movs	r0, #1
 800bd3a:	e7fa      	b.n	800bd32 <LoRaMacCommandsSerializeCmds+0x3e>
    return LORAMAC_COMMANDS_SUCCESS;
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	e7f8      	b.n	800bd32 <LoRaMacCommandsSerializeCmds+0x3e>
 800bd40:	20000d48 	.word	0x20000d48

0800bd44 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d010      	beq.n	800bd6a <LoRaMacCommandsStickyCmdsPending+0x26>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800bd48:	4b09      	ldr	r3, [pc, #36]	; (800bd70 <LoRaMacCommandsStickyCmdsPending+0x2c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d008      	beq.n	800bd66 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        if( curElement->IsSticky == true )
 800bd54:	7b1a      	ldrb	r2, [r3, #12]
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d101      	bne.n	800bd5e <LoRaMacCommandsStickyCmdsPending+0x1a>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	e7f8      	b.n	800bd50 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800bd62:	2000      	movs	r0, #0
 800bd64:	e000      	b.n	800bd68 <LoRaMacCommandsStickyCmdsPending+0x24>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800bd66:	2000      	movs	r0, #0
}
 800bd68:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	e7fc      	b.n	800bd68 <LoRaMacCommandsStickyCmdsPending+0x24>
 800bd6e:	46c0      	nop			; (mov r8, r8)
 800bd70:	20000d48 	.word	0x20000d48

0800bd74 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bd74:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <IncreaseBufferPointer+0x14>)
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	001a      	movs	r2, r3
 800bd7a:	3210      	adds	r2, #16
 800bd7c:	4282      	cmp	r2, r0
 800bd7e:	d001      	beq.n	800bd84 <IncreaseBufferPointer+0x10>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800bd80:	3004      	adds	r0, #4
    }
    return bufferPointer;
}
 800bd82:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bd84:	0018      	movs	r0, r3
 800bd86:	e7fc      	b.n	800bd82 <IncreaseBufferPointer+0xe>
 800bd88:	20000e44 	.word	0x20000e44

0800bd8c <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	0005      	movs	r5, r0
 800bd90:	0008      	movs	r0, r1
 800bd92:	0014      	movs	r4, r2
    MlmeConfirmQueue_t* element = bufferStart;

    while( element != bufferEnd )
 800bd94:	42a0      	cmp	r0, r4
 800bd96:	d005      	beq.n	800bda4 <GetElement+0x18>
    {
        if( element->Request == request )
 800bd98:	7803      	ldrb	r3, [r0, #0]
 800bd9a:	42ab      	cmp	r3, r5
 800bd9c:	d003      	beq.n	800bda6 <GetElement+0x1a>
            // We have found the element
            return element;
        }
        else
        {
            element = IncreaseBufferPointer( element );
 800bd9e:	f7ff ffe9 	bl	800bd74 <IncreaseBufferPointer>
 800bda2:	e7f7      	b.n	800bd94 <GetElement+0x8>
        }
    }
    return NULL;
 800bda4:	2000      	movs	r0, #0
}
 800bda6:	bd70      	pop	{r4, r5, r6, pc}

0800bda8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
 800bdac:	4c09      	ldr	r4, [pc, #36]	; (800bdd4 <LoRaMacConfirmQueueInit+0x2c>)
 800bdae:	6020      	str	r0, [r4, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800bdb0:	0020      	movs	r0, r4
 800bdb2:	3014      	adds	r0, #20
 800bdb4:	6120      	str	r0, [r4, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800bdb6:	2328      	movs	r3, #40	; 0x28
 800bdb8:	2200      	movs	r2, #0
 800bdba:	54e2      	strb	r2, [r4, r3]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bdbc:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bdbe:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800bdc0:	3214      	adds	r2, #20
 800bdc2:	21ff      	movs	r1, #255	; 0xff
 800bdc4:	f002 ffc7 	bl	800ed56 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	6922      	ldr	r2, [r4, #16]
 800bdcc:	7553      	strb	r3, [r2, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800bdce:	60e5      	str	r5, [r4, #12]
}
 800bdd0:	bd70      	pop	{r4, r5, r6, pc}
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	20000e44 	.word	0x20000e44

0800bdd8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	1e01      	subs	r1, r0, #0
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 800bddc:	d006      	beq.n	800bdec <LoRaMacConfirmQueueRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800bdde:	4804      	ldr	r0, [pc, #16]	; (800bdf0 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800bde0:	2216      	movs	r2, #22
 800bde2:	3014      	adds	r0, #20
 800bde4:	f002 ff9f 	bl	800ed26 <memcpy1>
        return true;
 800bde8:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 800bdea:	bd10      	pop	{r4, pc}
        return false;
 800bdec:	2000      	movs	r0, #0
 800bdee:	e7fc      	b.n	800bdea <LoRaMacConfirmQueueRestoreNvmCtx+0x12>
 800bdf0:	20000e44 	.word	0x20000e44

0800bdf4 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800bdf4:	2316      	movs	r3, #22
 800bdf6:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800bdf8:	4801      	ldr	r0, [pc, #4]	; (800be00 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800bdfa:	3014      	adds	r0, #20
 800bdfc:	4770      	bx	lr
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	20000e44 	.word	0x20000e44

0800be04 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800be04:	b510      	push	{r4, lr}
 800be06:	0003      	movs	r3, r0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800be08:	4a0c      	ldr	r2, [pc, #48]	; (800be3c <LoRaMacConfirmQueueAdd+0x38>)
 800be0a:	6912      	ldr	r2, [r2, #16]
 800be0c:	7d11      	ldrb	r1, [r2, #20]
 800be0e:	2904      	cmp	r1, #4
 800be10:	d811      	bhi.n	800be36 <LoRaMacConfirmQueueAdd+0x32>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800be12:	4c0a      	ldr	r4, [pc, #40]	; (800be3c <LoRaMacConfirmQueueAdd+0x38>)
 800be14:	68a0      	ldr	r0, [r4, #8]
 800be16:	7819      	ldrb	r1, [r3, #0]
 800be18:	7001      	strb	r1, [r0, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800be1a:	7859      	ldrb	r1, [r3, #1]
 800be1c:	7041      	strb	r1, [r0, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800be1e:	78db      	ldrb	r3, [r3, #3]
 800be20:	70c3      	strb	r3, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800be22:	2300      	movs	r3, #0
 800be24:	7083      	strb	r3, [r0, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800be26:	7d13      	ldrb	r3, [r2, #20]
 800be28:	3301      	adds	r3, #1
 800be2a:	7513      	strb	r3, [r2, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800be2c:	f7ff ffa2 	bl	800bd74 <IncreaseBufferPointer>
 800be30:	60a0      	str	r0, [r4, #8]

    return true;
 800be32:	2001      	movs	r0, #1
}
 800be34:	bd10      	pop	{r4, pc}
        return false;
 800be36:	2000      	movs	r0, #0
 800be38:	e7fc      	b.n	800be34 <LoRaMacConfirmQueueAdd+0x30>
 800be3a:	46c0      	nop			; (mov r8, r8)
 800be3c:	20000e44 	.word	0x20000e44

0800be40 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800be40:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800be42:	4b08      	ldr	r3, [pc, #32]	; (800be64 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800be44:	691a      	ldr	r2, [r3, #16]
 800be46:	7d13      	ldrb	r3, [r2, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d008      	beq.n	800be5e <LoRaMacConfirmQueueRemoveFirst+0x1e>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800be4c:	3b01      	subs	r3, #1
 800be4e:	7513      	strb	r3, [r2, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800be50:	4c04      	ldr	r4, [pc, #16]	; (800be64 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800be52:	6860      	ldr	r0, [r4, #4]
 800be54:	f7ff ff8e 	bl	800bd74 <IncreaseBufferPointer>
 800be58:	6060      	str	r0, [r4, #4]

    return true;
 800be5a:	2001      	movs	r0, #1
}
 800be5c:	bd10      	pop	{r4, pc}
        return false;
 800be5e:	2000      	movs	r0, #0
 800be60:	e7fc      	b.n	800be5c <LoRaMacConfirmQueueRemoveFirst+0x1c>
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	20000e44 	.word	0x20000e44

0800be68 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800be68:	b510      	push	{r4, lr}
 800be6a:	0004      	movs	r4, r0
 800be6c:	0008      	movs	r0, r1
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800be6e:	4b08      	ldr	r3, [pc, #32]	; (800be90 <LoRaMacConfirmQueueSetStatus+0x28>)
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	7d1b      	ldrb	r3, [r3, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d100      	bne.n	800be7a <LoRaMacConfirmQueueSetStatus+0x12>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 800be78:	bd10      	pop	{r4, pc}
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800be7a:	4b05      	ldr	r3, [pc, #20]	; (800be90 <LoRaMacConfirmQueueSetStatus+0x28>)
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	6859      	ldr	r1, [r3, #4]
 800be80:	f7ff ff84 	bl	800bd8c <GetElement>
        if( element != NULL )
 800be84:	2800      	cmp	r0, #0
 800be86:	d0f7      	beq.n	800be78 <LoRaMacConfirmQueueSetStatus+0x10>
            element->Status = status;
 800be88:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800be8a:	2301      	movs	r3, #1
 800be8c:	7083      	strb	r3, [r0, #2]
}
 800be8e:	e7f3      	b.n	800be78 <LoRaMacConfirmQueueSetStatus+0x10>
 800be90:	20000e44 	.word	0x20000e44

0800be94 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800be94:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800be96:	4b09      	ldr	r3, [pc, #36]	; (800bebc <LoRaMacConfirmQueueGetStatus+0x28>)
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <LoRaMacConfirmQueueGetStatus+0x10>
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bea0:	2001      	movs	r0, #1
}
 800bea2:	bd10      	pop	{r4, pc}
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bea4:	4b05      	ldr	r3, [pc, #20]	; (800bebc <LoRaMacConfirmQueueGetStatus+0x28>)
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	6859      	ldr	r1, [r3, #4]
 800beaa:	f7ff ff6f 	bl	800bd8c <GetElement>
        if( element != NULL )
 800beae:	2800      	cmp	r0, #0
 800beb0:	d001      	beq.n	800beb6 <LoRaMacConfirmQueueGetStatus+0x22>
            return element->Status;
 800beb2:	7840      	ldrb	r0, [r0, #1]
 800beb4:	e7f5      	b.n	800bea2 <LoRaMacConfirmQueueGetStatus+0xe>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800beb6:	2001      	movs	r0, #1
 800beb8:	e7f3      	b.n	800bea2 <LoRaMacConfirmQueueGetStatus+0xe>
 800beba:	46c0      	nop			; (mov r8, r8)
 800bebc:	20000e44 	.word	0x20000e44

0800bec0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bec0:	b510      	push	{r4, lr}
 800bec2:	0004      	movs	r4, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
 800bec6:	6858      	ldr	r0, [r3, #4]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bec8:	691b      	ldr	r3, [r3, #16]
 800beca:	755c      	strb	r4, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800becc:	7d1b      	ldrb	r3, [r3, #20]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d108      	bne.n	800bee4 <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800bed2:	bd10      	pop	{r4, pc}
                element->ReadyToHandle = true;
 800bed4:	3301      	adds	r3, #1
 800bed6:	7083      	strb	r3, [r0, #2]
            element = IncreaseBufferPointer( element );
 800bed8:	f7ff ff4c 	bl	800bd74 <IncreaseBufferPointer>
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bedc:	4b04      	ldr	r3, [pc, #16]	; (800bef0 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	4283      	cmp	r3, r0
 800bee2:	d0f6      	beq.n	800bed2 <LoRaMacConfirmQueueSetStatusCmn+0x12>
            element->Status = status;
 800bee4:	7044      	strb	r4, [r0, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bee6:	78c3      	ldrb	r3, [r0, #3]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f5      	bne.n	800bed8 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800beec:	e7f2      	b.n	800bed4 <LoRaMacConfirmQueueSetStatusCmn+0x14>
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	20000e44 	.word	0x20000e44

0800bef4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800bef4:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bef6:	4b04      	ldr	r3, [pc, #16]	; (800bf08 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800bef8:	689a      	ldr	r2, [r3, #8]
 800befa:	6859      	ldr	r1, [r3, #4]
 800befc:	f7ff ff46 	bl	800bd8c <GetElement>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d000      	beq.n	800bf06 <LoRaMacConfirmQueueIsCmdActive+0x12>
    {
        return true;
 800bf04:	2001      	movs	r0, #1
    }
    return false;
}
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	20000e44 	.word	0x20000e44

0800bf0c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	0006      	movs	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <LoRaMacConfirmQueueHandleCb+0x58>)
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	7d1f      	ldrb	r7, [r3, #20]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800bf18:	2400      	movs	r4, #0
 800bf1a:	e00c      	b.n	800bf36 <LoRaMacConfirmQueueHandleCb+0x2a>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bf1c:	7819      	ldrb	r1, [r3, #0]
 800bf1e:	aa01      	add	r2, sp, #4
 800bf20:	7011      	strb	r1, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bf22:	7859      	ldrb	r1, [r3, #1]
 800bf24:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bf26:	78db      	ldrb	r3, [r3, #3]
 800bf28:	70d3      	strb	r3, [r2, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800bf2a:	f7ff ff89 	bl	800be40 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800bf2e:	2d00      	cmp	r5, #0
 800bf30:	d012      	beq.n	800bf58 <LoRaMacConfirmQueueHandleCb+0x4c>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bf32:	3401      	adds	r4, #1
 800bf34:	b2e4      	uxtb	r4, r4
 800bf36:	42bc      	cmp	r4, r7
 800bf38:	d212      	bcs.n	800bf60 <LoRaMacConfirmQueueHandleCb+0x54>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <LoRaMacConfirmQueueHandleCb+0x58>)
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bf42:	785a      	ldrb	r2, [r3, #1]
 800bf44:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bf46:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800bf48:	2d00      	cmp	r5, #0
 800bf4a:	d0e7      	beq.n	800bf1c <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <LoRaMacConfirmQueueHandleCb+0x58>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	0030      	movs	r0, r6
 800bf54:	4798      	blx	r3
 800bf56:	e7e8      	b.n	800bf2a <LoRaMacConfirmQueueHandleCb+0x1e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bf58:	a801      	add	r0, sp, #4
 800bf5a:	f7ff ff53 	bl	800be04 <LoRaMacConfirmQueueAdd>
 800bf5e:	e7e8      	b.n	800bf32 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 800bf60:	b003      	add	sp, #12
 800bf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf64:	20000e44 	.word	0x20000e44

0800bf68 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bf68:	4b01      	ldr	r3, [pc, #4]	; (800bf70 <LoRaMacConfirmQueueGetCnt+0x8>)
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	7d18      	ldrb	r0, [r3, #20]
}
 800bf6e:	4770      	bx	lr
 800bf70:	20000e44 	.word	0x20000e44

0800bf74 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bf74:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <LoRaMacConfirmQueueIsFull+0x14>)
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	7d1b      	ldrb	r3, [r3, #20]
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	d901      	bls.n	800bf82 <LoRaMacConfirmQueueIsFull+0xe>
    {
        return true;
 800bf7e:	2001      	movs	r0, #1
    }
    else
    {
        return false;
    }
}
 800bf80:	4770      	bx	lr
        return false;
 800bf82:	2000      	movs	r0, #0
 800bf84:	e7fc      	b.n	800bf80 <LoRaMacConfirmQueueIsFull+0xc>
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	20000e44 	.word	0x20000e44

0800bf8c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	9d04      	ldr	r5, [sp, #16]
 800bf90:	9c05      	ldr	r4, [sp, #20]
 800bf92:	9906      	ldr	r1, [sp, #24]
    if( b0 == 0 )
 800bf94:	2900      	cmp	r1, #0
 800bf96:	d026      	beq.n	800bfe6 <PrepareB0+0x5a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800bf98:	2649      	movs	r6, #73	; 0x49
 800bf9a:	700e      	strb	r6, [r1, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800bf9c:	2a00      	cmp	r2, #0
 800bf9e:	d001      	beq.n	800bfa4 <PrepareB0+0x18>
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d018      	beq.n	800bfd6 <PrepareB0+0x4a>
        b0[1] = confFCnt & 0xFF;
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
    {
        b0[1] = 0x00;
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	704a      	strb	r2, [r1, #1]
        b0[2] = 0x00;
 800bfa8:	708a      	strb	r2, [r1, #2]
    }

    b0[3] = 0x00;
 800bfaa:	2200      	movs	r2, #0
 800bfac:	70ca      	strb	r2, [r1, #3]
    b0[4] = 0x00;
 800bfae:	710a      	strb	r2, [r1, #4]

    b0[5] = dir;
 800bfb0:	714b      	strb	r3, [r1, #5]

    b0[6] = devAddr & 0xFF;
 800bfb2:	718d      	strb	r5, [r1, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bfb4:	0a2b      	lsrs	r3, r5, #8
 800bfb6:	71cb      	strb	r3, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bfb8:	0c2b      	lsrs	r3, r5, #16
 800bfba:	720b      	strb	r3, [r1, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bfbc:	0e2d      	lsrs	r5, r5, #24
 800bfbe:	724d      	strb	r5, [r1, #9]

    b0[10] = fCnt & 0xFF;
 800bfc0:	728c      	strb	r4, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bfc2:	0a23      	lsrs	r3, r4, #8
 800bfc4:	72cb      	strb	r3, [r1, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bfc6:	0c23      	lsrs	r3, r4, #16
 800bfc8:	730b      	strb	r3, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bfca:	0e24      	lsrs	r4, r4, #24
 800bfcc:	734c      	strb	r4, [r1, #13]

    b0[14] = 0x00;
 800bfce:	738a      	strb	r2, [r1, #14]

    b0[15] = msgLen & 0xFF;
 800bfd0:	73c8      	strb	r0, [r1, #15]

    return LORAMAC_CRYPTO_SUCCESS;
 800bfd2:	2000      	movs	r0, #0
}
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 800bfd6:	4a05      	ldr	r2, [pc, #20]	; (800bfec <PrepareB0+0x60>)
 800bfd8:	6852      	ldr	r2, [r2, #4]
 800bfda:	68d6      	ldr	r6, [r2, #12]
 800bfdc:	b2b2      	uxth	r2, r6
        b0[1] = confFCnt & 0xFF;
 800bfde:	704e      	strb	r6, [r1, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800bfe0:	0a12      	lsrs	r2, r2, #8
 800bfe2:	708a      	strb	r2, [r1, #2]
    {
 800bfe4:	e7e1      	b.n	800bfaa <PrepareB0+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfe6:	200a      	movs	r0, #10
 800bfe8:	e7f4      	b.n	800bfd4 <PrepareB0+0x48>
 800bfea:	46c0      	nop			; (mov r8, r8)
 800bfec:	20000e70 	.word	0x20000e70

0800bff0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 800bff0:	b530      	push	{r4, r5, lr}
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bff2:	2300      	movs	r3, #0
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d80c      	bhi.n	800c012 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800bff8:	009a      	lsls	r2, r3, #2
 800bffa:	4c07      	ldr	r4, [pc, #28]	; (800c018 <GetKeyAddrItem+0x28>)
 800bffc:	5d12      	ldrb	r2, [r2, r4]
 800bffe:	4282      	cmp	r2, r0
 800c000:	d002      	beq.n	800c008 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c002:	3301      	adds	r3, #1
 800c004:	b2db      	uxtb	r3, r3
 800c006:	e7f5      	b.n	800bff4 <GetKeyAddrItem+0x4>
        {
            *item = &( KeyAddrList[i] );
 800c008:	009d      	lsls	r5, r3, #2
 800c00a:	1965      	adds	r5, r4, r5
 800c00c:	600d      	str	r5, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800c00e:	2000      	movs	r0, #0
 800c010:	e000      	b.n	800c014 <GetKeyAddrItem+0x24>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c012:	200c      	movs	r0, #12
}
 800c014:	bd30      	pop	{r4, r5, pc}
 800c016:	46c0      	nop			; (mov r8, r8)
 800c018:	20000048 	.word	0x20000048

0800c01c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800c01c:	2900      	cmp	r1, #0
 800c01e:	d038      	beq.n	800c092 <GetLastFcntDown+0x76>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800c020:	2807      	cmp	r0, #7
 800c022:	d838      	bhi.n	800c096 <GetLastFcntDown+0x7a>
 800c024:	0080      	lsls	r0, r0, #2
 800c026:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <GetLastFcntDown+0x80>)
 800c028:	581b      	ldr	r3, [r3, r0]
 800c02a:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	691a      	ldr	r2, [r3, #16]
 800c032:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800c034:	001a      	movs	r2, r3
 800c036:	3210      	adds	r2, #16
 800c038:	631a      	str	r2, [r3, #48]	; 0x30
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800c03a:	2000      	movs	r0, #0
}
 800c03c:	4770      	bx	lr
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800c03e:	4b18      	ldr	r3, [pc, #96]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	695a      	ldr	r2, [r3, #20]
 800c044:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800c046:	001a      	movs	r2, r3
 800c048:	3214      	adds	r2, #20
 800c04a:	631a      	str	r2, [r3, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 800c04c:	2000      	movs	r0, #0
            break;
 800c04e:	e7f5      	b.n	800c03c <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c050:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	699a      	ldr	r2, [r3, #24]
 800c056:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c058:	001a      	movs	r2, r3
 800c05a:	3218      	adds	r2, #24
 800c05c:	631a      	str	r2, [r3, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 800c05e:	2000      	movs	r0, #0
            break;
 800c060:	e7ec      	b.n	800c03c <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c062:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c06a:	2000      	movs	r0, #0
            break;
 800c06c:	e7e6      	b.n	800c03c <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c076:	2000      	movs	r0, #0
            break;
 800c078:	e7e0      	b.n	800c03c <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800c07a:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c082:	2000      	movs	r0, #0
            break;
 800c084:	e7da      	b.n	800c03c <GetLastFcntDown+0x20>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800c086:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <GetLastFcntDown+0x84>)
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08c:	600b      	str	r3, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c08e:	2000      	movs	r0, #0
            break;
 800c090:	e7d4      	b.n	800c03c <GetLastFcntDown+0x20>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c092:	200a      	movs	r0, #10
 800c094:	e7d2      	b.n	800c03c <GetLastFcntDown+0x20>
    if( lastDown == NULL )
 800c096:	2005      	movs	r0, #5
 800c098:	e7d0      	b.n	800c03c <GetLastFcntDown+0x20>
 800c09a:	46c0      	nop			; (mov r8, r8)
 800c09c:	080112c4 	.word	0x080112c4
 800c0a0:	20000e70 	.word	0x20000e70

0800c0a4 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	000c      	movs	r4, r1
    uint32_t lastDown = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c0ae:	a901      	add	r1, sp, #4
 800c0b0:	f7ff ffb4 	bl	800c01c <GetLastFcntDown>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d108      	bne.n	800c0ca <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	42a3      	cmp	r3, r4
 800c0bc:	d308      	bcc.n	800c0d0 <CheckFCntDown+0x2c>
 800c0be:	3301      	adds	r3, #1
 800c0c0:	d001      	beq.n	800c0c6 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	e002      	b.n	800c0cc <CheckFCntDown+0x28>
        return true;
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	e000      	b.n	800c0cc <CheckFCntDown+0x28>
        return false;
 800c0ca:	2000      	movs	r0, #0
    }
}
 800c0cc:	b002      	add	sp, #8
 800c0ce:	bd10      	pop	{r4, pc}
        return true;
 800c0d0:	2001      	movs	r0, #1
 800c0d2:	e7fb      	b.n	800c0cc <CheckFCntDown+0x28>

0800c0d4 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c0d4:	b510      	push	{r4, lr}
    switch( fCntID )
 800c0d6:	2807      	cmp	r0, #7
 800c0d8:	d806      	bhi.n	800c0e8 <UpdateFCntDown+0x14>
 800c0da:	0080      	lsls	r0, r0, #2
 800c0dc:	4b10      	ldr	r3, [pc, #64]	; (800c120 <UpdateFCntDown+0x4c>)
 800c0de:	581b      	ldr	r3, [r3, r0]
 800c0e0:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800c0e2:	4b10      	ldr	r3, [pc, #64]	; (800c124 <UpdateFCntDown+0x50>)
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	6119      	str	r1, [r3, #16]
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
        default:
            break;
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c0e8:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <UpdateFCntDown+0x50>)
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	4798      	blx	r3
}
 800c0ee:	bd10      	pop	{r4, pc}
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800c0f0:	4b0c      	ldr	r3, [pc, #48]	; (800c124 <UpdateFCntDown+0x50>)
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	6159      	str	r1, [r3, #20]
            break;
 800c0f6:	e7f7      	b.n	800c0e8 <UpdateFCntDown+0x14>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800c0f8:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <UpdateFCntDown+0x50>)
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	6199      	str	r1, [r3, #24]
            break;
 800c0fe:	e7f3      	b.n	800c0e8 <UpdateFCntDown+0x14>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800c100:	4b08      	ldr	r3, [pc, #32]	; (800c124 <UpdateFCntDown+0x50>)
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	61d9      	str	r1, [r3, #28]
            break;
 800c106:	e7ef      	b.n	800c0e8 <UpdateFCntDown+0x14>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <UpdateFCntDown+0x50>)
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	6219      	str	r1, [r3, #32]
            break;
 800c10e:	e7eb      	b.n	800c0e8 <UpdateFCntDown+0x14>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 800c110:	4b04      	ldr	r3, [pc, #16]	; (800c124 <UpdateFCntDown+0x50>)
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	6259      	str	r1, [r3, #36]	; 0x24
            break;
 800c116:	e7e7      	b.n	800c0e8 <UpdateFCntDown+0x14>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800c118:	4b02      	ldr	r3, [pc, #8]	; (800c124 <UpdateFCntDown+0x50>)
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	6299      	str	r1, [r3, #40]	; 0x28
            break;
 800c11e:	e7e3      	b.n	800c0e8 <UpdateFCntDown+0x14>
 800c120:	080112e4 	.word	0x080112e4
 800c124:	20000e70 	.word	0x20000e70

0800c128 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 800c128:	b510      	push	{r4, lr}

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c12a:	4909      	ldr	r1, [pc, #36]	; (800c150 <ResetFCnts+0x28>)
 800c12c:	684b      	ldr	r3, [r1, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c132:	3a01      	subs	r2, #1
 800c134:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c136:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c138:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c13a:	0018      	movs	r0, r3
 800c13c:	3018      	adds	r0, #24
 800c13e:	6318      	str	r0, [r3, #48]	; 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800c140:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800c142:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800c144:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800c146:	629a      	str	r2, [r3, #40]	; 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c148:	688b      	ldr	r3, [r1, #8]
 800c14a:	4798      	blx	r3
}
 800c14c:	bd10      	pop	{r4, pc}
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	20000e70 	.word	0x20000e70

0800c154 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800c154:	4770      	bx	lr

0800c156 <ComputeCmacB0>:
{
 800c156:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c158:	b089      	sub	sp, #36	; 0x24
 800c15a:	0006      	movs	r6, r0
 800c15c:	000c      	movs	r4, r1
 800c15e:	0015      	movs	r5, r2
 800c160:	001a      	movs	r2, r3
 800c162:	a90e      	add	r1, sp, #56	; 0x38
 800c164:	780b      	ldrb	r3, [r1, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c166:	2800      	cmp	r0, #0
 800c168:	d01c      	beq.n	800c1a4 <ComputeCmacB0+0x4e>
 800c16a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c16c:	2900      	cmp	r1, #0
 800c16e:	d01b      	beq.n	800c1a8 <ComputeCmacB0+0x52>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c170:	2180      	movs	r1, #128	; 0x80
 800c172:	0049      	lsls	r1, r1, #1
 800c174:	428c      	cmp	r4, r1
 800c176:	d819      	bhi.n	800c1ac <ComputeCmacB0+0x56>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c178:	af04      	add	r7, sp, #16
 800c17a:	9702      	str	r7, [sp, #8]
 800c17c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c17e:	9101      	str	r1, [sp, #4]
 800c180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c182:	9100      	str	r1, [sp, #0]
 800c184:	0029      	movs	r1, r5
 800c186:	0020      	movs	r0, r4
 800c188:	f7ff ff00 	bl	800bf8c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c18c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	002b      	movs	r3, r5
 800c192:	0022      	movs	r2, r4
 800c194:	0031      	movs	r1, r6
 800c196:	0038      	movs	r0, r7
 800c198:	f7fb fe40 	bl	8007e1c <SecureElementComputeAesCmac>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d107      	bne.n	800c1b0 <ComputeCmacB0+0x5a>
}
 800c1a0:	b009      	add	sp, #36	; 0x24
 800c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c1a4:	200a      	movs	r0, #10
 800c1a6:	e7fb      	b.n	800c1a0 <ComputeCmacB0+0x4a>
 800c1a8:	200a      	movs	r0, #10
 800c1aa:	e7f9      	b.n	800c1a0 <ComputeCmacB0+0x4a>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c1ac:	200e      	movs	r0, #14
 800c1ae:	e7f7      	b.n	800c1a0 <ComputeCmacB0+0x4a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c1b0:	200f      	movs	r0, #15
 800c1b2:	e7f5      	b.n	800c1a0 <ComputeCmacB0+0x4a>

0800c1b4 <PayloadEncrypt>:
{
 800c1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1b6:	46d6      	mov	lr, sl
 800c1b8:	464f      	mov	r7, r9
 800c1ba:	4646      	mov	r6, r8
 800c1bc:	b5c0      	push	{r6, r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	0005      	movs	r5, r0
 800c1c2:	000c      	movs	r4, r1
 800c1c4:	4690      	mov	r8, r2
 800c1c6:	001f      	movs	r7, r3
 800c1c8:	ab10      	add	r3, sp, #64	; 0x40
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	469a      	mov	sl, r3
 800c1ce:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( buffer == 0 )
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d055      	beq.n	800c280 <PayloadEncrypt+0xcc>
    uint8_t sBlock[16] = { 0 };
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4699      	mov	r9, r3
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	220c      	movs	r2, #12
 800c1dc:	2100      	movs	r1, #0
 800c1de:	a805      	add	r0, sp, #20
 800c1e0:	f003 fed0 	bl	800ff84 <memset>
    uint8_t aBlock[16] = { 0 };
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	220c      	movs	r2, #12
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	a801      	add	r0, sp, #4
 800c1ee:	f003 fec9 	bl	800ff84 <memset>
    aBlock[0] = 0x01;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	466a      	mov	r2, sp
 800c1f6:	7013      	strb	r3, [r2, #0]
    aBlock[5] = dir;
 800c1f8:	466b      	mov	r3, sp
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	715a      	strb	r2, [r3, #5]
    aBlock[6] = address & 0xFF;
 800c1fe:	719f      	strb	r7, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c200:	0a3b      	lsrs	r3, r7, #8
 800c202:	466a      	mov	r2, sp
 800c204:	71d3      	strb	r3, [r2, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c206:	0c3b      	lsrs	r3, r7, #16
 800c208:	7213      	strb	r3, [r2, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c20a:	0e3f      	lsrs	r7, r7, #24
 800c20c:	7257      	strb	r7, [r2, #9]
    aBlock[10] = frameCounter & 0xFF;
 800c20e:	7296      	strb	r6, [r2, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c210:	0a33      	lsrs	r3, r6, #8
 800c212:	72d3      	strb	r3, [r2, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c214:	0c33      	lsrs	r3, r6, #16
 800c216:	7313      	strb	r3, [r2, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c218:	0e36      	lsrs	r6, r6, #24
 800c21a:	7356      	strb	r6, [r2, #13]
    uint16_t ctr = 1;
 800c21c:	2301      	movs	r3, #1
 800c21e:	4699      	mov	r9, r3
    uint8_t bufferIndex = 0;
 800c220:	2600      	movs	r6, #0
    while( size > 0 )
 800c222:	e014      	b.n	800c24e <PayloadEncrypt+0x9a>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c224:	b21b      	sxth	r3, r3
 800c226:	429a      	cmp	r2, r3
 800c228:	da0d      	bge.n	800c246 <PayloadEncrypt+0x92>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c22a:	18b1      	adds	r1, r6, r2
 800c22c:	5c6b      	ldrb	r3, [r5, r1]
 800c22e:	af04      	add	r7, sp, #16
 800c230:	5cba      	ldrb	r2, [r7, r2]
 800c232:	4053      	eors	r3, r2
 800c234:	546b      	strb	r3, [r5, r1]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c236:	3001      	adds	r0, #1
 800c238:	b2c0      	uxtb	r0, r0
 800c23a:	0002      	movs	r2, r0
 800c23c:	1c23      	adds	r3, r4, #0
 800c23e:	2c10      	cmp	r4, #16
 800c240:	ddf0      	ble.n	800c224 <PayloadEncrypt+0x70>
 800c242:	2310      	movs	r3, #16
 800c244:	e7ee      	b.n	800c224 <PayloadEncrypt+0x70>
        size -= 16;
 800c246:	3c10      	subs	r4, #16
 800c248:	b224      	sxth	r4, r4
        bufferIndex += 16;
 800c24a:	3610      	adds	r6, #16
 800c24c:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800c24e:	2c00      	cmp	r4, #0
 800c250:	dd0f      	ble.n	800c272 <PayloadEncrypt+0xbe>
        aBlock[15] = ctr & 0xFF;
 800c252:	466b      	mov	r3, sp
 800c254:	464a      	mov	r2, r9
 800c256:	73da      	strb	r2, [r3, #15]
        ctr++;
 800c258:	1c57      	adds	r7, r2, #1
 800c25a:	b2bb      	uxth	r3, r7
 800c25c:	4699      	mov	r9, r3
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c25e:	ab04      	add	r3, sp, #16
 800c260:	4642      	mov	r2, r8
 800c262:	2110      	movs	r1, #16
 800c264:	4668      	mov	r0, sp
 800c266:	f7fb fdfd 	bl	8007e64 <SecureElementAesEncrypt>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d0e5      	beq.n	800c23a <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c26e:	200f      	movs	r0, #15
 800c270:	e000      	b.n	800c274 <PayloadEncrypt+0xc0>
    return LORAMAC_CRYPTO_SUCCESS;
 800c272:	2000      	movs	r0, #0
}
 800c274:	b008      	add	sp, #32
 800c276:	bce0      	pop	{r5, r6, r7}
 800c278:	46ba      	mov	sl, r7
 800c27a:	46b1      	mov	r9, r6
 800c27c:	46a8      	mov	r8, r5
 800c27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c280:	200a      	movs	r0, #10
 800c282:	e7f7      	b.n	800c274 <PayloadEncrypt+0xc0>

0800c284 <VerifyCmacB0>:
{
 800c284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c286:	46ce      	mov	lr, r9
 800c288:	b500      	push	{lr}
 800c28a:	b0ca      	sub	sp, #296	; 0x128
 800c28c:	0005      	movs	r5, r0
 800c28e:	000c      	movs	r4, r1
 800c290:	0016      	movs	r6, r2
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	ab50      	add	r3, sp, #320	; 0x140
 800c296:	7819      	ldrb	r1, [r3, #0]
 800c298:	4689      	mov	r9, r1
    if( msg == 0 )
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d028      	beq.n	800c2f0 <VerifyCmacB0+0x6c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c29e:	2380      	movs	r3, #128	; 0x80
 800c2a0:	005b      	lsls	r3, r3, #1
 800c2a2:	429c      	cmp	r4, r3
 800c2a4:	d826      	bhi.n	800c2f4 <VerifyCmacB0+0x70>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c2a6:	2288      	movs	r2, #136	; 0x88
 800c2a8:	af06      	add	r7, sp, #24
 800c2aa:	0052      	lsls	r2, r2, #1
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	0038      	movs	r0, r7
 800c2b0:	f002 fd51 	bl	800ed56 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c2b4:	9702      	str	r7, [sp, #8]
 800c2b6:	9952      	ldr	r1, [sp, #328]	; 0x148
 800c2b8:	9101      	str	r1, [sp, #4]
 800c2ba:	9951      	ldr	r1, [sp, #324]	; 0x144
 800c2bc:	9100      	str	r1, [sp, #0]
 800c2be:	464b      	mov	r3, r9
 800c2c0:	9a05      	ldr	r2, [sp, #20]
 800c2c2:	0031      	movs	r1, r6
 800c2c4:	0020      	movs	r0, r4
 800c2c6:	f7ff fe61 	bl	800bf8c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c2ca:	0022      	movs	r2, r4
 800c2cc:	0029      	movs	r1, r5
 800c2ce:	a80a      	add	r0, sp, #40	; 0x28
 800c2d0:	f002 fd29 	bl	800ed26 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c2d4:	0021      	movs	r1, r4
 800c2d6:	3110      	adds	r1, #16
 800c2d8:	b289      	uxth	r1, r1
 800c2da:	0033      	movs	r3, r6
 800c2dc:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 800c2de:	0038      	movs	r0, r7
 800c2e0:	f7fb fda8 	bl	8007e34 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d006      	beq.n	800c2f6 <VerifyCmacB0+0x72>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c2e8:	2801      	cmp	r0, #1
 800c2ea:	d004      	beq.n	800c2f6 <VerifyCmacB0+0x72>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c2ec:	200f      	movs	r0, #15
 800c2ee:	e002      	b.n	800c2f6 <VerifyCmacB0+0x72>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2f0:	200a      	movs	r0, #10
 800c2f2:	e000      	b.n	800c2f6 <VerifyCmacB0+0x72>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c2f4:	200e      	movs	r0, #14
}
 800c2f6:	b04a      	add	sp, #296	; 0x128
 800c2f8:	bc80      	pop	{r7}
 800c2fa:	46b9      	mov	r9, r7
 800c2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c300 <DeriveSessionKey10x>:
{
 800c300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c302:	b085      	sub	sp, #20
 800c304:	0004      	movs	r4, r0
 800c306:	000d      	movs	r5, r1
 800c308:	0016      	movs	r6, r2
 800c30a:	001f      	movs	r7, r3
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 800c30c:	2900      	cmp	r1, #0
 800c30e:	d039      	beq.n	800c384 <DeriveSessionKey10x+0x84>
 800c310:	2a00      	cmp	r2, #0
 800c312:	d039      	beq.n	800c388 <DeriveSessionKey10x+0x88>
 800c314:	2b00      	cmp	r3, #0
 800c316:	d039      	beq.n	800c38c <DeriveSessionKey10x+0x8c>
    uint8_t compBase[16] = { 0 };
 800c318:	2300      	movs	r3, #0
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	220c      	movs	r2, #12
 800c31e:	2100      	movs	r1, #0
 800c320:	a801      	add	r0, sp, #4
 800c322:	f003 fe2f 	bl	800ff84 <memset>
    switch( keyID )
 800c326:	2c07      	cmp	r4, #7
 800c328:	d905      	bls.n	800c336 <DeriveSessionKey10x+0x36>
 800c32a:	2c08      	cmp	r4, #8
 800c32c:	d108      	bne.n	800c340 <DeriveSessionKey10x+0x40>
            compBase[0] = 0x02;
 800c32e:	2302      	movs	r3, #2
 800c330:	466a      	mov	r2, sp
 800c332:	7013      	strb	r3, [r2, #0]
            break;
 800c334:	e009      	b.n	800c34a <DeriveSessionKey10x+0x4a>
    switch( keyID )
 800c336:	2c05      	cmp	r4, #5
 800c338:	d204      	bcs.n	800c344 <DeriveSessionKey10x+0x44>
 800c33a:	200b      	movs	r0, #11
}
 800c33c:	b005      	add	sp, #20
 800c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( keyID )
 800c340:	200b      	movs	r0, #11
 800c342:	e7fb      	b.n	800c33c <DeriveSessionKey10x+0x3c>
            compBase[0] = 0x01;
 800c344:	2301      	movs	r3, #1
 800c346:	466a      	mov	r2, sp
 800c348:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800c34a:	2203      	movs	r2, #3
 800c34c:	0029      	movs	r1, r5
 800c34e:	466b      	mov	r3, sp
 800c350:	1c58      	adds	r0, r3, #1
 800c352:	f002 fce8 	bl	800ed26 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800c356:	2203      	movs	r2, #3
 800c358:	0031      	movs	r1, r6
 800c35a:	a801      	add	r0, sp, #4
 800c35c:	f002 fce3 	bl	800ed26 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800c360:	2202      	movs	r2, #2
 800c362:	0039      	movs	r1, r7
 800c364:	466b      	mov	r3, sp
 800c366:	1dd8      	adds	r0, r3, #7
 800c368:	f002 fcdd 	bl	800ed26 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c36c:	4b08      	ldr	r3, [pc, #32]	; (800c390 <DeriveSessionKey10x+0x90>)
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	6818      	ldr	r0, [r3, #0]
 800c372:	0023      	movs	r3, r4
 800c374:	2202      	movs	r2, #2
 800c376:	4669      	mov	r1, sp
 800c378:	f7fb fe0c 	bl	8007f94 <SecureElementDeriveAndStoreKey>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d0dd      	beq.n	800c33c <DeriveSessionKey10x+0x3c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c380:	200f      	movs	r0, #15
 800c382:	e7db      	b.n	800c33c <DeriveSessionKey10x+0x3c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c384:	200a      	movs	r0, #10
 800c386:	e7d9      	b.n	800c33c <DeriveSessionKey10x+0x3c>
 800c388:	200a      	movs	r0, #10
 800c38a:	e7d7      	b.n	800c33c <DeriveSessionKey10x+0x3c>
 800c38c:	200a      	movs	r0, #10
 800c38e:	e7d5      	b.n	800c33c <DeriveSessionKey10x+0x3c>
 800c390:	20000e70 	.word	0x20000e70

0800c394 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 800c394:	b510      	push	{r4, lr}
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800c396:	4b0e      	ldr	r3, [pc, #56]	; (800c3d0 <LoRaMacCryptoInit+0x3c>)
 800c398:	001a      	movs	r2, r3
 800c39a:	320c      	adds	r2, #12
 800c39c:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d012      	beq.n	800c3c8 <LoRaMacCryptoInit+0x34>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 800c3a2:	6098      	str	r0, [r3, #8]
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800c3a4:	4c0a      	ldr	r4, [pc, #40]	; (800c3d0 <LoRaMacCryptoInit+0x3c>)
 800c3a6:	0020      	movs	r0, r4
 800c3a8:	300c      	adds	r0, #12
 800c3aa:	2234      	movs	r2, #52	; 0x34
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	f002 fcd2 	bl	800ed56 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800c3b8:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 800c3ba:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800c3bc:	2200      	movs	r2, #0
 800c3be:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800c3c0:	f7ff feb2 	bl	800c128 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	bd10      	pop	{r4, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800c3c8:	4b01      	ldr	r3, [pc, #4]	; (800c3d0 <LoRaMacCryptoInit+0x3c>)
 800c3ca:	4a02      	ldr	r2, [pc, #8]	; (800c3d4 <LoRaMacCryptoInit+0x40>)
 800c3cc:	609a      	str	r2, [r3, #8]
 800c3ce:	e7e9      	b.n	800c3a4 <LoRaMacCryptoInit+0x10>
 800c3d0:	20000e70 	.word	0x20000e70
 800c3d4:	0800c155 	.word	0x0800c155

0800c3d8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800c3d8:	4b02      	ldr	r3, [pc, #8]	; (800c3e4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800c3de:	2000      	movs	r0, #0
 800c3e0:	4770      	bx	lr
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	20000e70 	.word	0x20000e70

0800c3e8 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	1e01      	subs	r1, r0, #0
    // Restore module context
    if( cryptoNvmCtx != 0 )
 800c3ec:	d006      	beq.n	800c3fc <LoRaMacCryptoRestoreNvmCtx+0x14>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800c3ee:	4804      	ldr	r0, [pc, #16]	; (800c400 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800c3f0:	2234      	movs	r2, #52	; 0x34
 800c3f2:	300c      	adds	r0, #12
 800c3f4:	f002 fc97 	bl	800ed26 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800c3f8:	2000      	movs	r0, #0
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
}
 800c3fa:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c3fc:	200a      	movs	r0, #10
 800c3fe:	e7fc      	b.n	800c3fa <LoRaMacCryptoRestoreNvmCtx+0x12>
 800c400:	20000e70 	.word	0x20000e70

0800c404 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800c404:	2334      	movs	r3, #52	; 0x34
 800c406:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800c40a:	300c      	adds	r0, #12
 800c40c:	4770      	bx	lr
 800c40e:	46c0      	nop			; (mov r8, r8)
 800c410:	20000e70 	.word	0x20000e70

0800c414 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800c414:	2800      	cmp	r0, #0
 800c416:	d006      	beq.n	800c426 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800c418:	4b04      	ldr	r3, [pc, #16]	; (800c42c <LoRaMacCryptoGetFCntUp+0x18>)
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	3301      	adds	r3, #1
 800c420:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800c422:	2000      	movs	r0, #0
}
 800c424:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c426:	200a      	movs	r0, #10
 800c428:	e7fc      	b.n	800c424 <LoRaMacCryptoGetFCntUp+0x10>
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	20000e70 	.word	0x20000e70

0800c430 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	000e      	movs	r6, r1
 800c436:	0015      	movs	r5, r2
 800c438:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d034      	beq.n	800c4ac <LoRaMacCryptoGetFCntDown+0x7c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c442:	a901      	add	r1, sp, #4
 800c444:	f7ff fdea 	bl	800c01c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c448:	2800      	cmp	r0, #0
 800c44a:	d117      	bne.n	800c47c <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800c44c:	9a01      	ldr	r2, [sp, #4]
 800c44e:	1c53      	adds	r3, r2, #1
 800c450:	d016      	beq.n	800c480 <LoRaMacCryptoGetFCntDown+0x50>
         *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c452:	0413      	lsls	r3, r2, #16
 800c454:	0c1b      	lsrs	r3, r3, #16
 800c456:	1aeb      	subs	r3, r5, r3

        if( fCntDiff > 0 )
 800c458:	2b00      	cmp	r3, #0
 800c45a:	dd13      	ble.n	800c484 <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800c45c:	18d2      	adds	r2, r2, r3
 800c45e:	6022      	str	r2, [r4, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c460:	4b13      	ldr	r3, [pc, #76]	; (800c4b0 <LoRaMacCryptoGetFCntDown+0x80>)
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	789d      	ldrb	r5, [r3, #2]
 800c466:	2d00      	cmp	r5, #0
 800c468:	d108      	bne.n	800c47c <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	2300      	movs	r3, #0
 800c46e:	9801      	ldr	r0, [sp, #4]
 800c470:	2100      	movs	r1, #0
 800c472:	1a12      	subs	r2, r2, r0
 800c474:	418b      	sbcs	r3, r1
 800c476:	4299      	cmp	r1, r3
 800c478:	dd12      	ble.n	800c4a0 <LoRaMacCryptoGetFCntDown+0x70>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c47a:	0028      	movs	r0, r5
}
 800c47c:	b002      	add	sp, #8
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
         *currentDown = frameFcnt;
 800c480:	6025      	str	r5, [r4, #0]
 800c482:	e7ed      	b.n	800c460 <LoRaMacCryptoGetFCntDown+0x30>
        else if( fCntDiff == 0 )
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <LoRaMacCryptoGetFCntDown+0x6a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c488:	0c12      	lsrs	r2, r2, #16
 800c48a:	0412      	lsls	r2, r2, #16
 800c48c:	1955      	adds	r5, r2, r5
 800c48e:	2380      	movs	r3, #128	; 0x80
 800c490:	025b      	lsls	r3, r3, #9
 800c492:	469c      	mov	ip, r3
 800c494:	4465      	add	r5, ip
 800c496:	6025      	str	r5, [r4, #0]
 800c498:	e7e2      	b.n	800c460 <LoRaMacCryptoGetFCntDown+0x30>
            *currentDown = lastDown;
 800c49a:	6022      	str	r2, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c49c:	2007      	movs	r0, #7
 800c49e:	e7ed      	b.n	800c47c <LoRaMacCryptoGetFCntDown+0x4c>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800c4a0:	4299      	cmp	r1, r3
 800c4a2:	d101      	bne.n	800c4a8 <LoRaMacCryptoGetFCntDown+0x78>
 800c4a4:	4296      	cmp	r6, r2
 800c4a6:	d8e8      	bhi.n	800c47a <LoRaMacCryptoGetFCntDown+0x4a>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800c4a8:	2008      	movs	r0, #8
 800c4aa:	e7e7      	b.n	800c47c <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c4ac:	200a      	movs	r0, #10
 800c4ae:	e7e5      	b.n	800c47c <LoRaMacCryptoGetFCntDown+0x4c>
 800c4b0:	20000e70 	.word	0x20000e70

0800c4b4 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d00d      	beq.n	800c4d4 <LoRaMacCryptoSetMulticastReference+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c4b8:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <LoRaMacCryptoSetMulticastReference+0x24>)
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	001a      	movs	r2, r3
 800c4be:	321c      	adds	r2, #28
 800c4c0:	61c2      	str	r2, [r0, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800c4c2:	3204      	adds	r2, #4
 800c4c4:	6442      	str	r2, [r0, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800c4c6:	3204      	adds	r2, #4
 800c4c8:	66c2      	str	r2, [r0, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800c4ca:	3328      	adds	r3, #40	; 0x28
 800c4cc:	2294      	movs	r2, #148	; 0x94
 800c4ce:	5083      	str	r3, [r0, r2]

    return LORAMAC_CRYPTO_SUCCESS;
 800c4d0:	2000      	movs	r0, #0
}
 800c4d2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c4d4:	200a      	movs	r0, #10
 800c4d6:	e7fc      	b.n	800c4d2 <LoRaMacCryptoSetMulticastReference+0x1e>
 800c4d8:	20000e70 	.word	0x20000e70

0800c4dc <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c4dc:	b530      	push	{r4, r5, lr}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	1e04      	subs	r4, r0, #0
    if( macMsg == 0 )
 800c4e2:	d023      	beq.n	800c52c <LoRaMacCryptoPrepareJoinRequest+0x50>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800c4e8:	a803      	add	r0, sp, #12
 800c4ea:	f7fb fd81 	bl	8007ff0 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800c4ee:	4d13      	ldr	r5, [pc, #76]	; (800c53c <LoRaMacCryptoPrepareJoinRequest+0x60>)
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	686a      	ldr	r2, [r5, #4]
 800c4f4:	8093      	strh	r3, [r2, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c4f6:	68ab      	ldr	r3, [r5, #8]
 800c4f8:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800c4fa:	686b      	ldr	r3, [r5, #4]
 800c4fc:	889b      	ldrh	r3, [r3, #4]
 800c4fe:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c500:	0020      	movs	r0, r4
 800c502:	f000 fabe 	bl	800ca82 <LoRaMacSerializerJoinRequest>
 800c506:	2800      	cmp	r0, #0
 800c508:	d112      	bne.n	800c530 <LoRaMacCryptoPrepareJoinRequest+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c50a:	0023      	movs	r3, r4
 800c50c:	3318      	adds	r3, #24
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	2302      	movs	r3, #2
 800c512:	2213      	movs	r2, #19
 800c514:	6821      	ldr	r1, [r4, #0]
 800c516:	f7fb fc81 	bl	8007e1c <SecureElementComputeAesCmac>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d10b      	bne.n	800c536 <LoRaMacCryptoPrepareJoinRequest+0x5a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c51e:	0020      	movs	r0, r4
 800c520:	f000 faaf 	bl	800ca82 <LoRaMacSerializerJoinRequest>
 800c524:	2800      	cmp	r0, #0
 800c526:	d004      	beq.n	800c532 <LoRaMacCryptoPrepareJoinRequest+0x56>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c528:	2011      	movs	r0, #17
 800c52a:	e002      	b.n	800c532 <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c52c:	200a      	movs	r0, #10
 800c52e:	e000      	b.n	800c532 <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c530:	2011      	movs	r0, #17
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c532:	b005      	add	sp, #20
 800c534:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c536:	200f      	movs	r0, #15
 800c538:	e7fb      	b.n	800c532 <LoRaMacCryptoPrepareJoinRequest+0x56>
 800c53a:	46c0      	nop			; (mov r8, r8)
 800c53c:	20000e70 	.word	0x20000e70

0800c540 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800c540:	b530      	push	{r4, r5, lr}
 800c542:	b085      	sub	sp, #20
 800c544:	0005      	movs	r5, r0
 800c546:	1e1c      	subs	r4, r3, #0
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800c548:	d03b      	beq.n	800c5c2 <LoRaMacCryptoSecureMessage+0x82>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c54a:	4b21      	ldr	r3, [pc, #132]	; (800c5d0 <LoRaMacCryptoSecureMessage+0x90>)
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	4283      	cmp	r3, r0
 800c552:	d838      	bhi.n	800c5c6 <LoRaMacCryptoSecureMessage+0x86>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800c554:	2220      	movs	r2, #32
 800c556:	5ca2      	ldrb	r2, [r4, r2]
 800c558:	2a00      	cmp	r2, #0
 800c55a:	d024      	beq.n	800c5a6 <LoRaMacCryptoSecureMessage+0x66>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800c55c:	2208      	movs	r2, #8
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c55e:	42ab      	cmp	r3, r5
 800c560:	d323      	bcc.n	800c5aa <LoRaMacCryptoSecureMessage+0x6a>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800c562:	4b1b      	ldr	r3, [pc, #108]	; (800c5d0 <LoRaMacCryptoSecureMessage+0x90>)
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	60d5      	str	r5, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c56c:	0020      	movs	r0, r4
 800c56e:	f000 fabe 	bl	800caee <LoRaMacSerializerData>
 800c572:	2800      	cmp	r0, #0
 800c574:	d129      	bne.n	800c5ca <LoRaMacCryptoSecureMessage+0x8a>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c576:	7921      	ldrb	r1, [r4, #4]
 800c578:	3904      	subs	r1, #4
 800c57a:	b289      	uxth	r1, r1
 800c57c:	0023      	movs	r3, r4
 800c57e:	332c      	adds	r3, #44	; 0x2c
 800c580:	9303      	str	r3, [sp, #12]
 800c582:	9502      	str	r5, [sp, #8]
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	2300      	movs	r3, #0
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	2207      	movs	r2, #7
 800c58e:	6820      	ldr	r0, [r4, #0]
 800c590:	f7ff fde1 	bl	800c156 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c594:	2800      	cmp	r0, #0
 800c596:	d119      	bne.n	800c5cc <LoRaMacCryptoSecureMessage+0x8c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c598:	0020      	movs	r0, r4
 800c59a:	f000 faa8 	bl	800caee <LoRaMacSerializerData>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d014      	beq.n	800c5cc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c5a2:	2011      	movs	r0, #17
 800c5a4:	e012      	b.n	800c5cc <LoRaMacCryptoSecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800c5a6:	2207      	movs	r2, #7
 800c5a8:	e7d9      	b.n	800c55e <LoRaMacCryptoSecureMessage+0x1e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c5aa:	2328      	movs	r3, #40	; 0x28
 800c5ac:	5ce1      	ldrb	r1, [r4, r3]
 800c5ae:	9501      	str	r5, [sp, #4]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	68a3      	ldr	r3, [r4, #8]
 800c5b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5b8:	f7ff fdfc 	bl	800c1b4 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d0d0      	beq.n	800c562 <LoRaMacCryptoSecureMessage+0x22>
 800c5c0:	e004      	b.n	800c5cc <LoRaMacCryptoSecureMessage+0x8c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c5c2:	200a      	movs	r0, #10
 800c5c4:	e002      	b.n	800c5cc <LoRaMacCryptoSecureMessage+0x8c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c5c6:	2006      	movs	r0, #6
 800c5c8:	e000      	b.n	800c5cc <LoRaMacCryptoSecureMessage+0x8c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c5ca:	2011      	movs	r0, #17
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c5cc:	b005      	add	sp, #20
 800c5ce:	bd30      	pop	{r4, r5, pc}
 800c5d0:	20000e70 	.word	0x20000e70

0800c5d4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800c5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d6:	46ce      	mov	lr, r9
 800c5d8:	b500      	push	{lr}
 800c5da:	b088      	sub	sp, #32
 800c5dc:	0005      	movs	r5, r0
 800c5de:	9105      	str	r1, [sp, #20]
 800c5e0:	0017      	movs	r7, r2
 800c5e2:	001c      	movs	r4, r3
 800c5e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800c5e6:	2e00      	cmp	r6, #0
 800c5e8:	d047      	beq.n	800c67a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	0010      	movs	r0, r2
 800c5ee:	f7ff fd59 	bl	800c0a4 <CheckFCntDown>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d043      	beq.n	800c67e <LoRaMacCryptoUnsecureMessage+0xaa>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c5f6:	0030      	movs	r0, r6
 800c5f8:	f000 f9e3 	bl	800c9c2 <LoRaMacParserData>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d144      	bne.n	800c68a <LoRaMacCryptoUnsecureMessage+0xb6>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800c600:	a907      	add	r1, sp, #28
 800c602:	0028      	movs	r0, r5
 800c604:	f7ff fcf4 	bl	800bff0 <GetKeyAddrItem>
 800c608:	1e05      	subs	r5, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c60a:	d139      	bne.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800c60c:	9b07      	ldr	r3, [sp, #28]
 800c60e:	785a      	ldrb	r2, [r3, #1]
 800c610:	4691      	mov	r9, r2
    micComputationKeyID = curItem->NwkSkey;
 800c612:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800c614:	68b0      	ldr	r0, [r6, #8]
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	4298      	cmp	r0, r3
 800c61a:	d138      	bne.n	800c68e <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c61c:	7b33      	ldrb	r3, [r6, #12]
 800c61e:	069b      	lsls	r3, r3, #26
 800c620:	0fdb      	lsrs	r3, r3, #31
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c622:	491c      	ldr	r1, [pc, #112]	; (800c694 <LoRaMacCryptoUnsecureMessage+0xc0>)
 800c624:	6849      	ldr	r1, [r1, #4]
 800c626:	7889      	ldrb	r1, [r1, #2]
 800c628:	2900      	cmp	r1, #0
 800c62a:	d100      	bne.n	800c62e <LoRaMacCryptoUnsecureMessage+0x5a>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800c62c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c62e:	7931      	ldrb	r1, [r6, #4]
 800c630:	3904      	subs	r1, #4
 800c632:	b289      	uxth	r1, r1
 800c634:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800c636:	9003      	str	r0, [sp, #12]
 800c638:	9402      	str	r4, [sp, #8]
 800c63a:	9805      	ldr	r0, [sp, #20]
 800c63c:	9001      	str	r0, [sp, #4]
 800c63e:	2001      	movs	r0, #1
 800c640:	9000      	str	r0, [sp, #0]
 800c642:	6830      	ldr	r0, [r6, #0]
 800c644:	f7ff fe1e 	bl	800c284 <VerifyCmacB0>
 800c648:	1e05      	subs	r5, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c64a:	d119      	bne.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800c64c:	2320      	movs	r3, #32
 800c64e:	5cf3      	ldrb	r3, [r6, r3]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <LoRaMacCryptoUnsecureMessage+0x84>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800c654:	3307      	adds	r3, #7
 800c656:	4699      	mov	r9, r3
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c658:	2328      	movs	r3, #40	; 0x28
 800c65a:	5cf1      	ldrb	r1, [r6, r3]
 800c65c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800c65e:	9401      	str	r4, [sp, #4]
 800c660:	3b27      	subs	r3, #39	; 0x27
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	9b05      	ldr	r3, [sp, #20]
 800c666:	464a      	mov	r2, r9
 800c668:	f7ff fda4 	bl	800c1b4 <PayloadEncrypt>
 800c66c:	1e05      	subs	r5, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c66e:	d107      	bne.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800c670:	0021      	movs	r1, r4
 800c672:	0038      	movs	r0, r7
 800c674:	f7ff fd2e 	bl	800c0d4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800c678:	e002      	b.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c67a:	250a      	movs	r5, #10
 800c67c:	e000      	b.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c67e:	2506      	movs	r5, #6
}
 800c680:	0028      	movs	r0, r5
 800c682:	b008      	add	sp, #32
 800c684:	bc80      	pop	{r7}
 800c686:	46b9      	mov	r9, r7
 800c688:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c68a:	2510      	movs	r5, #16
 800c68c:	e7f8      	b.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c68e:	2502      	movs	r5, #2
 800c690:	e7f6      	b.n	800c680 <LoRaMacCryptoUnsecureMessage+0xac>
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	20000e70 	.word	0x20000e70

0800c698 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 800c698:	b510      	push	{r4, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	1e04      	subs	r4, r0, #0
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800c69e:	d104      	bne.n	800c6aa <LoRaMacCryptoDeriveMcRootKey+0x12>
 800c6a0:	4b15      	ldr	r3, [pc, #84]	; (800c6f8 <LoRaMacCryptoDeriveMcRootKey+0x60>)
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	789b      	ldrb	r3, [r3, #2]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d022      	beq.n	800c6f0 <LoRaMacCryptoDeriveMcRootKey+0x58>
 800c6aa:	2c01      	cmp	r4, #1
 800c6ac:	d015      	beq.n	800c6da <LoRaMacCryptoDeriveMcRootKey+0x42>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	220c      	movs	r2, #12
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	a801      	add	r0, sp, #4
 800c6b8:	f003 fc64 	bl	800ff84 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	; (800c6f8 <LoRaMacCryptoDeriveMcRootKey+0x60>)
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	789a      	ldrb	r2, [r3, #2]
 800c6c2:	2a01      	cmp	r2, #1
 800c6c4:	d010      	beq.n	800c6e8 <LoRaMacCryptoDeriveMcRootKey+0x50>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	2309      	movs	r3, #9
 800c6ca:	0022      	movs	r2, r4
 800c6cc:	4669      	mov	r1, sp
 800c6ce:	f7fb fc61 	bl	8007f94 <SecureElementDeriveAndStoreKey>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d10e      	bne.n	800c6f4 <LoRaMacCryptoDeriveMcRootKey+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c6d6:	b004      	add	sp, #16
 800c6d8:	bd10      	pop	{r4, pc}
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 800c6da:	4b07      	ldr	r3, [pc, #28]	; (800c6f8 <LoRaMacCryptoDeriveMcRootKey+0x60>)
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	789b      	ldrb	r3, [r3, #2]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d1e4      	bne.n	800c6ae <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c6e4:	200b      	movs	r0, #11
 800c6e6:	e7f6      	b.n	800c6d6 <LoRaMacCryptoDeriveMcRootKey+0x3e>
        compBase[0] = 0x20;
 800c6e8:	321f      	adds	r2, #31
 800c6ea:	4669      	mov	r1, sp
 800c6ec:	700a      	strb	r2, [r1, #0]
 800c6ee:	e7ea      	b.n	800c6c6 <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c6f0:	200b      	movs	r0, #11
 800c6f2:	e7f0      	b.n	800c6d6 <LoRaMacCryptoDeriveMcRootKey+0x3e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c6f4:	200f      	movs	r0, #15
 800c6f6:	e7ee      	b.n	800c6d6 <LoRaMacCryptoDeriveMcRootKey+0x3e>
 800c6f8:	20000e70 	.word	0x20000e70

0800c6fc <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	0004      	movs	r4, r0
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800c702:	2809      	cmp	r0, #9
 800c704:	d002      	beq.n	800c70c <LoRaMacCryptoDeriveMcKEKey+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c706:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c708:	b004      	add	sp, #16
 800c70a:	bd10      	pop	{r4, pc}
    uint8_t compBase[16] = { 0 };
 800c70c:	2300      	movs	r3, #0
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	220c      	movs	r2, #12
 800c712:	2100      	movs	r1, #0
 800c714:	a801      	add	r0, sp, #4
 800c716:	f003 fc35 	bl	800ff84 <memset>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c71a:	4b06      	ldr	r3, [pc, #24]	; (800c734 <LoRaMacCryptoDeriveMcKEKey+0x38>)
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	6818      	ldr	r0, [r3, #0]
 800c720:	237f      	movs	r3, #127	; 0x7f
 800c722:	0022      	movs	r2, r4
 800c724:	4669      	mov	r1, sp
 800c726:	f7fb fc35 	bl	8007f94 <SecureElementDeriveAndStoreKey>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d0ec      	beq.n	800c708 <LoRaMacCryptoDeriveMcKEKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c72e:	200f      	movs	r0, #15
 800c730:	e7ea      	b.n	800c708 <LoRaMacCryptoDeriveMcKEKey+0xc>
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	20000e70 	.word	0x20000e70

0800c738 <LoRaMacCryptoSetKey>:
{
 800c738:	b510      	push	{r4, lr}
 800c73a:	0004      	movs	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c73c:	f7fb fbd0 	bl	8007ee0 <SecureElementSetKey>
 800c740:	2800      	cmp	r0, #0
 800c742:	d10e      	bne.n	800c762 <LoRaMacCryptoSetKey+0x2a>
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 800c744:	2c01      	cmp	r4, #1
 800c746:	d900      	bls.n	800c74a <LoRaMacCryptoSetKey+0x12>
}
 800c748:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800c74a:	0020      	movs	r0, r4
 800c74c:	f7ff ffa4 	bl	800c698 <LoRaMacCryptoDeriveMcRootKey>
 800c750:	2800      	cmp	r0, #0
 800c752:	d108      	bne.n	800c766 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c754:	3009      	adds	r0, #9
 800c756:	f7ff ffd1 	bl	800c6fc <LoRaMacCryptoDeriveMcKEKey>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0f4      	beq.n	800c748 <LoRaMacCryptoSetKey+0x10>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c75e:	200f      	movs	r0, #15
 800c760:	e7f2      	b.n	800c748 <LoRaMacCryptoSetKey+0x10>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c762:	200f      	movs	r0, #15
 800c764:	e7f0      	b.n	800c748 <LoRaMacCryptoSetKey+0x10>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c766:	200f      	movs	r0, #15
 800c768:	e7ee      	b.n	800c748 <LoRaMacCryptoSetKey+0x10>
	...

0800c76c <LoRaMacCryptoHandleJoinAccept>:
{
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	46ce      	mov	lr, r9
 800c770:	4647      	mov	r7, r8
 800c772:	b580      	push	{r7, lr}
 800c774:	b0c5      	sub	sp, #276	; 0x114
 800c776:	0006      	movs	r6, r0
 800c778:	000d      	movs	r5, r1
 800c77a:	1e14      	subs	r4, r2, #0
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c77c:	d100      	bne.n	800c780 <LoRaMacCryptoHandleJoinAccept+0x14>
 800c77e:	e0bb      	b.n	800c8f8 <LoRaMacCryptoHandleJoinAccept+0x18c>
 800c780:	2900      	cmp	r1, #0
 800c782:	d100      	bne.n	800c786 <LoRaMacCryptoHandleJoinAccept+0x1a>
 800c784:	e0ba      	b.n	800c8fc <LoRaMacCryptoHandleJoinAccept+0x190>
    if( joinReqType == JOIN_REQ )
 800c786:	28ff      	cmp	r0, #255	; 0xff
 800c788:	d100      	bne.n	800c78c <LoRaMacCryptoHandleJoinAccept+0x20>
 800c78a:	e07f      	b.n	800c88c <LoRaMacCryptoHandleJoinAccept+0x120>
    uint8_t micComputationOffset = 0;
 800c78c:	2700      	movs	r7, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800c78e:	7922      	ldrb	r2, [r4, #4]
 800c790:	b2bb      	uxth	r3, r7
 800c792:	4698      	mov	r8, r3
 800c794:	18ba      	adds	r2, r7, r2
 800c796:	2100      	movs	r1, #0
 800c798:	a801      	add	r0, sp, #4
 800c79a:	f002 fadc 	bl	800ed56 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800c79e:	7921      	ldrb	r1, [r4, #4]
 800c7a0:	ab01      	add	r3, sp, #4
 800c7a2:	469c      	mov	ip, r3
 800c7a4:	4467      	add	r7, ip
 800c7a6:	3901      	subs	r1, #1
 800c7a8:	b289      	uxth	r1, r1
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	1c58      	adds	r0, r3, #1
 800c7ae:	003b      	movs	r3, r7
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	f7fb fb57 	bl	8007e64 <SecureElementAesEncrypt>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d000      	beq.n	800c7bc <LoRaMacCryptoHandleJoinAccept+0x50>
 800c7ba:	e0a1      	b.n	800c900 <LoRaMacCryptoHandleJoinAccept+0x194>
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800c7bc:	7922      	ldrb	r2, [r4, #4]
 800c7be:	3a01      	subs	r2, #1
 800c7c0:	b292      	uxth	r2, r2
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	1c58      	adds	r0, r3, #1
 800c7c6:	0039      	movs	r1, r7
 800c7c8:	f002 faad 	bl	800ed26 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c7cc:	0020      	movs	r0, r4
 800c7ce:	f000 f8a9 	bl	800c924 <LoRaMacParserJoinAccept>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d000      	beq.n	800c7d8 <LoRaMacCryptoHandleJoinAccept+0x6c>
 800c7d6:	e09a      	b.n	800c90e <LoRaMacCryptoHandleJoinAccept+0x1a2>
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800c7d8:	2310      	movs	r3, #16
 800c7da:	56e3      	ldrsb	r3, [r4, r3]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	db57      	blt.n	800c890 <LoRaMacCryptoHandleJoinAccept+0x124>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 800c7e0:	4b4f      	ldr	r3, [pc, #316]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	4699      	mov	r9, r3
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c7ec:	4b4c      	ldr	r3, [pc, #304]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	789b      	ldrb	r3, [r3, #2]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d153      	bne.n	800c89e <LoRaMacCryptoHandleJoinAccept+0x132>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800c7f6:	7921      	ldrb	r1, [r4, #4]
 800c7f8:	3904      	subs	r1, #4
 800c7fa:	b289      	uxth	r1, r1
 800c7fc:	464b      	mov	r3, r9
 800c7fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c800:	6820      	ldr	r0, [r4, #0]
 800c802:	f7fb fb17 	bl	8007e34 <SecureElementVerifyAesCmac>
 800c806:	2800      	cmp	r0, #0
 800c808:	d000      	beq.n	800c80c <LoRaMacCryptoHandleJoinAccept+0xa0>
 800c80a:	e082      	b.n	800c912 <LoRaMacCryptoHandleJoinAccept+0x1a6>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 800c80c:	2001      	movs	r0, #1
 800c80e:	f7ff ff43 	bl	800c698 <LoRaMacCryptoDeriveMcRootKey>
 800c812:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c814:	d175      	bne.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800c816:	2009      	movs	r0, #9
 800c818:	f7ff ff70 	bl	800c6fc <LoRaMacCryptoDeriveMcKEKey>
 800c81c:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c81e:	d170      	bne.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c820:	1da6      	adds	r6, r4, #6
 800c822:	3409      	adds	r4, #9
 800c824:	4b3e      	ldr	r3, [pc, #248]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	3304      	adds	r3, #4
 800c82a:	0022      	movs	r2, r4
 800c82c:	0031      	movs	r1, r6
 800c82e:	2008      	movs	r0, #8
 800c830:	f7ff fd66 	bl	800c300 <DeriveSessionKey10x>
 800c834:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c836:	d164      	bne.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c838:	4b39      	ldr	r3, [pc, #228]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	3304      	adds	r3, #4
 800c83e:	0022      	movs	r2, r4
 800c840:	0031      	movs	r1, r6
 800c842:	2007      	movs	r0, #7
 800c844:	f7ff fd5c 	bl	800c300 <DeriveSessionKey10x>
 800c848:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c84a:	d15a      	bne.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c84c:	4b34      	ldr	r3, [pc, #208]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	3304      	adds	r3, #4
 800c852:	0022      	movs	r2, r4
 800c854:	0031      	movs	r1, r6
 800c856:	2005      	movs	r0, #5
 800c858:	f7ff fd52 	bl	800c300 <DeriveSessionKey10x>
 800c85c:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c85e:	d150      	bne.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800c860:	4b2f      	ldr	r3, [pc, #188]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	3304      	adds	r3, #4
 800c866:	0022      	movs	r2, r4
 800c868:	0031      	movs	r1, r6
 800c86a:	2006      	movs	r0, #6
 800c86c:	f7ff fd48 	bl	800c300 <DeriveSessionKey10x>
 800c870:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c872:	d146      	bne.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
    CryptoCtx.RJcount0 = 0;
 800c874:	4a2a      	ldr	r2, [pc, #168]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c876:	2100      	movs	r1, #0
 800c878:	8011      	strh	r1, [r2, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c87a:	6853      	ldr	r3, [r2, #4]
 800c87c:	60d9      	str	r1, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c87e:	3901      	subs	r1, #1
 800c880:	6199      	str	r1, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c882:	6119      	str	r1, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c884:	6159      	str	r1, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c886:	6893      	ldr	r3, [r2, #8]
 800c888:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800c88a:	e03a      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800c88c:	270c      	movs	r7, #12
 800c88e:	e77e      	b.n	800c78e <LoRaMacCryptoHandleJoinAccept+0x22>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800c890:	4b23      	ldr	r3, [pc, #140]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 800c898:	2303      	movs	r3, #3
 800c89a:	4699      	mov	r9, r3
 800c89c:	e7a6      	b.n	800c7ec <LoRaMacCryptoHandleJoinAccept+0x80>
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800c89e:	af01      	add	r7, sp, #4
 800c8a0:	703e      	strb	r6, [r7, #0]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c8a2:	2208      	movs	r2, #8
 800c8a4:	0029      	movs	r1, r5
 800c8a6:	466b      	mov	r3, sp
 800c8a8:	1d58      	adds	r0, r3, #5
 800c8aa:	f002 fa47 	bl	800ed3c <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800c8ae:	4b1c      	ldr	r3, [pc, #112]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	889a      	ldrh	r2, [r3, #4]
 800c8b4:	727a      	strb	r2, [r7, #9]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800c8b6:	889b      	ldrh	r3, [r3, #4]
 800c8b8:	0a1b      	lsrs	r3, r3, #8
 800c8ba:	72bb      	strb	r3, [r7, #10]
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800c8bc:	7963      	ldrb	r3, [r4, #5]
 800c8be:	72fb      	strb	r3, [r7, #11]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800c8c0:	7921      	ldrb	r1, [r4, #4]
 800c8c2:	4441      	add	r1, r8
 800c8c4:	3905      	subs	r1, #5
 800c8c6:	b289      	uxth	r1, r1
 800c8c8:	464b      	mov	r3, r9
 800c8ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c8cc:	a801      	add	r0, sp, #4
 800c8ce:	f7fb fab1 	bl	8007e34 <SecureElementVerifyAesCmac>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d11f      	bne.n	800c916 <LoRaMacCryptoHandleJoinAccept+0x1aa>
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800c8d6:	79a2      	ldrb	r2, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800c8d8:	79e3      	ldrb	r3, [r4, #7]
 800c8da:	021b      	lsls	r3, r3, #8
 800c8dc:	431a      	orrs	r2, r3
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800c8de:	7a23      	ldrb	r3, [r4, #8]
 800c8e0:	041b      	lsls	r3, r3, #16
 800c8e2:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800c8e4:	4a0e      	ldr	r2, [pc, #56]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c8e6:	6852      	ldr	r2, [r2, #4]
 800c8e8:	6891      	ldr	r1, [r2, #8]
 800c8ea:	4299      	cmp	r1, r3
 800c8ec:	d215      	bcs.n	800c91a <LoRaMacCryptoHandleJoinAccept+0x1ae>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800c8ee:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800c8f0:	4b0b      	ldr	r3, [pc, #44]	; (800c920 <LoRaMacCryptoHandleJoinAccept+0x1b4>)
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	4798      	blx	r3
 800c8f6:	e789      	b.n	800c80c <LoRaMacCryptoHandleJoinAccept+0xa0>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c8f8:	250a      	movs	r5, #10
 800c8fa:	e002      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
 800c8fc:	250a      	movs	r5, #10
 800c8fe:	e000      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c900:	250f      	movs	r5, #15
}
 800c902:	0028      	movs	r0, r5
 800c904:	b045      	add	sp, #276	; 0x114
 800c906:	bcc0      	pop	{r6, r7}
 800c908:	46b9      	mov	r9, r7
 800c90a:	46b0      	mov	r8, r6
 800c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c90e:	2510      	movs	r5, #16
 800c910:	e7f7      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c912:	250f      	movs	r5, #15
 800c914:	e7f5      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c916:	250f      	movs	r5, #15
 800c918:	e7f3      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c91a:	2503      	movs	r5, #3
 800c91c:	e7f1      	b.n	800c902 <LoRaMacCryptoHandleJoinAccept+0x196>
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	20000e70 	.word	0x20000e70

0800c924 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c928:	d045      	beq.n	800c9b6 <LoRaMacParserJoinAccept+0x92>
 800c92a:	6801      	ldr	r1, [r0, #0]
 800c92c:	2900      	cmp	r1, #0
 800c92e:	d044      	beq.n	800c9ba <LoRaMacParserJoinAccept+0x96>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c930:	780b      	ldrb	r3, [r1, #0]
 800c932:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c934:	3006      	adds	r0, #6
 800c936:	3101      	adds	r1, #1
 800c938:	2203      	movs	r2, #3
 800c93a:	f002 f9f4 	bl	800ed26 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	1d19      	adds	r1, r3, #4
 800c942:	2203      	movs	r2, #3
 800c944:	0020      	movs	r0, r4
 800c946:	3009      	adds	r0, #9
 800c948:	f002 f9ed 	bl	800ed26 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c94c:	6821      	ldr	r1, [r4, #0]
 800c94e:	79cb      	ldrb	r3, [r1, #7]
 800c950:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c952:	7a0a      	ldrb	r2, [r1, #8]
 800c954:	0212      	lsls	r2, r2, #8
 800c956:	4313      	orrs	r3, r2
 800c958:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c95a:	7a4a      	ldrb	r2, [r1, #9]
 800c95c:	0412      	lsls	r2, r2, #16
 800c95e:	4313      	orrs	r3, r2
 800c960:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c962:	7a8a      	ldrb	r2, [r1, #10]
 800c964:	0612      	lsls	r2, r2, #24
 800c966:	4313      	orrs	r3, r2
 800c968:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c96a:	7acb      	ldrb	r3, [r1, #11]
 800c96c:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c96e:	7b0b      	ldrb	r3, [r1, #12]
 800c970:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800c972:	7923      	ldrb	r3, [r4, #4]
 800c974:	2b21      	cmp	r3, #33	; 0x21
 800c976:	d016      	beq.n	800c9a6 <LoRaMacParserJoinAccept+0x82>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c978:	2b11      	cmp	r3, #17
 800c97a:	dc20      	bgt.n	800c9be <LoRaMacParserJoinAccept+0x9a>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c97c:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c97e:	6821      	ldr	r1, [r4, #0]
 800c980:	1c50      	adds	r0, r2, #1
 800c982:	5c8b      	ldrb	r3, [r1, r2]
 800c984:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c986:	1c95      	adds	r5, r2, #2
 800c988:	5c08      	ldrb	r0, [r1, r0]
 800c98a:	0200      	lsls	r0, r0, #8
 800c98c:	4303      	orrs	r3, r0
 800c98e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c990:	3203      	adds	r2, #3
 800c992:	5d48      	ldrb	r0, [r1, r5]
 800c994:	0400      	lsls	r0, r0, #16
 800c996:	4303      	orrs	r3, r0
 800c998:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c99a:	5c8a      	ldrb	r2, [r1, r2]
 800c99c:	0612      	lsls	r2, r2, #24
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c9a2:	2000      	movs	r0, #0
}
 800c9a4:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800c9a6:	310d      	adds	r1, #13
 800c9a8:	2210      	movs	r2, #16
 800c9aa:	0020      	movs	r0, r4
 800c9ac:	3012      	adds	r0, #18
 800c9ae:	f002 f9ba 	bl	800ed26 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800c9b2:	221d      	movs	r2, #29
 800c9b4:	e7e3      	b.n	800c97e <LoRaMacParserJoinAccept+0x5a>
        return LORAMAC_PARSER_ERROR_NPE;
 800c9b6:	2002      	movs	r0, #2
 800c9b8:	e7f4      	b.n	800c9a4 <LoRaMacParserJoinAccept+0x80>
 800c9ba:	2002      	movs	r0, #2
 800c9bc:	e7f2      	b.n	800c9a4 <LoRaMacParserJoinAccept+0x80>
        return LORAMAC_PARSER_FAIL;
 800c9be:	2001      	movs	r0, #1
 800c9c0:	e7f0      	b.n	800c9a4 <LoRaMacParserJoinAccept+0x80>

0800c9c2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800c9c2:	b570      	push	{r4, r5, r6, lr}
 800c9c4:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c9c6:	d058      	beq.n	800ca7a <LoRaMacParserData+0xb8>
 800c9c8:	6801      	ldr	r1, [r0, #0]
 800c9ca:	2900      	cmp	r1, #0
 800c9cc:	d057      	beq.n	800ca7e <LoRaMacParserData+0xbc>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c9ce:	780b      	ldrb	r3, [r1, #0]
 800c9d0:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c9d2:	784b      	ldrb	r3, [r1, #1]
 800c9d4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c9d6:	788a      	ldrb	r2, [r1, #2]
 800c9d8:	0212      	lsls	r2, r2, #8
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c9de:	78ca      	ldrb	r2, [r1, #3]
 800c9e0:	0412      	lsls	r2, r2, #16
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c9e6:	790a      	ldrb	r2, [r1, #4]
 800c9e8:	0612      	lsls	r2, r2, #24
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c9ee:	794b      	ldrb	r3, [r1, #5]
 800c9f0:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c9f2:	798b      	ldrb	r3, [r1, #6]
 800c9f4:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c9f6:	79ca      	ldrb	r2, [r1, #7]
 800c9f8:	0212      	lsls	r2, r2, #8
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c9fe:	3010      	adds	r0, #16
 800ca00:	3108      	adds	r1, #8
 800ca02:	7b22      	ldrb	r2, [r4, #12]
 800ca04:	0712      	lsls	r2, r2, #28
 800ca06:	0f12      	lsrs	r2, r2, #28
 800ca08:	f002 f98d 	bl	800ed26 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ca0c:	7b23      	ldrb	r3, [r4, #12]
 800ca0e:	071b      	lsls	r3, r3, #28
 800ca10:	0f1b      	lsrs	r3, r3, #28
 800ca12:	0018      	movs	r0, r3
 800ca14:	3008      	adds	r0, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800ca16:	2200      	movs	r2, #0
 800ca18:	2120      	movs	r1, #32
 800ca1a:	5462      	strb	r2, [r4, r1]
    macMsg->FRMPayloadSize = 0;
 800ca1c:	3108      	adds	r1, #8
 800ca1e:	5462      	strb	r2, [r4, r1]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ca20:	7922      	ldrb	r2, [r4, #4]
 800ca22:	1a11      	subs	r1, r2, r0
 800ca24:	2904      	cmp	r1, #4
 800ca26:	dc17      	bgt.n	800ca58 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ca28:	7922      	ldrb	r2, [r4, #4]
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	469c      	mov	ip, r3
 800ca2e:	4462      	add	r2, ip
 800ca30:	1f13      	subs	r3, r2, #4
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ca36:	1ed1      	subs	r1, r2, #3
 800ca38:	7809      	ldrb	r1, [r1, #0]
 800ca3a:	0209      	lsls	r1, r1, #8
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ca40:	1e91      	subs	r1, r2, #2
 800ca42:	7809      	ldrb	r1, [r1, #0]
 800ca44:	0409      	lsls	r1, r1, #16
 800ca46:	430b      	orrs	r3, r1
 800ca48:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800ca4a:	3a01      	subs	r2, #1
 800ca4c:	7812      	ldrb	r2, [r2, #0]
 800ca4e:	0612      	lsls	r2, r2, #24
 800ca50:	4313      	orrs	r3, r2
 800ca52:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800ca54:	2000      	movs	r0, #0
}
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ca58:	6821      	ldr	r1, [r4, #0]
 800ca5a:	3309      	adds	r3, #9
 800ca5c:	5c0d      	ldrb	r5, [r1, r0]
 800ca5e:	2020      	movs	r0, #32
 800ca60:	5425      	strb	r5, [r4, r0]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ca62:	1ad2      	subs	r2, r2, r3
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	3a04      	subs	r2, #4
 800ca68:	b2d2      	uxtb	r2, r2
 800ca6a:	3008      	adds	r0, #8
 800ca6c:	5422      	strb	r2, [r4, r0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800ca6e:	18c9      	adds	r1, r1, r3
 800ca70:	b292      	uxth	r2, r2
 800ca72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca74:	f002 f957 	bl	800ed26 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800ca78:	e7d6      	b.n	800ca28 <LoRaMacParserData+0x66>
        return LORAMAC_PARSER_ERROR_NPE;
 800ca7a:	2002      	movs	r0, #2
 800ca7c:	e7eb      	b.n	800ca56 <LoRaMacParserData+0x94>
 800ca7e:	2002      	movs	r0, #2
 800ca80:	e7e9      	b.n	800ca56 <LoRaMacParserData+0x94>

0800ca82 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800ca82:	b510      	push	{r4, lr}
 800ca84:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ca86:	d02c      	beq.n	800cae2 <LoRaMacSerializerJoinRequest+0x60>
 800ca88:	6803      	ldr	r3, [r0, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d02b      	beq.n	800cae6 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800ca8e:	7902      	ldrb	r2, [r0, #4]
 800ca90:	2a16      	cmp	r2, #22
 800ca92:	d92a      	bls.n	800caea <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ca94:	7942      	ldrb	r2, [r0, #5]
 800ca96:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ca98:	1d81      	adds	r1, r0, #6
 800ca9a:	6803      	ldr	r3, [r0, #0]
 800ca9c:	1c58      	adds	r0, r3, #1
 800ca9e:	2208      	movs	r2, #8
 800caa0:	f002 f94c 	bl	800ed3c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800caa4:	0021      	movs	r1, r4
 800caa6:	310e      	adds	r1, #14
 800caa8:	6820      	ldr	r0, [r4, #0]
 800caaa:	3009      	adds	r0, #9
 800caac:	2208      	movs	r2, #8
 800caae:	f002 f945 	bl	800ed3c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800cab2:	8ae3      	ldrh	r3, [r4, #22]
 800cab4:	6822      	ldr	r2, [r4, #0]
 800cab6:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800cab8:	8ae3      	ldrh	r3, [r4, #22]
 800caba:	0a1b      	lsrs	r3, r3, #8
 800cabc:	6822      	ldr	r2, [r4, #0]
 800cabe:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cac0:	69a3      	ldr	r3, [r4, #24]
 800cac2:	6822      	ldr	r2, [r4, #0]
 800cac4:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cac6:	69a3      	ldr	r3, [r4, #24]
 800cac8:	0a1b      	lsrs	r3, r3, #8
 800caca:	6822      	ldr	r2, [r4, #0]
 800cacc:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800cace:	8b63      	ldrh	r3, [r4, #26]
 800cad0:	6822      	ldr	r2, [r4, #0]
 800cad2:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cad4:	7ee3      	ldrb	r3, [r4, #27]
 800cad6:	6822      	ldr	r2, [r4, #0]
 800cad8:	7593      	strb	r3, [r2, #22]

    macMsg->BufSize = bufItr;
 800cada:	2317      	movs	r3, #23
 800cadc:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800cade:	2000      	movs	r0, #0
}
 800cae0:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cae2:	2001      	movs	r0, #1
 800cae4:	e7fc      	b.n	800cae0 <LoRaMacSerializerJoinRequest+0x5e>
 800cae6:	2001      	movs	r0, #1
 800cae8:	e7fa      	b.n	800cae0 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800caea:	2002      	movs	r0, #2
 800caec:	e7f8      	b.n	800cae0 <LoRaMacSerializerJoinRequest+0x5e>

0800caee <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800caee:	b570      	push	{r4, r5, r6, lr}
 800caf0:	1e04      	subs	r4, r0, #0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800caf2:	d100      	bne.n	800caf6 <LoRaMacSerializerData+0x8>
 800caf4:	e067      	b.n	800cbc6 <LoRaMacSerializerData+0xd8>
 800caf6:	6801      	ldr	r1, [r0, #0]
 800caf8:	2900      	cmp	r1, #0
 800cafa:	d066      	beq.n	800cbca <LoRaMacSerializerData+0xdc>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cafc:	7b02      	ldrb	r2, [r0, #12]
 800cafe:	0712      	lsls	r2, r2, #28
 800cb00:	0f12      	lsrs	r2, r2, #28
 800cb02:	0010      	movs	r0, r2
 800cb04:	3008      	adds	r0, #8

    if( macMsg->FRMPayloadSize > 0 )
 800cb06:	2328      	movs	r3, #40	; 0x28
 800cb08:	5ce3      	ldrb	r3, [r4, r3]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <LoRaMacSerializerData+0x24>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800cb0e:	3209      	adds	r2, #9
 800cb10:	0010      	movs	r0, r2
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800cb12:	181b      	adds	r3, r3, r0
 800cb14:	b29b      	uxth	r3, r3
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800cb16:	3304      	adds	r3, #4
 800cb18:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800cb1a:	7922      	ldrb	r2, [r4, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d356      	bcc.n	800cbce <LoRaMacSerializerData+0xe0>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800cb20:	7963      	ldrb	r3, [r4, #5]
 800cb22:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800cb24:	68a3      	ldr	r3, [r4, #8]
 800cb26:	6822      	ldr	r2, [r4, #0]
 800cb28:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800cb2a:	68a3      	ldr	r3, [r4, #8]
 800cb2c:	0a1b      	lsrs	r3, r3, #8
 800cb2e:	6822      	ldr	r2, [r4, #0]
 800cb30:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800cb32:	8963      	ldrh	r3, [r4, #10]
 800cb34:	6822      	ldr	r2, [r4, #0]
 800cb36:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800cb38:	7ae3      	ldrb	r3, [r4, #11]
 800cb3a:	6822      	ldr	r2, [r4, #0]
 800cb3c:	7113      	strb	r3, [r2, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800cb3e:	7b23      	ldrb	r3, [r4, #12]
 800cb40:	6822      	ldr	r2, [r4, #0]
 800cb42:	7153      	strb	r3, [r2, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800cb44:	89e3      	ldrh	r3, [r4, #14]
 800cb46:	6822      	ldr	r2, [r4, #0]
 800cb48:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800cb4a:	89e3      	ldrh	r3, [r4, #14]
 800cb4c:	0a1b      	lsrs	r3, r3, #8
 800cb4e:	6822      	ldr	r2, [r4, #0]
 800cb50:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cb52:	0021      	movs	r1, r4
 800cb54:	3110      	adds	r1, #16
 800cb56:	7b22      	ldrb	r2, [r4, #12]
 800cb58:	0712      	lsls	r2, r2, #28
 800cb5a:	0f12      	lsrs	r2, r2, #28
 800cb5c:	6820      	ldr	r0, [r4, #0]
 800cb5e:	3008      	adds	r0, #8
 800cb60:	f002 f8e1 	bl	800ed26 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cb64:	7b23      	ldrb	r3, [r4, #12]
 800cb66:	071b      	lsls	r3, r3, #28
 800cb68:	0f1b      	lsrs	r3, r3, #28
 800cb6a:	001d      	movs	r5, r3
 800cb6c:	3508      	adds	r5, #8

    if( macMsg->FRMPayloadSize > 0 )
 800cb6e:	2228      	movs	r2, #40	; 0x28
 800cb70:	5ca2      	ldrb	r2, [r4, r2]
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	d005      	beq.n	800cb82 <LoRaMacSerializerData+0x94>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800cb76:	2220      	movs	r2, #32
 800cb78:	5ca2      	ldrb	r2, [r4, r2]
 800cb7a:	6821      	ldr	r1, [r4, #0]
 800cb7c:	554a      	strb	r2, [r1, r5]
 800cb7e:	3309      	adds	r3, #9
 800cb80:	001d      	movs	r5, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800cb82:	2628      	movs	r6, #40	; 0x28
 800cb84:	5da2      	ldrb	r2, [r4, r6]
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	1958      	adds	r0, r3, r5
 800cb8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb8c:	f002 f8cb 	bl	800ed26 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800cb90:	5da3      	ldrb	r3, [r4, r6]
 800cb92:	195b      	adds	r3, r3, r5
 800cb94:	b29b      	uxth	r3, r3

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cb96:	1c5a      	adds	r2, r3, #1
 800cb98:	b292      	uxth	r2, r2
 800cb9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	54c1      	strb	r1, [r0, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cba0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cba2:	0a08      	lsrs	r0, r1, #8
 800cba4:	1c99      	adds	r1, r3, #2
 800cba6:	b289      	uxth	r1, r1
 800cba8:	6825      	ldr	r5, [r4, #0]
 800cbaa:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800cbac:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800cbae:	1cda      	adds	r2, r3, #3
 800cbb0:	b292      	uxth	r2, r2
 800cbb2:	6825      	ldr	r5, [r4, #0]
 800cbb4:	5468      	strb	r0, [r5, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cbb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cbb8:	0e09      	lsrs	r1, r1, #24
 800cbba:	3304      	adds	r3, #4
 800cbbc:	6820      	ldr	r0, [r4, #0]
 800cbbe:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;
 800cbc0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800cbc2:	2000      	movs	r0, #0
}
 800cbc4:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	e7fc      	b.n	800cbc4 <LoRaMacSerializerData+0xd6>
 800cbca:	2001      	movs	r0, #1
 800cbcc:	e7fa      	b.n	800cbc4 <LoRaMacSerializerData+0xd6>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800cbce:	2002      	movs	r0, #2
 800cbd0:	e7f8      	b.n	800cbc4 <LoRaMacSerializerData+0xd6>

0800cbd2 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800cbd2:	2805      	cmp	r0, #5
 800cbd4:	d001      	beq.n	800cbda <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800cbd6:	2000      	movs	r0, #0
        }
    }
}
 800cbd8:	4770      	bx	lr
        EU868_IS_ACTIVE( );
 800cbda:	3804      	subs	r0, #4
 800cbdc:	e7fc      	b.n	800cbd8 <RegionIsActive+0x6>

0800cbde <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800cbde:	b500      	push	{lr}
 800cbe0:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9300      	str	r3, [sp, #0]
    switch( region )
 800cbe6:	2805      	cmp	r0, #5
 800cbe8:	d004      	beq.n	800cbf4 <RegionGetPhyParam+0x16>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800cbea:	9b00      	ldr	r3, [sp, #0]
 800cbec:	9301      	str	r3, [sp, #4]
        }
    }
}
 800cbee:	9801      	ldr	r0, [sp, #4]
 800cbf0:	b003      	add	sp, #12
 800cbf2:	bd00      	pop	{pc}
        EU868_GET_PHY_PARAM( );
 800cbf4:	0008      	movs	r0, r1
 800cbf6:	f000 fbf7 	bl	800d3e8 <RegionEU868GetPhyParam>
 800cbfa:	9001      	str	r0, [sp, #4]
 800cbfc:	e7f7      	b.n	800cbee <RegionGetPhyParam+0x10>

0800cbfe <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800cbfe:	b510      	push	{r4, lr}
    switch( region )
 800cc00:	2805      	cmp	r0, #5
 800cc02:	d000      	beq.n	800cc06 <RegionSetBandTxDone+0x8>
        default:
        {
            return;
        }
    }
}
 800cc04:	bd10      	pop	{r4, pc}
        EU868_SET_BAND_TX_DONE( );
 800cc06:	0008      	movs	r0, r1
 800cc08:	f000 fc7a 	bl	800d500 <RegionEU868SetBandTxDone>
 800cc0c:	e7fa      	b.n	800cc04 <RegionSetBandTxDone+0x6>

0800cc0e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800cc0e:	b510      	push	{r4, lr}
    switch( region )
 800cc10:	2805      	cmp	r0, #5
 800cc12:	d000      	beq.n	800cc16 <RegionInitDefaults+0x8>
        default:
        {
            break;
        }
    }
}
 800cc14:	bd10      	pop	{r4, pc}
        EU868_INIT_DEFAULTS( );
 800cc16:	0008      	movs	r0, r1
 800cc18:	f000 fc84 	bl	800d524 <RegionEU868InitDefaults>
}
 800cc1c:	e7fa      	b.n	800cc14 <RegionInitDefaults+0x6>

0800cc1e <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 800cc1e:	b510      	push	{r4, lr}
    switch( region )
 800cc20:	2805      	cmp	r0, #5
 800cc22:	d001      	beq.n	800cc28 <RegionGetNvmCtx+0xa>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800cc24:	2000      	movs	r0, #0
        }
    }
}
 800cc26:	bd10      	pop	{r4, pc}
        EU868_GET_NVM_CTX( );
 800cc28:	0008      	movs	r0, r1
 800cc2a:	f000 fce3 	bl	800d5f4 <RegionEU868GetNvmCtx>
 800cc2e:	e7fa      	b.n	800cc26 <RegionGetNvmCtx+0x8>

0800cc30 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cc30:	b510      	push	{r4, lr}
 800cc32:	000b      	movs	r3, r1
    switch( region )
 800cc34:	2805      	cmp	r0, #5
 800cc36:	d001      	beq.n	800cc3c <RegionVerify+0xc>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800cc38:	2000      	movs	r0, #0
        }
    }
}
 800cc3a:	bd10      	pop	{r4, pc}
        EU868_VERIFY( );
 800cc3c:	0011      	movs	r1, r2
 800cc3e:	0018      	movs	r0, r3
 800cc40:	f000 fce0 	bl	800d604 <RegionEU868Verify>
 800cc44:	e7f9      	b.n	800cc3a <RegionVerify+0xa>

0800cc46 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800cc46:	b510      	push	{r4, lr}
    switch( region )
 800cc48:	2805      	cmp	r0, #5
 800cc4a:	d000      	beq.n	800cc4e <RegionApplyCFList+0x8>
        default:
        {
            break;
        }
    }
}
 800cc4c:	bd10      	pop	{r4, pc}
        EU868_APPLY_CF_LIST( );
 800cc4e:	0008      	movs	r0, r1
 800cc50:	f001 f8ac 	bl	800ddac <RegionEU868ApplyCFList>
}
 800cc54:	e7fa      	b.n	800cc4c <RegionApplyCFList+0x6>

0800cc56 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800cc56:	b510      	push	{r4, lr}
    switch( region )
 800cc58:	2805      	cmp	r0, #5
 800cc5a:	d001      	beq.n	800cc60 <RegionChanMaskSet+0xa>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800cc5c:	2000      	movs	r0, #0
        }
    }
}
 800cc5e:	bd10      	pop	{r4, pc}
        EU868_CHAN_MASK_SET( );
 800cc60:	0008      	movs	r0, r1
 800cc62:	f000 fd0f 	bl	800d684 <RegionEU868ChanMaskSet>
 800cc66:	e7fa      	b.n	800cc5e <RegionChanMaskSet+0x8>

0800cc68 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cc68:	b510      	push	{r4, lr}
 800cc6a:	000c      	movs	r4, r1
 800cc6c:	0011      	movs	r1, r2
 800cc6e:	001a      	movs	r2, r3
    switch( region )
 800cc70:	2805      	cmp	r0, #5
 800cc72:	d000      	beq.n	800cc76 <RegionComputeRxWindowParameters+0xe>
        default:
        {
            break;
        }
    }
}
 800cc74:	bd10      	pop	{r4, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800cc76:	9b02      	ldr	r3, [sp, #8]
 800cc78:	0020      	movs	r0, r4
 800cc7a:	f000 fd1d 	bl	800d6b8 <RegionEU868ComputeRxWindowParameters>
}
 800cc7e:	e7f9      	b.n	800cc74 <RegionComputeRxWindowParameters+0xc>

0800cc80 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cc80:	b510      	push	{r4, lr}
 800cc82:	000b      	movs	r3, r1
    switch( region )
 800cc84:	2805      	cmp	r0, #5
 800cc86:	d001      	beq.n	800cc8c <RegionRxConfig+0xc>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800cc88:	2000      	movs	r0, #0
        }
    }
}
 800cc8a:	bd10      	pop	{r4, pc}
        EU868_RX_CONFIG( );
 800cc8c:	0011      	movs	r1, r2
 800cc8e:	0018      	movs	r0, r3
 800cc90:	f000 fd52 	bl	800d738 <RegionEU868RxConfig>
 800cc94:	e7f9      	b.n	800cc8a <RegionRxConfig+0xa>

0800cc96 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800cc96:	b510      	push	{r4, lr}
 800cc98:	000c      	movs	r4, r1
 800cc9a:	0011      	movs	r1, r2
    switch( region )
 800cc9c:	2805      	cmp	r0, #5
 800cc9e:	d001      	beq.n	800cca4 <RegionTxConfig+0xe>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800cca0:	2000      	movs	r0, #0
        }
    }
}
 800cca2:	bd10      	pop	{r4, pc}
        EU868_TX_CONFIG( );
 800cca4:	001a      	movs	r2, r3
 800cca6:	0020      	movs	r0, r4
 800cca8:	f000 fdcc 	bl	800d844 <RegionEU868TxConfig>
 800ccac:	e7f9      	b.n	800cca2 <RegionTxConfig+0xc>

0800ccae <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ccae:	b510      	push	{r4, lr}
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	000c      	movs	r4, r1
 800ccb4:	0011      	movs	r1, r2
 800ccb6:	001a      	movs	r2, r3
    switch( region )
 800ccb8:	2805      	cmp	r0, #5
 800ccba:	d002      	beq.n	800ccc2 <RegionLinkAdrReq+0x14>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800ccbc:	2000      	movs	r0, #0
        }
    }
}
 800ccbe:	b002      	add	sp, #8
 800ccc0:	bd10      	pop	{r4, pc}
        EU868_LINK_ADR_REQ( );
 800ccc2:	9b05      	ldr	r3, [sp, #20]
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	0020      	movs	r0, r4
 800ccca:	f000 fe47 	bl	800d95c <RegionEU868LinkAdrReq>
 800ccce:	e7f6      	b.n	800ccbe <RegionLinkAdrReq+0x10>

0800ccd0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ccd0:	b510      	push	{r4, lr}
    switch( region )
 800ccd2:	2805      	cmp	r0, #5
 800ccd4:	d001      	beq.n	800ccda <RegionRxParamSetupReq+0xa>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800ccd6:	2000      	movs	r0, #0
        }
    }
}
 800ccd8:	bd10      	pop	{r4, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800ccda:	0008      	movs	r0, r1
 800ccdc:	f000 fefc 	bl	800dad8 <RegionEU868RxParamSetupReq>
 800cce0:	e7fa      	b.n	800ccd8 <RegionRxParamSetupReq+0x8>

0800cce2 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800cce2:	b510      	push	{r4, lr}
    switch( region )
 800cce4:	2805      	cmp	r0, #5
 800cce6:	d001      	beq.n	800ccec <RegionNewChannelReq+0xa>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cce8:	2000      	movs	r0, #0
        }
    }
}
 800ccea:	bd10      	pop	{r4, pc}
        EU868_NEW_CHANNEL_REQ( );
 800ccec:	0008      	movs	r0, r1
 800ccee:	f001 f89b 	bl	800de28 <RegionEU868NewChannelReq>
 800ccf2:	e7fa      	b.n	800ccea <RegionNewChannelReq+0x8>

0800ccf4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800ccf4:	b510      	push	{r4, lr}
    switch( region )
 800ccf6:	2805      	cmp	r0, #5
 800ccf8:	d001      	beq.n	800ccfe <RegionTxParamSetupReq+0xa>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800ccfa:	2000      	movs	r0, #0
        }
    }
}
 800ccfc:	bd10      	pop	{r4, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800ccfe:	0008      	movs	r0, r1
 800cd00:	f000 ff10 	bl	800db24 <RegionEU868TxParamSetupReq>
 800cd04:	e7fa      	b.n	800ccfc <RegionTxParamSetupReq+0x8>

0800cd06 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800cd06:	b510      	push	{r4, lr}
    switch( region )
 800cd08:	2805      	cmp	r0, #5
 800cd0a:	d001      	beq.n	800cd10 <RegionDlChannelReq+0xa>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cd0c:	2000      	movs	r0, #0
        }
    }
}
 800cd0e:	bd10      	pop	{r4, pc}
        EU868_DL_CHANNEL_REQ( );
 800cd10:	0008      	movs	r0, r1
 800cd12:	f000 ff0b 	bl	800db2c <RegionEU868DlChannelReq>
 800cd16:	e7fa      	b.n	800cd0e <RegionDlChannelReq+0x8>

0800cd18 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	000b      	movs	r3, r1
    switch( region )
 800cd1c:	2805      	cmp	r0, #5
 800cd1e:	d001      	beq.n	800cd24 <RegionAlternateDr+0xc>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800cd20:	2000      	movs	r0, #0
        }
    }
}
 800cd22:	bd10      	pop	{r4, pc}
        EU868_ALTERNATE_DR( );
 800cd24:	0011      	movs	r1, r2
 800cd26:	0018      	movs	r0, r3
 800cd28:	f000 ff28 	bl	800db7c <RegionEU868AlternateDr>
 800cd2c:	e7f9      	b.n	800cd22 <RegionAlternateDr+0xa>

0800cd2e <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800cd2e:	b510      	push	{r4, lr}
    switch( region )
 800cd30:	2805      	cmp	r0, #5
 800cd32:	d000      	beq.n	800cd36 <RegionCalcBackOff+0x8>
        default:
        {
            break;
        }
    }
}
 800cd34:	bd10      	pop	{r4, pc}
        EU868_CALC_BACKOFF( );
 800cd36:	0008      	movs	r0, r1
 800cd38:	f000 ff22 	bl	800db80 <RegionEU868CalcBackOff>
}
 800cd3c:	e7fa      	b.n	800cd34 <RegionCalcBackOff+0x6>

0800cd3e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	000c      	movs	r4, r1
 800cd42:	0011      	movs	r1, r2
 800cd44:	001a      	movs	r2, r3
    switch( region )
 800cd46:	2805      	cmp	r0, #5
 800cd48:	d001      	beq.n	800cd4e <RegionNextChannel+0x10>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800cd4a:	2009      	movs	r0, #9
        }
    }
}
 800cd4c:	bd10      	pop	{r4, pc}
        EU868_NEXT_CHANNEL( );
 800cd4e:	9b02      	ldr	r3, [sp, #8]
 800cd50:	0020      	movs	r0, r4
 800cd52:	f000 ff2f 	bl	800dbb4 <RegionEU868NextChannel>
 800cd56:	e7f9      	b.n	800cd4c <RegionNextChannel+0xe>

0800cd58 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800cd58:	b510      	push	{r4, lr}
    switch( region )
 800cd5a:	2805      	cmp	r0, #5
 800cd5c:	d000      	beq.n	800cd60 <RegionSetContinuousWave+0x8>
        default:
        {
            break;
        }
    }
}
 800cd5e:	bd10      	pop	{r4, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800cd60:	0008      	movs	r0, r1
 800cd62:	f001 f88b 	bl	800de7c <RegionEU868SetContinuousWave>
}
 800cd66:	e7fa      	b.n	800cd5e <RegionSetContinuousWave+0x6>

0800cd68 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	000c      	movs	r4, r1
 800cd6c:	0011      	movs	r1, r2
    switch( region )
 800cd6e:	2805      	cmp	r0, #5
 800cd70:	d001      	beq.n	800cd76 <RegionApplyDrOffset+0xe>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800cd72:	b2d0      	uxtb	r0, r2
        }
    }
}
 800cd74:	bd10      	pop	{r4, pc}
        EU868_APPLY_DR_OFFSET( );
 800cd76:	001a      	movs	r2, r3
 800cd78:	0020      	movs	r0, r4
 800cd7a:	f001 f8a9 	bl	800ded0 <RegionEU868ApplyDrOffset>
 800cd7e:	e7f9      	b.n	800cd74 <RegionApplyDrOffset+0xc>

0800cd80 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800cd80:	b530      	push	{r4, r5, lr}
 800cd82:	0005      	movs	r5, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800cd84:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800cd86:	2000      	movs	r0, #0
    for( uint8_t j = 0; j < nbBits; j++ )
 800cd88:	e001      	b.n	800cd8e <CountChannels+0xe>
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	428b      	cmp	r3, r1
 800cd90:	d208      	bcs.n	800cda4 <CountChannels+0x24>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800cd92:	2201      	movs	r2, #1
 800cd94:	409a      	lsls	r2, r3
 800cd96:	0014      	movs	r4, r2
 800cd98:	402c      	ands	r4, r5
 800cd9a:	42a2      	cmp	r2, r4
 800cd9c:	d1f5      	bne.n	800cd8a <CountChannels+0xa>
        {
            nbActiveBits++;
 800cd9e:	3001      	adds	r0, #1
 800cda0:	b2c0      	uxtb	r0, r0
 800cda2:	e7f2      	b.n	800cd8a <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 800cda4:	bd30      	pop	{r4, r5, pc}
	...

0800cda8 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 800cda8:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <RegionCommonGetJoinDc+0x1c>)
 800cdaa:	4298      	cmp	r0, r3
 800cdac:	d905      	bls.n	800cdba <RegionCommonGetJoinDc+0x12>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 800cdae:	4b06      	ldr	r3, [pc, #24]	; (800cdc8 <RegionCommonGetJoinDc+0x20>)
 800cdb0:	4298      	cmp	r0, r3
 800cdb2:	d804      	bhi.n	800cdbe <RegionCommonGetJoinDc+0x16>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 800cdb4:	20fa      	movs	r0, #250	; 0xfa
 800cdb6:	0080      	lsls	r0, r0, #2
 800cdb8:	e000      	b.n	800cdbc <RegionCommonGetJoinDc+0x14>
        dutyCycle = BACKOFF_DC_1_HOUR;
 800cdba:	2064      	movs	r0, #100	; 0x64
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
    }
    return dutyCycle;
}
 800cdbc:	4770      	bx	lr
        dutyCycle = BACKOFF_DC_24_HOURS;
 800cdbe:	4803      	ldr	r0, [pc, #12]	; (800cdcc <RegionCommonGetJoinDc+0x24>)
 800cdc0:	e7fc      	b.n	800cdbc <RegionCommonGetJoinDc+0x14>
 800cdc2:	46c0      	nop			; (mov r8, r8)
 800cdc4:	0036ee7f 	.word	0x0036ee7f
 800cdc8:	025c3f7f 	.word	0x025c3f7f
 800cdcc:	00002710 	.word	0x00002710

0800cdd0 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cdd0:	4288      	cmp	r0, r1
 800cdd2:	db03      	blt.n	800cddc <RegionCommonValueInRange+0xc>
 800cdd4:	4290      	cmp	r0, r2
 800cdd6:	dd03      	ble.n	800cde0 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e000      	b.n	800cdde <RegionCommonValueInRange+0xe>
 800cddc:	2000      	movs	r0, #0
}
 800cdde:	4770      	bx	lr
        return 1;
 800cde0:	2001      	movs	r0, #1
 800cde2:	e7fc      	b.n	800cdde <RegionCommonValueInRange+0xe>

0800cde4 <RegionCommonChanVerifyDr>:
{
 800cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde6:	46d6      	mov	lr, sl
 800cde8:	464f      	mov	r7, r9
 800cdea:	4646      	mov	r6, r8
 800cdec:	b5c0      	push	{r6, r7, lr}
 800cdee:	4682      	mov	sl, r0
 800cdf0:	000e      	movs	r6, r1
 800cdf2:	4690      	mov	r8, r2
 800cdf4:	0019      	movs	r1, r3
 800cdf6:	ab08      	add	r3, sp, #32
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	569a      	ldrsb	r2, [r3, r2]
 800cdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfe:	4699      	mov	r9, r3
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800ce00:	4640      	mov	r0, r8
 800ce02:	f7ff ffe5 	bl	800cdd0 <RegionCommonValueInRange>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d02e      	beq.n	800ce68 <RegionCommonChanVerifyDr+0x84>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	2700      	movs	r7, #0
 800ce0e:	e025      	b.n	800ce5c <RegionCommonChanVerifyDr+0x78>
        for( uint8_t j = 0; j < 16; j++ )
 800ce10:	3401      	adds	r4, #1
 800ce12:	b2e4      	uxtb	r4, r4
 800ce14:	2c0f      	cmp	r4, #15
 800ce16:	d81d      	bhi.n	800ce54 <RegionCommonChanVerifyDr+0x70>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ce18:	006b      	lsls	r3, r5, #1
 800ce1a:	5b9b      	ldrh	r3, [r3, r6]
 800ce1c:	4123      	asrs	r3, r4
 800ce1e:	07db      	lsls	r3, r3, #31
 800ce20:	d5f6      	bpl.n	800ce10 <RegionCommonChanVerifyDr+0x2c>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ce22:	193a      	adds	r2, r7, r4
 800ce24:	0053      	lsls	r3, r2, #1
 800ce26:	189b      	adds	r3, r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	444b      	add	r3, r9
 800ce2c:	7a1a      	ldrb	r2, [r3, #8]
 800ce2e:	0111      	lsls	r1, r2, #4
 800ce30:	b249      	sxtb	r1, r1
 800ce32:	1109      	asrs	r1, r1, #4
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ce34:	b252      	sxtb	r2, r2
 800ce36:	1112      	asrs	r2, r2, #4
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ce38:	230f      	movs	r3, #15
 800ce3a:	401a      	ands	r2, r3
 800ce3c:	4019      	ands	r1, r3
 800ce3e:	4640      	mov	r0, r8
 800ce40:	f7ff ffc6 	bl	800cdd0 <RegionCommonValueInRange>
 800ce44:	2801      	cmp	r0, #1
 800ce46:	d1e3      	bne.n	800ce10 <RegionCommonChanVerifyDr+0x2c>
                    return true;
 800ce48:	2001      	movs	r0, #1
}
 800ce4a:	bce0      	pop	{r5, r6, r7}
 800ce4c:	46ba      	mov	sl, r7
 800ce4e:	46b1      	mov	r9, r6
 800ce50:	46a8      	mov	r8, r5
 800ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ce54:	3710      	adds	r7, #16
 800ce56:	b2ff      	uxtb	r7, r7
 800ce58:	3501      	adds	r5, #1
 800ce5a:	b2ed      	uxtb	r5, r5
 800ce5c:	4557      	cmp	r7, sl
 800ce5e:	d201      	bcs.n	800ce64 <RegionCommonChanVerifyDr+0x80>
        for( uint8_t j = 0; j < 16; j++ )
 800ce60:	2400      	movs	r4, #0
 800ce62:	e7d7      	b.n	800ce14 <RegionCommonChanVerifyDr+0x30>
    return false;
 800ce64:	2000      	movs	r0, #0
 800ce66:	e7f0      	b.n	800ce4a <RegionCommonChanVerifyDr+0x66>
        return false;
 800ce68:	2000      	movs	r0, #0
 800ce6a:	e7ee      	b.n	800ce4a <RegionCommonChanVerifyDr+0x66>

0800ce6c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800ce6c:	b510      	push	{r4, lr}
    uint8_t index = id / 16;
 800ce6e:	090b      	lsrs	r3, r1, #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ce70:	0914      	lsrs	r4, r2, #4
 800ce72:	429c      	cmp	r4, r3
 800ce74:	d30b      	bcc.n	800ce8e <RegionCommonChanDisable+0x22>
 800ce76:	4291      	cmp	r1, r2
 800ce78:	d20b      	bcs.n	800ce92 <RegionCommonChanDisable+0x26>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	220f      	movs	r2, #15
 800ce7e:	400a      	ands	r2, r1
 800ce80:	2101      	movs	r1, #1
 800ce82:	4091      	lsls	r1, r2
 800ce84:	5ac2      	ldrh	r2, [r0, r3]
 800ce86:	438a      	bics	r2, r1
 800ce88:	52c2      	strh	r2, [r0, r3]

    return true;
 800ce8a:	2001      	movs	r0, #1
}
 800ce8c:	bd10      	pop	{r4, pc}
        return false;
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e7fc      	b.n	800ce8c <RegionCommonChanDisable+0x20>
 800ce92:	2000      	movs	r0, #0
 800ce94:	e7fa      	b.n	800ce8c <RegionCommonChanDisable+0x20>

0800ce96 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800ce96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce98:	0006      	movs	r6, r0
 800ce9a:	000c      	movs	r4, r1
 800ce9c:	0017      	movs	r7, r2
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d00e      	beq.n	800cec0 <RegionCommonCountChannels+0x2a>
    uint8_t nbChannels = 0;
 800cea2:	2500      	movs	r5, #0
 800cea4:	e008      	b.n	800ceb8 <RegionCommonCountChannels+0x22>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cea6:	0063      	lsls	r3, r4, #1
 800cea8:	5af0      	ldrh	r0, [r6, r3]
 800ceaa:	2110      	movs	r1, #16
 800ceac:	f7ff ff68 	bl	800cd80 <CountChannels>
 800ceb0:	182d      	adds	r5, r5, r0
 800ceb2:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ceb4:	3401      	adds	r4, #1
 800ceb6:	b2e4      	uxtb	r4, r4
 800ceb8:	42bc      	cmp	r4, r7
 800ceba:	d3f4      	bcc.n	800cea6 <RegionCommonCountChannels+0x10>
    }

    return nbChannels;
}
 800cebc:	0028      	movs	r0, r5
 800cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800cec0:	2500      	movs	r5, #0
 800cec2:	e7fb      	b.n	800cebc <RegionCommonCountChannels+0x26>

0800cec4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800cec4:	b530      	push	{r4, r5, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d00a      	beq.n	800cee0 <RegionCommonChanMaskCopy+0x1c>
 800ceca:	2900      	cmp	r1, #0
 800cecc:	d008      	beq.n	800cee0 <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 800cece:	2300      	movs	r3, #0
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d205      	bcs.n	800cee0 <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ced4:	005c      	lsls	r4, r3, #1
 800ced6:	5b0d      	ldrh	r5, [r1, r4]
 800ced8:	5305      	strh	r5, [r0, r4]
        for( uint8_t i = 0; i < len; i++ )
 800ceda:	3301      	adds	r3, #1
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	e7f7      	b.n	800ced0 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800cee0:	bd30      	pop	{r4, r5, pc}

0800cee2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d001      	beq.n	800ceea <RegionCommonSetBandTxDone+0x8>
    {
        band->LastTxDoneTime = lastTxDone;
 800cee6:	608a      	str	r2, [r1, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800cee8:	4770      	bx	lr
        band->LastTxDoneTime = lastTxDone;
 800ceea:	608a      	str	r2, [r1, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 800ceec:	604a      	str	r2, [r1, #4]
}
 800ceee:	e7fb      	b.n	800cee8 <RegionCommonSetBandTxDone+0x6>

0800cef0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef2:	46d6      	mov	lr, sl
 800cef4:	464f      	mov	r7, r9
 800cef6:	4646      	mov	r6, r8
 800cef8:	b5c0      	push	{r6, r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	4680      	mov	r8, r0
 800cefe:	4689      	mov	r9, r1
 800cf00:	4692      	mov	sl, r2
 800cf02:	001e      	movs	r6, r3
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800cf04:	2400      	movs	r4, #0
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800cf06:	2701      	movs	r7, #1
 800cf08:	427f      	negs	r7, r7
    for( uint8_t i = 0; i < nbBands; i++ )
 800cf0a:	e01e      	b.n	800cf4a <RegionCommonUpdateBandTimeOff+0x5a>
    {
        if( joined == false )
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 800cf0c:	0125      	lsls	r5, r4, #4
 800cf0e:	4455      	add	r5, sl
 800cf10:	6868      	ldr	r0, [r5, #4]
 800cf12:	f001 fe54 	bl	800ebbe <TimerGetElapsedTime>
 800cf16:	9001      	str	r0, [sp, #4]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800cf18:	68a8      	ldr	r0, [r5, #8]
 800cf1a:	f001 fe50 	bl	800ebbe <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 800cf1e:	464b      	mov	r3, r9
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d100      	bne.n	800cf26 <RegionCommonUpdateBandTimeOff+0x36>
 800cf24:	2000      	movs	r0, #0
 800cf26:	9b01      	ldr	r3, [sp, #4]
 800cf28:	4298      	cmp	r0, r3
 800cf2a:	d200      	bcs.n	800cf2e <RegionCommonUpdateBandTimeOff+0x3e>
 800cf2c:	0018      	movs	r0, r3
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 800cf2e:	68eb      	ldr	r3, [r5, #12]
 800cf30:	4283      	cmp	r3, r0
 800cf32:	d801      	bhi.n	800cf38 <RegionCommonUpdateBandTimeOff+0x48>
            {
                bands[i].TimeOff = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	60eb      	str	r3, [r5, #12]
            }
            if( bands[i].TimeOff != 0 )
 800cf38:	68eb      	ldr	r3, [r5, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <RegionCommonUpdateBandTimeOff+0x56>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 800cf3e:	1a18      	subs	r0, r3, r0
 800cf40:	4287      	cmp	r7, r0
 800cf42:	d900      	bls.n	800cf46 <RegionCommonUpdateBandTimeOff+0x56>
 800cf44:	0007      	movs	r7, r0
    for( uint8_t i = 0; i < nbBands; i++ )
 800cf46:	3401      	adds	r4, #1
 800cf48:	b2e4      	uxtb	r4, r4
 800cf4a:	42b4      	cmp	r4, r6
 800cf4c:	d21d      	bcs.n	800cf8a <RegionCommonUpdateBandTimeOff+0x9a>
        if( joined == false )
 800cf4e:	4643      	mov	r3, r8
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0db      	beq.n	800cf0c <RegionCommonUpdateBandTimeOff+0x1c>
            }
        }
        else
        {
            if( dutyCycle == true )
 800cf54:	464b      	mov	r3, r9
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <RegionCommonUpdateBandTimeOff+0x76>
                }
            }
            else
            {
                nextTxDelay = 0;
                bands[i].TimeOff = 0;
 800cf5a:	0123      	lsls	r3, r4, #4
 800cf5c:	4453      	add	r3, sl
 800cf5e:	2200      	movs	r2, #0
 800cf60:	60da      	str	r2, [r3, #12]
                nextTxDelay = 0;
 800cf62:	2700      	movs	r7, #0
 800cf64:	e7ef      	b.n	800cf46 <RegionCommonUpdateBandTimeOff+0x56>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800cf66:	0125      	lsls	r5, r4, #4
 800cf68:	4455      	add	r5, sl
 800cf6a:	68a8      	ldr	r0, [r5, #8]
 800cf6c:	f001 fe27 	bl	800ebbe <TimerGetElapsedTime>
                if( bands[i].TimeOff <= elapsed )
 800cf70:	68eb      	ldr	r3, [r5, #12]
 800cf72:	4283      	cmp	r3, r0
 800cf74:	d801      	bhi.n	800cf7a <RegionCommonUpdateBandTimeOff+0x8a>
                    bands[i].TimeOff = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60eb      	str	r3, [r5, #12]
                if( bands[i].TimeOff != 0 )
 800cf7a:	68eb      	ldr	r3, [r5, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d0e2      	beq.n	800cf46 <RegionCommonUpdateBandTimeOff+0x56>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 800cf80:	1a18      	subs	r0, r3, r0
 800cf82:	4287      	cmp	r7, r0
 800cf84:	d9df      	bls.n	800cf46 <RegionCommonUpdateBandTimeOff+0x56>
 800cf86:	0007      	movs	r7, r0
 800cf88:	e7dd      	b.n	800cf46 <RegionCommonUpdateBandTimeOff+0x56>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 800cf8a:	1c7b      	adds	r3, r7, #1
 800cf8c:	d006      	beq.n	800cf9c <RegionCommonUpdateBandTimeOff+0xac>
}
 800cf8e:	0038      	movs	r0, r7
 800cf90:	b002      	add	sp, #8
 800cf92:	bce0      	pop	{r5, r6, r7}
 800cf94:	46ba      	mov	sl, r7
 800cf96:	46b1      	mov	r9, r6
 800cf98:	46a8      	mov	r8, r5
 800cf9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 800cf9c:	2700      	movs	r7, #0
 800cf9e:	e7f6      	b.n	800cf8e <RegionCommonUpdateBandTimeOff+0x9e>

0800cfa0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800cfa0:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800cfa2:	7803      	ldrb	r3, [r0, #0]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d001      	beq.n	800cfac <RegionCommonParseLinkAdrReq+0xc>
    uint8_t retIndex = 0;
 800cfa8:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800cfaa:	bd10      	pop	{r4, pc}
        linkAdrParams->Datarate = payload[1];
 800cfac:	7842      	ldrb	r2, [r0, #1]
 800cfae:	2401      	movs	r4, #1
 800cfb0:	5704      	ldrsb	r4, [r0, r4]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800cfb2:	330c      	adds	r3, #12
 800cfb4:	401c      	ands	r4, r3
 800cfb6:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800cfb8:	0912      	lsrs	r2, r2, #4
 800cfba:	704a      	strb	r2, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800cfbc:	7882      	ldrb	r2, [r0, #2]
 800cfbe:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800cfc0:	78c4      	ldrb	r4, [r0, #3]
 800cfc2:	0224      	lsls	r4, r4, #8
 800cfc4:	4322      	orrs	r2, r4
 800cfc6:	808a      	strh	r2, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800cfc8:	7900      	ldrb	r0, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800cfca:	0904      	lsrs	r4, r0, #4
 800cfcc:	2207      	movs	r2, #7
 800cfce:	4022      	ands	r2, r4
 800cfd0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800cfd2:	4003      	ands	r3, r0
 800cfd4:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800cfd6:	2005      	movs	r0, #5
 800cfd8:	e7e7      	b.n	800cfaa <RegionCommonParseLinkAdrReq+0xa>

0800cfda <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800cfda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfdc:	46de      	mov	lr, fp
 800cfde:	4657      	mov	r7, sl
 800cfe0:	464e      	mov	r6, r9
 800cfe2:	4645      	mov	r5, r8
 800cfe4:	b5e0      	push	{r5, r6, r7, lr}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	0004      	movs	r4, r0
 800cfea:	4688      	mov	r8, r1
 800cfec:	9203      	str	r2, [sp, #12]
 800cfee:	469a      	mov	sl, r3
    uint8_t status = verifyParams->Status;
 800cff0:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800cff2:	2306      	movs	r3, #6
 800cff4:	56c3      	ldrsb	r3, [r0, r3]
 800cff6:	469b      	mov	fp, r3
    int8_t txPower = verifyParams->TxPower;
 800cff8:	2707      	movs	r7, #7
 800cffa:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800cffc:	2608      	movs	r6, #8
 800cffe:	5786      	ldrsb	r6, [r0, r6]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d000:	7943      	ldrb	r3, [r0, #5]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <RegionCommonLinkAdrReqVerifyParams+0x3a>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d006:	260b      	movs	r6, #11
 800d008:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800d00a:	2309      	movs	r3, #9
 800d00c:	56c3      	ldrsb	r3, [r0, r3]
 800d00e:	469b      	mov	fp, r3
        txPower =  verifyParams->CurrentTxPower;
 800d010:	270a      	movs	r7, #10
 800d012:	57c7      	ldrsb	r7, [r0, r7]
    }

    if( status != 0 )
 800d014:	2d00      	cmp	r5, #0
 800d016:	d110      	bne.n	800d03a <RegionCommonLinkAdrReqVerifyParams+0x60>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d018:	2d07      	cmp	r5, #7
 800d01a:	d030      	beq.n	800d07e <RegionCommonLinkAdrReqVerifyParams+0xa4>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d01c:	4643      	mov	r3, r8
 800d01e:	465a      	mov	r2, fp
 800d020:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800d022:	9b03      	ldr	r3, [sp, #12]
 800d024:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800d026:	4653      	mov	r3, sl
 800d028:	701e      	strb	r6, [r3, #0]

    return status;
}
 800d02a:	0028      	movs	r0, r5
 800d02c:	b005      	add	sp, #20
 800d02e:	bcf0      	pop	{r4, r5, r6, r7}
 800d030:	46bb      	mov	fp, r7
 800d032:	46b2      	mov	sl, r6
 800d034:	46a9      	mov	r9, r5
 800d036:	46a0      	mov	r8, r4
 800d038:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d03a:	2314      	movs	r3, #20
 800d03c:	56e3      	ldrsb	r3, [r4, r3]
 800d03e:	7b20      	ldrb	r0, [r4, #12]
 800d040:	69a2      	ldr	r2, [r4, #24]
 800d042:	9201      	str	r2, [sp, #4]
 800d044:	2215      	movs	r2, #21
 800d046:	56a2      	ldrsb	r2, [r4, r2]
 800d048:	9200      	str	r2, [sp, #0]
 800d04a:	465a      	mov	r2, fp
 800d04c:	6921      	ldr	r1, [r4, #16]
 800d04e:	f7ff fec9 	bl	800cde4 <RegionCommonChanVerifyDr>
 800d052:	2800      	cmp	r0, #0
 800d054:	d101      	bne.n	800d05a <RegionCommonLinkAdrReqVerifyParams+0x80>
            status &= 0xFD; // Datarate KO
 800d056:	2302      	movs	r3, #2
 800d058:	439d      	bics	r5, r3
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d05a:	231d      	movs	r3, #29
 800d05c:	56e3      	ldrsb	r3, [r4, r3]
 800d05e:	4699      	mov	r9, r3
 800d060:	221c      	movs	r2, #28
 800d062:	56a2      	ldrsb	r2, [r4, r2]
 800d064:	0019      	movs	r1, r3
 800d066:	0038      	movs	r0, r7
 800d068:	f7ff feb2 	bl	800cdd0 <RegionCommonValueInRange>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1d3      	bne.n	800d018 <RegionCommonLinkAdrReqVerifyParams+0x3e>
            if( verifyParams->MaxTxPower > txPower )
 800d070:	45b9      	cmp	r9, r7
 800d072:	dc02      	bgt.n	800d07a <RegionCommonLinkAdrReqVerifyParams+0xa0>
                status &= 0xFB; // TxPower KO
 800d074:	2304      	movs	r3, #4
 800d076:	439d      	bics	r5, r3
 800d078:	e7ce      	b.n	800d018 <RegionCommonLinkAdrReqVerifyParams+0x3e>
                txPower = verifyParams->MaxTxPower;
 800d07a:	464f      	mov	r7, r9
 800d07c:	e7cc      	b.n	800d018 <RegionCommonLinkAdrReqVerifyParams+0x3e>
        if( nbRepetitions == 0 )
 800d07e:	2e00      	cmp	r6, #0
 800d080:	d1cc      	bne.n	800d01c <RegionCommonLinkAdrReqVerifyParams+0x42>
            nbRepetitions = 1;
 800d082:	3601      	adds	r6, #1
 800d084:	e7ca      	b.n	800d01c <RegionCommonLinkAdrReqVerifyParams+0x42>
	...

0800d088 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800d088:	b570      	push	{r4, r5, r6, lr}
 800d08a:	000e      	movs	r6, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800d08c:	2301      	movs	r3, #1
 800d08e:	4083      	lsls	r3, r0
 800d090:	0018      	movs	r0, r3
 800d092:	f7f5 faa9 	bl	80025e8 <__aeabi_i2d>
 800d096:	0004      	movs	r4, r0
 800d098:	000d      	movs	r5, r1
 800d09a:	0030      	movs	r0, r6
 800d09c:	f7f5 fad4 	bl	8002648 <__aeabi_ui2d>
 800d0a0:	0002      	movs	r2, r0
 800d0a2:	000b      	movs	r3, r1
 800d0a4:	0020      	movs	r0, r4
 800d0a6:	0029      	movs	r1, r5
 800d0a8:	f7f4 f864 	bl	8001174 <__aeabi_ddiv>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4b02      	ldr	r3, [pc, #8]	; (800d0b8 <RegionCommonComputeSymbolTimeLoRa+0x30>)
 800d0b0:	f7f4 fc66 	bl	8001980 <__aeabi_dmul>
}
 800d0b4:	bd70      	pop	{r4, r5, r6, pc}
 800d0b6:	46c0      	nop			; (mov r8, r8)
 800d0b8:	408f4000 	.word	0x408f4000

0800d0bc <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800d0bc:	b510      	push	{r4, lr}
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800d0be:	f7f5 fac3 	bl	8002648 <__aeabi_ui2d>
 800d0c2:	0002      	movs	r2, r0
 800d0c4:	000b      	movs	r3, r1
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	4901      	ldr	r1, [pc, #4]	; (800d0d0 <RegionCommonComputeSymbolTimeFsk+0x14>)
 800d0ca:	f7f4 f853 	bl	8001174 <__aeabi_ddiv>
}
 800d0ce:	bd10      	pop	{r4, pc}
 800d0d0:	40200000 	.word	0x40200000

0800d0d4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d6:	46c6      	mov	lr, r8
 800d0d8:	b500      	push	{lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	0004      	movs	r4, r0
 800d0de:	000d      	movs	r5, r1
 800d0e0:	4698      	mov	r8, r3
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800d0e2:	9200      	str	r2, [sp, #0]
 800d0e4:	1f10      	subs	r0, r2, #4
 800d0e6:	0040      	lsls	r0, r0, #1
 800d0e8:	f7f5 fa7e 	bl	80025e8 <__aeabi_i2d>
 800d0ec:	0022      	movs	r2, r4
 800d0ee:	002b      	movs	r3, r5
 800d0f0:	f7f4 fc46 	bl	8001980 <__aeabi_dmul>
 800d0f4:	0006      	movs	r6, r0
 800d0f6:	000f      	movs	r7, r1
 800d0f8:	4643      	mov	r3, r8
 800d0fa:	0058      	lsls	r0, r3, #1
 800d0fc:	f7f5 faa4 	bl	8002648 <__aeabi_ui2d>
 800d100:	0032      	movs	r2, r6
 800d102:	003b      	movs	r3, r7
 800d104:	f7f3 fccc 	bl	8000aa0 <__aeabi_dadd>
 800d108:	0022      	movs	r2, r4
 800d10a:	002b      	movs	r3, r5
 800d10c:	f7f4 f832 	bl	8001174 <__aeabi_ddiv>
 800d110:	f003 fbb2 	bl	8010878 <ceil>
 800d114:	f7f3 f9d6 	bl	80004c4 <__aeabi_d2uiz>
 800d118:	9e00      	ldr	r6, [sp, #0]
 800d11a:	4286      	cmp	r6, r0
 800d11c:	d200      	bcs.n	800d120 <RegionCommonComputeRxWindowParameters+0x4c>
 800d11e:	0006      	movs	r6, r0
 800d120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d122:	601e      	str	r6, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800d124:	2200      	movs	r2, #0
 800d126:	4b16      	ldr	r3, [pc, #88]	; (800d180 <RegionCommonComputeRxWindowParameters+0xac>)
 800d128:	0020      	movs	r0, r4
 800d12a:	0029      	movs	r1, r5
 800d12c:	f7f4 fc28 	bl	8001980 <__aeabi_dmul>
 800d130:	9000      	str	r0, [sp, #0]
 800d132:	9101      	str	r1, [sp, #4]
 800d134:	0030      	movs	r0, r6
 800d136:	f7f5 fa87 	bl	8002648 <__aeabi_ui2d>
 800d13a:	0022      	movs	r2, r4
 800d13c:	002b      	movs	r3, r5
 800d13e:	f7f4 fc1f 	bl	8001980 <__aeabi_dmul>
 800d142:	2200      	movs	r2, #0
 800d144:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <RegionCommonComputeRxWindowParameters+0xb0>)
 800d146:	f7f4 fc1b 	bl	8001980 <__aeabi_dmul>
 800d14a:	0002      	movs	r2, r0
 800d14c:	000b      	movs	r3, r1
 800d14e:	9800      	ldr	r0, [sp, #0]
 800d150:	9901      	ldr	r1, [sp, #4]
 800d152:	f7f4 fe81 	bl	8001e58 <__aeabi_dsub>
 800d156:	0004      	movs	r4, r0
 800d158:	000d      	movs	r5, r1
 800d15a:	9808      	ldr	r0, [sp, #32]
 800d15c:	f7f5 fa74 	bl	8002648 <__aeabi_ui2d>
 800d160:	0002      	movs	r2, r0
 800d162:	000b      	movs	r3, r1
 800d164:	0020      	movs	r0, r4
 800d166:	0029      	movs	r1, r5
 800d168:	f7f4 fe76 	bl	8001e58 <__aeabi_dsub>
 800d16c:	f003 fb84 	bl	8010878 <ceil>
 800d170:	f7f5 fa04 	bl	800257c <__aeabi_d2iz>
 800d174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d176:	6018      	str	r0, [r3, #0]
}
 800d178:	b002      	add	sp, #8
 800d17a:	bc80      	pop	{r7}
 800d17c:	46b8      	mov	r8, r7
 800d17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d180:	40100000 	.word	0x40100000
 800d184:	3fe00000 	.word	0x3fe00000

0800d188 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	1c0d      	adds	r5, r1, #0
 800d18c:	1c14      	adds	r4, r2, #0
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d18e:	0040      	lsls	r0, r0, #1
 800d190:	f7f3 fc4a 	bl	8000a28 <__aeabi_ui2f>
 800d194:	1c01      	adds	r1, r0, #0
 800d196:	1c28      	adds	r0, r5, #0
 800d198:	f7f3 fa7e 	bl	8000698 <__aeabi_fsub>
 800d19c:	1c21      	adds	r1, r4, #0
 800d19e:	f7f3 fa7b 	bl	8000698 <__aeabi_fsub>
 800d1a2:	f7f5 fa77 	bl	8002694 <__aeabi_f2d>
 800d1a6:	f003 fbf1 	bl	801098c <floor>
 800d1aa:	f7f5 f9e7 	bl	800257c <__aeabi_d2iz>
 800d1ae:	b240      	sxtb	r0, r0

    return phyTxPower;
}
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}

0800d1b2 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 800d1b2:	b570      	push	{r4, r5, r6, lr}
 800d1b4:	0004      	movs	r4, r0
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800d1b6:	7ac2      	ldrb	r2, [r0, #11]
 800d1b8:	0053      	lsls	r3, r2, #1
 800d1ba:	189b      	adds	r3, r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	6802      	ldr	r2, [r0, #0]
 800d1c0:	4694      	mov	ip, r2
 800d1c2:	4463      	add	r3, ip
 800d1c4:	7a5d      	ldrb	r5, [r3, #9]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800d1c6:	6843      	ldr	r3, [r0, #4]
 800d1c8:	012d      	lsls	r5, r5, #4
 800d1ca:	195a      	adds	r2, r3, r5
 800d1cc:	5b5e      	ldrh	r6, [r3, r5]
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60d3      	str	r3, [r2, #12]

    if( calcBackOffParams->Joined == false )
 800d1d2:	7a43      	ldrb	r3, [r0, #9]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d119      	bne.n	800d20c <RegionCommonCalcBackOff+0x5a>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 800d1d8:	68c0      	ldr	r0, [r0, #12]
 800d1da:	f7ff fde5 	bl	800cda8 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d1de:	1c33      	adds	r3, r6, #0
 800d1e0:	4286      	cmp	r6, r0
 800d1e2:	d200      	bcs.n	800d1e6 <RegionCommonCalcBackOff+0x34>
 800d1e4:	1c03      	adds	r3, r0, #0
 800d1e6:	b29b      	uxth	r3, r3
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 800d1e8:	7aa2      	ldrb	r2, [r4, #10]
 800d1ea:	2a00      	cmp	r2, #0
 800d1ec:	d107      	bne.n	800d1fe <RegionCommonCalcBackOff+0x4c>
 800d1ee:	7a22      	ldrb	r2, [r4, #8]
 800d1f0:	2a00      	cmp	r2, #0
 800d1f2:	d104      	bne.n	800d1fe <RegionCommonCalcBackOff+0x4c>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800d1f4:	6863      	ldr	r3, [r4, #4]
 800d1f6:	195d      	adds	r5, r3, r5
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	60eb      	str	r3, [r5, #12]
 800d1fc:	e005      	b.n	800d20a <RegionCommonCalcBackOff+0x58>
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800d1fe:	6921      	ldr	r1, [r4, #16]
 800d200:	6862      	ldr	r2, [r4, #4]
 800d202:	1955      	adds	r5, r2, r5
 800d204:	3b01      	subs	r3, #1
 800d206:	434b      	muls	r3, r1
 800d208:	60eb      	str	r3, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 800d20a:	bd70      	pop	{r4, r5, r6, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
 800d20c:	7a83      	ldrb	r3, [r0, #10]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d006      	beq.n	800d220 <RegionCommonCalcBackOff+0x6e>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800d212:	6902      	ldr	r2, [r0, #16]
 800d214:	6843      	ldr	r3, [r0, #4]
 800d216:	195d      	adds	r5, r3, r5
 800d218:	3e01      	subs	r6, #1
 800d21a:	4356      	muls	r6, r2
 800d21c:	60ee      	str	r6, [r5, #12]
 800d21e:	e7f4      	b.n	800d20a <RegionCommonCalcBackOff+0x58>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800d220:	6843      	ldr	r3, [r0, #4]
 800d222:	195d      	adds	r5, r3, r5
 800d224:	2300      	movs	r3, #0
 800d226:	60eb      	str	r3, [r5, #12]
}
 800d228:	e7ef      	b.n	800d20a <RegionCommonCalcBackOff+0x58>

0800d22a <GetNextLowerTxDr>:
// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
    uint8_t nextLowerDr = 0;

    if( dr == minDr )
 800d22a:	4288      	cmp	r0, r1
 800d22c:	d004      	beq.n	800d238 <GetNextLowerTxDr+0xe>
    {
        nextLowerDr = minDr;
    }
    else
    {
        nextLowerDr = dr - 1;
 800d22e:	b2c0      	uxtb	r0, r0
 800d230:	3801      	subs	r0, #1
 800d232:	b2c0      	uxtb	r0, r0
    }
    return nextLowerDr;
 800d234:	b240      	sxtb	r0, r0
}
 800d236:	4770      	bx	lr
        nextLowerDr = minDr;
 800d238:	b2c8      	uxtb	r0, r1
 800d23a:	e7fb      	b.n	800d234 <GetNextLowerTxDr+0xa>

0800d23c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsEU868[drIndex] )
 800d23c:	0080      	lsls	r0, r0, #2
 800d23e:	4b07      	ldr	r3, [pc, #28]	; (800d25c <GetBandwidth+0x20>)
 800d240:	58c3      	ldr	r3, [r0, r3]
 800d242:	4a07      	ldr	r2, [pc, #28]	; (800d260 <GetBandwidth+0x24>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d004      	beq.n	800d252 <GetBandwidth+0x16>
 800d248:	4a06      	ldr	r2, [pc, #24]	; (800d264 <GetBandwidth+0x28>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d103      	bne.n	800d256 <GetBandwidth+0x1a>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800d24e:	2002      	movs	r0, #2
    }
}
 800d250:	4770      	bx	lr
            return 1;
 800d252:	2001      	movs	r0, #1
 800d254:	e7fc      	b.n	800d250 <GetBandwidth+0x14>
    switch( BandwidthsEU868[drIndex] )
 800d256:	2000      	movs	r0, #0
 800d258:	e7fa      	b.n	800d250 <GetBandwidth+0x14>
 800d25a:	46c0      	nop			; (mov r8, r8)
 800d25c:	080113f0 	.word	0x080113f0
 800d260:	0003d090 	.word	0x0003d090
 800d264:	0007a120 	.word	0x0007a120

0800d268 <LimitTxPower>:
static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
    int8_t txPowerResult = txPower;

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800d268:	1c03      	adds	r3, r0, #0
 800d26a:	4288      	cmp	r0, r1
 800d26c:	da00      	bge.n	800d270 <LimitTxPower+0x8>
 800d26e:	1c0b      	adds	r3, r1, #0
 800d270:	b258      	sxtb	r0, r3

    return txPowerResult;
}
 800d272:	4770      	bx	lr

0800d274 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	0004      	movs	r4, r0
 800d278:	000d      	movs	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d27a:	4b1c      	ldr	r3, [pc, #112]	; (800d2ec <VerifyRfFreq+0x78>)
 800d27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27e:	4798      	blx	r3
 800d280:	2800      	cmp	r0, #0
 800d282:	d006      	beq.n	800d292 <VerifyRfFreq+0x1e>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800d284:	4a1a      	ldr	r2, [pc, #104]	; (800d2f0 <VerifyRfFreq+0x7c>)
 800d286:	4b1b      	ldr	r3, [pc, #108]	; (800d2f4 <VerifyRfFreq+0x80>)
 800d288:	18e3      	adds	r3, r4, r3
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d802      	bhi.n	800d294 <VerifyRfFreq+0x20>
    {
        *band = 2;
 800d28e:	2302      	movs	r3, #2
 800d290:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800d292:	bd70      	pop	{r4, r5, r6, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800d294:	4a18      	ldr	r2, [pc, #96]	; (800d2f8 <VerifyRfFreq+0x84>)
 800d296:	4b19      	ldr	r3, [pc, #100]	; (800d2fc <VerifyRfFreq+0x88>)
 800d298:	18e3      	adds	r3, r4, r3
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d802      	bhi.n	800d2a4 <VerifyRfFreq+0x30>
        *band = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	702b      	strb	r3, [r5, #0]
 800d2a2:	e7f6      	b.n	800d292 <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800d2a4:	4a16      	ldr	r2, [pc, #88]	; (800d300 <VerifyRfFreq+0x8c>)
 800d2a6:	4b17      	ldr	r3, [pc, #92]	; (800d304 <VerifyRfFreq+0x90>)
 800d2a8:	18e3      	adds	r3, r4, r3
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d802      	bhi.n	800d2b4 <VerifyRfFreq+0x40>
        *band = 1;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	702b      	strb	r3, [r5, #0]
 800d2b2:	e7ee      	b.n	800d292 <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800d2b4:	4a14      	ldr	r2, [pc, #80]	; (800d308 <VerifyRfFreq+0x94>)
 800d2b6:	4b15      	ldr	r3, [pc, #84]	; (800d30c <VerifyRfFreq+0x98>)
 800d2b8:	18e3      	adds	r3, r4, r3
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d802      	bhi.n	800d2c4 <VerifyRfFreq+0x50>
        *band = 5;
 800d2be:	2305      	movs	r3, #5
 800d2c0:	702b      	strb	r3, [r5, #0]
 800d2c2:	e7e6      	b.n	800d292 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800d2c4:	4a12      	ldr	r2, [pc, #72]	; (800d310 <VerifyRfFreq+0x9c>)
 800d2c6:	4b13      	ldr	r3, [pc, #76]	; (800d314 <VerifyRfFreq+0xa0>)
 800d2c8:	18e3      	adds	r3, r4, r3
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d802      	bhi.n	800d2d4 <VerifyRfFreq+0x60>
        *band = 3;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	702b      	strb	r3, [r5, #0]
 800d2d2:	e7de      	b.n	800d292 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800d2d4:	4b10      	ldr	r3, [pc, #64]	; (800d318 <VerifyRfFreq+0xa4>)
 800d2d6:	469c      	mov	ip, r3
 800d2d8:	4464      	add	r4, ip
 800d2da:	4b10      	ldr	r3, [pc, #64]	; (800d31c <VerifyRfFreq+0xa8>)
 800d2dc:	429c      	cmp	r4, r3
 800d2de:	d802      	bhi.n	800d2e6 <VerifyRfFreq+0x72>
        *band = 4;
 800d2e0:	2304      	movs	r3, #4
 800d2e2:	702b      	strb	r3, [r5, #0]
 800d2e4:	e7d5      	b.n	800d292 <VerifyRfFreq+0x1e>
        return false;
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	e7d3      	b.n	800d292 <VerifyRfFreq+0x1e>
 800d2ea:	46c0      	nop			; (mov r8, r8)
 800d2ec:	08010b84 	.word	0x08010b84
 800d2f0:	001e847f 	.word	0x001e847f
 800d2f4:	cc8faa40 	.word	0xcc8faa40
 800d2f8:	002dc6c0 	.word	0x002dc6c0
 800d2fc:	cc7125c0 	.word	0xcc7125c0
 800d300:	000927bf 	.word	0x000927bf
 800d304:	cc435eff 	.word	0xcc435eff
 800d308:	0007a120 	.word	0x0007a120
 800d30c:	cc38b0a0 	.word	0xcc38b0a0
 800d310:	0003d090 	.word	0x0003d090
 800d314:	cc2e0240 	.word	0xcc2e0240
 800d318:	cc296e60 	.word	0xcc296e60
 800d31c:	000493e0 	.word	0x000493e0

0800d320 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 800d320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d322:	46de      	mov	lr, fp
 800d324:	4657      	mov	r7, sl
 800d326:	464e      	mov	r6, r9
 800d328:	4645      	mov	r5, r8
 800d32a:	b5e0      	push	{r5, r6, r7, lr}
 800d32c:	b083      	sub	sp, #12
 800d32e:	4682      	mov	sl, r0
 800d330:	9100      	str	r1, [sp, #0]
 800d332:	0017      	movs	r7, r2
 800d334:	4699      	mov	r9, r3
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTransmission = 0;

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 800d336:	2600      	movs	r6, #0
 800d338:	2300      	movs	r3, #0
 800d33a:	4698      	mov	r8, r3
    uint8_t delayTransmission = 0;
 800d33c:	9301      	str	r3, [sp, #4]
    uint8_t nbEnabledChannels = 0;
 800d33e:	469b      	mov	fp, r3
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 800d340:	4643      	mov	r3, r8
 800d342:	2b0f      	cmp	r3, #15
 800d344:	d946      	bls.n	800d3d4 <CountNbOfEnabledChannels+0xb4>
                enabledChannels[nbEnabledChannels++] = i + j;
            }
        }
    }

    *delayTx = delayTransmission;
 800d346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d348:	9a01      	ldr	r2, [sp, #4]
 800d34a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
}
 800d34c:	4658      	mov	r0, fp
 800d34e:	b003      	add	sp, #12
 800d350:	bcf0      	pop	{r4, r5, r6, r7}
 800d352:	46bb      	mov	fp, r7
 800d354:	46b2      	mov	sl, r6
 800d356:	46a9      	mov	r9, r5
 800d358:	46a0      	mov	r8, r4
 800d35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    delayTransmission++;
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	3301      	adds	r3, #1
 800d360:	b2db      	uxtb	r3, r3
 800d362:	9301      	str	r3, [sp, #4]
        for( uint8_t j = 0; j < 16; j++ )
 800d364:	3401      	adds	r4, #1
 800d366:	b2e4      	uxtb	r4, r4
 800d368:	2c0f      	cmp	r4, #15
 800d36a:	d835      	bhi.n	800d3d8 <CountNbOfEnabledChannels+0xb8>
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800d36c:	0073      	lsls	r3, r6, #1
 800d36e:	5bdb      	ldrh	r3, [r3, r7]
 800d370:	4123      	asrs	r3, r4
 800d372:	07db      	lsls	r3, r3, #31
 800d374:	d5f6      	bpl.n	800d364 <CountNbOfEnabledChannels+0x44>
                if( channels[i + j].Frequency == 0 )
 800d376:	4643      	mov	r3, r8
 800d378:	191b      	adds	r3, r3, r4
 800d37a:	005d      	lsls	r5, r3, #1
 800d37c:	18ed      	adds	r5, r5, r3
 800d37e:	00ad      	lsls	r5, r5, #2
 800d380:	444d      	add	r5, r9
 800d382:	682b      	ldr	r3, [r5, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0ed      	beq.n	800d364 <CountNbOfEnabledChannels+0x44>
                if( joined == false )
 800d388:	4653      	mov	r3, sl
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d103      	bne.n	800d396 <CountNbOfEnabledChannels+0x76>
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800d38e:	3307      	adds	r3, #7
 800d390:	4123      	asrs	r3, r4
 800d392:	07db      	lsls	r3, r3, #31
 800d394:	d5e6      	bpl.n	800d364 <CountNbOfEnabledChannels+0x44>
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800d396:	7a2a      	ldrb	r2, [r5, #8]
 800d398:	0111      	lsls	r1, r2, #4
 800d39a:	b249      	sxtb	r1, r1
 800d39c:	1109      	asrs	r1, r1, #4
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800d39e:	b252      	sxtb	r2, r2
 800d3a0:	1112      	asrs	r2, r2, #4
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800d3a2:	466b      	mov	r3, sp
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	5618      	ldrsb	r0, [r3, r0]
 800d3a8:	f7ff fd12 	bl	800cdd0 <RegionCommonValueInRange>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d0d9      	beq.n	800d364 <CountNbOfEnabledChannels+0x44>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800d3b0:	7a6b      	ldrb	r3, [r5, #9]
 800d3b2:	011b      	lsls	r3, r3, #4
 800d3b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3b6:	4694      	mov	ip, r2
 800d3b8:	4463      	add	r3, ip
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1cd      	bne.n	800d35c <CountNbOfEnabledChannels+0x3c>
                enabledChannels[nbEnabledChannels++] = i + j;
 800d3c0:	465b      	mov	r3, fp
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	4642      	mov	r2, r8
 800d3c6:	1912      	adds	r2, r2, r4
 800d3c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d3ca:	4658      	mov	r0, fp
 800d3cc:	540a      	strb	r2, [r1, r0]
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	469b      	mov	fp, r3
 800d3d2:	e7c7      	b.n	800d364 <CountNbOfEnabledChannels+0x44>
        for( uint8_t j = 0; j < 16; j++ )
 800d3d4:	2400      	movs	r4, #0
 800d3d6:	e7c7      	b.n	800d368 <CountNbOfEnabledChannels+0x48>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 800d3d8:	4643      	mov	r3, r8
 800d3da:	3310      	adds	r3, #16
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	4698      	mov	r8, r3
 800d3e0:	3601      	adds	r6, #1
 800d3e2:	b2f6      	uxtb	r6, r6
 800d3e4:	e7ac      	b.n	800d340 <CountNbOfEnabledChannels+0x20>
	...

0800d3e8 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800d3e8:	b500      	push	{lr}
 800d3ea:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 800d3f0:	7803      	ldrb	r3, [r0, #0]
 800d3f2:	3b0b      	subs	r3, #11
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	2a2a      	cmp	r2, #42	; 0x2a
 800d3f8:	d809      	bhi.n	800d40e <RegionEU868GetPhyParam+0x26>
 800d3fa:	0093      	lsls	r3, r2, #2
 800d3fc:	4a35      	ldr	r2, [pc, #212]	; (800d4d4 <RegionEU868GetPhyParam+0xec>)
 800d3fe:	58d3      	ldr	r3, [r2, r3]
 800d400:	469f      	mov	pc, r3
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800d402:	7840      	ldrb	r0, [r0, #1]
 800d404:	b240      	sxtb	r0, r0
 800d406:	2100      	movs	r1, #0
 800d408:	f7ff ff0f 	bl	800d22a <GetNextLowerTxDr>
 800d40c:	9000      	str	r0, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800d40e:	9800      	ldr	r0, [sp, #0]
 800d410:	b003      	add	sp, #12
 800d412:	bd00      	pop	{pc}
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 800d414:	2340      	movs	r3, #64	; 0x40
 800d416:	9300      	str	r3, [sp, #0]
            break;
 800d418:	e7f9      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_ADR_ACK_DELAY;
 800d41a:	2320      	movs	r3, #32
 800d41c:	9300      	str	r3, [sp, #0]
            break;
 800d41e:	e7f6      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800d420:	2201      	movs	r2, #1
 800d422:	5682      	ldrsb	r2, [r0, r2]
 800d424:	4b2c      	ldr	r3, [pc, #176]	; (800d4d8 <RegionEU868GetPhyParam+0xf0>)
 800d426:	189b      	adds	r3, r3, r2
 800d428:	2220      	movs	r2, #32
 800d42a:	5c9b      	ldrb	r3, [r3, r2]
 800d42c:	9300      	str	r3, [sp, #0]
            break;
 800d42e:	e7ee      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800d430:	2201      	movs	r2, #1
 800d432:	5682      	ldrsb	r2, [r0, r2]
 800d434:	4b28      	ldr	r3, [pc, #160]	; (800d4d8 <RegionEU868GetPhyParam+0xf0>)
 800d436:	189b      	adds	r3, r3, r2
 800d438:	2228      	movs	r2, #40	; 0x28
 800d43a:	5c9b      	ldrb	r3, [r3, r2]
 800d43c:	9300      	str	r3, [sp, #0]
            break;
 800d43e:	e7e6      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800d440:	2301      	movs	r3, #1
 800d442:	9300      	str	r3, [sp, #0]
            break;
 800d444:	e7e3      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800d446:	4b25      	ldr	r3, [pc, #148]	; (800d4dc <RegionEU868GetPhyParam+0xf4>)
 800d448:	9300      	str	r3, [sp, #0]
            break;
 800d44a:	e7e0      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_RECEIVE_DELAY1;
 800d44c:	23fa      	movs	r3, #250	; 0xfa
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	9300      	str	r3, [sp, #0]
            break;
 800d452:	e7dc      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_RECEIVE_DELAY2;
 800d454:	23fa      	movs	r3, #250	; 0xfa
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	9300      	str	r3, [sp, #0]
            break;
 800d45a:	e7d8      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 800d45c:	4b20      	ldr	r3, [pc, #128]	; (800d4e0 <RegionEU868GetPhyParam+0xf8>)
 800d45e:	9300      	str	r3, [sp, #0]
            break;
 800d460:	e7d5      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 800d462:	4b20      	ldr	r3, [pc, #128]	; (800d4e4 <RegionEU868GetPhyParam+0xfc>)
 800d464:	9300      	str	r3, [sp, #0]
            break;
 800d466:	e7d2      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_MAX_FCNT_GAP;
 800d468:	2380      	movs	r3, #128	; 0x80
 800d46a:	01db      	lsls	r3, r3, #7
 800d46c:	9300      	str	r3, [sp, #0]
            break;
 800d46e:	e7ce      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 800d470:	21fa      	movs	r1, #250	; 0xfa
 800d472:	0089      	lsls	r1, r1, #2
 800d474:	481c      	ldr	r0, [pc, #112]	; (800d4e8 <RegionEU868GetPhyParam+0x100>)
 800d476:	f001 fc4b 	bl	800ed10 <randr>
 800d47a:	23fa      	movs	r3, #250	; 0xfa
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	469c      	mov	ip, r3
 800d480:	4460      	add	r0, ip
 800d482:	9000      	str	r0, [sp, #0]
            break;
 800d484:	e7c3      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800d486:	4b19      	ldr	r3, [pc, #100]	; (800d4ec <RegionEU868GetPhyParam+0x104>)
 800d488:	9300      	str	r3, [sp, #0]
            break;
 800d48a:	e7c0      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800d48c:	4b18      	ldr	r3, [pc, #96]	; (800d4f0 <RegionEU868GetPhyParam+0x108>)
 800d48e:	9300      	str	r3, [sp, #0]
            break;
 800d490:	e7bd      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800d492:	4b18      	ldr	r3, [pc, #96]	; (800d4f4 <RegionEU868GetPhyParam+0x10c>)
 800d494:	9300      	str	r3, [sp, #0]
            break;
 800d496:	e7ba      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800d498:	2310      	movs	r3, #16
 800d49a:	9300      	str	r3, [sp, #0]
            break;
 800d49c:	e7b7      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Channels = NvmCtx.Channels;
 800d49e:	4b16      	ldr	r3, [pc, #88]	; (800d4f8 <RegionEU868GetPhyParam+0x110>)
 800d4a0:	9300      	str	r3, [sp, #0]
            break;
 800d4a2:	e7b4      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d4a4:	2383      	movs	r3, #131	; 0x83
 800d4a6:	05db      	lsls	r3, r3, #23
 800d4a8:	9300      	str	r3, [sp, #0]
            break;
 800d4aa:	e7b0      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d4ac:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <RegionEU868GetPhyParam+0x114>)
 800d4ae:	9300      	str	r3, [sp, #0]
            break;
 800d4b0:	e7ad      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800d4b2:	4b0e      	ldr	r3, [pc, #56]	; (800d4ec <RegionEU868GetPhyParam+0x104>)
 800d4b4:	9300      	str	r3, [sp, #0]
            break;
 800d4b6:	e7aa      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d4b8:	2311      	movs	r3, #17
 800d4ba:	466a      	mov	r2, sp
 800d4bc:	7013      	strb	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800d4be:	3b0f      	subs	r3, #15
 800d4c0:	7053      	strb	r3, [r2, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	7093      	strb	r3, [r2, #2]
            break;
 800d4c6:	e7a2      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	9300      	str	r3, [sp, #0]
            break;
 800d4cc:	e79f      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	9300      	str	r3, [sp, #0]
            break;
 800d4d2:	e79c      	b.n	800d40e <RegionEU868GetPhyParam+0x26>
 800d4d4:	08011304 	.word	0x08011304
 800d4d8:	080113f0 	.word	0x080113f0
 800d4dc:	00000bb8 	.word	0x00000bb8
 800d4e0:	00001388 	.word	0x00001388
 800d4e4:	00001770 	.word	0x00001770
 800d4e8:	fffffc18 	.word	0xfffffc18
 800d4ec:	33d3e608 	.word	0x33d3e608
 800d4f0:	20000fd0 	.word	0x20000fd0
 800d4f4:	20000fd2 	.word	0x20000fd2
 800d4f8:	20000eb0 	.word	0x20000eb0
 800d4fc:	4009999a 	.word	0x4009999a

0800d500 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d500:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800d502:	7802      	ldrb	r2, [r0, #0]
 800d504:	4c06      	ldr	r4, [pc, #24]	; (800d520 <RegionEU868SetBandTxDone+0x20>)
 800d506:	0053      	lsls	r3, r2, #1
 800d508:	189b      	adds	r3, r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	18e3      	adds	r3, r4, r3
 800d50e:	7a59      	ldrb	r1, [r3, #9]
 800d510:	6842      	ldr	r2, [r0, #4]
 800d512:	310c      	adds	r1, #12
 800d514:	0109      	lsls	r1, r1, #4
 800d516:	1909      	adds	r1, r1, r4
 800d518:	7840      	ldrb	r0, [r0, #1]
 800d51a:	f7ff fce2 	bl	800cee2 <RegionCommonSetBandTxDone>
}
 800d51e:	bd10      	pop	{r4, pc}
 800d520:	20000eb0 	.word	0x20000eb0

0800d524 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d526:	b099      	sub	sp, #100	; 0x64
 800d528:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d52a:	2260      	movs	r2, #96	; 0x60
 800d52c:	2100      	movs	r1, #0
 800d52e:	4668      	mov	r0, sp
 800d530:	f002 fd28 	bl	800ff84 <memset>
 800d534:	2364      	movs	r3, #100	; 0x64
 800d536:	466a      	mov	r2, sp
 800d538:	8013      	strh	r3, [r2, #0]
 800d53a:	8213      	strh	r3, [r2, #16]
 800d53c:	22fa      	movs	r2, #250	; 0xfa
 800d53e:	0092      	lsls	r2, r2, #2
 800d540:	4669      	mov	r1, sp
 800d542:	840a      	strh	r2, [r1, #32]
 800d544:	210a      	movs	r1, #10
 800d546:	4668      	mov	r0, sp
 800d548:	8601      	strh	r1, [r0, #48]	; 0x30
 800d54a:	3136      	adds	r1, #54	; 0x36
 800d54c:	5243      	strh	r3, [r0, r1]
 800d54e:	3b14      	subs	r3, #20
 800d550:	4669      	mov	r1, sp
 800d552:	52c2      	strh	r2, [r0, r3]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d554:	7923      	ldrb	r3, [r4, #4]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d02e      	beq.n	800d5b8 <RegionEU868InitDefaults+0x94>
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d023      	beq.n	800d5a6 <RegionEU868InitDefaults+0x82>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <RegionEU868InitDefaults+0x42>
        default:
        {
            break;
        }
    }
}
 800d562:	b019      	add	sp, #100	; 0x64
 800d564:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d566:	4c20      	ldr	r4, [pc, #128]	; (800d5e8 <RegionEU868InitDefaults+0xc4>)
 800d568:	2260      	movs	r2, #96	; 0x60
 800d56a:	0020      	movs	r0, r4
 800d56c:	f001 fbdb 	bl	800ed26 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d570:	0020      	movs	r0, r4
 800d572:	38c0      	subs	r0, #192	; 0xc0
 800d574:	4a1d      	ldr	r2, [pc, #116]	; (800d5ec <RegionEU868InitDefaults+0xc8>)
 800d576:	0013      	movs	r3, r2
 800d578:	3330      	adds	r3, #48	; 0x30
 800d57a:	0001      	movs	r1, r0
 800d57c:	cbe0      	ldmia	r3!, {r5, r6, r7}
 800d57e:	c1e0      	stmia	r1!, {r5, r6, r7}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d580:	0013      	movs	r3, r2
 800d582:	333c      	adds	r3, #60	; 0x3c
 800d584:	cbe0      	ldmia	r3!, {r5, r6, r7}
 800d586:	c1e0      	stmia	r1!, {r5, r6, r7}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d588:	3ca8      	subs	r4, #168	; 0xa8
 800d58a:	3248      	adds	r2, #72	; 0x48
 800d58c:	ca2a      	ldmia	r2!, {r1, r3, r5}
 800d58e:	c42a      	stmia	r4!, {r1, r3, r5}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d590:	2391      	movs	r3, #145	; 0x91
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	2207      	movs	r2, #7
 800d596:	52c2      	strh	r2, [r0, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800d598:	18c1      	adds	r1, r0, r3
 800d59a:	3021      	adds	r0, #33	; 0x21
 800d59c:	30ff      	adds	r0, #255	; 0xff
 800d59e:	3a06      	subs	r2, #6
 800d5a0:	f7ff fc90 	bl	800cec4 <RegionCommonChanMaskCopy>
            break;
 800d5a4:	e7dd      	b.n	800d562 <RegionEU868InitDefaults+0x3e>
            if( params->NvmCtx != 0 )
 800d5a6:	6821      	ldr	r1, [r4, #0]
 800d5a8:	2900      	cmp	r1, #0
 800d5aa:	d0da      	beq.n	800d562 <RegionEU868InitDefaults+0x3e>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800d5ac:	2292      	movs	r2, #146	; 0x92
 800d5ae:	0052      	lsls	r2, r2, #1
 800d5b0:	480f      	ldr	r0, [pc, #60]	; (800d5f0 <RegionEU868InitDefaults+0xcc>)
 800d5b2:	f001 fbb8 	bl	800ed26 <memcpy1>
 800d5b6:	e7d4      	b.n	800d562 <RegionEU868InitDefaults+0x3e>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800d5b8:	4b0d      	ldr	r3, [pc, #52]	; (800d5f0 <RegionEU868InitDefaults+0xcc>)
 800d5ba:	2291      	movs	r2, #145	; 0x91
 800d5bc:	0052      	lsls	r2, r2, #1
 800d5be:	5a9a      	ldrh	r2, [r3, r2]
 800d5c0:	2190      	movs	r1, #144	; 0x90
 800d5c2:	0049      	lsls	r1, r1, #1
 800d5c4:	5a58      	ldrh	r0, [r3, r1]
 800d5c6:	4302      	orrs	r2, r0
 800d5c8:	525a      	strh	r2, [r3, r1]
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d5ca:	4a08      	ldr	r2, [pc, #32]	; (800d5ec <RegionEU868InitDefaults+0xc8>)
 800d5cc:	0011      	movs	r1, r2
 800d5ce:	3130      	adds	r1, #48	; 0x30
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	c970      	ldmia	r1!, {r4, r5, r6}
 800d5d4:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d5d6:	0011      	movs	r1, r2
 800d5d8:	313c      	adds	r1, #60	; 0x3c
 800d5da:	c970      	ldmia	r1!, {r4, r5, r6}
 800d5dc:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d5de:	3318      	adds	r3, #24
 800d5e0:	3248      	adds	r2, #72	; 0x48
 800d5e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d5e4:	c313      	stmia	r3!, {r0, r1, r4}
}
 800d5e6:	e7bc      	b.n	800d562 <RegionEU868InitDefaults+0x3e>
 800d5e8:	20000f70 	.word	0x20000f70
 800d5ec:	080113f0 	.word	0x080113f0
 800d5f0:	20000eb0 	.word	0x20000eb0

0800d5f4 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 800d5f4:	2392      	movs	r3, #146	; 0x92
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800d5fa:	4801      	ldr	r0, [pc, #4]	; (800d600 <RegionEU868GetNvmCtx+0xc>)
 800d5fc:	4770      	bx	lr
 800d5fe:	46c0      	nop			; (mov r8, r8)
 800d600:	20000eb0 	.word	0x20000eb0

0800d604 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d604:	b500      	push	{lr}
 800d606:	b083      	sub	sp, #12
    switch( phyAttribute )
 800d608:	290f      	cmp	r1, #15
 800d60a:	d835      	bhi.n	800d678 <RegionEU868Verify+0x74>
 800d60c:	0089      	lsls	r1, r1, #2
 800d60e:	4b1c      	ldr	r3, [pc, #112]	; (800d680 <RegionEU868Verify+0x7c>)
 800d610:	585b      	ldr	r3, [r3, r1]
 800d612:	469f      	mov	pc, r3
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d614:	2001      	movs	r0, #1
 800d616:	e030      	b.n	800d67a <RegionEU868Verify+0x76>
            uint8_t band = 0;
 800d618:	466b      	mov	r3, sp
 800d61a:	1dd9      	adds	r1, r3, #7
 800d61c:	2300      	movs	r3, #0
 800d61e:	700b      	strb	r3, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 800d620:	6800      	ldr	r0, [r0, #0]
 800d622:	f7ff fe27 	bl	800d274 <VerifyRfFreq>
 800d626:	e028      	b.n	800d67a <RegionEU868Verify+0x76>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800d628:	7800      	ldrb	r0, [r0, #0]
 800d62a:	b240      	sxtb	r0, r0
 800d62c:	2207      	movs	r2, #7
 800d62e:	2100      	movs	r1, #0
 800d630:	f7ff fbce 	bl	800cdd0 <RegionCommonValueInRange>
 800d634:	1e43      	subs	r3, r0, #1
 800d636:	4198      	sbcs	r0, r3
 800d638:	b2c0      	uxtb	r0, r0
 800d63a:	e01e      	b.n	800d67a <RegionEU868Verify+0x76>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d63c:	7800      	ldrb	r0, [r0, #0]
 800d63e:	b240      	sxtb	r0, r0
 800d640:	2205      	movs	r2, #5
 800d642:	2100      	movs	r1, #0
 800d644:	f7ff fbc4 	bl	800cdd0 <RegionCommonValueInRange>
 800d648:	1e43      	subs	r3, r0, #1
 800d64a:	4198      	sbcs	r0, r3
 800d64c:	b2c0      	uxtb	r0, r0
 800d64e:	e014      	b.n	800d67a <RegionEU868Verify+0x76>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d650:	7800      	ldrb	r0, [r0, #0]
 800d652:	b240      	sxtb	r0, r0
 800d654:	2207      	movs	r2, #7
 800d656:	2100      	movs	r1, #0
 800d658:	f7ff fbba 	bl	800cdd0 <RegionCommonValueInRange>
 800d65c:	1e43      	subs	r3, r0, #1
 800d65e:	4198      	sbcs	r0, r3
 800d660:	b2c0      	uxtb	r0, r0
 800d662:	e00a      	b.n	800d67a <RegionEU868Verify+0x76>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d664:	7800      	ldrb	r0, [r0, #0]
 800d666:	b240      	sxtb	r0, r0
 800d668:	2207      	movs	r2, #7
 800d66a:	2100      	movs	r1, #0
 800d66c:	f7ff fbb0 	bl	800cdd0 <RegionCommonValueInRange>
 800d670:	1e43      	subs	r3, r0, #1
 800d672:	4198      	sbcs	r0, r3
 800d674:	b2c0      	uxtb	r0, r0
 800d676:	e000      	b.n	800d67a <RegionEU868Verify+0x76>
            return false;
 800d678:	2000      	movs	r0, #0
    }
}
 800d67a:	b003      	add	sp, #12
 800d67c:	bd00      	pop	{pc}
 800d67e:	46c0      	nop			; (mov r8, r8)
 800d680:	080113b0 	.word	0x080113b0

0800d684 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d684:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800d686:	7903      	ldrb	r3, [r0, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <RegionEU868ChanMaskSet+0x10>
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d008      	beq.n	800d6a2 <RegionEU868ChanMaskSet+0x1e>
 800d690:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800d692:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d694:	6801      	ldr	r1, [r0, #0]
 800d696:	2201      	movs	r2, #1
 800d698:	4805      	ldr	r0, [pc, #20]	; (800d6b0 <RegionEU868ChanMaskSet+0x2c>)
 800d69a:	f7ff fc13 	bl	800cec4 <RegionCommonChanMaskCopy>
    return true;
 800d69e:	2001      	movs	r0, #1
            break;
 800d6a0:	e7f7      	b.n	800d692 <RegionEU868ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d6a2:	6801      	ldr	r1, [r0, #0]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	4803      	ldr	r0, [pc, #12]	; (800d6b4 <RegionEU868ChanMaskSet+0x30>)
 800d6a8:	f7ff fc0c 	bl	800cec4 <RegionCommonChanMaskCopy>
    return true;
 800d6ac:	2001      	movs	r0, #1
            break;
 800d6ae:	e7f0      	b.n	800d692 <RegionEU868ChanMaskSet+0xe>
 800d6b0:	20000fd0 	.word	0x20000fd0
 800d6b4:	20000fd2 	.word	0x20000fd2

0800d6b8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ba:	46ce      	mov	lr, r9
 800d6bc:	4647      	mov	r7, r8
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b085      	sub	sp, #20
 800d6c2:	4688      	mov	r8, r1
 800d6c4:	4691      	mov	r9, r2
 800d6c6:	001c      	movs	r4, r3
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d6c8:	1c03      	adds	r3, r0, #0
 800d6ca:	2807      	cmp	r0, #7
 800d6cc:	dd00      	ble.n	800d6d0 <RegionEU868ComputeRxWindowParameters+0x18>
 800d6ce:	2307      	movs	r3, #7
 800d6d0:	b25d      	sxtb	r5, r3
 800d6d2:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800d6d4:	0028      	movs	r0, r5
 800d6d6:	f7ff fdb1 	bl	800d23c <GetBandwidth>
 800d6da:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d6dc:	2d07      	cmp	r5, #7
 800d6de:	d01d      	beq.n	800d71c <RegionEU868ComputeRxWindowParameters+0x64>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d6e0:	4b13      	ldr	r3, [pc, #76]	; (800d730 <RegionEU868ComputeRxWindowParameters+0x78>)
 800d6e2:	00aa      	lsls	r2, r5, #2
 800d6e4:	58d1      	ldr	r1, [r2, r3]
 800d6e6:	195d      	adds	r5, r3, r5
 800d6e8:	2354      	movs	r3, #84	; 0x54
 800d6ea:	5ce8      	ldrb	r0, [r5, r3]
 800d6ec:	f7ff fccc 	bl	800d088 <RegionCommonComputeSymbolTimeLoRa>
 800d6f0:	0006      	movs	r6, r0
 800d6f2:	000f      	movs	r7, r1
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d6f4:	4b0f      	ldr	r3, [pc, #60]	; (800d734 <RegionEU868ComputeRxWindowParameters+0x7c>)
 800d6f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f8:	4798      	blx	r3
 800d6fa:	0023      	movs	r3, r4
 800d6fc:	330c      	adds	r3, #12
 800d6fe:	9302      	str	r3, [sp, #8]
 800d700:	3408      	adds	r4, #8
 800d702:	9401      	str	r4, [sp, #4]
 800d704:	9000      	str	r0, [sp, #0]
 800d706:	464b      	mov	r3, r9
 800d708:	4642      	mov	r2, r8
 800d70a:	0030      	movs	r0, r6
 800d70c:	0039      	movs	r1, r7
 800d70e:	f7ff fce1 	bl	800d0d4 <RegionCommonComputeRxWindowParameters>
}
 800d712:	b005      	add	sp, #20
 800d714:	bcc0      	pop	{r6, r7}
 800d716:	46b9      	mov	r9, r7
 800d718:	46b0      	mov	r8, r6
 800d71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d71c:	4b04      	ldr	r3, [pc, #16]	; (800d730 <RegionEU868ComputeRxWindowParameters+0x78>)
 800d71e:	195d      	adds	r5, r3, r5
 800d720:	2354      	movs	r3, #84	; 0x54
 800d722:	5ce8      	ldrb	r0, [r5, r3]
 800d724:	f7ff fcca 	bl	800d0bc <RegionCommonComputeSymbolTimeFsk>
 800d728:	0006      	movs	r6, r0
 800d72a:	000f      	movs	r7, r1
 800d72c:	e7e2      	b.n	800d6f4 <RegionEU868ComputeRxWindowParameters+0x3c>
 800d72e:	46c0      	nop			; (mov r8, r8)
 800d730:	080113f0 	.word	0x080113f0
 800d734:	08010b84 	.word	0x08010b84

0800d738 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d73a:	46ce      	mov	lr, r9
 800d73c:	4647      	mov	r7, r8
 800d73e:	b580      	push	{r7, lr}
 800d740:	b08d      	sub	sp, #52	; 0x34
 800d742:	0004      	movs	r4, r0
 800d744:	910b      	str	r1, [sp, #44]	; 0x2c
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d746:	2701      	movs	r7, #1
 800d748:	57c7      	ldrsb	r7, [r0, r7]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d74a:	6846      	ldr	r6, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d74c:	4b38      	ldr	r3, [pc, #224]	; (800d830 <RegionEU868RxConfig+0xf8>)
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	4798      	blx	r3
 800d752:	1e05      	subs	r5, r0, #0
 800d754:	d169      	bne.n	800d82a <RegionEU868RxConfig+0xf2>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d756:	7ce3      	ldrb	r3, [r4, #19]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10c      	bne.n	800d776 <RegionEU868RxConfig+0x3e>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800d75c:	7821      	ldrb	r1, [r4, #0]
 800d75e:	4a35      	ldr	r2, [pc, #212]	; (800d834 <RegionEU868RxConfig+0xfc>)
 800d760:	004b      	lsls	r3, r1, #1
 800d762:	1858      	adds	r0, r3, r1
 800d764:	0080      	lsls	r0, r0, #2
 800d766:	5880      	ldr	r0, [r0, r2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d768:	185b      	adds	r3, r3, r1
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	18d3      	adds	r3, r2, r3
 800d76e:	685e      	ldr	r6, [r3, #4]
 800d770:	2e00      	cmp	r6, #0
 800d772:	d100      	bne.n	800d776 <RegionEU868RxConfig+0x3e>
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800d774:	0006      	movs	r6, r0
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d776:	4b30      	ldr	r3, [pc, #192]	; (800d838 <RegionEU868RxConfig+0x100>)
 800d778:	19db      	adds	r3, r3, r7
 800d77a:	2254      	movs	r2, #84	; 0x54
 800d77c:	569b      	ldrsb	r3, [r3, r2]
 800d77e:	4699      	mov	r9, r3

    Radio.SetChannel( frequency );
 800d780:	4b2b      	ldr	r3, [pc, #172]	; (800d830 <RegionEU868RxConfig+0xf8>)
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	0030      	movs	r0, r6
 800d786:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d788:	2f07      	cmp	r7, #7
 800d78a:	d02b      	beq.n	800d7e4 <RegionEU868RxConfig+0xac>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d78c:	4b28      	ldr	r3, [pc, #160]	; (800d830 <RegionEU868RxConfig+0xf8>)
 800d78e:	6a1d      	ldr	r5, [r3, #32]
 800d790:	78a1      	ldrb	r1, [r4, #2]
 800d792:	7ca3      	ldrb	r3, [r4, #18]
 800d794:	9309      	str	r3, [sp, #36]	; 0x24
 800d796:	2301      	movs	r3, #1
 800d798:	9308      	str	r3, [sp, #32]
 800d79a:	2300      	movs	r3, #0
 800d79c:	9307      	str	r3, [sp, #28]
 800d79e:	9306      	str	r3, [sp, #24]
 800d7a0:	9305      	str	r3, [sp, #20]
 800d7a2:	9304      	str	r3, [sp, #16]
 800d7a4:	9303      	str	r3, [sp, #12]
 800d7a6:	8922      	ldrh	r2, [r4, #8]
 800d7a8:	9202      	str	r2, [sp, #8]
 800d7aa:	2208      	movs	r2, #8
 800d7ac:	9201      	str	r2, [sp, #4]
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	464a      	mov	r2, r9
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	47a8      	blx	r5
        modem = MODEM_LORA;
 800d7b8:	2501      	movs	r5, #1
    }

    if( rxConfig->RepeaterSupport == true )
 800d7ba:	7c63      	ldrb	r3, [r4, #17]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d02f      	beq.n	800d820 <RegionEU868RxConfig+0xe8>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d7c0:	4b1d      	ldr	r3, [pc, #116]	; (800d838 <RegionEU868RxConfig+0x100>)
 800d7c2:	19db      	adds	r3, r3, r7
 800d7c4:	2228      	movs	r2, #40	; 0x28
 800d7c6:	5c99      	ldrb	r1, [r3, r2]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800d7c8:	4b19      	ldr	r3, [pc, #100]	; (800d830 <RegionEU868RxConfig+0xf8>)
 800d7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7cc:	310d      	adds	r1, #13
 800d7ce:	b2c9      	uxtb	r1, r1
 800d7d0:	0028      	movs	r0, r5
 800d7d2:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 800d7d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7d6:	701f      	strb	r7, [r3, #0]
    return true;
 800d7d8:	2001      	movs	r0, #1
}
 800d7da:	b00d      	add	sp, #52	; 0x34
 800d7dc:	bcc0      	pop	{r6, r7}
 800d7de:	46b9      	mov	r9, r7
 800d7e0:	46b0      	mov	r8, r6
 800d7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d7e4:	4b12      	ldr	r3, [pc, #72]	; (800d830 <RegionEU868RxConfig+0xf8>)
 800d7e6:	6a1b      	ldr	r3, [r3, #32]
 800d7e8:	4698      	mov	r8, r3
 800d7ea:	464b      	mov	r3, r9
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	0092      	lsls	r2, r2, #2
 800d7f2:	444a      	add	r2, r9
 800d7f4:	00d2      	lsls	r2, r2, #3
 800d7f6:	7ca3      	ldrb	r3, [r4, #18]
 800d7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	9308      	str	r3, [sp, #32]
 800d7fe:	9307      	str	r3, [sp, #28]
 800d800:	9306      	str	r3, [sp, #24]
 800d802:	2101      	movs	r1, #1
 800d804:	9105      	str	r1, [sp, #20]
 800d806:	9304      	str	r3, [sp, #16]
 800d808:	9303      	str	r3, [sp, #12]
 800d80a:	8923      	ldrh	r3, [r4, #8]
 800d80c:	9302      	str	r3, [sp, #8]
 800d80e:	2305      	movs	r3, #5
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	4b0a      	ldr	r3, [pc, #40]	; (800d83c <RegionEU868RxConfig+0x104>)
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	2300      	movs	r3, #0
 800d818:	4909      	ldr	r1, [pc, #36]	; (800d840 <RegionEU868RxConfig+0x108>)
 800d81a:	2000      	movs	r0, #0
 800d81c:	47c0      	blx	r8
 800d81e:	e7cc      	b.n	800d7ba <RegionEU868RxConfig+0x82>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d820:	4b05      	ldr	r3, [pc, #20]	; (800d838 <RegionEU868RxConfig+0x100>)
 800d822:	19db      	adds	r3, r3, r7
 800d824:	2220      	movs	r2, #32
 800d826:	5c99      	ldrb	r1, [r3, r2]
 800d828:	e7ce      	b.n	800d7c8 <RegionEU868RxConfig+0x90>
        return false;
 800d82a:	2000      	movs	r0, #0
 800d82c:	e7d5      	b.n	800d7da <RegionEU868RxConfig+0xa2>
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	08010b84 	.word	0x08010b84
 800d834:	20000eb0 	.word	0x20000eb0
 800d838:	080113f0 	.word	0x080113f0
 800d83c:	00014585 	.word	0x00014585
 800d840:	0000c350 	.word	0x0000c350

0800d844 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d846:	46de      	mov	lr, fp
 800d848:	4657      	mov	r7, sl
 800d84a:	464e      	mov	r6, r9
 800d84c:	4645      	mov	r5, r8
 800d84e:	b5e0      	push	{r5, r6, r7, lr}
 800d850:	b08b      	sub	sp, #44	; 0x2c
 800d852:	0004      	movs	r4, r0
 800d854:	4689      	mov	r9, r1
 800d856:	0017      	movs	r7, r2
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d858:	2301      	movs	r3, #1
 800d85a:	56c3      	ldrsb	r3, [r0, r3]
 800d85c:	4698      	mov	r8, r3
 800d85e:	4b3b      	ldr	r3, [pc, #236]	; (800d94c <RegionEU868TxConfig+0x108>)
 800d860:	4443      	add	r3, r8
 800d862:	2254      	movs	r2, #84	; 0x54
 800d864:	569e      	ldrsb	r6, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800d866:	7802      	ldrb	r2, [r0, #0]
 800d868:	4d39      	ldr	r5, [pc, #228]	; (800d950 <RegionEU868TxConfig+0x10c>)
 800d86a:	0053      	lsls	r3, r2, #1
 800d86c:	189b      	adds	r3, r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	18eb      	adds	r3, r5, r3
 800d872:	7a58      	ldrb	r0, [r3, #9]
 800d874:	002b      	movs	r3, r5
 800d876:	3321      	adds	r3, #33	; 0x21
 800d878:	33ff      	adds	r3, #255	; 0xff
 800d87a:	300c      	adds	r0, #12
 800d87c:	0100      	lsls	r0, r0, #4
 800d87e:	1828      	adds	r0, r5, r0
 800d880:	2102      	movs	r1, #2
 800d882:	5641      	ldrsb	r1, [r0, r1]
 800d884:	2002      	movs	r0, #2
 800d886:	5620      	ldrsb	r0, [r4, r0]
 800d888:	4642      	mov	r2, r8
 800d88a:	f7ff fced 	bl	800d268 <LimitTxPower>
 800d88e:	4682      	mov	sl, r0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800d890:	4640      	mov	r0, r8
 800d892:	f7ff fcd3 	bl	800d23c <GetBandwidth>
 800d896:	4683      	mov	fp, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d898:	68a2      	ldr	r2, [r4, #8]
 800d89a:	6861      	ldr	r1, [r4, #4]
 800d89c:	4650      	mov	r0, sl
 800d89e:	f7ff fc73 	bl	800d188 <RegionCommonComputeTxPower>
 800d8a2:	4680      	mov	r8, r0

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800d8a4:	4b2b      	ldr	r3, [pc, #172]	; (800d954 <RegionEU868TxConfig+0x110>)
 800d8a6:	695a      	ldr	r2, [r3, #20]
 800d8a8:	7821      	ldrb	r1, [r4, #0]
 800d8aa:	004b      	lsls	r3, r1, #1
 800d8ac:	185b      	adds	r3, r3, r1
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	5958      	ldr	r0, [r3, r5]
 800d8b2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	56e3      	ldrsb	r3, [r4, r3]
 800d8b8:	2b07      	cmp	r3, #7
 800d8ba:	d02a      	beq.n	800d912 <RegionEU868TxConfig+0xce>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d8bc:	4b25      	ldr	r3, [pc, #148]	; (800d954 <RegionEU868TxConfig+0x110>)
 800d8be:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d8c0:	23fa      	movs	r3, #250	; 0xfa
 800d8c2:	011b      	lsls	r3, r3, #4
 800d8c4:	9308      	str	r3, [sp, #32]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9307      	str	r3, [sp, #28]
 800d8ca:	9306      	str	r3, [sp, #24]
 800d8cc:	9305      	str	r3, [sp, #20]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	9204      	str	r2, [sp, #16]
 800d8d2:	9303      	str	r3, [sp, #12]
 800d8d4:	3308      	adds	r3, #8
 800d8d6:	9302      	str	r3, [sp, #8]
 800d8d8:	9201      	str	r2, [sp, #4]
 800d8da:	9600      	str	r6, [sp, #0]
 800d8dc:	465b      	mov	r3, fp
 800d8de:	2200      	movs	r2, #0
 800d8e0:	4641      	mov	r1, r8
 800d8e2:	2001      	movs	r0, #1
 800d8e4:	47a8      	blx	r5
        modem = MODEM_LORA;
 800d8e6:	2501      	movs	r5, #1
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d8e8:	4e1a      	ldr	r6, [pc, #104]	; (800d954 <RegionEU868TxConfig+0x110>)
 800d8ea:	7b21      	ldrb	r1, [r4, #12]
 800d8ec:	0028      	movs	r0, r5
 800d8ee:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800d8f0:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800d8f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d8f4:	7b21      	ldrb	r1, [r4, #12]
 800d8f6:	0028      	movs	r0, r5
 800d8f8:	4798      	blx	r3
 800d8fa:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800d8fc:	464b      	mov	r3, r9
 800d8fe:	4652      	mov	r2, sl
 800d900:	701a      	strb	r2, [r3, #0]
    return true;
}
 800d902:	2001      	movs	r0, #1
 800d904:	b00b      	add	sp, #44	; 0x2c
 800d906:	bcf0      	pop	{r4, r5, r6, r7}
 800d908:	46bb      	mov	fp, r7
 800d90a:	46b2      	mov	sl, r6
 800d90c:	46a9      	mov	r9, r5
 800d90e:	46a0      	mov	r8, r4
 800d910:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d912:	4b10      	ldr	r3, [pc, #64]	; (800d954 <RegionEU868TxConfig+0x110>)
 800d914:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d916:	0173      	lsls	r3, r6, #5
 800d918:	1b9b      	subs	r3, r3, r6
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	199b      	adds	r3, r3, r6
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	22fa      	movs	r2, #250	; 0xfa
 800d922:	0112      	lsls	r2, r2, #4
 800d924:	9208      	str	r2, [sp, #32]
 800d926:	2200      	movs	r2, #0
 800d928:	9207      	str	r2, [sp, #28]
 800d92a:	9206      	str	r2, [sp, #24]
 800d92c:	9205      	str	r2, [sp, #20]
 800d92e:	2101      	movs	r1, #1
 800d930:	9104      	str	r1, [sp, #16]
 800d932:	9203      	str	r2, [sp, #12]
 800d934:	3104      	adds	r1, #4
 800d936:	9102      	str	r1, [sp, #8]
 800d938:	9201      	str	r2, [sp, #4]
 800d93a:	9300      	str	r3, [sp, #0]
 800d93c:	465b      	mov	r3, fp
 800d93e:	4a06      	ldr	r2, [pc, #24]	; (800d958 <RegionEU868TxConfig+0x114>)
 800d940:	4641      	mov	r1, r8
 800d942:	2000      	movs	r0, #0
 800d944:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d946:	2500      	movs	r5, #0
 800d948:	e7ce      	b.n	800d8e8 <RegionEU868TxConfig+0xa4>
 800d94a:	46c0      	nop			; (mov r8, r8)
 800d94c:	080113f0 	.word	0x080113f0
 800d950:	20000eb0 	.word	0x20000eb0
 800d954:	08010b84 	.word	0x08010b84
 800d958:	000061a8 	.word	0x000061a8

0800d95c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d95e:	46d6      	mov	lr, sl
 800d960:	464f      	mov	r7, r9
 800d962:	4646      	mov	r6, r8
 800d964:	b5c0      	push	{r6, r7, lr}
 800d966:	b08e      	sub	sp, #56	; 0x38
 800d968:	0006      	movs	r6, r0
 800d96a:	468a      	mov	sl, r1
 800d96c:	4691      	mov	r9, r2
 800d96e:	4698      	mov	r8, r3
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d970:	232e      	movs	r3, #46	; 0x2e
 800d972:	446b      	add	r3, sp
 800d974:	2200      	movs	r2, #0
 800d976:	801a      	strh	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 800d978:	2500      	movs	r5, #0
    uint8_t status = 0x07;
 800d97a:	2707      	movs	r7, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d97c:	e029      	b.n	800d9d2 <RegionEU868LinkAdrReq+0x76>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d97e:	2400      	movs	r4, #0
        status = 0x07;
 800d980:	2707      	movs	r7, #7
 800d982:	e00f      	b.n	800d9a4 <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800d984:	0062      	lsls	r2, r4, #1
 800d986:	1912      	adds	r2, r2, r4
 800d988:	0092      	lsls	r2, r2, #2
 800d98a:	4951      	ldr	r1, [pc, #324]	; (800dad0 <RegionEU868LinkAdrReq+0x174>)
 800d98c:	5852      	ldr	r2, [r2, r1]
 800d98e:	2a00      	cmp	r2, #0
 800d990:	d006      	beq.n	800d9a0 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d992:	2001      	movs	r0, #1
 800d994:	40a0      	lsls	r0, r4
 800d996:	212e      	movs	r1, #46	; 0x2e
 800d998:	4469      	add	r1, sp
 800d99a:	880a      	ldrh	r2, [r1, #0]
 800d99c:	4302      	orrs	r2, r0
 800d99e:	800a      	strh	r2, [r1, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d9a0:	3401      	adds	r4, #1
 800d9a2:	b2e4      	uxtb	r4, r4
 800d9a4:	2c0f      	cmp	r4, #15
 800d9a6:	d814      	bhi.n	800d9d2 <RegionEU868LinkAdrReq+0x76>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d9a8:	2b06      	cmp	r3, #6
 800d9aa:	d0eb      	beq.n	800d984 <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d9ac:	222e      	movs	r2, #46	; 0x2e
 800d9ae:	446a      	add	r2, sp
 800d9b0:	8812      	ldrh	r2, [r2, #0]
 800d9b2:	4122      	asrs	r2, r4
 800d9b4:	07d2      	lsls	r2, r2, #31
 800d9b6:	d5f3      	bpl.n	800d9a0 <RegionEU868LinkAdrReq+0x44>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 800d9b8:	0062      	lsls	r2, r4, #1
 800d9ba:	1912      	adds	r2, r2, r4
 800d9bc:	0092      	lsls	r2, r2, #2
 800d9be:	4944      	ldr	r1, [pc, #272]	; (800dad0 <RegionEU868LinkAdrReq+0x174>)
 800d9c0:	5852      	ldr	r2, [r2, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d9c2:	2a00      	cmp	r2, #0
 800d9c4:	d1ec      	bne.n	800d9a0 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d9c6:	3201      	adds	r2, #1
 800d9c8:	4397      	bics	r7, r2
 800d9ca:	e7e9      	b.n	800d9a0 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d9cc:	2706      	movs	r7, #6
 800d9ce:	e000      	b.n	800d9d2 <RegionEU868LinkAdrReq+0x76>
            status &= 0xFE; // Channel mask KO
 800d9d0:	2706      	movs	r7, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d9d2:	7a33      	ldrb	r3, [r6, #8]
 800d9d4:	42ab      	cmp	r3, r5
 800d9d6:	d91a      	bls.n	800da0e <RegionEU868LinkAdrReq+0xb2>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d9d8:	6873      	ldr	r3, [r6, #4]
 800d9da:	1958      	adds	r0, r3, r5
 800d9dc:	a90c      	add	r1, sp, #48	; 0x30
 800d9de:	f7ff fadf 	bl	800cfa0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d013      	beq.n	800da0e <RegionEU868LinkAdrReq+0xb2>
        bytesProcessed += nextIndex;
 800d9e6:	182d      	adds	r5, r5, r0
 800d9e8:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800d9ea:	ab0c      	add	r3, sp, #48	; 0x30
 800d9ec:	889a      	ldrh	r2, [r3, #4]
 800d9ee:	212e      	movs	r1, #46	; 0x2e
 800d9f0:	4469      	add	r1, sp
 800d9f2:	800a      	strh	r2, [r1, #0]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d9f4:	78db      	ldrb	r3, [r3, #3]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <RegionEU868LinkAdrReq+0xa2>
 800d9fa:	2a00      	cmp	r2, #0
 800d9fc:	d0e6      	beq.n	800d9cc <RegionEU868LinkAdrReq+0x70>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d9fe:	1e5a      	subs	r2, r3, #1
 800da00:	b2d2      	uxtb	r2, r2
 800da02:	2a04      	cmp	r2, #4
 800da04:	d9e4      	bls.n	800d9d0 <RegionEU868LinkAdrReq+0x74>
 800da06:	2b06      	cmp	r3, #6
 800da08:	d9b9      	bls.n	800d97e <RegionEU868LinkAdrReq+0x22>
            status &= 0xFE; // Channel mask KO
 800da0a:	2706      	movs	r7, #6
 800da0c:	e7e1      	b.n	800d9d2 <RegionEU868LinkAdrReq+0x76>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800da0e:	2302      	movs	r3, #2
 800da10:	466a      	mov	r2, sp
 800da12:	2128      	movs	r1, #40	; 0x28
 800da14:	1852      	adds	r2, r2, r1
 800da16:	7013      	strb	r3, [r2, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800da18:	7a73      	ldrb	r3, [r6, #9]
 800da1a:	466a      	mov	r2, sp
 800da1c:	3102      	adds	r1, #2
 800da1e:	1852      	adds	r2, r2, r1
 800da20:	7013      	strb	r3, [r2, #0]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800da22:	a80a      	add	r0, sp, #40	; 0x28
 800da24:	f7ff fce0 	bl	800d3e8 <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800da28:	ac01      	add	r4, sp, #4
 800da2a:	7127      	strb	r7, [r4, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800da2c:	7ab3      	ldrb	r3, [r6, #10]
 800da2e:	7163      	strb	r3, [r4, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800da30:	ab0c      	add	r3, sp, #48	; 0x30
 800da32:	2201      	movs	r2, #1
 800da34:	569a      	ldrsb	r2, [r3, r2]
 800da36:	71a2      	strb	r2, [r4, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800da38:	2202      	movs	r2, #2
 800da3a:	569a      	ldrsb	r2, [r3, r2]
 800da3c:	71e2      	strb	r2, [r4, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800da3e:	781a      	ldrb	r2, [r3, #0]
 800da40:	7222      	strb	r2, [r4, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800da42:	220b      	movs	r2, #11
 800da44:	56b2      	ldrsb	r2, [r6, r2]
 800da46:	7262      	strb	r2, [r4, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800da48:	220c      	movs	r2, #12
 800da4a:	56b2      	ldrsb	r2, [r6, r2]
 800da4c:	72a2      	strb	r2, [r4, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800da4e:	220d      	movs	r2, #13
 800da50:	56b2      	ldrsb	r2, [r6, r2]
 800da52:	72e2      	strb	r2, [r4, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800da54:	2210      	movs	r2, #16
 800da56:	7322      	strb	r2, [r4, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800da58:	321e      	adds	r2, #30
 800da5a:	446a      	add	r2, sp
 800da5c:	9205      	str	r2, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800da5e:	7520      	strb	r0, [r4, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800da60:	2207      	movs	r2, #7
 800da62:	7562      	strb	r2, [r4, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800da64:	491a      	ldr	r1, [pc, #104]	; (800dad0 <RegionEU868LinkAdrReq+0x174>)
 800da66:	9107      	str	r1, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800da68:	7722      	strb	r2, [r4, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800da6a:	2200      	movs	r2, #0
 800da6c:	7762      	strb	r2, [r4, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800da6e:	6832      	ldr	r2, [r6, #0]
 800da70:	9201      	str	r2, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800da72:	2232      	movs	r2, #50	; 0x32
 800da74:	446a      	add	r2, sp
 800da76:	2131      	movs	r1, #49	; 0x31
 800da78:	4469      	add	r1, sp
 800da7a:	0020      	movs	r0, r4
 800da7c:	f7ff faad 	bl	800cfda <RegionCommonLinkAdrReqVerifyParams>
 800da80:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800da82:	2807      	cmp	r0, #7
 800da84:	d014      	beq.n	800dab0 <RegionEU868LinkAdrReq+0x154>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800da86:	ab0c      	add	r3, sp, #48	; 0x30
 800da88:	2201      	movs	r2, #1
 800da8a:	569a      	ldrsb	r2, [r3, r2]
 800da8c:	4651      	mov	r1, sl
 800da8e:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800da90:	2202      	movs	r2, #2
 800da92:	569a      	ldrsb	r2, [r3, r2]
 800da94:	4649      	mov	r1, r9
 800da96:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	4642      	mov	r2, r8
 800da9c:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800da9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800daa0:	701d      	strb	r5, [r3, #0]

    return status;
}
 800daa2:	0020      	movs	r0, r4
 800daa4:	b00e      	add	sp, #56	; 0x38
 800daa6:	bce0      	pop	{r5, r6, r7}
 800daa8:	46ba      	mov	sl, r7
 800daaa:	46b1      	mov	r9, r6
 800daac:	46a8      	mov	r8, r5
 800daae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800dab0:	4e08      	ldr	r6, [pc, #32]	; (800dad4 <RegionEU868LinkAdrReq+0x178>)
 800dab2:	2202      	movs	r2, #2
 800dab4:	2100      	movs	r1, #0
 800dab6:	0030      	movs	r0, r6
 800dab8:	f001 f94d 	bl	800ed56 <memset1>
        NvmCtx.ChannelsMask[0] = chMask;
 800dabc:	3e21      	subs	r6, #33	; 0x21
 800dabe:	3eff      	subs	r6, #255	; 0xff
 800dac0:	232e      	movs	r3, #46	; 0x2e
 800dac2:	446b      	add	r3, sp
 800dac4:	881a      	ldrh	r2, [r3, #0]
 800dac6:	2390      	movs	r3, #144	; 0x90
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	52f2      	strh	r2, [r6, r3]
 800dacc:	e7db      	b.n	800da86 <RegionEU868LinkAdrReq+0x12a>
 800dace:	46c0      	nop			; (mov r8, r8)
 800dad0:	20000eb0 	.word	0x20000eb0
 800dad4:	20000fd0 	.word	0x20000fd0

0800dad8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dad8:	b530      	push	{r4, r5, lr}
 800dada:	b083      	sub	sp, #12
 800dadc:	0004      	movs	r4, r0
    uint8_t status = 0x07;
    uint8_t band = 0;
 800dade:	466b      	mov	r3, sp
 800dae0:	1dd9      	adds	r1, r3, #7
 800dae2:	2300      	movs	r3, #0
 800dae4:	700b      	strb	r3, [r1, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800dae6:	6840      	ldr	r0, [r0, #4]
 800dae8:	f7ff fbc4 	bl	800d274 <VerifyRfFreq>
 800daec:	2800      	cmp	r0, #0
 800daee:	d017      	beq.n	800db20 <RegionEU868RxParamSetupReq+0x48>
    uint8_t status = 0x07;
 800daf0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800daf2:	2000      	movs	r0, #0
 800daf4:	5620      	ldrsb	r0, [r4, r0]
 800daf6:	2207      	movs	r2, #7
 800daf8:	2100      	movs	r1, #0
 800dafa:	f7ff f969 	bl	800cdd0 <RegionCommonValueInRange>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d101      	bne.n	800db06 <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 800db02:	2302      	movs	r3, #2
 800db04:	439d      	bics	r5, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800db06:	2001      	movs	r0, #1
 800db08:	5620      	ldrsb	r0, [r4, r0]
 800db0a:	2205      	movs	r2, #5
 800db0c:	2100      	movs	r1, #0
 800db0e:	f7ff f95f 	bl	800cdd0 <RegionCommonValueInRange>
 800db12:	2800      	cmp	r0, #0
 800db14:	d101      	bne.n	800db1a <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800db16:	2304      	movs	r3, #4
 800db18:	439d      	bics	r5, r3
    }

    return status;
}
 800db1a:	0028      	movs	r0, r5
 800db1c:	b003      	add	sp, #12
 800db1e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800db20:	2506      	movs	r5, #6
 800db22:	e7e6      	b.n	800daf2 <RegionEU868RxParamSetupReq+0x1a>

0800db24 <RegionEU868TxParamSetupReq>:
    return status;
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
 800db24:	2001      	movs	r0, #1
}
 800db26:	4240      	negs	r0, r0
 800db28:	4770      	bx	lr
	...

0800db2c <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800db2c:	b510      	push	{r4, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	0004      	movs	r4, r0
    uint8_t status = 0x03;
    uint8_t band = 0;
 800db32:	466b      	mov	r3, sp
 800db34:	1dd9      	adds	r1, r3, #7
 800db36:	2300      	movs	r3, #0
 800db38:	700b      	strb	r3, [r1, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800db3a:	6840      	ldr	r0, [r0, #4]
 800db3c:	f7ff fb9a 	bl	800d274 <VerifyRfFreq>
 800db40:	2800      	cmp	r0, #0
 800db42:	d00e      	beq.n	800db62 <RegionEU868DlChannelReq+0x36>
    uint8_t status = 0x03;
 800db44:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800db46:	7822      	ldrb	r2, [r4, #0]
 800db48:	0053      	lsls	r3, r2, #1
 800db4a:	189b      	adds	r3, r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	490a      	ldr	r1, [pc, #40]	; (800db78 <RegionEU868DlChannelReq+0x4c>)
 800db50:	585b      	ldr	r3, [r3, r1]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800db56:	3302      	adds	r3, #2
 800db58:	4398      	bics	r0, r3
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800db5a:	2803      	cmp	r0, #3
 800db5c:	d003      	beq.n	800db66 <RegionEU868DlChannelReq+0x3a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800db5e:	b002      	add	sp, #8
 800db60:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800db62:	2002      	movs	r0, #2
 800db64:	e7ef      	b.n	800db46 <RegionEU868DlChannelReq+0x1a>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800db66:	6861      	ldr	r1, [r4, #4]
 800db68:	0053      	lsls	r3, r2, #1
 800db6a:	189a      	adds	r2, r3, r2
 800db6c:	0092      	lsls	r2, r2, #2
 800db6e:	4b02      	ldr	r3, [pc, #8]	; (800db78 <RegionEU868DlChannelReq+0x4c>)
 800db70:	189a      	adds	r2, r3, r2
 800db72:	6051      	str	r1, [r2, #4]
 800db74:	e7f3      	b.n	800db5e <RegionEU868DlChannelReq+0x32>
 800db76:	46c0      	nop			; (mov r8, r8)
 800db78:	20000eb0 	.word	0x20000eb0

0800db7c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 800db7c:	4770      	bx	lr
	...

0800db80 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 800db80:	b500      	push	{lr}
 800db82:	b087      	sub	sp, #28
 800db84:	0003      	movs	r3, r0
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 800db86:	a801      	add	r0, sp, #4
 800db88:	4a09      	ldr	r2, [pc, #36]	; (800dbb0 <RegionEU868CalcBackOff+0x30>)
 800db8a:	9201      	str	r2, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 800db8c:	32c0      	adds	r2, #192	; 0xc0
 800db8e:	6042      	str	r2, [r0, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 800db90:	785a      	ldrb	r2, [r3, #1]
 800db92:	7202      	strb	r2, [r0, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 800db94:	781a      	ldrb	r2, [r3, #0]
 800db96:	7242      	strb	r2, [r0, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 800db98:	789a      	ldrb	r2, [r3, #2]
 800db9a:	7282      	strb	r2, [r0, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 800db9c:	78da      	ldrb	r2, [r3, #3]
 800db9e:	72c2      	strb	r2, [r0, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	60c2      	str	r2, [r0, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	6103      	str	r3, [r0, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 800dba8:	f7ff fb03 	bl	800d1b2 <RegionCommonCalcBackOff>
}
 800dbac:	b007      	add	sp, #28
 800dbae:	bd00      	pop	{pc}
 800dbb0:	20000eb0 	.word	0x20000eb0

0800dbb4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbb6:	46c6      	mov	lr, r8
 800dbb8:	b500      	push	{lr}
 800dbba:	b08c      	sub	sp, #48	; 0x30
 800dbbc:	0004      	movs	r4, r0
 800dbbe:	9105      	str	r1, [sp, #20]
 800dbc0:	0016      	movs	r6, r2
 800dbc2:	001f      	movs	r7, r3
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	2227      	movs	r2, #39	; 0x27
 800dbc8:	a902      	add	r1, sp, #8
 800dbca:	468c      	mov	ip, r1
 800dbcc:	4462      	add	r2, ip
 800dbce:	7013      	strb	r3, [r2, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800dbd0:	9307      	str	r3, [sp, #28]
 800dbd2:	220c      	movs	r2, #12
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	a808      	add	r0, sp, #32
 800dbd8:	f002 f9d4 	bl	800ff84 <memset>
    TimerTime_t nextTxDelay = 0;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800dbdc:	2201      	movs	r2, #1
 800dbde:	2100      	movs	r1, #0
 800dbe0:	4830      	ldr	r0, [pc, #192]	; (800dca4 <RegionEU868NextChannel+0xf0>)
 800dbe2:	f7ff f958 	bl	800ce96 <RegionCommonCountChannels>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d106      	bne.n	800dbf8 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800dbea:	492f      	ldr	r1, [pc, #188]	; (800dca8 <RegionEU868NextChannel+0xf4>)
 800dbec:	2290      	movs	r2, #144	; 0x90
 800dbee:	0052      	lsls	r2, r2, #1
 800dbf0:	5a8b      	ldrh	r3, [r1, r2]
 800dbf2:	2007      	movs	r0, #7
 800dbf4:	4303      	orrs	r3, r0
 800dbf6:	528b      	strh	r3, [r1, r2]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 800dbf8:	6860      	ldr	r0, [r4, #4]
 800dbfa:	f000 ffe0 	bl	800ebbe <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 800dbfe:	6863      	ldr	r3, [r4, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <RegionEU868NextChannel+0x56>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	4283      	cmp	r3, r0
 800dc08:	d82a      	bhi.n	800dc60 <RegionEU868NextChannel+0xac>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 800dc0e:	4d27      	ldr	r5, [pc, #156]	; (800dcac <RegionEU868NextChannel+0xf8>)
 800dc10:	7aa1      	ldrb	r1, [r4, #10]
 800dc12:	7a60      	ldrb	r0, [r4, #9]
 800dc14:	3306      	adds	r3, #6
 800dc16:	002a      	movs	r2, r5
 800dc18:	f7ff f96a 	bl	800cef0 <RegionCommonUpdateBandTimeOff>
 800dc1c:	0007      	movs	r7, r0

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800dc1e:	002b      	movs	r3, r5
 800dc20:	3bc0      	subs	r3, #192	; 0xc0
 800dc22:	002a      	movs	r2, r5
 800dc24:	3260      	adds	r2, #96	; 0x60
 800dc26:	4690      	mov	r8, r2
 800dc28:	7a21      	ldrb	r1, [r4, #8]
 800dc2a:	7a60      	ldrb	r0, [r4, #9]
 800dc2c:	2427      	movs	r4, #39	; 0x27
 800dc2e:	aa02      	add	r2, sp, #8
 800dc30:	4694      	mov	ip, r2
 800dc32:	4464      	add	r4, ip
 800dc34:	9402      	str	r4, [sp, #8]
 800dc36:	ac07      	add	r4, sp, #28
 800dc38:	9401      	str	r4, [sp, #4]
 800dc3a:	9500      	str	r5, [sp, #0]
 800dc3c:	4642      	mov	r2, r8
 800dc3e:	f7ff fb6f 	bl	800d320 <CountNbOfEnabledChannels>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d116      	bne.n	800dc74 <RegionEU868NextChannel+0xc0>
        *time = 0;
        return LORAMAC_STATUS_OK;
    }
    else
    {
        if( delayTx > 0 )
 800dc46:	2327      	movs	r3, #39	; 0x27
 800dc48:	aa02      	add	r2, sp, #8
 800dc4a:	4694      	mov	ip, r2
 800dc4c:	4463      	add	r3, ip
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d01b      	beq.n	800dc8c <RegionEU868NextChannel+0xd8>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 800dc54:	6037      	str	r7, [r6, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800dc56:	200b      	movs	r0, #11
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800dc58:	b00c      	add	sp, #48	; 0x30
 800dc5a:	bc80      	pop	{r7}
 800dc5c:	46b8      	mov	r8, r7
 800dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        delayTx++;
 800dc60:	2227      	movs	r2, #39	; 0x27
 800dc62:	ab02      	add	r3, sp, #8
 800dc64:	469c      	mov	ip, r3
 800dc66:	4462      	add	r2, ip
 800dc68:	7813      	ldrb	r3, [r2, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	7013      	strb	r3, [r2, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 800dc6e:	6827      	ldr	r7, [r4, #0]
 800dc70:	1a3f      	subs	r7, r7, r0
    if( nbEnabledChannels > 0 )
 800dc72:	e7e8      	b.n	800dc46 <RegionEU868NextChannel+0x92>
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800dc74:	1e41      	subs	r1, r0, #1
 800dc76:	2000      	movs	r0, #0
 800dc78:	f001 f84a 	bl	800ed10 <randr>
 800dc7c:	ab07      	add	r3, sp, #28
 800dc7e:	5c1b      	ldrb	r3, [r3, r0]
 800dc80:	9a05      	ldr	r2, [sp, #20]
 800dc82:	7013      	strb	r3, [r2, #0]
        *time = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	6033      	str	r3, [r6, #0]
        return LORAMAC_STATUS_OK;
 800dc88:	2000      	movs	r0, #0
 800dc8a:	e7e5      	b.n	800dc58 <RegionEU868NextChannel+0xa4>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800dc8c:	4906      	ldr	r1, [pc, #24]	; (800dca8 <RegionEU868NextChannel+0xf4>)
 800dc8e:	2290      	movs	r2, #144	; 0x90
 800dc90:	0052      	lsls	r2, r2, #1
 800dc92:	5a8b      	ldrh	r3, [r1, r2]
 800dc94:	2007      	movs	r0, #7
 800dc96:	4303      	orrs	r3, r0
 800dc98:	528b      	strh	r3, [r1, r2]
        *time = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6033      	str	r3, [r6, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800dc9e:	200c      	movs	r0, #12
 800dca0:	e7da      	b.n	800dc58 <RegionEU868NextChannel+0xa4>
 800dca2:	46c0      	nop			; (mov r8, r8)
 800dca4:	20000fd0 	.word	0x20000fd0
 800dca8:	20000eb0 	.word	0x20000eb0
 800dcac:	20000f70 	.word	0x20000f70

0800dcb0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800dcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	0004      	movs	r4, r0
    uint8_t band = 0;
 800dcb6:	466b      	mov	r3, sp
 800dcb8:	2200      	movs	r2, #0
 800dcba:	71da      	strb	r2, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800dcbc:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800dcbe:	2d02      	cmp	r5, #2
 800dcc0:	d94d      	bls.n	800dd5e <RegionEU868ChannelAdd+0xae>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800dcc2:	2d0f      	cmp	r5, #15
 800dcc4:	d84d      	bhi.n	800dd62 <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800dcc6:	6803      	ldr	r3, [r0, #0]
 800dcc8:	7a18      	ldrb	r0, [r3, #8]
 800dcca:	0100      	lsls	r0, r0, #4
 800dccc:	b240      	sxtb	r0, r0
 800dcce:	1100      	asrs	r0, r0, #4
 800dcd0:	3207      	adds	r2, #7
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	f7ff f87c 	bl	800cdd0 <RegionCommonValueInRange>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d03c      	beq.n	800dd56 <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 800dcdc:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	2008      	movs	r0, #8
 800dce2:	5618      	ldrsb	r0, [r3, r0]
 800dce4:	1100      	asrs	r0, r0, #4
 800dce6:	2207      	movs	r2, #7
 800dce8:	2100      	movs	r1, #0
 800dcea:	f7ff f871 	bl	800cdd0 <RegionCommonValueInRange>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d100      	bne.n	800dcf4 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800dcf2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800dcf4:	6821      	ldr	r1, [r4, #0]
 800dcf6:	7a0b      	ldrb	r3, [r1, #8]
 800dcf8:	011a      	lsls	r2, r3, #4
 800dcfa:	b252      	sxtb	r2, r2
 800dcfc:	1112      	asrs	r2, r2, #4
 800dcfe:	b25b      	sxtb	r3, r3
 800dd00:	111b      	asrs	r3, r3, #4
 800dd02:	429a      	cmp	r2, r3
 800dd04:	dd00      	ble.n	800dd08 <RegionEU868ChannelAdd+0x58>
    {
        drInvalid = true;
 800dd06:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800dd08:	6808      	ldr	r0, [r1, #0]
 800dd0a:	466b      	mov	r3, sp
 800dd0c:	1dd9      	adds	r1, r3, #7
 800dd0e:	f7ff fab1 	bl	800d274 <VerifyRfFreq>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d021      	beq.n	800dd5a <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 800dd16:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800dd18:	2e00      	cmp	r6, #0
 800dd1a:	d001      	beq.n	800dd20 <RegionEU868ChannelAdd+0x70>
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d123      	bne.n	800dd68 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800dd20:	2e00      	cmp	r6, #0
 800dd22:	d123      	bne.n	800dd6c <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d123      	bne.n	800dd70 <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800dd28:	006e      	lsls	r6, r5, #1
 800dd2a:	1976      	adds	r6, r6, r5
 800dd2c:	00b6      	lsls	r6, r6, #2
 800dd2e:	4f11      	ldr	r7, [pc, #68]	; (800dd74 <RegionEU868ChannelAdd+0xc4>)
 800dd30:	19f6      	adds	r6, r6, r7
 800dd32:	6821      	ldr	r1, [r4, #0]
 800dd34:	220c      	movs	r2, #12
 800dd36:	0030      	movs	r0, r6
 800dd38:	f000 fff5 	bl	800ed26 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 800dd3c:	466b      	mov	r3, sp
 800dd3e:	3307      	adds	r3, #7
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	7273      	strb	r3, [r6, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800dd44:	2201      	movs	r2, #1
 800dd46:	40aa      	lsls	r2, r5
 800dd48:	2190      	movs	r1, #144	; 0x90
 800dd4a:	0049      	lsls	r1, r1, #1
 800dd4c:	5a7b      	ldrh	r3, [r7, r1]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	527b      	strh	r3, [r7, r1]
    return LORAMAC_STATUS_OK;
 800dd52:	2000      	movs	r0, #0
 800dd54:	e006      	b.n	800dd64 <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800dd56:	2601      	movs	r6, #1
 800dd58:	e7c1      	b.n	800dcde <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e7dc      	b.n	800dd18 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dd5e:	2006      	movs	r0, #6
 800dd60:	e000      	b.n	800dd64 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd62:	2003      	movs	r0, #3
}
 800dd64:	b003      	add	sp, #12
 800dd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dd68:	2006      	movs	r0, #6
 800dd6a:	e7fb      	b.n	800dd64 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800dd6c:	2005      	movs	r0, #5
 800dd6e:	e7f9      	b.n	800dd64 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800dd70:	2004      	movs	r0, #4
 800dd72:	e7f7      	b.n	800dd64 <RegionEU868ChannelAdd+0xb4>
 800dd74:	20000eb0 	.word	0x20000eb0

0800dd78 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800dd78:	b570      	push	{r4, r5, r6, lr}
    uint8_t id = channelRemove->ChannelId;
 800dd7a:	7804      	ldrb	r4, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800dd7c:	2c02      	cmp	r4, #2
 800dd7e:	d801      	bhi.n	800dd84 <RegionEU868ChannelsRemove+0xc>
    {
        return false;
 800dd80:	2000      	movs	r0, #0

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
}
 800dd82:	bd70      	pop	{r4, r5, r6, pc}
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800dd84:	4d08      	ldr	r5, [pc, #32]	; (800dda8 <RegionEU868ChannelsRemove+0x30>)
 800dd86:	0060      	lsls	r0, r4, #1
 800dd88:	1900      	adds	r0, r0, r4
 800dd8a:	0080      	lsls	r0, r0, #2
 800dd8c:	1828      	adds	r0, r5, r0
 800dd8e:	220c      	movs	r2, #12
 800dd90:	2100      	movs	r1, #0
 800dd92:	f002 f8f7 	bl	800ff84 <memset>
    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800dd96:	0028      	movs	r0, r5
 800dd98:	3021      	adds	r0, #33	; 0x21
 800dd9a:	30ff      	adds	r0, #255	; 0xff
 800dd9c:	2210      	movs	r2, #16
 800dd9e:	0021      	movs	r1, r4
 800dda0:	f7ff f864 	bl	800ce6c <RegionCommonChanDisable>
 800dda4:	e7ed      	b.n	800dd82 <RegionEU868ChannelsRemove+0xa>
 800dda6:	46c0      	nop			; (mov r8, r8)
 800dda8:	20000eb0 	.word	0x20000eb0

0800ddac <RegionEU868ApplyCFList>:
{
 800ddac:	b570      	push	{r4, r5, r6, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	0006      	movs	r6, r0
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800ddb2:	ab03      	add	r3, sp, #12
 800ddb4:	2250      	movs	r2, #80	; 0x50
 800ddb6:	721a      	strb	r2, [r3, #8]
    if( applyCFList->Size != 16 )
 800ddb8:	7903      	ldrb	r3, [r0, #4]
 800ddba:	2b10      	cmp	r3, #16
 800ddbc:	d132      	bne.n	800de24 <RegionEU868ApplyCFList+0x78>
    if( applyCFList->Payload[15] != 0 )
 800ddbe:	6803      	ldr	r3, [r0, #0]
 800ddc0:	7bdd      	ldrb	r5, [r3, #15]
 800ddc2:	2d00      	cmp	r5, #0
 800ddc4:	d12e      	bne.n	800de24 <RegionEU868ApplyCFList+0x78>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ddc6:	2403      	movs	r4, #3
 800ddc8:	e019      	b.n	800ddfe <RegionEU868ApplyCFList+0x52>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ddca:	6832      	ldr	r2, [r6, #0]
 800ddcc:	5d53      	ldrb	r3, [r2, r5]
 800ddce:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ddd0:	1952      	adds	r2, r2, r5
 800ddd2:	7851      	ldrb	r1, [r2, #1]
 800ddd4:	0209      	lsls	r1, r1, #8
 800ddd6:	430b      	orrs	r3, r1
 800ddd8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ddda:	7892      	ldrb	r2, [r2, #2]
 800dddc:	0412      	lsls	r2, r2, #16
 800ddde:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
 800dde0:	2264      	movs	r2, #100	; 0x64
 800dde2:	4353      	muls	r3, r2
 800dde4:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	e011      	b.n	800de10 <RegionEU868ApplyCFList+0x64>
            channelRemove.ChannelId = chanIdx;
 800ddec:	466b      	mov	r3, sp
 800ddee:	701c      	strb	r4, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800ddf0:	4668      	mov	r0, sp
 800ddf2:	f7ff ffc1 	bl	800dd78 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ddf6:	3503      	adds	r5, #3
 800ddf8:	b2ed      	uxtb	r5, r5
 800ddfa:	3401      	adds	r4, #1
 800ddfc:	b2e4      	uxtb	r4, r4
 800ddfe:	2c0f      	cmp	r4, #15
 800de00:	d810      	bhi.n	800de24 <RegionEU868ApplyCFList+0x78>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800de02:	2c07      	cmp	r4, #7
 800de04:	d9e1      	bls.n	800ddca <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800de06:	aa03      	add	r2, sp, #12
 800de08:	2300      	movs	r3, #0
 800de0a:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800de0c:	7213      	strb	r3, [r2, #8]
            newChannel.Rx1Frequency = 0;
 800de0e:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800de10:	9b03      	ldr	r3, [sp, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0ea      	beq.n	800ddec <RegionEU868ApplyCFList+0x40>
            channelAdd.NewChannel = &newChannel;
 800de16:	a801      	add	r0, sp, #4
 800de18:	ab03      	add	r3, sp, #12
 800de1a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800de1c:	7104      	strb	r4, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800de1e:	f7ff ff47 	bl	800dcb0 <RegionEU868ChannelAdd>
 800de22:	e7e8      	b.n	800ddf6 <RegionEU868ApplyCFList+0x4a>
}
 800de24:	b006      	add	sp, #24
 800de26:	bd70      	pop	{r4, r5, r6, pc}

0800de28 <RegionEU868NewChannelReq>:
{
 800de28:	b500      	push	{lr}
 800de2a:	b085      	sub	sp, #20
 800de2c:	0003      	movs	r3, r0
    if( newChannelReq->NewChannel->Frequency == 0 )
 800de2e:	6802      	ldr	r2, [r0, #0]
 800de30:	6811      	ldr	r1, [r2, #0]
 800de32:	2900      	cmp	r1, #0
 800de34:	d10a      	bne.n	800de4c <RegionEU868NewChannelReq+0x24>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800de36:	7903      	ldrb	r3, [r0, #4]
 800de38:	a801      	add	r0, sp, #4
 800de3a:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800de3c:	f7ff ff9c 	bl	800dd78 <RegionEU868ChannelsRemove>
 800de40:	2800      	cmp	r0, #0
 800de42:	d101      	bne.n	800de48 <RegionEU868NewChannelReq+0x20>
            status &= 0xFC;
 800de44:	2000      	movs	r0, #0
 800de46:	e00f      	b.n	800de68 <RegionEU868NewChannelReq+0x40>
    uint8_t status = 0x03;
 800de48:	2003      	movs	r0, #3
 800de4a:	e00d      	b.n	800de68 <RegionEU868NewChannelReq+0x40>
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800de4c:	a802      	add	r0, sp, #8
 800de4e:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800de50:	791b      	ldrb	r3, [r3, #4]
 800de52:	7103      	strb	r3, [r0, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800de54:	f7ff ff2c 	bl	800dcb0 <RegionEU868ChannelAdd>
 800de58:	2805      	cmp	r0, #5
 800de5a:	d007      	beq.n	800de6c <RegionEU868NewChannelReq+0x44>
 800de5c:	d808      	bhi.n	800de70 <RegionEU868NewChannelReq+0x48>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d008      	beq.n	800de74 <RegionEU868NewChannelReq+0x4c>
 800de62:	2804      	cmp	r0, #4
 800de64:	d108      	bne.n	800de78 <RegionEU868NewChannelReq+0x50>
                status &= 0xFE;
 800de66:	3802      	subs	r0, #2
}
 800de68:	b005      	add	sp, #20
 800de6a:	bd00      	pop	{pc}
                status &= 0xFD;
 800de6c:	2001      	movs	r0, #1
 800de6e:	e7fb      	b.n	800de68 <RegionEU868NewChannelReq+0x40>
                status &= 0xFC;
 800de70:	2000      	movs	r0, #0
 800de72:	e7f9      	b.n	800de68 <RegionEU868NewChannelReq+0x40>
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800de74:	2003      	movs	r0, #3
 800de76:	e7f7      	b.n	800de68 <RegionEU868NewChannelReq+0x40>
                status &= 0xFC;
 800de78:	2000      	movs	r0, #0
 800de7a:	e7f5      	b.n	800de68 <RegionEU868NewChannelReq+0x40>

0800de7c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800de80:	7807      	ldrb	r7, [r0, #0]
 800de82:	4e11      	ldr	r6, [pc, #68]	; (800dec8 <RegionEU868SetContinuousWave+0x4c>)
 800de84:	007d      	lsls	r5, r7, #1
 800de86:	19eb      	adds	r3, r5, r7
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	18f3      	adds	r3, r6, r3
 800de8c:	7a59      	ldrb	r1, [r3, #9]
 800de8e:	0033      	movs	r3, r6
 800de90:	3321      	adds	r3, #33	; 0x21
 800de92:	33ff      	adds	r3, #255	; 0xff
 800de94:	2201      	movs	r2, #1
 800de96:	5682      	ldrsb	r2, [r0, r2]
 800de98:	310c      	adds	r1, #12
 800de9a:	0109      	lsls	r1, r1, #4
 800de9c:	1871      	adds	r1, r6, r1
 800de9e:	7889      	ldrb	r1, [r1, #2]
 800dea0:	b249      	sxtb	r1, r1
 800dea2:	2002      	movs	r0, #2
 800dea4:	5620      	ldrsb	r0, [r4, r0]
 800dea6:	f7ff f9df 	bl	800d268 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800deaa:	19ed      	adds	r5, r5, r7
 800deac:	00ad      	lsls	r5, r5, #2
 800deae:	59ad      	ldr	r5, [r5, r6]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800deb0:	68a2      	ldr	r2, [r4, #8]
 800deb2:	6861      	ldr	r1, [r4, #4]
 800deb4:	f7ff f968 	bl	800d188 <RegionCommonComputeTxPower>
 800deb8:	0001      	movs	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800deba:	4b04      	ldr	r3, [pc, #16]	; (800decc <RegionEU868SetContinuousWave+0x50>)
 800debc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800debe:	89a2      	ldrh	r2, [r4, #12]
 800dec0:	0028      	movs	r0, r5
 800dec2:	4798      	blx	r3
}
 800dec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec6:	46c0      	nop			; (mov r8, r8)
 800dec8:	20000eb0 	.word	0x20000eb0
 800decc:	08010b84 	.word	0x08010b84

0800ded0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 800ded0:	1a8a      	subs	r2, r1, r2
 800ded2:	b250      	sxtb	r0, r2

    if( datarate < 0 )
 800ded4:	0613      	lsls	r3, r2, #24
 800ded6:	d401      	bmi.n	800dedc <RegionEU868ApplyDrOffset+0xc>
    {
        datarate = DR_0;
    }
    return datarate;
 800ded8:	b2c0      	uxtb	r0, r0
}
 800deda:	4770      	bx	lr
        datarate = DR_0;
 800dedc:	2000      	movs	r0, #0
 800dede:	e7fb      	b.n	800ded8 <RegionEU868ApplyDrOffset+0x8>

0800dee0 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 800dee0:	b500      	push	{lr}
 800dee2:	b087      	sub	sp, #28
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 800dee4:	4a30      	ldr	r2, [pc, #192]	; (800dfa8 <certif_tx+0xc8>)
 800dee6:	23f8      	movs	r3, #248	; 0xf8
 800dee8:	5cd3      	ldrb	r3, [r2, r3]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d028      	beq.n	800df40 <certif_tx+0x60>
  {
    certifParam.LinkCheck = false;
 800deee:	0013      	movs	r3, r2
 800def0:	22f8      	movs	r2, #248	; 0xf8
 800def2:	2100      	movs	r1, #0
 800def4:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 800def6:	3af5      	subs	r2, #245	; 0xf5
 800def8:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 800defa:	3202      	adds	r2, #2
 800defc:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 800defe:	32f4      	adds	r2, #244	; 0xf4
 800df00:	5c9a      	ldrb	r2, [r3, r2]
 800df02:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 800df04:	22fa      	movs	r2, #250	; 0xfa
 800df06:	5c9a      	ldrb	r2, [r3, r2]
 800df08:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 800df0a:	2201      	movs	r2, #1
 800df0c:	705a      	strb	r2, [r3, #1]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800df0e:	4b26      	ldr	r3, [pc, #152]	; (800dfa8 <certif_tx+0xc8>)
 800df10:	78d8      	ldrb	r0, [r3, #3]
 800df12:	a901      	add	r1, sp, #4
 800df14:	f7fc fe52 	bl	800abbc <LoRaMacQueryTxPossible>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d024      	beq.n	800df66 <certif_tx+0x86>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800df1c:	ab02      	add	r3, sp, #8
 800df1e:	2200      	movs	r2, #0
 800df20:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800df22:	9204      	str	r2, [sp, #16]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800df24:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 800df26:	739a      	strb	r2, [r3, #14]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 800df28:	4820      	ldr	r0, [pc, #128]	; (800dfac <certif_tx+0xcc>)
 800df2a:	3004      	adds	r0, #4
 800df2c:	f000 fd6e 	bl	800ea0c <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800df30:	a802      	add	r0, sp, #8
 800df32:	f7fd fc03 	bl	800b73c <LoRaMacMcpsRequest>
 800df36:	2800      	cmp	r0, #0
 800df38:	d034      	beq.n	800dfa4 <certif_tx+0xc4>
  {
      return false;
  }
    return true;
 800df3a:	2001      	movs	r0, #1
}
 800df3c:	b007      	add	sp, #28
 800df3e:	bd00      	pop	{pc}
    switch( certifParam.State )
 800df40:	4b19      	ldr	r3, [pc, #100]	; (800dfa8 <certif_tx+0xc8>)
 800df42:	785b      	ldrb	r3, [r3, #1]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d005      	beq.n	800df54 <certif_tx+0x74>
 800df48:	2b04      	cmp	r3, #4
 800df4a:	d1e0      	bne.n	800df0e <certif_tx+0x2e>
      certifParam.State = 1;
 800df4c:	4b16      	ldr	r3, [pc, #88]	; (800dfa8 <certif_tx+0xc8>)
 800df4e:	2201      	movs	r2, #1
 800df50:	705a      	strb	r2, [r3, #1]
      break;
 800df52:	e7dc      	b.n	800df0e <certif_tx+0x2e>
      certifParam.DataBufferSize = 2;
 800df54:	4b14      	ldr	r3, [pc, #80]	; (800dfa8 <certif_tx+0xc8>)
 800df56:	2202      	movs	r2, #2
 800df58:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 800df5a:	32f4      	adds	r2, #244	; 0xf4
 800df5c:	5a9a      	ldrh	r2, [r3, r2]
 800df5e:	0a11      	lsrs	r1, r2, #8
 800df60:	7119      	strb	r1, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 800df62:	715a      	strb	r2, [r3, #5]
      break;
 800df64:	e7d3      	b.n	800df0e <certif_tx+0x2e>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800df66:	4b11      	ldr	r3, [pc, #68]	; (800dfac <certif_tx+0xcc>)
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10b      	bne.n	800df86 <certif_tx+0xa6>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 800df6e:	ab02      	add	r3, sp, #8
 800df70:	2100      	movs	r1, #0
 800df72:	7019      	strb	r1, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 800df74:	22e0      	movs	r2, #224	; 0xe0
 800df76:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 800df78:	4a0b      	ldr	r2, [pc, #44]	; (800dfa8 <certif_tx+0xc8>)
 800df7a:	78d0      	ldrb	r0, [r2, #3]
 800df7c:	8198      	strh	r0, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 800df7e:	3204      	adds	r2, #4
 800df80:	9204      	str	r2, [sp, #16]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 800df82:	7399      	strb	r1, [r3, #14]
 800df84:	e7d0      	b.n	800df28 <certif_tx+0x48>
          mcpsReq.Type = MCPS_CONFIRMED;
 800df86:	ab02      	add	r3, sp, #8
 800df88:	2201      	movs	r2, #1
 800df8a:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 800df8c:	32df      	adds	r2, #223	; 0xdf
 800df8e:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 800df90:	4a05      	ldr	r2, [pc, #20]	; (800dfa8 <certif_tx+0xc8>)
 800df92:	78d1      	ldrb	r1, [r2, #3]
 800df94:	8199      	strh	r1, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 800df96:	3204      	adds	r2, #4
 800df98:	9204      	str	r2, [sp, #16]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 800df9a:	2208      	movs	r2, #8
 800df9c:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800df9e:	2200      	movs	r2, #0
 800dfa0:	739a      	strb	r2, [r3, #14]
 800dfa2:	e7c1      	b.n	800df28 <certif_tx+0x48>
      return false;
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	e7c9      	b.n	800df3c <certif_tx+0x5c>
 800dfa8:	20000ff4 	.word	0x20000ff4
 800dfac:	20000fd4 	.word	0x20000fd4

0800dfb0 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 800dfb0:	b510      	push	{r4, lr}
    certif_tx( );
 800dfb2:	f7ff ff95 	bl	800dee0 <certif_tx>

}
 800dfb6:	bd10      	pop	{r4, pc}

0800dfb8 <certif_running>:
    return certifParam.Running;
 800dfb8:	4b01      	ldr	r3, [pc, #4]	; (800dfc0 <certif_running+0x8>)
 800dfba:	7818      	ldrb	r0, [r3, #0]
}
 800dfbc:	4770      	bx	lr
 800dfbe:	46c0      	nop			; (mov r8, r8)
 800dfc0:	20000ff4 	.word	0x20000ff4

0800dfc4 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 800dfc4:	4902      	ldr	r1, [pc, #8]	; (800dfd0 <certif_DownLinkIncrement+0xc>)
 800dfc6:	22f6      	movs	r2, #246	; 0xf6
 800dfc8:	5a8b      	ldrh	r3, [r1, r2]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	528b      	strh	r3, [r1, r2]
}
 800dfce:	4770      	bx	lr
 800dfd0:	20000ff4 	.word	0x20000ff4

0800dfd4 <certif_linkCheck>:
  certifParam.LinkCheck = true;
 800dfd4:	4b05      	ldr	r3, [pc, #20]	; (800dfec <certif_linkCheck+0x18>)
 800dfd6:	22f8      	movs	r2, #248	; 0xf8
 800dfd8:	2101      	movs	r1, #1
 800dfda:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 800dfdc:	7a01      	ldrb	r1, [r0, #8]
 800dfde:	3201      	adds	r2, #1
 800dfe0:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 800dfe2:	7a41      	ldrb	r1, [r0, #9]
 800dfe4:	3201      	adds	r2, #1
 800dfe6:	5499      	strb	r1, [r3, r2]
}
 800dfe8:	4770      	bx	lr
 800dfea:	46c0      	nop			; (mov r8, r8)
 800dfec:	20000ff4 	.word	0x20000ff4

0800dff0 <certif_rx>:
{
 800dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dff2:	b08d      	sub	sp, #52	; 0x34
 800dff4:	000c      	movs	r4, r1
  if( certifParam.Running == false )
 800dff6:	4b71      	ldr	r3, [pc, #452]	; (800e1bc <certif_rx+0x1cc>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d145      	bne.n	800e08a <certif_rx+0x9a>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800dffe:	7b03      	ldrb	r3, [r0, #12]
 800e000:	2b04      	cmp	r3, #4
 800e002:	d006      	beq.n	800e012 <certif_rx+0x22>
    if ( certifParam.Running == false )
 800e004:	4b6d      	ldr	r3, [pc, #436]	; (800e1bc <certif_rx+0x1cc>)
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d100      	bne.n	800e00e <certif_rx+0x1e>
 800e00c:	e0d0      	b.n	800e1b0 <certif_rx+0x1c0>
}
 800e00e:	b00d      	add	sp, #52	; 0x34
 800e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e012:	6883      	ldr	r3, [r0, #8]
 800e014:	781a      	ldrb	r2, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800e016:	2a01      	cmp	r2, #1
 800e018:	d1f4      	bne.n	800e004 <certif_rx+0x14>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e01a:	785a      	ldrb	r2, [r3, #1]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e01c:	2a01      	cmp	r2, #1
 800e01e:	d1f1      	bne.n	800e004 <certif_rx+0x14>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e020:	789a      	ldrb	r2, [r3, #2]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e022:	2a01      	cmp	r2, #1
 800e024:	d1ee      	bne.n	800e004 <certif_rx+0x14>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 800e026:	78db      	ldrb	r3, [r3, #3]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d1eb      	bne.n	800e004 <certif_rx+0x14>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800e02c:	4c64      	ldr	r4, [pc, #400]	; (800e1c0 <certif_rx+0x1d0>)
 800e02e:	2100      	movs	r1, #0
 800e030:	2200      	movs	r2, #0
 800e032:	7021      	strb	r1, [r4, #0]
          certifParam.DataBufferSize = 2;
 800e034:	4b61      	ldr	r3, [pc, #388]	; (800e1bc <certif_rx+0x1cc>)
 800e036:	2002      	movs	r0, #2
 800e038:	70d8      	strb	r0, [r3, #3]
          certifParam.DownLinkCounter = 0;
 800e03a:	30f4      	adds	r0, #244	; 0xf4
 800e03c:	5219      	strh	r1, [r3, r0]
          certifParam.LinkCheck = false;
 800e03e:	2000      	movs	r0, #0
 800e040:	31f8      	adds	r1, #248	; 0xf8
 800e042:	5458      	strb	r0, [r3, r1]
          certifParam.DemodMargin = 0;
 800e044:	3101      	adds	r1, #1
 800e046:	545a      	strb	r2, [r3, r1]
          certifParam.NbGateways = 0;
 800e048:	3101      	adds	r1, #1
 800e04a:	545a      	strb	r2, [r3, r1]
          certifParam.Running = true;
 800e04c:	2601      	movs	r6, #1
 800e04e:	701e      	strb	r6, [r3, #0]
          certifParam.State = 1;
 800e050:	705e      	strb	r6, [r3, #1]
          mibReq.Type = MIB_ADR;
 800e052:	ad04      	add	r5, sp, #16
 800e054:	2704      	movs	r7, #4
 800e056:	702f      	strb	r7, [r5, #0]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800e058:	0028      	movs	r0, r5
 800e05a:	f7fc fe15 	bl	800ac88 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 800e05e:	792b      	ldrb	r3, [r5, #4]
 800e060:	7723      	strb	r3, [r4, #28]
          mibReq.Type = MIB_ADR;
 800e062:	702f      	strb	r7, [r5, #0]
          mibReq.Param.AdrEnable = true;
 800e064:	712e      	strb	r6, [r5, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800e066:	0028      	movs	r0, r5
 800e068:	f7fc ff30 	bl	800aecc <LoRaMacMibSetRequestConfirm>
          LoRaMacTestSetDutyCycleOn( false );
 800e06c:	2000      	movs	r0, #0
 800e06e:	f7fd fc3b 	bl	800b8e8 <LoRaMacTestSetDutyCycleOn>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 800e072:	3404      	adds	r4, #4
 800e074:	4953      	ldr	r1, [pc, #332]	; (800e1c4 <certif_rx+0x1d4>)
 800e076:	0020      	movs	r0, r4
 800e078:	f000 fcbe 	bl	800e9f8 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 800e07c:	4952      	ldr	r1, [pc, #328]	; (800e1c8 <certif_rx+0x1d8>)
 800e07e:	0020      	movs	r0, r4
 800e080:	f000 fd86 	bl	800eb90 <TimerSetValue>
        certif_tx( );
 800e084:	f7ff ff2c 	bl	800dee0 <certif_tx>
 800e088:	e7bc      	b.n	800e004 <certif_rx+0x14>
      certifParam.State = mcpsIndication->Buffer[0];
 800e08a:	6882      	ldr	r2, [r0, #8]
 800e08c:	7813      	ldrb	r3, [r2, #0]
 800e08e:	494b      	ldr	r1, [pc, #300]	; (800e1bc <certif_rx+0x1cc>)
 800e090:	704b      	strb	r3, [r1, #1]
      switch( certifParam.State )
 800e092:	2b08      	cmp	r3, #8
 800e094:	d8b6      	bhi.n	800e004 <certif_rx+0x14>
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	494c      	ldr	r1, [pc, #304]	; (800e1cc <certif_rx+0x1dc>)
 800e09a:	58cb      	ldr	r3, [r1, r3]
 800e09c:	469f      	mov	pc, r3
          certifParam.DownLinkCounter = 0;
 800e09e:	4b47      	ldr	r3, [pc, #284]	; (800e1bc <certif_rx+0x1cc>)
 800e0a0:	22f6      	movs	r2, #246	; 0xf6
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	701a      	strb	r2, [r3, #0]
          mibReq.Type = MIB_ADR;
 800e0aa:	2304      	movs	r3, #4
 800e0ac:	466a      	mov	r2, sp
 800e0ae:	7413      	strb	r3, [r2, #16]
          mibReq.Param.AdrEnable = AdrEnableInit;
 800e0b0:	4b43      	ldr	r3, [pc, #268]	; (800e1c0 <certif_rx+0x1d0>)
 800e0b2:	7f1b      	ldrb	r3, [r3, #28]
 800e0b4:	7513      	strb	r3, [r2, #20]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800e0b6:	a804      	add	r0, sp, #16
 800e0b8:	f7fc ff08 	bl	800aecc <LoRaMacMibSetRequestConfirm>
          LoRaMacTestSetDutyCycleOn( true );
 800e0bc:	2001      	movs	r0, #1
 800e0be:	f7fd fc13 	bl	800b8e8 <LoRaMacTestSetDutyCycleOn>
          break;
 800e0c2:	e79f      	b.n	800e004 <certif_rx+0x14>
          certifParam.DataBufferSize = 2;
 800e0c4:	4b3d      	ldr	r3, [pc, #244]	; (800e1bc <certif_rx+0x1cc>)
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	70da      	strb	r2, [r3, #3]
          break;
 800e0ca:	e79b      	b.n	800e004 <certif_rx+0x14>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	4a3c      	ldr	r2, [pc, #240]	; (800e1c0 <certif_rx+0x1d0>)
 800e0d0:	7013      	strb	r3, [r2, #0]
          certifParam.State = 1;
 800e0d2:	4a3a      	ldr	r2, [pc, #232]	; (800e1bc <certif_rx+0x1cc>)
 800e0d4:	7053      	strb	r3, [r2, #1]
          break;
 800e0d6:	e795      	b.n	800e004 <certif_rx+0x14>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800e0d8:	4b39      	ldr	r3, [pc, #228]	; (800e1c0 <certif_rx+0x1d0>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 800e0de:	4b37      	ldr	r3, [pc, #220]	; (800e1bc <certif_rx+0x1cc>)
 800e0e0:	3201      	adds	r2, #1
 800e0e2:	705a      	strb	r2, [r3, #1]
          break;
 800e0e4:	e78e      	b.n	800e004 <certif_rx+0x14>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800e0e6:	7b04      	ldrb	r4, [r0, #12]
 800e0e8:	4b34      	ldr	r3, [pc, #208]	; (800e1bc <certif_rx+0x1cc>)
 800e0ea:	70dc      	strb	r4, [r3, #3]
          certifParam.DataBuffer[0] = 4;
 800e0ec:	2204      	movs	r2, #4
 800e0ee:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e007      	b.n	800e104 <certif_rx+0x114>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e0f4:	6882      	ldr	r2, [r0, #8]
 800e0f6:	5cd1      	ldrb	r1, [r2, r3]
 800e0f8:	3101      	adds	r1, #1
 800e0fa:	4a30      	ldr	r2, [pc, #192]	; (800e1bc <certif_rx+0x1cc>)
 800e0fc:	18d2      	adds	r2, r2, r3
 800e0fe:	7111      	strb	r1, [r2, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800e100:	3301      	adds	r3, #1
 800e102:	b2db      	uxtb	r3, r3
 800e104:	429c      	cmp	r4, r3
 800e106:	d8f5      	bhi.n	800e0f4 <certif_rx+0x104>
 800e108:	e77c      	b.n	800e004 <certif_rx+0x14>
          mlmeReq.Type = MLME_LINK_CHECK;
 800e10a:	a804      	add	r0, sp, #16
 800e10c:	2303      	movs	r3, #3
 800e10e:	7003      	strb	r3, [r0, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 800e110:	f7fd fa3c 	bl	800b58c <LoRaMacMlmeRequest>
          break;
 800e114:	e776      	b.n	800e004 <certif_rx+0x14>
            certifParam.DownLinkCounter = 0;
 800e116:	4b29      	ldr	r3, [pc, #164]	; (800e1bc <certif_rx+0x1cc>)
 800e118:	22f6      	movs	r2, #246	; 0xf6
 800e11a:	2100      	movs	r1, #0
 800e11c:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 800e11e:	2200      	movs	r2, #0
 800e120:	701a      	strb	r2, [r3, #0]
            mibReq.Type = MIB_ADR;
 800e122:	2304      	movs	r3, #4
 800e124:	466a      	mov	r2, sp
 800e126:	7413      	strb	r3, [r2, #16]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800e128:	4b25      	ldr	r3, [pc, #148]	; (800e1c0 <certif_rx+0x1d0>)
 800e12a:	7f1b      	ldrb	r3, [r3, #28]
 800e12c:	7513      	strb	r3, [r2, #20]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e12e:	a804      	add	r0, sp, #16
 800e130:	f7fc fecc 	bl	800aecc <LoRaMacMibSetRequestConfirm>
            mlmeReq.Type = MLME_JOIN;
 800e134:	2300      	movs	r3, #0
 800e136:	466a      	mov	r2, sp
 800e138:	7013      	strb	r3, [r2, #0]
            mlmeReq.Req.Join = *JoinParameters;
 800e13a:	7823      	ldrb	r3, [r4, #0]
 800e13c:	7113      	strb	r3, [r2, #4]
            LoRaMacMlmeRequest( &mlmeReq );
 800e13e:	4668      	mov	r0, sp
 800e140:	f7fd fa24 	bl	800b58c <LoRaMacMlmeRequest>
            break;
 800e144:	e75e      	b.n	800e004 <certif_rx+0x14>
          if( mcpsIndication->BufferSize == 3 )
 800e146:	7b03      	ldrb	r3, [r0, #12]
 800e148:	2b03      	cmp	r3, #3
 800e14a:	d005      	beq.n	800e158 <certif_rx+0x168>
          else if( mcpsIndication->BufferSize == 7 )
 800e14c:	2b07      	cmp	r3, #7
 800e14e:	d010      	beq.n	800e172 <certif_rx+0x182>
          certifParam.State = 1;
 800e150:	4b1a      	ldr	r3, [pc, #104]	; (800e1bc <certif_rx+0x1cc>)
 800e152:	2201      	movs	r2, #1
 800e154:	705a      	strb	r2, [r3, #1]
          break;
 800e156:	e755      	b.n	800e004 <certif_rx+0x14>
              mlmeReq.Type = MLME_TXCW;
 800e158:	3301      	adds	r3, #1
 800e15a:	4669      	mov	r1, sp
 800e15c:	740b      	strb	r3, [r1, #16]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e15e:	7851      	ldrb	r1, [r2, #1]
 800e160:	0209      	lsls	r1, r1, #8
 800e162:	7893      	ldrb	r3, [r2, #2]
 800e164:	430b      	orrs	r3, r1
 800e166:	466a      	mov	r2, sp
 800e168:	8293      	strh	r3, [r2, #20]
              LoRaMacMlmeRequest( &mlmeReq );
 800e16a:	a804      	add	r0, sp, #16
 800e16c:	f7fd fa0e 	bl	800b58c <LoRaMacMlmeRequest>
 800e170:	e7ee      	b.n	800e150 <certif_rx+0x160>
              mlmeReq.Type = MLME_TXCW_1;
 800e172:	a904      	add	r1, sp, #16
 800e174:	3b02      	subs	r3, #2
 800e176:	700b      	strb	r3, [r1, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e178:	7854      	ldrb	r4, [r2, #1]
 800e17a:	0224      	lsls	r4, r4, #8
 800e17c:	7893      	ldrb	r3, [r2, #2]
 800e17e:	4323      	orrs	r3, r4
 800e180:	808b      	strh	r3, [r1, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e182:	78d3      	ldrb	r3, [r2, #3]
 800e184:	041b      	lsls	r3, r3, #16
 800e186:	7914      	ldrb	r4, [r2, #4]
 800e188:	0224      	lsls	r4, r4, #8
 800e18a:	4323      	orrs	r3, r4
 800e18c:	7952      	ldrb	r2, [r2, #5]
 800e18e:	4313      	orrs	r3, r2
 800e190:	2264      	movs	r2, #100	; 0x64
 800e192:	4353      	muls	r3, r2
 800e194:	9306      	str	r3, [sp, #24]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e196:	6883      	ldr	r3, [r0, #8]
 800e198:	799b      	ldrb	r3, [r3, #6]
 800e19a:	730b      	strb	r3, [r1, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 800e19c:	0008      	movs	r0, r1
 800e19e:	f7fd f9f5 	bl	800b58c <LoRaMacMlmeRequest>
 800e1a2:	e7d5      	b.n	800e150 <certif_rx+0x160>
          mlmeReq.Type = MLME_DEVICE_TIME;
 800e1a4:	a804      	add	r0, sp, #16
 800e1a6:	2309      	movs	r3, #9
 800e1a8:	7003      	strb	r3, [r0, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 800e1aa:	f7fd f9ef 	bl	800b58c <LoRaMacMlmeRequest>
          break;
 800e1ae:	e729      	b.n	800e004 <certif_rx+0x14>
      TimerStop( &CertifTxNextPacketTimer );
 800e1b0:	4803      	ldr	r0, [pc, #12]	; (800e1c0 <certif_rx+0x1d0>)
 800e1b2:	3004      	adds	r0, #4
 800e1b4:	f000 fcaa 	bl	800eb0c <TimerStop>
}
 800e1b8:	e729      	b.n	800e00e <certif_rx+0x1e>
 800e1ba:	46c0      	nop			; (mov r8, r8)
 800e1bc:	20000ff4 	.word	0x20000ff4
 800e1c0:	20000fd4 	.word	0x20000fd4
 800e1c4:	0800dfb1 	.word	0x0800dfb1
 800e1c8:	00001388 	.word	0x00001388
 800e1cc:	0801144c 	.word	0x0801144c

0800e1d0 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 800e1d0:	b510      	push	{r4, lr}
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 800e1d2:	7803      	ldrb	r3, [r0, #0]
 800e1d4:	2b06      	cmp	r3, #6
 800e1d6:	d000      	beq.n	800e1da <MlmeIndication+0xa>
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
    }
}
 800e1d8:	bd10      	pop	{r4, pc}
            LoRaMainCallbacks->LORA_TxNeeded( );			
 800e1da:	4b02      	ldr	r3, [pc, #8]	; (800e1e4 <MlmeIndication+0x14>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	4798      	blx	r3
}
 800e1e2:	e7f9      	b.n	800e1d8 <MlmeIndication+0x8>
 800e1e4:	200010f0 	.word	0x200010f0

0800e1e8 <McpsIndication>:
{
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	0004      	movs	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e1ee:	7843      	ldrb	r3, [r0, #1]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d117      	bne.n	800e224 <McpsIndication+0x3c>
    if( mcpsIndication->FramePending == true )
 800e1f4:	7943      	ldrb	r3, [r0, #5]
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d016      	beq.n	800e228 <McpsIndication+0x40>
    if (certif_running() == true )
 800e1fa:	f7ff fedd 	bl	800dfb8 <certif_running>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d117      	bne.n	800e232 <McpsIndication+0x4a>
    if( mcpsIndication->RxData == true )
 800e202:	7b63      	ldrb	r3, [r4, #13]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00d      	beq.n	800e224 <McpsIndication+0x3c>
      switch( mcpsIndication->Port )
 800e208:	78e3      	ldrb	r3, [r4, #3]
 800e20a:	2be0      	cmp	r3, #224	; 0xe0
 800e20c:	d014      	beq.n	800e238 <McpsIndication+0x50>
          AppData.Port = mcpsIndication->Port;
 800e20e:	466a      	mov	r2, sp
 800e210:	7153      	strb	r3, [r2, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 800e212:	7b23      	ldrb	r3, [r4, #12]
 800e214:	7113      	strb	r3, [r2, #4]
          AppData.Buff = mcpsIndication->Buffer;
 800e216:	68a3      	ldr	r3, [r4, #8]
 800e218:	9300      	str	r3, [sp, #0]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800e21a:	4b0a      	ldr	r3, [pc, #40]	; (800e244 <McpsIndication+0x5c>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	4668      	mov	r0, sp
 800e222:	4798      	blx	r3
}
 800e224:	b002      	add	sp, #8
 800e226:	bd10      	pop	{r4, pc}
        LoRaMainCallbacks->LORA_TxNeeded( );
 800e228:	4b06      	ldr	r3, [pc, #24]	; (800e244 <McpsIndication+0x5c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	4798      	blx	r3
 800e230:	e7e3      	b.n	800e1fa <McpsIndication+0x12>
      certif_DownLinkIncrement( );
 800e232:	f7ff fec7 	bl	800dfc4 <certif_DownLinkIncrement>
 800e236:	e7e4      	b.n	800e202 <McpsIndication+0x1a>
          certif_rx( mcpsIndication, &JoinParameters );
 800e238:	4902      	ldr	r1, [pc, #8]	; (800e244 <McpsIndication+0x5c>)
 800e23a:	3104      	adds	r1, #4
 800e23c:	0020      	movs	r0, r4
 800e23e:	f7ff fed7 	bl	800dff0 <certif_rx>
          break;
 800e242:	e7ef      	b.n	800e224 <McpsIndication+0x3c>
 800e244:	200010f0 	.word	0x200010f0

0800e248 <TraceUpLinkFrame>:
  *currentClass = mibReq.Param.Class;
}


static void TraceUpLinkFrame(McpsConfirm_t *mcpsConfirm)
{
 800e248:	b500      	push	{lr}
 800e24a:	b091      	sub	sp, #68	; 0x44

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 800e24c:	2300      	movs	r3, #0
 800e24e:	466a      	mov	r2, sp
 800e250:	7013      	strb	r3, [r2, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e252:	4668      	mov	r0, sp
 800e254:	f7fc fd18 	bl	800ac88 <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 800e258:	a808      	add	r0, sp, #32
 800e25a:	2324      	movs	r3, #36	; 0x24
 800e25c:	7003      	strb	r3, [r0, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800e25e:	f7fc fd13 	bl	800ac88 <LoRaMacMibGetRequestConfirm>
 800e262:	2800      	cmp	r0, #0
 800e264:	d003      	beq.n	800e26e <TraceUpLinkFrame+0x26>
            TVL2( PRINTF( "%04X ", mibGet.Param.ChannelsMask[i] );)
        }
    }

    TVL2( PRINTF("\r\n\r\n" );)
} 
 800e266:	b011      	add	sp, #68	; 0x44
 800e268:	bd00      	pop	{pc}
        for( uint8_t i = 0; i < 1; i++)
 800e26a:	3001      	adds	r0, #1
 800e26c:	b2c0      	uxtb	r0, r0
 800e26e:	2800      	cmp	r0, #0
 800e270:	d0fb      	beq.n	800e26a <TraceUpLinkFrame+0x22>
 800e272:	e7f8      	b.n	800e266 <TraceUpLinkFrame+0x1e>

0800e274 <McpsConfirm>:
{
 800e274:	b510      	push	{r4, lr}
    TraceUpLinkFrame(mcpsConfirm);
 800e276:	f7ff ffe7 	bl	800e248 <TraceUpLinkFrame>
}
 800e27a:	bd10      	pop	{r4, pc}

0800e27c <LORA_Init>:
{
 800e27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e27e:	46de      	mov	lr, fp
 800e280:	4657      	mov	r7, sl
 800e282:	464e      	mov	r6, r9
 800e284:	4645      	mov	r5, r8
 800e286:	b5e0      	push	{r5, r6, r7, lr}
 800e288:	b097      	sub	sp, #92	; 0x5c
 800e28a:	0003      	movs	r3, r0
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800e28c:	a814      	add	r0, sp, #80	; 0x50
 800e28e:	4a65      	ldr	r2, [pc, #404]	; (800e424 <LORA_Init+0x1a8>)
 800e290:	0004      	movs	r4, r0
 800e292:	ca60      	ldmia	r2!, {r5, r6}
 800e294:	c460      	stmia	r4!, {r5, r6}
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 800e296:	ac12      	add	r4, sp, #72	; 0x48
 800e298:	4a63      	ldr	r2, [pc, #396]	; (800e428 <LORA_Init+0x1ac>)
 800e29a:	ca60      	ldmia	r2!, {r5, r6}
 800e29c:	c460      	stmia	r4!, {r5, r6}
  LoRaParamInit = LoRaParam;
 800e29e:	4a63      	ldr	r2, [pc, #396]	; (800e42c <LORA_Init+0x1b0>)
 800e2a0:	6091      	str	r1, [r2, #8]
  LoRaMainCallbacks = callbacks;
 800e2a2:	6013      	str	r3, [r2, #0]
  LoRaMainCallbacks->BoardGetUniqueId( devEui );  
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	4798      	blx	r3
  PPRINTF( "OTAA\n\r"); 
 800e2a8:	4861      	ldr	r0, [pc, #388]	; (800e430 <LORA_Init+0x1b4>)
 800e2aa:	f000 fcd7 	bl	800ec5c <TraceSend>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d1fa      	bne.n	800e2a8 <LORA_Init+0x2c>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 800e2b2:	a814      	add	r0, sp, #80	; 0x50
 800e2b4:	7801      	ldrb	r1, [r0, #0]
 800e2b6:	7842      	ldrb	r2, [r0, #1]
 800e2b8:	7883      	ldrb	r3, [r0, #2]
 800e2ba:	78c4      	ldrb	r4, [r0, #3]
 800e2bc:	7905      	ldrb	r5, [r0, #4]
 800e2be:	7946      	ldrb	r6, [r0, #5]
 800e2c0:	7987      	ldrb	r7, [r0, #6]
 800e2c2:	79c0      	ldrb	r0, [r0, #7]
 800e2c4:	9004      	str	r0, [sp, #16]
 800e2c6:	9703      	str	r7, [sp, #12]
 800e2c8:	9602      	str	r6, [sp, #8]
 800e2ca:	9501      	str	r5, [sp, #4]
 800e2cc:	9400      	str	r4, [sp, #0]
 800e2ce:	4859      	ldr	r0, [pc, #356]	; (800e434 <LORA_Init+0x1b8>)
 800e2d0:	f000 fcc4 	bl	800ec5c <TraceSend>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d1ec      	bne.n	800e2b2 <LORA_Init+0x36>
  PPRINTF( "AppEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(joinEui));
 800e2d8:	a812      	add	r0, sp, #72	; 0x48
 800e2da:	7801      	ldrb	r1, [r0, #0]
 800e2dc:	7842      	ldrb	r2, [r0, #1]
 800e2de:	7883      	ldrb	r3, [r0, #2]
 800e2e0:	78c4      	ldrb	r4, [r0, #3]
 800e2e2:	7905      	ldrb	r5, [r0, #4]
 800e2e4:	7946      	ldrb	r6, [r0, #5]
 800e2e6:	7987      	ldrb	r7, [r0, #6]
 800e2e8:	79c0      	ldrb	r0, [r0, #7]
 800e2ea:	9004      	str	r0, [sp, #16]
 800e2ec:	9703      	str	r7, [sp, #12]
 800e2ee:	9602      	str	r6, [sp, #8]
 800e2f0:	9501      	str	r5, [sp, #4]
 800e2f2:	9400      	str	r4, [sp, #0]
 800e2f4:	4850      	ldr	r0, [pc, #320]	; (800e438 <LORA_Init+0x1bc>)
 800e2f6:	f000 fcb1 	bl	800ec5c <TraceSend>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d1ec      	bne.n	800e2d8 <LORA_Init+0x5c>
  PPRINTF( "AppKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppKey));
 800e2fe:	484f      	ldr	r0, [pc, #316]	; (800e43c <LORA_Init+0x1c0>)
 800e300:	7801      	ldrb	r1, [r0, #0]
 800e302:	7842      	ldrb	r2, [r0, #1]
 800e304:	7883      	ldrb	r3, [r0, #2]
 800e306:	930e      	str	r3, [sp, #56]	; 0x38
 800e308:	78c4      	ldrb	r4, [r0, #3]
 800e30a:	940f      	str	r4, [sp, #60]	; 0x3c
 800e30c:	7905      	ldrb	r5, [r0, #4]
 800e30e:	9510      	str	r5, [sp, #64]	; 0x40
 800e310:	7946      	ldrb	r6, [r0, #5]
 800e312:	9611      	str	r6, [sp, #68]	; 0x44
 800e314:	7984      	ldrb	r4, [r0, #6]
 800e316:	79c5      	ldrb	r5, [r0, #7]
 800e318:	7a06      	ldrb	r6, [r0, #8]
 800e31a:	7a47      	ldrb	r7, [r0, #9]
 800e31c:	7a83      	ldrb	r3, [r0, #10]
 800e31e:	469c      	mov	ip, r3
 800e320:	7ac3      	ldrb	r3, [r0, #11]
 800e322:	4698      	mov	r8, r3
 800e324:	7b03      	ldrb	r3, [r0, #12]
 800e326:	4699      	mov	r9, r3
 800e328:	7b43      	ldrb	r3, [r0, #13]
 800e32a:	469a      	mov	sl, r3
 800e32c:	7b83      	ldrb	r3, [r0, #14]
 800e32e:	7bc0      	ldrb	r0, [r0, #15]
 800e330:	900c      	str	r0, [sp, #48]	; 0x30
 800e332:	930b      	str	r3, [sp, #44]	; 0x2c
 800e334:	4653      	mov	r3, sl
 800e336:	930a      	str	r3, [sp, #40]	; 0x28
 800e338:	464b      	mov	r3, r9
 800e33a:	9309      	str	r3, [sp, #36]	; 0x24
 800e33c:	4643      	mov	r3, r8
 800e33e:	9308      	str	r3, [sp, #32]
 800e340:	4663      	mov	r3, ip
 800e342:	9307      	str	r3, [sp, #28]
 800e344:	9706      	str	r7, [sp, #24]
 800e346:	9605      	str	r6, [sp, #20]
 800e348:	9504      	str	r5, [sp, #16]
 800e34a:	9403      	str	r4, [sp, #12]
 800e34c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e34e:	9602      	str	r6, [sp, #8]
 800e350:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e352:	9501      	str	r5, [sp, #4]
 800e354:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800e356:	9400      	str	r4, [sp, #0]
 800e358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e35a:	4839      	ldr	r0, [pc, #228]	; (800e440 <LORA_Init+0x1c4>)
 800e35c:	f000 fc7e 	bl	800ec5c <TraceSend>
 800e360:	2800      	cmp	r0, #0
 800e362:	d1cc      	bne.n	800e2fe <LORA_Init+0x82>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e364:	4c31      	ldr	r4, [pc, #196]	; (800e42c <LORA_Init+0x1b0>)
 800e366:	4b37      	ldr	r3, [pc, #220]	; (800e444 <LORA_Init+0x1c8>)
 800e368:	60e3      	str	r3, [r4, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e36a:	4b37      	ldr	r3, [pc, #220]	; (800e448 <LORA_Init+0x1cc>)
 800e36c:	6123      	str	r3, [r4, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e36e:	4b37      	ldr	r3, [pc, #220]	; (800e44c <LORA_Init+0x1d0>)
 800e370:	6163      	str	r3, [r4, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e372:	4b37      	ldr	r3, [pc, #220]	; (800e450 <LORA_Init+0x1d4>)
 800e374:	61a3      	str	r3, [r4, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	61e2      	str	r2, [r4, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800e37c:	685a      	ldr	r2, [r3, #4]
 800e37e:	6222      	str	r2, [r4, #32]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800e380:	6a1b      	ldr	r3, [r3, #32]
 800e382:	62a3      	str	r3, [r4, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 800e384:	0021      	movs	r1, r4
 800e386:	311c      	adds	r1, #28
 800e388:	0020      	movs	r0, r4
 800e38a:	300c      	adds	r0, #12
 800e38c:	2205      	movs	r2, #5
 800e38e:	f7fc f9e3 	bl	800a758 <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 800e392:	262c      	movs	r6, #44	; 0x2c
 800e394:	2302      	movs	r3, #2
 800e396:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.DevEui = devEui;
 800e398:	ab14      	add	r3, sp, #80	; 0x50
 800e39a:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e39c:	0025      	movs	r5, r4
 800e39e:	352c      	adds	r5, #44	; 0x2c
 800e3a0:	0028      	movs	r0, r5
 800e3a2:	f7fc fd93 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.JoinEui = joinEui;
 800e3aa:	ab12      	add	r3, sp, #72	; 0x48
 800e3ac:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e3ae:	0028      	movs	r0, r5
 800e3b0:	f7fc fd8c 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 800e3b4:	2304      	movs	r3, #4
 800e3b6:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800e3b8:	68a3      	ldr	r3, [r4, #8]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e3be:	0028      	movs	r0, r5
 800e3c0:	f7fc fd84 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 800e3c4:	231d      	movs	r3, #29
 800e3c6:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800e3c8:	68a3      	ldr	r3, [r4, #8]
 800e3ca:	789b      	ldrb	r3, [r3, #2]
 800e3cc:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e3ce:	0028      	movs	r0, r5
 800e3d0:	f7fc fd7c 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 800e3d4:	2308      	movs	r3, #8
 800e3d6:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.AppKey = AppKey;
 800e3d8:	4f18      	ldr	r7, [pc, #96]	; (800e43c <LORA_Init+0x1c0>)
 800e3da:	6327      	str	r7, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e3dc:	0028      	movs	r0, r5
 800e3de:	f7fc fd75 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NWK_KEY;
 800e3e2:	2309      	movs	r3, #9
 800e3e4:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.NwkKey = NwkKey;
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	6327      	str	r7, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e3ea:	0028      	movs	r0, r5
 800e3ec:	f7fc fd6e 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEVICE_CLASS;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.Class= CLASS_A;
 800e3f4:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e3f6:	0028      	movs	r0, r5
 800e3f8:	f7fc fd68 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	f7fd fa73 	bl	800b8e8 <LoRaMacTestSetDutyCycleOn>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e402:	2330      	movs	r3, #48	; 0x30
 800e404:	55a3      	strb	r3, [r4, r6]
  mibReq.Param.SystemMaxRxError = 20;
 800e406:	3b1c      	subs	r3, #28
 800e408:	6323      	str	r3, [r4, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800e40a:	0028      	movs	r0, r5
 800e40c:	f7fc fd5e 	bl	800aecc <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 800e410:	f7fc fbca 	bl	800aba8 <LoRaMacStart>
}
 800e414:	b017      	add	sp, #92	; 0x5c
 800e416:	bcf0      	pop	{r4, r5, r6, r7}
 800e418:	46bb      	mov	fp, r7
 800e41a:	46b2      	mov	sl, r6
 800e41c:	46a9      	mov	r9, r5
 800e41e:	46a0      	mov	r8, r4
 800e420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e422:	46c0      	nop			; (mov r8, r8)
 800e424:	0801164c 	.word	0x0801164c
 800e428:	08011658 	.word	0x08011658
 800e42c:	200010f0 	.word	0x200010f0
 800e430:	08011580 	.word	0x08011580
 800e434:	08011588 	.word	0x08011588
 800e438:	080115bc 	.word	0x080115bc
 800e43c:	2000005c 	.word	0x2000005c
 800e440:	080115f0 	.word	0x080115f0
 800e444:	0800e275 	.word	0x0800e275
 800e448:	0800e1e9 	.word	0x0800e1e9
 800e44c:	0800e479 	.word	0x0800e479
 800e450:	0800e1d1 	.word	0x0800e1d1

0800e454 <LORA_Join>:
{
 800e454:	b500      	push	{lr}
 800e456:	b085      	sub	sp, #20
    mlmeReq.Type = MLME_JOIN;
 800e458:	2300      	movs	r3, #0
 800e45a:	466a      	mov	r2, sp
 800e45c:	7013      	strb	r3, [r2, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 800e45e:	4b05      	ldr	r3, [pc, #20]	; (800e474 <LORA_Join+0x20>)
 800e460:	689a      	ldr	r2, [r3, #8]
 800e462:	7852      	ldrb	r2, [r2, #1]
 800e464:	4669      	mov	r1, sp
 800e466:	710a      	strb	r2, [r1, #4]
    JoinParameters = mlmeReq.Req.Join;
 800e468:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest( &mlmeReq );
 800e46a:	4668      	mov	r0, sp
 800e46c:	f7fd f88e 	bl	800b58c <LoRaMacMlmeRequest>
}
 800e470:	b005      	add	sp, #20
 800e472:	bd00      	pop	{pc}
 800e474:	200010f0 	.word	0x200010f0

0800e478 <MlmeConfirm>:
{
 800e478:	b510      	push	{r4, lr}
 800e47a:	0004      	movs	r4, r0
    switch( mlmeConfirm->MlmeRequest )
 800e47c:	7803      	ldrb	r3, [r0, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d002      	beq.n	800e488 <MlmeConfirm+0x10>
 800e482:	2b03      	cmp	r3, #3
 800e484:	d00b      	beq.n	800e49e <MlmeConfirm+0x26>
}
 800e486:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e488:	7843      	ldrb	r3, [r0, #1]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d104      	bne.n	800e498 <MlmeConfirm+0x20>
              LoRaMainCallbacks->LORA_HasJoined();
 800e48e:	4b09      	ldr	r3, [pc, #36]	; (800e4b4 <MlmeConfirm+0x3c>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	4798      	blx	r3
 800e496:	e7f6      	b.n	800e486 <MlmeConfirm+0xe>
                LORA_Join();
 800e498:	f7ff ffdc 	bl	800e454 <LORA_Join>
 800e49c:	e7f3      	b.n	800e486 <MlmeConfirm+0xe>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e49e:	7843      	ldrb	r3, [r0, #1]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1f0      	bne.n	800e486 <MlmeConfirm+0xe>
                if (certif_running() == true )
 800e4a4:	f7ff fd88 	bl	800dfb8 <certif_running>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d0ec      	beq.n	800e486 <MlmeConfirm+0xe>
                     certif_linkCheck( mlmeConfirm);
 800e4ac:	0020      	movs	r0, r4
 800e4ae:	f7ff fd91 	bl	800dfd4 <certif_linkCheck>
}
 800e4b2:	e7e8      	b.n	800e486 <MlmeConfirm+0xe>
 800e4b4:	200010f0 	.word	0x200010f0

0800e4b8 <LORA_send>:
{
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	0005      	movs	r5, r0
 800e4be:	000e      	movs	r6, r1
    if (certif_running() == true)
 800e4c0:	f7ff fd7a 	bl	800dfb8 <certif_running>
 800e4c4:	1e04      	subs	r4, r0, #0
 800e4c6:	d003      	beq.n	800e4d0 <LORA_send+0x18>
      return false;
 800e4c8:	2400      	movs	r4, #0
}  
 800e4ca:	0020      	movs	r0, r4
 800e4cc:	b006      	add	sp, #24
 800e4ce:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e4d0:	7928      	ldrb	r0, [r5, #4]
 800e4d2:	a901      	add	r1, sp, #4
 800e4d4:	f7fc fb72 	bl	800abbc <LoRaMacQueryTxPossible>
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	d010      	beq.n	800e4fe <LORA_send+0x46>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e4dc:	ab02      	add	r3, sp, #8
 800e4de:	2200      	movs	r2, #0
 800e4e0:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e4e2:	9204      	str	r2, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e4e4:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800e4e6:	4a17      	ldr	r2, [pc, #92]	; (800e544 <LORA_send+0x8c>)
 800e4e8:	6892      	ldr	r2, [r2, #8]
 800e4ea:	7852      	ldrb	r2, [r2, #1]
 800e4ec:	b252      	sxtb	r2, r2
 800e4ee:	739a      	strb	r2, [r3, #14]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800e4f0:	a802      	add	r0, sp, #8
 800e4f2:	f7fd f923 	bl	800b73c <LoRaMacMcpsRequest>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d0e7      	beq.n	800e4ca <LORA_send+0x12>
    return true;
 800e4fa:	2401      	movs	r4, #1
 800e4fc:	e7e5      	b.n	800e4ca <LORA_send+0x12>
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800e4fe:	2e00      	cmp	r6, #0
 800e500:	d10e      	bne.n	800e520 <LORA_send+0x68>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800e502:	ab02      	add	r3, sp, #8
 800e504:	2200      	movs	r2, #0
 800e506:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 800e508:	796a      	ldrb	r2, [r5, #5]
 800e50a:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 800e50c:	792a      	ldrb	r2, [r5, #4]
 800e50e:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 800e510:	682a      	ldr	r2, [r5, #0]
 800e512:	9204      	str	r2, [sp, #16]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800e514:	4a0b      	ldr	r2, [pc, #44]	; (800e544 <LORA_send+0x8c>)
 800e516:	6892      	ldr	r2, [r2, #8]
 800e518:	7852      	ldrb	r2, [r2, #1]
 800e51a:	b252      	sxtb	r2, r2
 800e51c:	739a      	strb	r2, [r3, #14]
 800e51e:	e7e7      	b.n	800e4f0 <LORA_send+0x38>
            mcpsReq.Type = MCPS_CONFIRMED;
 800e520:	ab02      	add	r3, sp, #8
 800e522:	2201      	movs	r2, #1
 800e524:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 800e526:	796a      	ldrb	r2, [r5, #5]
 800e528:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 800e52a:	792a      	ldrb	r2, [r5, #4]
 800e52c:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 800e52e:	682a      	ldr	r2, [r5, #0]
 800e530:	9204      	str	r2, [sp, #16]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800e532:	2208      	movs	r2, #8
 800e534:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 800e536:	4a03      	ldr	r2, [pc, #12]	; (800e544 <LORA_send+0x8c>)
 800e538:	6892      	ldr	r2, [r2, #8]
 800e53a:	7852      	ldrb	r2, [r2, #1]
 800e53c:	b252      	sxtb	r2, r2
 800e53e:	739a      	strb	r2, [r3, #14]
 800e540:	e7d6      	b.n	800e4f0 <LORA_send+0x38>
 800e542:	46c0      	nop			; (mov r8, r8)
 800e544:	200010f0 	.word	0x200010f0

0800e548 <LORA_RequestClass>:
{
 800e548:	b510      	push	{r4, lr}
 800e54a:	b088      	sub	sp, #32
 800e54c:	0004      	movs	r4, r0
  mibReq.Type = MIB_DEVICE_CLASS;
 800e54e:	2300      	movs	r3, #0
 800e550:	466a      	mov	r2, sp
 800e552:	7013      	strb	r3, [r2, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800e554:	4668      	mov	r0, sp
 800e556:	f7fc fb97 	bl	800ac88 <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 800e55a:	466b      	mov	r3, sp
 800e55c:	791b      	ldrb	r3, [r3, #4]
  if (currentClass != newClass)
 800e55e:	42a3      	cmp	r3, r4
 800e560:	d02f      	beq.n	800e5c2 <LORA_RequestClass+0x7a>
    switch (newClass)
 800e562:	2c01      	cmp	r4, #1
 800e564:	d014      	beq.n	800e590 <LORA_RequestClass+0x48>
 800e566:	2c02      	cmp	r4, #2
 800e568:	d017      	beq.n	800e59a <LORA_RequestClass+0x52>
 800e56a:	2c00      	cmp	r4, #0
 800e56c:	d003      	beq.n	800e576 <LORA_RequestClass+0x2e>
 800e56e:	2400      	movs	r4, #0
}
 800e570:	0020      	movs	r0, r4
 800e572:	b008      	add	sp, #32
 800e574:	bd10      	pop	{r4, pc}
        mibReq.Param.Class = CLASS_A;
 800e576:	2300      	movs	r3, #0
 800e578:	466a      	mov	r2, sp
 800e57a:	7113      	strb	r3, [r2, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e57c:	4668      	mov	r0, sp
 800e57e:	f7fc fca5 	bl	800aecc <LoRaMacMibSetRequestConfirm>
 800e582:	2800      	cmp	r0, #0
 800e584:	d11f      	bne.n	800e5c6 <LORA_RequestClass+0x7e>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 800e586:	4b13      	ldr	r3, [pc, #76]	; (800e5d4 <LORA_RequestClass+0x8c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	4798      	blx	r3
 800e58e:	e7ef      	b.n	800e570 <LORA_RequestClass+0x28>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 800e590:	4811      	ldr	r0, [pc, #68]	; (800e5d8 <LORA_RequestClass+0x90>)
 800e592:	f000 fb63 	bl	800ec5c <TraceSend>
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800e596:	2400      	movs	r4, #0
        break;
 800e598:	e7ea      	b.n	800e570 <LORA_RequestClass+0x28>
        if (currentClass != CLASS_A)
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10e      	bne.n	800e5bc <LORA_RequestClass+0x74>
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800e59e:	2400      	movs	r4, #0
        mibReq.Param.Class = CLASS_C;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	466a      	mov	r2, sp
 800e5a4:	7113      	strb	r3, [r2, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e5a6:	4668      	mov	r0, sp
 800e5a8:	f7fc fc90 	bl	800aecc <LoRaMacMibSetRequestConfirm>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d10d      	bne.n	800e5cc <LORA_RequestClass+0x84>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800e5b0:	4b08      	ldr	r3, [pc, #32]	; (800e5d4 <LORA_RequestClass+0x8c>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	3002      	adds	r0, #2
 800e5b8:	4798      	blx	r3
 800e5ba:	e7d9      	b.n	800e570 <LORA_RequestClass+0x28>
          Errorstatus = LORA_ERROR;
 800e5bc:	2401      	movs	r4, #1
 800e5be:	4264      	negs	r4, r4
 800e5c0:	e7ee      	b.n	800e5a0 <LORA_RequestClass+0x58>
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	e7d4      	b.n	800e570 <LORA_RequestClass+0x28>
          Errorstatus = LORA_ERROR;
 800e5c6:	2401      	movs	r4, #1
 800e5c8:	4264      	negs	r4, r4
 800e5ca:	e7d1      	b.n	800e570 <LORA_RequestClass+0x28>
            Errorstatus = LORA_ERROR;
 800e5cc:	2401      	movs	r4, #1
 800e5ce:	4264      	negs	r4, r4
 800e5d0:	e7ce      	b.n	800e570 <LORA_RequestClass+0x28>
 800e5d2:	46c0      	nop			; (mov r8, r8)
 800e5d4:	200010f0 	.word	0x200010f0
 800e5d8:	08011664 	.word	0x08011664

0800e5dc <LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5dc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e5e0:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800e5e2:	2900      	cmp	r1, #0
 800e5e4:	d008      	beq.n	800e5f8 <LPM_SetOffMode+0x1c>
 800e5e6:	2901      	cmp	r1, #1
 800e5e8:	d103      	bne.n	800e5f2 <LPM_SetOffMode+0x16>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 800e5ea:	4a06      	ldr	r2, [pc, #24]	; (800e604 <LPM_SetOffMode+0x28>)
 800e5ec:	6811      	ldr	r1, [r2, #0]
 800e5ee:	4308      	orrs	r0, r1
 800e5f0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5f2:	f383 8810 	msr	PRIMASK, r3
  }
  
  RESTORE_PRIMASK( );

  return;
}
 800e5f6:	4770      	bx	lr
      OffModeDisable &= ~(uint32_t)id;
 800e5f8:	4902      	ldr	r1, [pc, #8]	; (800e604 <LPM_SetOffMode+0x28>)
 800e5fa:	680a      	ldr	r2, [r1, #0]
 800e5fc:	4382      	bics	r2, r0
 800e5fe:	600a      	str	r2, [r1, #0]
      break;
 800e600:	e7f7      	b.n	800e5f2 <LPM_SetOffMode+0x16>
 800e602:	46c0      	nop			; (mov r8, r8)
 800e604:	2000113c 	.word	0x2000113c

0800e608 <LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e608:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e60c:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800e60e:	2900      	cmp	r1, #0
 800e610:	d008      	beq.n	800e624 <LPM_SetStopMode+0x1c>
 800e612:	2901      	cmp	r1, #1
 800e614:	d103      	bne.n	800e61e <LPM_SetStopMode+0x16>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 800e616:	4a06      	ldr	r2, [pc, #24]	; (800e630 <LPM_SetStopMode+0x28>)
 800e618:	6851      	ldr	r1, [r2, #4]
 800e61a:	4308      	orrs	r0, r1
 800e61c:	6050      	str	r0, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e61e:	f383 8810 	msr	PRIMASK, r3
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 800e622:	4770      	bx	lr
      StopModeDisable &= ~(uint32_t)id;
 800e624:	4902      	ldr	r1, [pc, #8]	; (800e630 <LPM_SetStopMode+0x28>)
 800e626:	684a      	ldr	r2, [r1, #4]
 800e628:	4382      	bics	r2, r0
 800e62a:	604a      	str	r2, [r1, #4]
      break;
 800e62c:	e7f7      	b.n	800e61e <LPM_SetStopMode+0x16>
 800e62e:	46c0      	nop			; (mov r8, r8)
 800e630:	2000113c 	.word	0x2000113c

0800e634 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e634:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e638:	b672      	cpsid	i

  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 800e63a:	4a08      	ldr	r2, [pc, #32]	; (800e65c <LPM_GetMode+0x28>)
 800e63c:	6852      	ldr	r2, [r2, #4]
 800e63e:	2a00      	cmp	r2, #0
 800e640:	d105      	bne.n	800e64e <LPM_GetMode+0x1a>
  {
    mode_selected = LPM_SleepMode;
  }
  else
  {
    if(OffModeDisable)
 800e642:	4a06      	ldr	r2, [pc, #24]	; (800e65c <LPM_GetMode+0x28>)
 800e644:	6812      	ldr	r2, [r2, #0]
 800e646:	2a00      	cmp	r2, #0
 800e648:	d005      	beq.n	800e656 <LPM_GetMode+0x22>
    {
      mode_selected = LPM_StopMode;
 800e64a:	2001      	movs	r0, #1
 800e64c:	e000      	b.n	800e650 <LPM_GetMode+0x1c>
    mode_selected = LPM_SleepMode;
 800e64e:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e650:	f383 8810 	msr	PRIMASK, r3
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 800e654:	4770      	bx	lr
      mode_selected = LPM_OffMode;
 800e656:	2002      	movs	r0, #2
 800e658:	e7fa      	b.n	800e650 <LPM_GetMode+0x1c>
 800e65a:	46c0      	nop			; (mov r8, r8)
 800e65c:	2000113c 	.word	0x2000113c

0800e660 <circular_queue_get_free_size>:
  return status;
}

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
 800e660:	0002      	movs	r2, r0
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800e662:	8841      	ldrh	r1, [r0, #2]
 800e664:	8803      	ldrh	r3, [r0, #0]
 800e666:	4299      	cmp	r1, r3
 800e668:	d307      	bcc.n	800e67a <circular_queue_get_free_size+0x1a>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 800e66a:	88c0      	ldrh	r0, [r0, #6]
 800e66c:	1a5b      	subs	r3, r3, r1
 800e66e:	18c0      	adds	r0, r0, r3
 800e670:	b200      	sxth	r0, r0
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
  }
  if ( queue->queue_full==1)
 800e672:	7b13      	ldrb	r3, [r2, #12]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d003      	beq.n	800e680 <circular_queue_get_free_size+0x20>
  {
    free_size=0;
  }
  return free_size;
}
 800e678:	4770      	bx	lr
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 800e67a:	1a5b      	subs	r3, r3, r1
 800e67c:	b218      	sxth	r0, r3
 800e67e:	e7f8      	b.n	800e672 <circular_queue_get_free_size+0x12>
    free_size=0;
 800e680:	2000      	movs	r0, #0
 800e682:	e7f9      	b.n	800e678 <circular_queue_get_free_size+0x18>

0800e684 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
  while(size--)
 800e684:	1e53      	subs	r3, r2, #1
 800e686:	b29b      	uxth	r3, r3
 800e688:	2a00      	cmp	r2, #0
 800e68a:	d005      	beq.n	800e698 <queue_copy+0x14>
  {
    *out++= *in++;
 800e68c:	780a      	ldrb	r2, [r1, #0]
 800e68e:	7002      	strb	r2, [r0, #0]
  while(size--)
 800e690:	001a      	movs	r2, r3
    *out++= *in++;
 800e692:	3101      	adds	r1, #1
 800e694:	3001      	adds	r0, #1
 800e696:	e7f5      	b.n	800e684 <queue_copy>
  }
}
 800e698:	4770      	bx	lr

0800e69a <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 800e69a:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800e69c:	8843      	ldrh	r3, [r0, #2]
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	8042      	strh	r2, [r0, #2]
 800e6a2:	0a0a      	lsrs	r2, r1, #8
 800e6a4:	6884      	ldr	r4, [r0, #8]
 800e6a6:	54e2      	strb	r2, [r4, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800e6a8:	8842      	ldrh	r2, [r0, #2]
 800e6aa:	88c3      	ldrh	r3, [r0, #6]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d009      	beq.n	800e6c4 <add_elementSize_and_inc_writeIdx+0x2a>
  {
    queue->queue_write_idx=0;
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 800e6b0:	8843      	ldrh	r3, [r0, #2]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	8042      	strh	r2, [r0, #2]
 800e6b6:	6882      	ldr	r2, [r0, #8]
 800e6b8:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800e6ba:	8842      	ldrh	r2, [r0, #2]
 800e6bc:	88c3      	ldrh	r3, [r0, #6]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d003      	beq.n	800e6ca <add_elementSize_and_inc_writeIdx+0x30>
  {
    queue->queue_write_idx=0;
  }
}
 800e6c2:	bd10      	pop	{r4, pc}
    queue->queue_write_idx=0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	8043      	strh	r3, [r0, #2]
 800e6c8:	e7f2      	b.n	800e6b0 <add_elementSize_and_inc_writeIdx+0x16>
    queue->queue_write_idx=0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	8043      	strh	r3, [r0, #2]
}
 800e6ce:	e7f8      	b.n	800e6c2 <add_elementSize_and_inc_writeIdx+0x28>

0800e6d0 <circular_queue_init>:
  queue->queue_read_idx=0;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	8003      	strh	r3, [r0, #0]
  queue->queue_write_idx=0;
 800e6d4:	8043      	strh	r3, [r0, #2]
  queue->queue_nb_element=0;
 800e6d6:	8083      	strh	r3, [r0, #4]
  queue->queue_buff=queue_buff;
 800e6d8:	6081      	str	r1, [r0, #8]
  queue->queue_size=queue_size;
 800e6da:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 800e6dc:	7303      	strb	r3, [r0, #12]
}
 800e6de:	4770      	bx	lr

0800e6e0 <circular_queue_add>:
{
 800e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e2:	0004      	movs	r4, r0
 800e6e4:	000f      	movs	r7, r1
 800e6e6:	0015      	movs	r5, r2
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 800e6e8:	f7ff ffba 	bl	800e660 <circular_queue_get_free_size>
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800e6ec:	1c6b      	adds	r3, r5, #1
 800e6ee:	4283      	cmp	r3, r0
 800e6f0:	da2b      	bge.n	800e74a <circular_queue_add+0x6a>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 800e6f2:	8861      	ldrh	r1, [r4, #2]
 800e6f4:	186a      	adds	r2, r5, r1
 800e6f6:	3201      	adds	r2, #1
 800e6f8:	88e3      	ldrh	r3, [r4, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	db02      	blt.n	800e704 <circular_queue_add+0x24>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 800e6fe:	3b02      	subs	r3, #2
 800e700:	4299      	cmp	r1, r3
 800e702:	db22      	blt.n	800e74a <circular_queue_add+0x6a>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800e704:	0029      	movs	r1, r5
 800e706:	0020      	movs	r0, r4
 800e708:	f7ff ffc7 	bl	800e69a <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 800e70c:	8860      	ldrh	r0, [r4, #2]
 800e70e:	68a3      	ldr	r3, [r4, #8]
 800e710:	469c      	mov	ip, r3
 800e712:	4460      	add	r0, ip
 800e714:	002a      	movs	r2, r5
 800e716:	0039      	movs	r1, r7
 800e718:	f7ff ffb4 	bl	800e684 <queue_copy>
    queue->queue_write_idx+=buff_size;
 800e71c:	8862      	ldrh	r2, [r4, #2]
 800e71e:	18ad      	adds	r5, r5, r2
 800e720:	b2ad      	uxth	r5, r5
 800e722:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 800e724:	88e3      	ldrh	r3, [r4, #6]
 800e726:	429d      	cmp	r5, r3
 800e728:	d008      	beq.n	800e73c <circular_queue_add+0x5c>
    queue->queue_nb_element++; 
 800e72a:	88a3      	ldrh	r3, [r4, #4]
 800e72c:	3301      	adds	r3, #1
 800e72e:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800e730:	8862      	ldrh	r2, [r4, #2]
 800e732:	8823      	ldrh	r3, [r4, #0]
 800e734:	429a      	cmp	r2, r3
 800e736:	d004      	beq.n	800e742 <circular_queue_add+0x62>
    status=0;
 800e738:	2000      	movs	r0, #0
 800e73a:	e036      	b.n	800e7aa <circular_queue_add+0xca>
        queue->queue_write_idx=0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	8063      	strh	r3, [r4, #2]
 800e740:	e7f3      	b.n	800e72a <circular_queue_add+0x4a>
      queue->queue_full=1;
 800e742:	2301      	movs	r3, #1
 800e744:	7323      	strb	r3, [r4, #12]
    status=0;
 800e746:	2000      	movs	r0, #0
 800e748:	e02f      	b.n	800e7aa <circular_queue_add+0xca>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 800e74a:	1ceb      	adds	r3, r5, #3
 800e74c:	4298      	cmp	r0, r3
 800e74e:	dd31      	ble.n	800e7b4 <circular_queue_add+0xd4>
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800e750:	88e3      	ldrh	r3, [r4, #6]
 800e752:	8866      	ldrh	r6, [r4, #2]
 800e754:	1b9b      	subs	r3, r3, r6
 800e756:	b29b      	uxth	r3, r3
 800e758:	3b02      	subs	r3, #2
 800e75a:	b29e      	uxth	r6, r3
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800e75c:	0031      	movs	r1, r6
 800e75e:	0020      	movs	r0, r4
 800e760:	f7ff ff9b 	bl	800e69a <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 800e764:	8860      	ldrh	r0, [r4, #2]
 800e766:	68a3      	ldr	r3, [r4, #8]
 800e768:	469c      	mov	ip, r3
 800e76a:	4460      	add	r0, ip
 800e76c:	0032      	movs	r2, r6
 800e76e:	0039      	movs	r1, r7
 800e770:	f7ff ff88 	bl	800e684 <queue_copy>
    queue->queue_write_idx=0;
 800e774:	2300      	movs	r3, #0
 800e776:	8063      	strh	r3, [r4, #2]
    buff_size-=top_size;
 800e778:	1bad      	subs	r5, r5, r6
 800e77a:	b2ad      	uxth	r5, r5
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800e77c:	0029      	movs	r1, r5
 800e77e:	0020      	movs	r0, r4
 800e780:	f7ff ff8b 	bl	800e69a <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 800e784:	8860      	ldrh	r0, [r4, #2]
 800e786:	19b9      	adds	r1, r7, r6
 800e788:	68a3      	ldr	r3, [r4, #8]
 800e78a:	469c      	mov	ip, r3
 800e78c:	4460      	add	r0, ip
 800e78e:	002a      	movs	r2, r5
 800e790:	f7ff ff78 	bl	800e684 <queue_copy>
    queue->queue_write_idx+=buff_size;
 800e794:	8862      	ldrh	r2, [r4, #2]
 800e796:	18ad      	adds	r5, r5, r2
 800e798:	b2ad      	uxth	r5, r5
 800e79a:	8065      	strh	r5, [r4, #2]
    queue->queue_nb_element+=2;
 800e79c:	88a3      	ldrh	r3, [r4, #4]
 800e79e:	3302      	adds	r3, #2
 800e7a0:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800e7a2:	8823      	ldrh	r3, [r4, #0]
 800e7a4:	429d      	cmp	r5, r3
 800e7a6:	d001      	beq.n	800e7ac <circular_queue_add+0xcc>
    status =0;
 800e7a8:	2000      	movs	r0, #0
}
 800e7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      queue->queue_full=1;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	7323      	strb	r3, [r4, #12]
    status =0;
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e7fa      	b.n	800e7aa <circular_queue_add+0xca>
    status=-1;
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	4240      	negs	r0, r0
 800e7b8:	e7f7      	b.n	800e7aa <circular_queue_add+0xca>

0800e7ba <circular_queue_get>:
{
 800e7ba:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800e7bc:	8883      	ldrh	r3, [r0, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d017      	beq.n	800e7f2 <circular_queue_get+0x38>
    uint16_t read_idx=queue->queue_read_idx;
 800e7c2:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800e7c4:	6885      	ldr	r5, [r0, #8]
 800e7c6:	1c63      	adds	r3, r4, #1
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	5d2c      	ldrb	r4, [r5, r4]
 800e7cc:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 800e7ce:	88c6      	ldrh	r6, [r0, #6]
 800e7d0:	429e      	cmp	r6, r3
 800e7d2:	d00a      	beq.n	800e7ea <circular_queue_get+0x30>
    size|=(uint16_t) queue->queue_buff[read_idx++];
 800e7d4:	1c58      	adds	r0, r3, #1
 800e7d6:	b280      	uxth	r0, r0
 800e7d8:	5ceb      	ldrb	r3, [r5, r3]
 800e7da:	4323      	orrs	r3, r4
    if (read_idx==queue->queue_size)
 800e7dc:	4286      	cmp	r6, r0
 800e7de:	d006      	beq.n	800e7ee <circular_queue_get+0x34>
    *buff= queue->queue_buff+read_idx;
 800e7e0:	182d      	adds	r5, r5, r0
 800e7e2:	600d      	str	r5, [r1, #0]
    * buff_size=size;
 800e7e4:	8013      	strh	r3, [r2, #0]
    status=0;
 800e7e6:	2000      	movs	r0, #0
}
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
      read_idx=0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	e7f2      	b.n	800e7d4 <circular_queue_get+0x1a>
      read_idx=0;
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e7f6      	b.n	800e7e0 <circular_queue_get+0x26>
    status=-1;
 800e7f2:	2001      	movs	r0, #1
 800e7f4:	4240      	negs	r0, r0
  return status;
 800e7f6:	e7f7      	b.n	800e7e8 <circular_queue_get+0x2e>

0800e7f8 <circular_queue_remove>:
{
 800e7f8:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800e7fa:	8882      	ldrh	r2, [r0, #4]
 800e7fc:	2a00      	cmp	r2, #0
 800e7fe:	d026      	beq.n	800e84e <circular_queue_remove+0x56>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800e800:	6886      	ldr	r6, [r0, #8]
 800e802:	8803      	ldrh	r3, [r0, #0]
 800e804:	1c59      	adds	r1, r3, #1
 800e806:	b289      	uxth	r1, r1
 800e808:	8001      	strh	r1, [r0, #0]
 800e80a:	5cf3      	ldrb	r3, [r6, r3]
 800e80c:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 800e80e:	88c4      	ldrh	r4, [r0, #6]
 800e810:	42a1      	cmp	r1, r4
 800e812:	d013      	beq.n	800e83c <circular_queue_remove+0x44>
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 800e814:	8805      	ldrh	r5, [r0, #0]
 800e816:	1c69      	adds	r1, r5, #1
 800e818:	b289      	uxth	r1, r1
 800e81a:	8001      	strh	r1, [r0, #0]
 800e81c:	5d75      	ldrb	r5, [r6, r5]
 800e81e:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 800e820:	428c      	cmp	r4, r1
 800e822:	d00e      	beq.n	800e842 <circular_queue_remove+0x4a>
    queue->queue_read_idx+=size;
 800e824:	8801      	ldrh	r1, [r0, #0]
 800e826:	185b      	adds	r3, r3, r1
 800e828:	b29b      	uxth	r3, r3
 800e82a:	8003      	strh	r3, [r0, #0]
    if (queue->queue_read_idx==queue->queue_size)
 800e82c:	429c      	cmp	r4, r3
 800e82e:	d00b      	beq.n	800e848 <circular_queue_remove+0x50>
    queue->queue_nb_element--;
 800e830:	3a01      	subs	r2, #1
 800e832:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 800e834:	2300      	movs	r3, #0
 800e836:	7303      	strb	r3, [r0, #12]
    status=0;
 800e838:	2000      	movs	r0, #0
}
 800e83a:	bd70      	pop	{r4, r5, r6, pc}
      queue->queue_read_idx=0;
 800e83c:	2100      	movs	r1, #0
 800e83e:	8001      	strh	r1, [r0, #0]
 800e840:	e7e8      	b.n	800e814 <circular_queue_remove+0x1c>
      queue->queue_read_idx=0;
 800e842:	2100      	movs	r1, #0
 800e844:	8001      	strh	r1, [r0, #0]
 800e846:	e7ed      	b.n	800e824 <circular_queue_remove+0x2c>
        queue->queue_read_idx=0;
 800e848:	2300      	movs	r3, #0
 800e84a:	8003      	strh	r3, [r0, #0]
 800e84c:	e7f0      	b.n	800e830 <circular_queue_remove+0x38>
      status=-1;
 800e84e:	2001      	movs	r0, #1
 800e850:	4240      	negs	r0, r0
  return status;
 800e852:	e7f2      	b.n	800e83a <circular_queue_remove+0x42>

0800e854 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 800e854:	8883      	ldrh	r3, [r0, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d001      	beq.n	800e85e <circular_queue_sense+0xa>
    status=0;
 800e85a:	2000      	movs	r0, #0
}
 800e85c:	4770      	bx	lr
    status=-1;
 800e85e:	2001      	movs	r0, #1
 800e860:	4240      	negs	r0, r0
 800e862:	e7fb      	b.n	800e85c <circular_queue_sense+0x8>

0800e864 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800e864:	b082      	sub	sp, #8
 800e866:	b510      	push	{r4, lr}
 800e868:	b082      	sub	sp, #8
 800e86a:	9305      	str	r3, [sp, #20]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 800e86c:	18c9      	adds	r1, r1, r3
 800e86e:	6001      	str	r1, [r0, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e870:	b292      	uxth	r2, r2
 800e872:	ab05      	add	r3, sp, #20
 800e874:	889b      	ldrh	r3, [r3, #4]
 800e876:	18d2      	adds	r2, r2, r3
 800e878:	b293      	uxth	r3, r2
 800e87a:	b212      	sxth	r2, r2
 800e87c:	8082      	strh	r2, [r0, #4]
    if( c.SubSeconds >= 1000 )
 800e87e:	24fa      	movs	r4, #250	; 0xfa
 800e880:	00a4      	lsls	r4, r4, #2
 800e882:	42a2      	cmp	r2, r4
 800e884:	db05      	blt.n	800e892 <SysTimeAdd+0x2e>
    {
        c.Seconds++;
 800e886:	3101      	adds	r1, #1
 800e888:	6001      	str	r1, [r0, #0]
        c.SubSeconds -= 1000;
 800e88a:	4a04      	ldr	r2, [pc, #16]	; (800e89c <SysTimeAdd+0x38>)
 800e88c:	4694      	mov	ip, r2
 800e88e:	4463      	add	r3, ip
 800e890:	8083      	strh	r3, [r0, #4]
    }
    return c;
}
 800e892:	b002      	add	sp, #8
 800e894:	bc10      	pop	{r4}
 800e896:	bc08      	pop	{r3}
 800e898:	b002      	add	sp, #8
 800e89a:	4718      	bx	r3
 800e89c:	fffffc18 	.word	0xfffffc18

0800e8a0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	9303      	str	r3, [sp, #12]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 800e8a6:	1ac9      	subs	r1, r1, r3
 800e8a8:	6001      	str	r1, [r0, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e8aa:	b292      	uxth	r2, r2
 800e8ac:	ab03      	add	r3, sp, #12
 800e8ae:	889b      	ldrh	r3, [r3, #4]
 800e8b0:	1ad2      	subs	r2, r2, r3
 800e8b2:	b293      	uxth	r3, r2
 800e8b4:	b212      	sxth	r2, r2
 800e8b6:	8082      	strh	r2, [r0, #4]
    if( c.SubSeconds < 0 )
 800e8b8:	2a00      	cmp	r2, #0
 800e8ba:	db02      	blt.n	800e8c2 <SysTimeSub+0x22>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
    }
    return c;
}
 800e8bc:	b002      	add	sp, #8
 800e8be:	b002      	add	sp, #8
 800e8c0:	4770      	bx	lr
        c.Seconds--;
 800e8c2:	3901      	subs	r1, #1
 800e8c4:	6001      	str	r1, [r0, #0]
        c.SubSeconds += 1000;
 800e8c6:	22fa      	movs	r2, #250	; 0xfa
 800e8c8:	0092      	lsls	r2, r2, #2
 800e8ca:	4694      	mov	ip, r2
 800e8cc:	4463      	add	r3, ip
 800e8ce:	8083      	strh	r3, [r0, #4]
    return c;
 800e8d0:	e7f4      	b.n	800e8bc <SysTimeSub+0x1c>

0800e8d2 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800e8d2:	b530      	push	{r4, r5, lr}
 800e8d4:	b089      	sub	sp, #36	; 0x24
 800e8d6:	9002      	str	r0, [sp, #8]
 800e8d8:	9103      	str	r1, [sp, #12]
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e8da:	ad04      	add	r5, sp, #16
 800e8dc:	2300      	movs	r3, #0
 800e8de:	9304      	str	r3, [sp, #16]
 800e8e0:	80ab      	strh	r3, [r5, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e8e2:	a805      	add	r0, sp, #20
 800e8e4:	f000 fda8 	bl	800f438 <HW_RTC_GetCalendarTime>
 800e8e8:	0003      	movs	r3, r0
 800e8ea:	9004      	str	r0, [sp, #16]

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );
 800e8ec:	ac06      	add	r4, sp, #24
 800e8ee:	686a      	ldr	r2, [r5, #4]
 800e8f0:	9200      	str	r2, [sp, #0]
 800e8f2:	9902      	ldr	r1, [sp, #8]
 800e8f4:	9a03      	ldr	r2, [sp, #12]
 800e8f6:	0020      	movs	r0, r4
 800e8f8:	f7ff ffd2 	bl	800e8a0 <SysTimeSub>

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 800e8fc:	2304      	movs	r3, #4
 800e8fe:	5ee1      	ldrsh	r1, [r4, r3]
 800e900:	9806      	ldr	r0, [sp, #24]
 800e902:	f000 fdab 	bl	800f45c <HW_RTC_BKUPWrite>
}
 800e906:	b009      	add	sp, #36	; 0x24
 800e908:	bd30      	pop	{r4, r5, pc}

0800e90a <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800e90a:	b530      	push	{r4, r5, lr}
 800e90c:	b087      	sub	sp, #28
 800e90e:	0004      	movs	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e910:	ad04      	add	r5, sp, #16
 800e912:	2300      	movs	r3, #0
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	80ab      	strh	r3, [r5, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e918:	a805      	add	r0, sp, #20
 800e91a:	f000 fd8d 	bl	800f438 <HW_RTC_GetCalendarTime>
 800e91e:	9004      	str	r0, [sp, #16]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800e920:	a903      	add	r1, sp, #12
 800e922:	a802      	add	r0, sp, #8
 800e924:	f000 fdaa 	bl	800f47c <HW_RTC_BKUPRead>

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800e928:	686b      	ldr	r3, [r5, #4]
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	9902      	ldr	r1, [sp, #8]
 800e930:	9a03      	ldr	r2, [sp, #12]
 800e932:	0020      	movs	r0, r4
 800e934:	f7ff ff96 	bl	800e864 <SysTimeAdd>

    return sysTime;
}
 800e938:	0020      	movs	r0, r4
 800e93a:	b007      	add	sp, #28
 800e93c:	bd30      	pop	{r4, r5, pc}

0800e93e <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800e93e:	b530      	push	{r4, r5, lr}
 800e940:	b083      	sub	sp, #12
 800e942:	0004      	movs	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e944:	466d      	mov	r5, sp
 800e946:	2300      	movs	r3, #0
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	80ab      	strh	r3, [r5, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e94c:	a801      	add	r0, sp, #4
 800e94e:	f000 fd73 	bl	800f438 <HW_RTC_GetCalendarTime>
 800e952:	9000      	str	r0, [sp, #0]
    
    return calendarTime;
 800e954:	0023      	movs	r3, r4
 800e956:	cd06      	ldmia	r5!, {r1, r2}
 800e958:	c306      	stmia	r3!, {r1, r2}
}
 800e95a:	0020      	movs	r0, r4
 800e95c:	b003      	add	sp, #12
 800e95e:	bd30      	pop	{r4, r5, pc}

0800e960 <TimerExists>:
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static bool TimerExists( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 800e960:	4b05      	ldr	r3, [pc, #20]	; (800e978 <TimerExists+0x18>)
 800e962:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800e964:	2b00      	cmp	r3, #0
 800e966:	d003      	beq.n	800e970 <TimerExists+0x10>
  {
    if( cur == obj )
 800e968:	4283      	cmp	r3, r0
 800e96a:	d003      	beq.n	800e974 <TimerExists+0x14>
    {
      return true;
    }
    cur = cur->Next;
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	e7f9      	b.n	800e964 <TimerExists+0x4>
  }
  return false;
 800e970:	2000      	movs	r0, #0
}
 800e972:	4770      	bx	lr
      return true;
 800e974:	2001      	movs	r0, #1
 800e976:	e7fc      	b.n	800e972 <TimerExists+0x12>
 800e978:	20001144 	.word	0x20001144

0800e97c <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 800e97c:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800e97e:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <TimerInsertTimer+0x2c>)
 800e980:	681a      	ldr	r2, [r3, #0]
  TimerEvent_t* next = TimerListHead->Next;
 800e982:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800e984:	6951      	ldr	r1, [r2, #20]
 800e986:	2900      	cmp	r1, #0
 800e988:	d009      	beq.n	800e99e <TimerInsertTimer+0x22>
  {  
    if( obj->Timestamp  > next->Timestamp )
 800e98a:	6801      	ldr	r1, [r0, #0]
 800e98c:	681c      	ldr	r4, [r3, #0]
 800e98e:	42a1      	cmp	r1, r4
 800e990:	d902      	bls.n	800e998 <TimerInsertTimer+0x1c>
    {
        cur = next;
 800e992:	001a      	movs	r2, r3
        next = next->Next;
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	e7f5      	b.n	800e984 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = obj;
 800e998:	6150      	str	r0, [r2, #20]
        obj->Next = next;
 800e99a:	6143      	str	r3, [r0, #20]
        return;
 800e99c:	e002      	b.n	800e9a4 <TimerInsertTimer+0x28>

    }
  }
  cur->Next = obj;
 800e99e:	6150      	str	r0, [r2, #20]
  obj->Next = NULL;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	6143      	str	r3, [r0, #20]
}
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	20001144 	.word	0x20001144

0800e9ac <TimerSetTimeout>:
{
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800e9b0:	f000 fbd4 	bl	800f15c <HW_RTC_GetMinimumTimeout>
 800e9b4:	0005      	movs	r5, r0
  obj->IsNext2Expire = true; 
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	7263      	strb	r3, [r4, #9]
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 800e9ba:	6826      	ldr	r6, [r4, #0]
 800e9bc:	f000 fbea 	bl	800f194 <HW_RTC_GetTimerElapsedTime>
 800e9c0:	1828      	adds	r0, r5, r0
 800e9c2:	4286      	cmp	r6, r0
 800e9c4:	d303      	bcc.n	800e9ce <TimerSetTimeout+0x22>
  HW_RTC_SetAlarm( obj->Timestamp );
 800e9c6:	6820      	ldr	r0, [r4, #0]
 800e9c8:	f000 fcba 	bl	800f340 <HW_RTC_SetAlarm>
}
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800e9ce:	f000 fbe1 	bl	800f194 <HW_RTC_GetTimerElapsedTime>
 800e9d2:	182d      	adds	r5, r5, r0
 800e9d4:	6025      	str	r5, [r4, #0]
 800e9d6:	e7f6      	b.n	800e9c6 <TimerSetTimeout+0x1a>

0800e9d8 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 800e9d8:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800e9da:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <TimerInsertNewHeadTimer+0x1c>)
 800e9dc:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsNext2Expire = false;
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 800e9e6:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 800e9e8:	4b02      	ldr	r3, [pc, #8]	; (800e9f4 <TimerInsertNewHeadTimer+0x1c>)
 800e9ea:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800e9ec:	f7ff ffde 	bl	800e9ac <TimerSetTimeout>
}
 800e9f0:	bd10      	pop	{r4, pc}
 800e9f2:	46c0      	nop			; (mov r8, r8)
 800e9f4:	20001144 	.word	0x20001144

0800e9f8 <TimerInit>:
  obj->Timestamp = 0;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 800e9fc:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 800e9fe:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 800ea00:	7243      	strb	r3, [r0, #9]
  obj->Callback = callback;
 800ea02:	60c1      	str	r1, [r0, #12]
  obj->Context = NULL;
 800ea04:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 800ea06:	6143      	str	r3, [r0, #20]
}
 800ea08:	4770      	bx	lr
	...

0800ea0c <TimerStart>:
{
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea10:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ea14:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d01e      	beq.n	800ea58 <TimerStart+0x4c>
 800ea1a:	f7ff ffa1 	bl	800e960 <TimerExists>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d11a      	bne.n	800ea58 <TimerStart+0x4c>
  obj->Timestamp = obj->ReloadValue;
 800ea22:	6863      	ldr	r3, [r4, #4]
 800ea24:	6023      	str	r3, [r4, #0]
  obj->IsStarted = true;
 800ea26:	2301      	movs	r3, #1
 800ea28:	7223      	strb	r3, [r4, #8]
  obj->IsNext2Expire = false;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	7263      	strb	r3, [r4, #9]
  if( TimerListHead == NULL )
 800ea2e:	4b11      	ldr	r3, [pc, #68]	; (800ea74 <TimerStart+0x68>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d013      	beq.n	800ea5e <TimerStart+0x52>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800ea36:	f000 fbad 	bl	800f194 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	469c      	mov	ip, r3
 800ea3e:	4460      	add	r0, ip
 800ea40:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 800ea42:	4b0c      	ldr	r3, [pc, #48]	; (800ea74 <TimerStart+0x68>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4298      	cmp	r0, r3
 800ea4a:	d20e      	bcs.n	800ea6a <TimerStart+0x5e>
      TimerInsertNewHeadTimer( obj);
 800ea4c:	0020      	movs	r0, r4
 800ea4e:	f7ff ffc3 	bl	800e9d8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea52:	f385 8810 	msr	PRIMASK, r5
}
 800ea56:	e001      	b.n	800ea5c <TimerStart+0x50>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea58:	f385 8810 	msr	PRIMASK, r5
}
 800ea5c:	bd70      	pop	{r4, r5, r6, pc}
    HW_RTC_SetTimerContext( );
 800ea5e:	f000 fcc5 	bl	800f3ec <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 800ea62:	0020      	movs	r0, r4
 800ea64:	f7ff ffb8 	bl	800e9d8 <TimerInsertNewHeadTimer>
 800ea68:	e7f3      	b.n	800ea52 <TimerStart+0x46>
      TimerInsertTimer( obj);
 800ea6a:	0020      	movs	r0, r4
 800ea6c:	f7ff ff86 	bl	800e97c <TimerInsertTimer>
 800ea70:	e7ef      	b.n	800ea52 <TimerStart+0x46>
 800ea72:	46c0      	nop			; (mov r8, r8)
 800ea74:	20001144 	.word	0x20001144

0800ea78 <TimerIrqHandler>:
{
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 800ea7a:	f000 fcd7 	bl	800f42c <HW_RTC_GetTimerContext>
 800ea7e:	0004      	movs	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 800ea80:	f000 fcb4 	bl	800f3ec <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 800ea84:	1b07      	subs	r7, r0, r4
  if ( TimerListHead != NULL )
 800ea86:	4b20      	ldr	r3, [pc, #128]	; (800eb08 <TimerIrqHandler+0x90>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00e      	beq.n	800eaac <TimerIrqHandler+0x34>
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800ea8e:	0019      	movs	r1, r3
 800ea90:	e002      	b.n	800ea98 <TimerIrqHandler+0x20>
        next->Timestamp = 0 ;
 800ea92:	2500      	movs	r5, #0
 800ea94:	6015      	str	r5, [r2, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800ea96:	6949      	ldr	r1, [r1, #20]
 800ea98:	694a      	ldr	r2, [r1, #20]
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	d006      	beq.n	800eaac <TimerIrqHandler+0x34>
      if (next->Timestamp > DeltaContext)
 800ea9e:	6815      	ldr	r5, [r2, #0]
 800eaa0:	42bd      	cmp	r5, r7
 800eaa2:	d9f6      	bls.n	800ea92 <TimerIrqHandler+0x1a>
        next->Timestamp -= DeltaContext;
 800eaa4:	1a26      	subs	r6, r4, r0
 800eaa6:	1975      	adds	r5, r6, r5
 800eaa8:	6015      	str	r5, [r2, #0]
 800eaaa:	e7f4      	b.n	800ea96 <TimerIrqHandler+0x1e>
  if ( TimerListHead != NULL )
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d009      	beq.n	800eac4 <TimerIrqHandler+0x4c>
    TimerListHead = TimerListHead->Next;
 800eab0:	4a15      	ldr	r2, [pc, #84]	; (800eb08 <TimerIrqHandler+0x90>)
 800eab2:	6959      	ldr	r1, [r3, #20]
 800eab4:	6011      	str	r1, [r2, #0]
    cur->IsStarted = false;
 800eab6:	2200      	movs	r2, #0
 800eab8:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 800eaba:	68da      	ldr	r2, [r3, #12]
 800eabc:	2a00      	cmp	r2, #0
 800eabe:	d016      	beq.n	800eaee <TimerIrqHandler+0x76>
 800eac0:	6918      	ldr	r0, [r3, #16]
 800eac2:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800eac4:	4b10      	ldr	r3, [pc, #64]	; (800eb08 <TimerIrqHandler+0x90>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d012      	beq.n	800eaf2 <TimerIrqHandler+0x7a>
 800eacc:	681c      	ldr	r4, [r3, #0]
 800eace:	f000 fb61 	bl	800f194 <HW_RTC_GetTimerElapsedTime>
 800ead2:	4284      	cmp	r4, r0
 800ead4:	d20d      	bcs.n	800eaf2 <TimerIrqHandler+0x7a>
   cur = TimerListHead;
 800ead6:	4a0c      	ldr	r2, [pc, #48]	; (800eb08 <TimerIrqHandler+0x90>)
 800ead8:	6813      	ldr	r3, [r2, #0]
   TimerListHead = TimerListHead->Next;
 800eada:	6959      	ldr	r1, [r3, #20]
 800eadc:	6011      	str	r1, [r2, #0]
   cur->IsStarted = false;
 800eade:	2200      	movs	r2, #0
 800eae0:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 800eae2:	68da      	ldr	r2, [r3, #12]
 800eae4:	2a00      	cmp	r2, #0
 800eae6:	d003      	beq.n	800eaf0 <TimerIrqHandler+0x78>
 800eae8:	6918      	ldr	r0, [r3, #16]
 800eaea:	4790      	blx	r2
 800eaec:	e7ea      	b.n	800eac4 <TimerIrqHandler+0x4c>
    exec_cb( cur->Callback, cur->Context );
 800eaee:	e7fe      	b.n	800eaee <TimerIrqHandler+0x76>
   exec_cb( cur->Callback, cur->Context );
 800eaf0:	e7fe      	b.n	800eaf0 <TimerIrqHandler+0x78>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800eaf2:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <TimerIrqHandler+0x90>)
 800eaf4:	6818      	ldr	r0, [r3, #0]
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d002      	beq.n	800eb00 <TimerIrqHandler+0x88>
 800eafa:	7a43      	ldrb	r3, [r0, #9]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d000      	beq.n	800eb02 <TimerIrqHandler+0x8a>
}
 800eb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TimerSetTimeout( TimerListHead );
 800eb02:	f7ff ff53 	bl	800e9ac <TimerSetTimeout>
}
 800eb06:	e7fb      	b.n	800eb00 <TimerIrqHandler+0x88>
 800eb08:	20001144 	.word	0x20001144

0800eb0c <TimerStop>:
{
 800eb0c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb0e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eb12:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800eb14:	4b1d      	ldr	r3, [pc, #116]	; (800eb8c <TimerStop+0x80>)
 800eb16:	681a      	ldr	r2, [r3, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800eb18:	2a00      	cmp	r2, #0
 800eb1a:	d00d      	beq.n	800eb38 <TimerStop+0x2c>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d00b      	beq.n	800eb38 <TimerStop+0x2c>
  obj->IsStarted = false;
 800eb20:	2300      	movs	r3, #0
 800eb22:	7203      	strb	r3, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 800eb24:	4282      	cmp	r2, r0
 800eb26:	d00a      	beq.n	800eb3e <TimerStop+0x32>
  TimerEvent_t* cur = TimerListHead;
 800eb28:	0013      	movs	r3, r2
    while( cur != NULL )
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d028      	beq.n	800eb80 <TimerStop+0x74>
      if( cur == obj )
 800eb2e:	4283      	cmp	r3, r0
 800eb30:	d022      	beq.n	800eb78 <TimerStop+0x6c>
        prev = cur;
 800eb32:	001a      	movs	r2, r3
        cur = cur->Next;
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	e7f8      	b.n	800eb2a <TimerStop+0x1e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb38:	f384 8810 	msr	PRIMASK, r4
    return;
 800eb3c:	e022      	b.n	800eb84 <TimerStop+0x78>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 800eb3e:	7a53      	ldrb	r3, [r2, #9]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00f      	beq.n	800eb64 <TimerStop+0x58>
      TimerListHead->IsNext2Expire = false;
 800eb44:	2300      	movs	r3, #0
 800eb46:	7253      	strb	r3, [r2, #9]
      if( TimerListHead->Next != NULL )
 800eb48:	6950      	ldr	r0, [r2, #20]
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d004      	beq.n	800eb58 <TimerStop+0x4c>
        TimerListHead = TimerListHead->Next;
 800eb4e:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <TimerStop+0x80>)
 800eb50:	6018      	str	r0, [r3, #0]
        TimerSetTimeout( TimerListHead );
 800eb52:	f7ff ff2b 	bl	800e9ac <TimerSetTimeout>
 800eb56:	e013      	b.n	800eb80 <TimerStop+0x74>
        HW_RTC_StopAlarm( );
 800eb58:	f000 fb32 	bl	800f1c0 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800eb5c:	4b0b      	ldr	r3, [pc, #44]	; (800eb8c <TimerStop+0x80>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	e00d      	b.n	800eb80 <TimerStop+0x74>
      if( TimerListHead->Next != NULL )   
 800eb64:	6953      	ldr	r3, [r2, #20]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <TimerStop+0x64>
        TimerListHead = TimerListHead->Next;
 800eb6a:	4a08      	ldr	r2, [pc, #32]	; (800eb8c <TimerStop+0x80>)
 800eb6c:	6013      	str	r3, [r2, #0]
 800eb6e:	e007      	b.n	800eb80 <TimerStop+0x74>
        TimerListHead = NULL;
 800eb70:	4b06      	ldr	r3, [pc, #24]	; (800eb8c <TimerStop+0x80>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	e003      	b.n	800eb80 <TimerStop+0x74>
        if( cur->Next != NULL )
 800eb78:	695b      	ldr	r3, [r3, #20]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <TimerStop+0x7a>
          prev->Next = cur;
 800eb7e:	6153      	str	r3, [r2, #20]
 800eb80:	f384 8810 	msr	PRIMASK, r4
}  
 800eb84:	bd10      	pop	{r4, pc}
          prev->Next = cur;
 800eb86:	2300      	movs	r3, #0
 800eb88:	6153      	str	r3, [r2, #20]
 800eb8a:	e7f9      	b.n	800eb80 <TimerStop+0x74>
 800eb8c:	20001144 	.word	0x20001144

0800eb90 <TimerSetValue>:
{
 800eb90:	b570      	push	{r4, r5, r6, lr}
 800eb92:	0004      	movs	r4, r0
 800eb94:	0008      	movs	r0, r1
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800eb96:	f000 fae3 	bl	800f160 <HW_RTC_ms2Tick>
 800eb9a:	0005      	movs	r5, r0
  TimerStop( obj );
 800eb9c:	0020      	movs	r0, r4
 800eb9e:	f7ff ffb5 	bl	800eb0c <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 800eba2:	f000 fadb 	bl	800f15c <HW_RTC_GetMinimumTimeout>
  if( ticks < minValue )
 800eba6:	4285      	cmp	r5, r0
 800eba8:	d300      	bcc.n	800ebac <TimerSetValue+0x1c>
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800ebaa:	0028      	movs	r0, r5
  obj->Timestamp = ticks;
 800ebac:	6020      	str	r0, [r4, #0]
  obj->ReloadValue = ticks;
 800ebae:	6060      	str	r0, [r4, #4]
}
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}

0800ebb2 <TimerGetCurrentTime>:
{
 800ebb2:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800ebb4:	f000 fafc 	bl	800f1b0 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800ebb8:	f000 fada 	bl	800f170 <HW_RTC_Tick2ms>
}
 800ebbc:	bd10      	pop	{r4, pc}

0800ebbe <TimerGetElapsedTime>:
{
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	1e04      	subs	r4, r0, #0
  if ( past == 0 )
 800ebc2:	d101      	bne.n	800ebc8 <TimerGetElapsedTime+0xa>
}
 800ebc4:	0020      	movs	r0, r4
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800ebc8:	f000 faf2 	bl	800f1b0 <HW_RTC_GetTimerValue>
 800ebcc:	0005      	movs	r5, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 800ebce:	0020      	movs	r0, r4
 800ebd0:	f000 fac6 	bl	800f160 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800ebd4:	1a28      	subs	r0, r5, r0
 800ebd6:	f000 facb 	bl	800f170 <HW_RTC_Tick2ms>
 800ebda:	0004      	movs	r4, r0
 800ebdc:	e7f2      	b.n	800ebc4 <TimerGetElapsedTime+0x6>
	...

0800ebe0 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 800ebe0:	b530      	push	{r4, r5, lr}
 800ebe2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebe4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ebe8:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 800ebea:	4c11      	ldr	r4, [pc, #68]	; (800ec30 <Trace_TxCpltCallback+0x50>)
 800ebec:	0020      	movs	r0, r4
 800ebee:	f7ff fe03 	bl	800e7f8 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 800ebf2:	0020      	movs	r0, r4
 800ebf4:	f7ff fe2e 	bl	800e854 <circular_queue_sense>

  if ( status == 0) 
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d10e      	bne.n	800ec1a <Trace_TxCpltCallback+0x3a>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800ebfc:	466b      	mov	r3, sp
 800ebfe:	1c9c      	adds	r4, r3, #2
 800ec00:	0022      	movs	r2, r4
 800ec02:	a901      	add	r1, sp, #4
 800ec04:	480a      	ldr	r0, [pc, #40]	; (800ec30 <Trace_TxCpltCallback+0x50>)
 800ec06:	f7ff fdd8 	bl	800e7ba <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec0a:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 800ec0e:	8821      	ldrh	r1, [r4, #0]
 800ec10:	9801      	ldr	r0, [sp, #4]
 800ec12:	f001 f8ef 	bl	800fdf4 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 800ec16:	b003      	add	sp, #12
 800ec18:	bd30      	pop	{r4, r5, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	2020      	movs	r0, #32
 800ec1e:	f7ff fcf3 	bl	800e608 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800ec22:	4b04      	ldr	r3, [pc, #16]	; (800ec34 <Trace_TxCpltCallback+0x54>)
 800ec24:	2201      	movs	r2, #1
 800ec26:	701a      	strb	r2, [r3, #0]
 800ec28:	f385 8810 	msr	PRIMASK, r5
}
 800ec2c:	e7f3      	b.n	800ec16 <Trace_TxCpltCallback+0x36>
 800ec2e:	46c0      	nop			; (mov r8, r8)
 800ec30:	20001148 	.word	0x20001148
 800ec34:	20000154 	.word	0x20000154

0800ec38 <TraceInit>:
{
 800ec38:	b510      	push	{r4, lr}
  OutputInit(Trace_TxCpltCallback);
 800ec3a:	4805      	ldr	r0, [pc, #20]	; (800ec50 <TraceInit+0x18>)
 800ec3c:	f001 f8bc 	bl	800fdb8 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 800ec40:	2280      	movs	r2, #128	; 0x80
 800ec42:	0052      	lsls	r2, r2, #1
 800ec44:	4903      	ldr	r1, [pc, #12]	; (800ec54 <TraceInit+0x1c>)
 800ec46:	4804      	ldr	r0, [pc, #16]	; (800ec58 <TraceInit+0x20>)
 800ec48:	f7ff fd42 	bl	800e6d0 <circular_queue_init>
}
 800ec4c:	bd10      	pop	{r4, pc}
 800ec4e:	46c0      	nop			; (mov r8, r8)
 800ec50:	0800ebe1 	.word	0x0800ebe1
 800ec54:	20001158 	.word	0x20001158
 800ec58:	20001148 	.word	0x20001148

0800ec5c <TraceSend>:
{
 800ec5c:	b40f      	push	{r0, r1, r2, r3}
 800ec5e:	b530      	push	{r4, r5, lr}
 800ec60:	b0c5      	sub	sp, #276	; 0x114
 800ec62:	ab48      	add	r3, sp, #288	; 0x120
 800ec64:	cb04      	ldmia	r3!, {r2}
  va_start( vaArgs, strFormat);
 800ec66:	9303      	str	r3, [sp, #12]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800ec68:	2180      	movs	r1, #128	; 0x80
 800ec6a:	0049      	lsls	r1, r1, #1
 800ec6c:	a804      	add	r0, sp, #16
 800ec6e:	f001 f9f1 	bl	8010054 <vsniprintf>
 800ec72:	466b      	mov	r3, sp
 800ec74:	3306      	adds	r3, #6
 800ec76:	8018      	strh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec78:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ec7c:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 800ec7e:	881a      	ldrh	r2, [r3, #0]
 800ec80:	a904      	add	r1, sp, #16
 800ec82:	4813      	ldr	r0, [pc, #76]	; (800ecd0 <TraceSend+0x74>)
 800ec84:	f7ff fd2c 	bl	800e6e0 <circular_queue_add>
 800ec88:	1e04      	subs	r4, r0, #0
  if ((status==0 ) && (TracePeripheralReady==SET))
 800ec8a:	d103      	bne.n	800ec94 <TraceSend+0x38>
 800ec8c:	4b11      	ldr	r3, [pc, #68]	; (800ecd4 <TraceSend+0x78>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d007      	beq.n	800eca4 <TraceSend+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec94:	f385 8810 	msr	PRIMASK, r5
}
 800ec98:	0020      	movs	r0, r4
 800ec9a:	b045      	add	sp, #276	; 0x114
 800ec9c:	bc30      	pop	{r4, r5}
 800ec9e:	bc08      	pop	{r3}
 800eca0:	b004      	add	sp, #16
 800eca2:	4718      	bx	r3
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800eca4:	466b      	mov	r3, sp
 800eca6:	1d9a      	adds	r2, r3, #6
 800eca8:	a902      	add	r1, sp, #8
 800ecaa:	4809      	ldr	r0, [pc, #36]	; (800ecd0 <TraceSend+0x74>)
 800ecac:	f7ff fd85 	bl	800e7ba <circular_queue_get>
    TracePeripheralReady = RESET;
 800ecb0:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <TraceSend+0x78>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	701a      	strb	r2, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	2020      	movs	r0, #32
 800ecba:	f7ff fca5 	bl	800e608 <LPM_SetStopMode>
 800ecbe:	f385 8810 	msr	PRIMASK, r5
    OutputTrace(buffer, bufSize);
 800ecc2:	466b      	mov	r3, sp
 800ecc4:	88d9      	ldrh	r1, [r3, #6]
 800ecc6:	9802      	ldr	r0, [sp, #8]
 800ecc8:	f001 f894 	bl	800fdf4 <vcom_Trace>
 800eccc:	e7e4      	b.n	800ec98 <TraceSend+0x3c>
 800ecce:	46c0      	nop			; (mov r8, r8)
 800ecd0:	20001148 	.word	0x20001148
 800ecd4:	20000154 	.word	0x20000154

0800ecd8 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 800ecd8:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800ecda:	4b06      	ldr	r3, [pc, #24]	; (800ecf4 <rand1+0x1c>)
 800ecdc:	4806      	ldr	r0, [pc, #24]	; (800ecf8 <rand1+0x20>)
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	4350      	muls	r0, r2
 800ece2:	4a06      	ldr	r2, [pc, #24]	; (800ecfc <rand1+0x24>)
 800ece4:	4694      	mov	ip, r2
 800ece6:	4460      	add	r0, ip
 800ece8:	6018      	str	r0, [r3, #0]
 800ecea:	4905      	ldr	r1, [pc, #20]	; (800ed00 <rand1+0x28>)
 800ecec:	f7f1 fa9c 	bl	8000228 <__aeabi_uidivmod>
 800ecf0:	0008      	movs	r0, r1
}
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	20000158 	.word	0x20000158
 800ecf8:	41c64e6d 	.word	0x41c64e6d
 800ecfc:	00003039 	.word	0x00003039
 800ed00:	7fffffff 	.word	0x7fffffff

0800ed04 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800ed04:	4b01      	ldr	r3, [pc, #4]	; (800ed0c <srand1+0x8>)
 800ed06:	6018      	str	r0, [r3, #0]
}
 800ed08:	4770      	bx	lr
 800ed0a:	46c0      	nop			; (mov r8, r8)
 800ed0c:	20000158 	.word	0x20000158

0800ed10 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	0005      	movs	r5, r0
 800ed14:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800ed16:	f7ff ffdf 	bl	800ecd8 <rand1>
 800ed1a:	1b61      	subs	r1, r4, r5
 800ed1c:	3101      	adds	r1, #1
 800ed1e:	f7f1 fb6d 	bl	80003fc <__aeabi_idivmod>
 800ed22:	1948      	adds	r0, r1, r5
}
 800ed24:	bd70      	pop	{r4, r5, r6, pc}

0800ed26 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800ed26:	1e53      	subs	r3, r2, #1
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2a00      	cmp	r2, #0
 800ed2c:	d005      	beq.n	800ed3a <memcpy1+0x14>
    {
        *dst++ = *src++;
 800ed2e:	780a      	ldrb	r2, [r1, #0]
 800ed30:	7002      	strb	r2, [r0, #0]
    while( size-- )
 800ed32:	001a      	movs	r2, r3
        *dst++ = *src++;
 800ed34:	3101      	adds	r1, #1
 800ed36:	3001      	adds	r0, #1
 800ed38:	e7f5      	b.n	800ed26 <memcpy1>
    }
}
 800ed3a:	4770      	bx	lr

0800ed3c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800ed3c:	1e53      	subs	r3, r2, #1
 800ed3e:	18c0      	adds	r0, r0, r3
    while( size-- )
 800ed40:	1e53      	subs	r3, r2, #1
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	2a00      	cmp	r2, #0
 800ed46:	d005      	beq.n	800ed54 <memcpyr+0x18>
    {
        *dst-- = *src++;
 800ed48:	780a      	ldrb	r2, [r1, #0]
 800ed4a:	7002      	strb	r2, [r0, #0]
    while( size-- )
 800ed4c:	001a      	movs	r2, r3
        *dst-- = *src++;
 800ed4e:	3101      	adds	r1, #1
 800ed50:	3801      	subs	r0, #1
 800ed52:	e7f5      	b.n	800ed40 <memcpyr+0x4>
    }
}
 800ed54:	4770      	bx	lr

0800ed56 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800ed56:	1e53      	subs	r3, r2, #1
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	2a00      	cmp	r2, #0
 800ed5c:	d003      	beq.n	800ed66 <memset1+0x10>
    {
        *dst++ = value;
 800ed5e:	7001      	strb	r1, [r0, #0]
    while( size-- )
 800ed60:	001a      	movs	r2, r3
        *dst++ = value;
 800ed62:	3001      	adds	r0, #1
 800ed64:	e7f7      	b.n	800ed56 <memset1>
    }
}
 800ed66:	4770      	bx	lr

0800ed68 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 800ed68:	4770      	bx	lr
	...

0800ed6c <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 800ed6c:	b530      	push	{r4, r5, lr}
 800ed6e:	b087      	sub	sp, #28
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800ed70:	2300      	movs	r3, #0
 800ed72:	9305      	str	r3, [sp, #20]

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed74:	4c1d      	ldr	r4, [pc, #116]	; (800edec <DBG_Init+0x80>)
 800ed76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ed78:	3302      	adds	r3, #2
 800ed7a:	431a      	orrs	r2, r3
 800ed7c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800ed7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ed80:	4013      	ands	r3, r2
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800ed86:	2301      	movs	r3, #1
 800ed88:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 800ed8a:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 800ed8c:	3302      	adds	r3, #2
 800ed8e:	9304      	str	r3, [sp, #16]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800ed90:	23f0      	movs	r3, #240	; 0xf0
 800ed92:	021b      	lsls	r3, r3, #8
 800ed94:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800ed96:	4d16      	ldr	r5, [pc, #88]	; (800edf0 <DBG_Init+0x84>)
 800ed98:	a901      	add	r1, sp, #4
 800ed9a:	0028      	movs	r0, r5
 800ed9c:	f7f6 f806 	bl	8004dac <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800eda0:	2180      	movs	r1, #128	; 0x80
 800eda2:	2200      	movs	r2, #0
 800eda4:	0149      	lsls	r1, r1, #5
 800eda6:	0028      	movs	r0, r5
 800eda8:	f7f6 f8ce 	bl	8004f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800edac:	2180      	movs	r1, #128	; 0x80
 800edae:	2200      	movs	r2, #0
 800edb0:	0189      	lsls	r1, r1, #6
 800edb2:	0028      	movs	r0, r5
 800edb4:	f7f6 f8c8 	bl	8004f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800edb8:	2180      	movs	r1, #128	; 0x80
 800edba:	2200      	movs	r2, #0
 800edbc:	01c9      	lsls	r1, r1, #7
 800edbe:	0028      	movs	r0, r5
 800edc0:	f7f6 f8c2 	bl	8004f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800edc4:	2180      	movs	r1, #128	; 0x80
 800edc6:	2200      	movs	r2, #0
 800edc8:	0209      	lsls	r1, r1, #8
 800edca:	0028      	movs	r0, r5
 800edcc:	f7f6 f8bc 	bl	8004f48 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800edd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800edd2:	2380      	movs	r3, #128	; 0x80
 800edd4:	03db      	lsls	r3, r3, #15
 800edd6:	4313      	orrs	r3, r2
 800edd8:	6363      	str	r3, [r4, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 800edda:	f7f5 fbdb 	bl	8004594 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800edde:	f7f5 fbe1 	bl	80045a4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800ede2:	f7f5 fbe7 	bl	80045b4 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 800ede6:	b007      	add	sp, #28
 800ede8:	bd30      	pop	{r4, r5, pc}
 800edea:	46c0      	nop			; (mov r8, r8)
 800edec:	40021000 	.word	0x40021000
 800edf0:	50000400 	.word	0x50000400

0800edf4 <Error_Handler>:

void Error_Handler(void)
{
 800edf4:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800edf6:	4802      	ldr	r0, [pc, #8]	; (800ee00 <Error_Handler+0xc>)
 800edf8:	f7ff ff30 	bl	800ec5c <TraceSend>
  while (1)
 800edfc:	e7fe      	b.n	800edfc <Error_Handler+0x8>
 800edfe:	46c0      	nop			; (mov r8, r8)
 800ee00:	08011a78 	.word	0x08011a78

0800ee04 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 800ee04:	0003      	movs	r3, r0
  uint8_t PinPos = 0;

  if ((GPIO_Pin & 0xFF00) != 0)
 800ee06:	22ff      	movs	r2, #255	; 0xff
 800ee08:	0001      	movs	r1, r0
 800ee0a:	4391      	bics	r1, r2
 800ee0c:	d113      	bne.n	800ee36 <HW_GPIO_GetBitPos+0x32>
  uint8_t PinPos = 0;
 800ee0e:	2000      	movs	r0, #0
  {
    PinPos |= 0x8;
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 800ee10:	4a0a      	ldr	r2, [pc, #40]	; (800ee3c <HW_GPIO_GetBitPos+0x38>)
 800ee12:	4213      	tst	r3, r2
 800ee14:	d002      	beq.n	800ee1c <HW_GPIO_GetBitPos+0x18>
  {
    PinPos |= 0x4;
 800ee16:	2204      	movs	r2, #4
 800ee18:	4310      	orrs	r0, r2
 800ee1a:	b2c0      	uxtb	r0, r0
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 800ee1c:	4a08      	ldr	r2, [pc, #32]	; (800ee40 <HW_GPIO_GetBitPos+0x3c>)
 800ee1e:	4213      	tst	r3, r2
 800ee20:	d002      	beq.n	800ee28 <HW_GPIO_GetBitPos+0x24>
  {
    PinPos |= 0x2;
 800ee22:	2202      	movs	r2, #2
 800ee24:	4310      	orrs	r0, r2
 800ee26:	b2c0      	uxtb	r0, r0
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 800ee28:	4a06      	ldr	r2, [pc, #24]	; (800ee44 <HW_GPIO_GetBitPos+0x40>)
 800ee2a:	4213      	tst	r3, r2
 800ee2c:	d002      	beq.n	800ee34 <HW_GPIO_GetBitPos+0x30>
  {
    PinPos |= 0x1;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	4318      	orrs	r0, r3
 800ee32:	b2c0      	uxtb	r0, r0
  }

  return PinPos;
}
 800ee34:	4770      	bx	lr
    PinPos |= 0x8;
 800ee36:	2008      	movs	r0, #8
 800ee38:	e7ea      	b.n	800ee10 <HW_GPIO_GetBitPos+0xc>
 800ee3a:	46c0      	nop			; (mov r8, r8)
 800ee3c:	fffff0f0 	.word	0xfffff0f0
 800ee40:	ffffcccc 	.word	0xffffcccc
 800ee44:	ffffaaaa 	.word	0xffffaaaa

0800ee48 <HW_GPIO_Init>:
{
 800ee48:	b530      	push	{r4, r5, lr}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	000c      	movs	r4, r1
 800ee4e:	0011      	movs	r1, r2
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800ee50:	4a21      	ldr	r2, [pc, #132]	; (800eed8 <HW_GPIO_Init+0x90>)
 800ee52:	4290      	cmp	r0, r2
 800ee54:	d02c      	beq.n	800eeb0 <HW_GPIO_Init+0x68>
 800ee56:	d810      	bhi.n	800ee7a <HW_GPIO_Init+0x32>
 800ee58:	22a0      	movs	r2, #160	; 0xa0
 800ee5a:	05d2      	lsls	r2, r2, #23
 800ee5c:	4290      	cmp	r0, r2
 800ee5e:	d019      	beq.n	800ee94 <HW_GPIO_Init+0x4c>
 800ee60:	4a1e      	ldr	r2, [pc, #120]	; (800eedc <HW_GPIO_Init+0x94>)
 800ee62:	4290      	cmp	r0, r2
 800ee64:	d12e      	bne.n	800eec4 <HW_GPIO_Init+0x7c>
 800ee66:	4a1e      	ldr	r2, [pc, #120]	; (800eee0 <HW_GPIO_Init+0x98>)
 800ee68:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800ee6a:	2302      	movs	r3, #2
 800ee6c:	431d      	orrs	r5, r3
 800ee6e:	62d5      	str	r5, [r2, #44]	; 0x2c
 800ee70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ee72:	4013      	ands	r3, r2
 800ee74:	9302      	str	r3, [sp, #8]
 800ee76:	9b02      	ldr	r3, [sp, #8]
 800ee78:	e015      	b.n	800eea6 <HW_GPIO_Init+0x5e>
 800ee7a:	4a1a      	ldr	r2, [pc, #104]	; (800eee4 <HW_GPIO_Init+0x9c>)
 800ee7c:	4290      	cmp	r0, r2
 800ee7e:	d121      	bne.n	800eec4 <HW_GPIO_Init+0x7c>
 800ee80:	4a17      	ldr	r2, [pc, #92]	; (800eee0 <HW_GPIO_Init+0x98>)
 800ee82:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800ee84:	2308      	movs	r3, #8
 800ee86:	431d      	orrs	r5, r3
 800ee88:	62d5      	str	r5, [r2, #44]	; 0x2c
 800ee8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	9304      	str	r3, [sp, #16]
 800ee90:	9b04      	ldr	r3, [sp, #16]
 800ee92:	e008      	b.n	800eea6 <HW_GPIO_Init+0x5e>
 800ee94:	4a12      	ldr	r2, [pc, #72]	; (800eee0 <HW_GPIO_Init+0x98>)
 800ee96:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800ee98:	2301      	movs	r3, #1
 800ee9a:	431d      	orrs	r5, r3
 800ee9c:	62d5      	str	r5, [r2, #44]	; 0x2c
 800ee9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800eea0:	4013      	ands	r3, r2
 800eea2:	9301      	str	r3, [sp, #4]
 800eea4:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800eea6:	600c      	str	r4, [r1, #0]
  HAL_GPIO_Init(port, initStruct);
 800eea8:	f7f5 ff80 	bl	8004dac <HAL_GPIO_Init>
}
 800eeac:	b007      	add	sp, #28
 800eeae:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800eeb0:	4a0b      	ldr	r2, [pc, #44]	; (800eee0 <HW_GPIO_Init+0x98>)
 800eeb2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800eeb4:	2304      	movs	r3, #4
 800eeb6:	431d      	orrs	r5, r3
 800eeb8:	62d5      	str	r5, [r2, #44]	; 0x2c
 800eeba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800eebc:	4013      	ands	r3, r2
 800eebe:	9303      	str	r3, [sp, #12]
 800eec0:	9b03      	ldr	r3, [sp, #12]
 800eec2:	e7f0      	b.n	800eea6 <HW_GPIO_Init+0x5e>
 800eec4:	4a06      	ldr	r2, [pc, #24]	; (800eee0 <HW_GPIO_Init+0x98>)
 800eec6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800eec8:	2380      	movs	r3, #128	; 0x80
 800eeca:	431d      	orrs	r5, r3
 800eecc:	62d5      	str	r5, [r2, #44]	; 0x2c
 800eece:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800eed0:	4013      	ands	r3, r2
 800eed2:	9305      	str	r3, [sp, #20]
 800eed4:	9b05      	ldr	r3, [sp, #20]
 800eed6:	e7e6      	b.n	800eea6 <HW_GPIO_Init+0x5e>
 800eed8:	50000800 	.word	0x50000800
 800eedc:	50000400 	.word	0x50000400
 800eee0:	40021000 	.word	0x40021000
 800eee4:	50000c00 	.word	0x50000c00

0800eee8 <HW_GPIO_SetIrq>:
{
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	000d      	movs	r5, r1
 800eeec:	0014      	movs	r4, r2
 800eeee:	001e      	movs	r6, r3
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800eef0:	0008      	movs	r0, r1
 800eef2:	f7ff ff87 	bl	800ee04 <HW_GPIO_GetBitPos>
  if (irqHandler != NULL)
 800eef6:	2e00      	cmp	r6, #0
 800eef8:	d00e      	beq.n	800ef18 <HW_GPIO_SetIrq+0x30>
    GpioIrq[ BitPos ] = irqHandler;
 800eefa:	0080      	lsls	r0, r0, #2
 800eefc:	4b09      	ldr	r3, [pc, #36]	; (800ef24 <HW_GPIO_SetIrq+0x3c>)
 800eefe:	50c6      	str	r6, [r0, r3]
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 800ef00:	0028      	movs	r0, r5
 800ef02:	f000 fd07 	bl	800f914 <MSP_GetIRQn>
 800ef06:	0005      	movs	r5, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 800ef08:	2200      	movs	r2, #0
 800ef0a:	0021      	movs	r1, r4
 800ef0c:	f7f5 fdee 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 800ef10:	0028      	movs	r0, r5
 800ef12:	f7f5 fe1b 	bl	8004b4c <HAL_NVIC_EnableIRQ>
}
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
    GpioIrq[ BitPos ] = NULL;
 800ef18:	0080      	lsls	r0, r0, #2
 800ef1a:	4b02      	ldr	r3, [pc, #8]	; (800ef24 <HW_GPIO_SetIrq+0x3c>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	50c2      	str	r2, [r0, r3]
}
 800ef20:	e7f9      	b.n	800ef16 <HW_GPIO_SetIrq+0x2e>
 800ef22:	46c0      	nop			; (mov r8, r8)
 800ef24:	20001258 	.word	0x20001258

0800ef28 <HW_GPIO_IrqHandler>:
{
 800ef28:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 800ef2a:	f7ff ff6b 	bl	800ee04 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 800ef2e:	0080      	lsls	r0, r0, #2
 800ef30:	4b03      	ldr	r3, [pc, #12]	; (800ef40 <HW_GPIO_IrqHandler+0x18>)
 800ef32:	58c3      	ldr	r3, [r0, r3]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <HW_GPIO_IrqHandler+0x14>
    GpioIrq[ BitPos ](NULL);
 800ef38:	2000      	movs	r0, #0
 800ef3a:	4798      	blx	r3
}
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	20001258 	.word	0x20001258

0800ef44 <HW_GPIO_Write>:
{
 800ef44:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 800ef46:	b2d2      	uxtb	r2, r2
 800ef48:	f7f5 fffe 	bl	8004f48 <HAL_GPIO_WritePin>
}
 800ef4c:	bd10      	pop	{r4, pc}
	...

0800ef50 <HW_I2C1_Init>:

//I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void HW_I2C1_Init(I2C_HandleTypeDef* hi2c1)
{
 800ef50:	b510      	push	{r4, lr}
 800ef52:	0004      	movs	r4, r0

  hi2c1->Instance = I2C1;
 800ef54:	4b13      	ldr	r3, [pc, #76]	; (800efa4 <HW_I2C1_Init+0x54>)
 800ef56:	6003      	str	r3, [r0, #0]
  hi2c1->Init.Timing = 0x00707CBB;
 800ef58:	4b13      	ldr	r3, [pc, #76]	; (800efa8 <HW_I2C1_Init+0x58>)
 800ef5a:	6043      	str	r3, [r0, #4]
  hi2c1->Init.OwnAddress1 = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	6083      	str	r3, [r0, #8]
  hi2c1->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ef60:	2201      	movs	r2, #1
 800ef62:	60c2      	str	r2, [r0, #12]
  hi2c1->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ef64:	6103      	str	r3, [r0, #16]
  hi2c1->Init.OwnAddress2 = 0;
 800ef66:	6143      	str	r3, [r0, #20]
  hi2c1->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ef68:	6183      	str	r3, [r0, #24]
  hi2c1->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ef6a:	61c3      	str	r3, [r0, #28]
  hi2c1->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ef6c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hi2c1) != HAL_OK)
 800ef6e:	f7f6 f921 	bl	80051b4 <HAL_I2C_Init>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d10c      	bne.n	800ef90 <HW_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ef76:	2100      	movs	r1, #0
 800ef78:	0020      	movs	r0, r4
 800ef7a:	f7f6 faf5 	bl	8005568 <HAL_I2CEx_ConfigAnalogFilter>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d109      	bne.n	800ef96 <HW_I2C1_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c1, 0) != HAL_OK)
 800ef82:	2100      	movs	r1, #0
 800ef84:	0020      	movs	r0, r4
 800ef86:	f7f6 fb1b 	bl	80055c0 <HAL_I2CEx_ConfigDigitalFilter>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d106      	bne.n	800ef9c <HW_I2C1_Init+0x4c>
  {
    Error_Handler();
  }

}
 800ef8e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ef90:	f7ff ff30 	bl	800edf4 <Error_Handler>
 800ef94:	e7ef      	b.n	800ef76 <HW_I2C1_Init+0x26>
    Error_Handler();
 800ef96:	f7ff ff2d 	bl	800edf4 <Error_Handler>
 800ef9a:	e7f2      	b.n	800ef82 <HW_I2C1_Init+0x32>
    Error_Handler();
 800ef9c:	f7ff ff2a 	bl	800edf4 <Error_Handler>
}
 800efa0:	e7f5      	b.n	800ef8e <HW_I2C1_Init+0x3e>
 800efa2:	46c0      	nop			; (mov r8, r8)
 800efa4:	40005400 	.word	0x40005400
 800efa8:	00707cbb 	.word	0x00707cbb

0800efac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800efac:	b510      	push	{r4, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efb2:	2214      	movs	r2, #20
 800efb4:	2100      	movs	r1, #0
 800efb6:	a801      	add	r0, sp, #4
 800efb8:	f000 ffe4 	bl	800ff84 <memset>
  if(i2cHandle->Instance==I2C1)
 800efbc:	6822      	ldr	r2, [r4, #0]
 800efbe:	4b11      	ldr	r3, [pc, #68]	; (800f004 <HAL_I2C_MspInit+0x58>)
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d001      	beq.n	800efc8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800efc4:	b006      	add	sp, #24
 800efc6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800efc8:	4c0f      	ldr	r4, [pc, #60]	; (800f008 <HAL_I2C_MspInit+0x5c>)
 800efca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efcc:	2302      	movs	r3, #2
 800efce:	431a      	orrs	r2, r3
 800efd0:	62e2      	str	r2, [r4, #44]	; 0x2c
 800efd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efd4:	4013      	ands	r3, r2
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800efda:	23c0      	movs	r3, #192	; 0xc0
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800efe0:	2312      	movs	r3, #18
 800efe2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800efe4:	3b11      	subs	r3, #17
 800efe6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800efe8:	3302      	adds	r3, #2
 800efea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800efec:	3301      	adds	r3, #1
 800efee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eff0:	a901      	add	r1, sp, #4
 800eff2:	4806      	ldr	r0, [pc, #24]	; (800f00c <HAL_I2C_MspInit+0x60>)
 800eff4:	f7f5 feda 	bl	8004dac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800eff8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800effa:	2380      	movs	r3, #128	; 0x80
 800effc:	039b      	lsls	r3, r3, #14
 800effe:	4313      	orrs	r3, r2
 800f000:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f002:	e7df      	b.n	800efc4 <HAL_I2C_MspInit+0x18>
 800f004:	40005400 	.word	0x40005400
 800f008:	40021000 	.word	0x40021000
 800f00c:	50000400 	.word	0x50000400

0800f010 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 800f010:	b530      	push	{r4, r5, lr}
 800f012:	b087      	sub	sp, #28
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 800f014:	4d15      	ldr	r5, [pc, #84]	; (800f06c <HW_RTC_SetConfig+0x5c>)
 800f016:	4b16      	ldr	r3, [pc, #88]	; (800f070 <HW_RTC_SetConfig+0x60>)
 800f018:	602b      	str	r3, [r5, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800f01a:	2400      	movs	r4, #0
 800f01c:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800f01e:	231f      	movs	r3, #31
 800f020:	60ab      	str	r3, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800f022:	4b14      	ldr	r3, [pc, #80]	; (800f074 <HW_RTC_SetConfig+0x64>)
 800f024:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800f026:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f028:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f02a:	61ec      	str	r4, [r5, #28]

  HAL_RTC_Init(&RtcHandle);
 800f02c:	0028      	movs	r0, r5
 800f02e:	f7f7 f8c1 	bl	80061b4 <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 800f032:	466b      	mov	r3, sp
 800f034:	70dc      	strb	r4, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800f036:	2301      	movs	r3, #1
 800f038:	466a      	mov	r2, sp
 800f03a:	7053      	strb	r3, [r2, #1]
  RTC_DateStruct.Date = 1;
 800f03c:	7093      	strb	r3, [r2, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800f03e:	7013      	strb	r3, [r2, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800f040:	2200      	movs	r2, #0
 800f042:	4669      	mov	r1, sp
 800f044:	0028      	movs	r0, r5
 800f046:	f7f7 f9b5 	bl	80063b4 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 800f04a:	a901      	add	r1, sp, #4
 800f04c:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct.Minutes = 0;
 800f04e:	704c      	strb	r4, [r1, #1]

  RTC_TimeStruct.Seconds = 0;
 800f050:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct.TimeFormat = 0;
 800f052:	70cc      	strb	r4, [r1, #3]
  RTC_TimeStruct.SubSeconds = 0;
 800f054:	604c      	str	r4, [r1, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800f056:	610c      	str	r4, [r1, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800f058:	60cc      	str	r4, [r1, #12]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800f05a:	2200      	movs	r2, #0
 800f05c:	0028      	movs	r0, r5
 800f05e:	f7f7 f921 	bl	80062a4 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800f062:	0028      	movs	r0, r5
 800f064:	f7f7 fb62 	bl	800672c <HAL_RTCEx_EnableBypassShadow>
}
 800f068:	b007      	add	sp, #28
 800f06a:	bd30      	pop	{r4, r5, pc}
 800f06c:	20001298 	.word	0x20001298
 800f070:	40002800 	.word	0x40002800
 800f074:	000003ff 	.word	0x000003ff

0800f078 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 800f078:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800f07a:	2180      	movs	r1, #128	; 0x80
 800f07c:	0049      	lsls	r1, r1, #1
 800f07e:	4802      	ldr	r0, [pc, #8]	; (800f088 <HW_RTC_SetAlarmConfig+0x10>)
 800f080:	f7f6 fff0 	bl	8006064 <HAL_RTC_DeactivateAlarm>
}
 800f084:	bd10      	pop	{r4, pc}
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	20001298 	.word	0x20001298

0800f08c <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800f08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f08e:	46c6      	mov	lr, r8
 800f090:	b500      	push	{lr}
 800f092:	0006      	movs	r6, r0
 800f094:	000d      	movs	r5, r1
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800f096:	2200      	movs	r2, #0
 800f098:	482a      	ldr	r0, [pc, #168]	; (800f144 <HW_RTC_GetCalendarValue+0xb8>)
 800f09a:	f7f7 faeb 	bl	8006674 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800f09e:	4f2a      	ldr	r7, [pc, #168]	; (800f148 <HW_RTC_GetCalendarValue+0xbc>)
 800f0a0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f0a2:	0424      	lsls	r4, r4, #16
 800f0a4:	0c24      	lsrs	r4, r4, #16

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800f0a6:	4b27      	ldr	r3, [pc, #156]	; (800f144 <HW_RTC_GetCalendarValue+0xb8>)
 800f0a8:	4698      	mov	r8, r3
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	0031      	movs	r1, r6
 800f0ae:	0018      	movs	r0, r3
 800f0b0:	f7f7 fb0c 	bl	80066cc <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	0029      	movs	r1, r5
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	f7f7 fadb 	bl	8006674 <HAL_RTC_GetTime>
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	041b      	lsls	r3, r3, #16
 800f0c2:	0c1b      	lsrs	r3, r3, #16

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800f0c4:	42a3      	cmp	r3, r4
 800f0c6:	d1ea      	bne.n	800f09e <HW_RTC_GetCalendarValue+0x12>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800f0c8:	78f2      	ldrb	r2, [r6, #3]
 800f0ca:	4b20      	ldr	r3, [pc, #128]	; (800f14c <HW_RTC_GetCalendarValue+0xc0>)
 800f0cc:	4353      	muls	r3, r2
 800f0ce:	3303      	adds	r3, #3
 800f0d0:	0898      	lsrs	r0, r3, #2

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800f0d2:	0793      	lsls	r3, r2, #30
 800f0d4:	d133      	bne.n	800f13e <HW_RTC_GetCalendarValue+0xb2>
 800f0d6:	4c1e      	ldr	r4, [pc, #120]	; (800f150 <HW_RTC_GetCalendarValue+0xc4>)

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800f0d8:	7871      	ldrb	r1, [r6, #1]
 800f0da:	3901      	subs	r1, #1
 800f0dc:	010b      	lsls	r3, r1, #4
 800f0de:	1a5b      	subs	r3, r3, r1
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	185b      	adds	r3, r3, r1
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	0fda      	lsrs	r2, r3, #31
 800f0e8:	18d2      	adds	r2, r2, r3
 800f0ea:	1052      	asrs	r2, r2, #1
 800f0ec:	0049      	lsls	r1, r1, #1
 800f0ee:	40cc      	lsrs	r4, r1
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	4023      	ands	r3, r4
 800f0f4:	1ad3      	subs	r3, r2, r3
 800f0f6:	181b      	adds	r3, r3, r0

  seconds += (RTC_DateStruct->Date - 1);
 800f0f8:	78b2      	ldrb	r2, [r6, #2]
 800f0fa:	18d3      	adds	r3, r2, r3
 800f0fc:	3b01      	subs	r3, #1

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 800f0fe:	0059      	lsls	r1, r3, #1
 800f100:	18cb      	adds	r3, r1, r3
 800f102:	0119      	lsls	r1, r3, #4
 800f104:	1acb      	subs	r3, r1, r3
 800f106:	0119      	lsls	r1, r3, #4
 800f108:	1ac9      	subs	r1, r1, r3
 800f10a:	01c9      	lsls	r1, r1, #7

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800f10c:	78ac      	ldrb	r4, [r5, #2]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800f10e:	782b      	ldrb	r3, [r5, #0]
 800f110:	0118      	lsls	r0, r3, #4
 800f112:	1ac3      	subs	r3, r0, r3
 800f114:	011a      	lsls	r2, r3, #4
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	011b      	lsls	r3, r3, #4
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800f11a:	7868      	ldrb	r0, [r5, #1]
 800f11c:	0102      	lsls	r2, r0, #4
 800f11e:	1a12      	subs	r2, r2, r0
 800f120:	0092      	lsls	r2, r2, #2
 800f122:	189b      	adds	r3, r3, r2
 800f124:	191b      	adds	r3, r3, r4
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800f126:	185b      	adds	r3, r3, r1



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800f128:	0d99      	lsrs	r1, r3, #22
 800f12a:	0298      	lsls	r0, r3, #10
 800f12c:	686c      	ldr	r4, [r5, #4]
 800f12e:	4d09      	ldr	r5, [pc, #36]	; (800f154 <HW_RTC_GetCalendarValue+0xc8>)
 800f130:	1b2a      	subs	r2, r5, r4
 800f132:	2300      	movs	r3, #0
 800f134:	1880      	adds	r0, r0, r2
 800f136:	4159      	adcs	r1, r3

  return (calendarValue);
}
 800f138:	bc80      	pop	{r7}
 800f13a:	46b8      	mov	r8, r7
 800f13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800f13e:	4c06      	ldr	r4, [pc, #24]	; (800f158 <HW_RTC_GetCalendarValue+0xcc>)
 800f140:	e7ca      	b.n	800f0d8 <HW_RTC_GetCalendarValue+0x4c>
 800f142:	46c0      	nop			; (mov r8, r8)
 800f144:	20001298 	.word	0x20001298
 800f148:	40002800 	.word	0x40002800
 800f14c:	000005b5 	.word	0x000005b5
 800f150:	00445550 	.word	0x00445550
 800f154:	000003ff 	.word	0x000003ff
 800f158:	0099aaa0 	.word	0x0099aaa0

0800f15c <HW_RTC_GetMinimumTimeout>:
}
 800f15c:	2003      	movs	r0, #3
 800f15e:	4770      	bx	lr

0800f160 <HW_RTC_ms2Tick>:
{
 800f160:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800f162:	0e41      	lsrs	r1, r0, #25
 800f164:	01c0      	lsls	r0, r0, #7
 800f166:	227d      	movs	r2, #125	; 0x7d
 800f168:	2300      	movs	r3, #0
 800f16a:	f7f1 f98b 	bl	8000484 <__aeabi_uldivmod>
}
 800f16e:	bd10      	pop	{r4, pc}

0800f170 <HW_RTC_Tick2ms>:
{
 800f170:	b510      	push	{r4, lr}
 800f172:	0003      	movs	r3, r0
  uint32_t seconds = tick >> N_PREDIV_S;
 800f174:	0a80      	lsrs	r0, r0, #10
  tick = tick & PREDIV_S;
 800f176:	059b      	lsls	r3, r3, #22
 800f178:	0d9c      	lsrs	r4, r3, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800f17a:	0142      	lsls	r2, r0, #5
 800f17c:	1a12      	subs	r2, r2, r0
 800f17e:	0092      	lsls	r2, r2, #2
 800f180:	1812      	adds	r2, r2, r0
 800f182:	00d2      	lsls	r2, r2, #3
 800f184:	0c5b      	lsrs	r3, r3, #17
 800f186:	1b18      	subs	r0, r3, r4
 800f188:	0080      	lsls	r0, r0, #2
 800f18a:	1900      	adds	r0, r0, r4
 800f18c:	00c0      	lsls	r0, r0, #3
 800f18e:	0a80      	lsrs	r0, r0, #10
 800f190:	1810      	adds	r0, r2, r0
}
 800f192:	bd10      	pop	{r4, pc}

0800f194 <HW_RTC_GetTimerElapsedTime>:
{
 800f194:	b500      	push	{lr}
 800f196:	b087      	sub	sp, #28
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800f198:	a901      	add	r1, sp, #4
 800f19a:	4668      	mov	r0, sp
 800f19c:	f7ff ff76 	bl	800f08c <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 800f1a0:	4b02      	ldr	r3, [pc, #8]	; (800f1ac <HW_RTC_GetTimerElapsedTime+0x18>)
 800f1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1a4:	1ac0      	subs	r0, r0, r3
}
 800f1a6:	b007      	add	sp, #28
 800f1a8:	bd00      	pop	{pc}
 800f1aa:	46c0      	nop			; (mov r8, r8)
 800f1ac:	20001298 	.word	0x20001298

0800f1b0 <HW_RTC_GetTimerValue>:
{
 800f1b0:	b500      	push	{lr}
 800f1b2:	b087      	sub	sp, #28
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800f1b4:	a901      	add	r1, sp, #4
 800f1b6:	4668      	mov	r0, sp
 800f1b8:	f7ff ff68 	bl	800f08c <HW_RTC_GetCalendarValue>
}
 800f1bc:	b007      	add	sp, #28
 800f1be:	bd00      	pop	{pc}

0800f1c0 <HW_RTC_StopAlarm>:
{
 800f1c0:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800f1c2:	2180      	movs	r1, #128	; 0x80
 800f1c4:	4c08      	ldr	r4, [pc, #32]	; (800f1e8 <HW_RTC_StopAlarm+0x28>)
 800f1c6:	0049      	lsls	r1, r1, #1
 800f1c8:	0020      	movs	r0, r4
 800f1ca:	f7f6 ff4b 	bl	8006064 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800f1ce:	6821      	ldr	r1, [r4, #0]
 800f1d0:	68ca      	ldr	r2, [r1, #12]
 800f1d2:	23ff      	movs	r3, #255	; 0xff
 800f1d4:	401a      	ands	r2, r3
 800f1d6:	4b05      	ldr	r3, [pc, #20]	; (800f1ec <HW_RTC_StopAlarm+0x2c>)
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800f1dc:	4b04      	ldr	r3, [pc, #16]	; (800f1f0 <HW_RTC_StopAlarm+0x30>)
 800f1de:	2280      	movs	r2, #128	; 0x80
 800f1e0:	0292      	lsls	r2, r2, #10
 800f1e2:	615a      	str	r2, [r3, #20]
}
 800f1e4:	bd10      	pop	{r4, pc}
 800f1e6:	46c0      	nop			; (mov r8, r8)
 800f1e8:	20001298 	.word	0x20001298
 800f1ec:	fffffe7f 	.word	0xfffffe7f
 800f1f0:	40010400 	.word	0x40010400

0800f1f4 <HW_RTC_StartWakeUpAlarm>:
{
 800f1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1f6:	b087      	sub	sp, #28
 800f1f8:	0004      	movs	r4, r0
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800f1fa:	ad01      	add	r5, sp, #4
 800f1fc:	4949      	ldr	r1, [pc, #292]	; (800f324 <HW_RTC_StartWakeUpAlarm+0x130>)
 800f1fe:	000b      	movs	r3, r1
 800f200:	3358      	adds	r3, #88	; 0x58
 800f202:	002a      	movs	r2, r5
 800f204:	cbc1      	ldmia	r3!, {r0, r6, r7}
 800f206:	c2c1      	stmia	r2!, {r0, r6, r7}
 800f208:	cb41      	ldmia	r3!, {r0, r6}
 800f20a:	c241      	stmia	r2!, {r0, r6}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800f20c:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 800f20e:	9300      	str	r3, [sp, #0]
  HW_RTC_StopAlarm();
 800f210:	f7ff ffd6 	bl	800f1c0 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800f214:	88ab      	ldrh	r3, [r5, #4]
 800f216:	4f44      	ldr	r7, [pc, #272]	; (800f328 <HW_RTC_StartWakeUpAlarm+0x134>)
 800f218:	1afb      	subs	r3, r7, r3
 800f21a:	b29b      	uxth	r3, r3
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800f21c:	05a7      	lsls	r7, r4, #22
 800f21e:	0dbf      	lsrs	r7, r7, #22
 800f220:	18ff      	adds	r7, r7, r3
 800f222:	b2bf      	uxth	r7, r7
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800f224:	0aa3      	lsrs	r3, r4, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 800f226:	466a      	mov	r2, sp
 800f228:	7892      	ldrb	r2, [r2, #2]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800f22a:	4940      	ldr	r1, [pc, #256]	; (800f32c <HW_RTC_StartWakeUpAlarm+0x138>)
 800f22c:	428b      	cmp	r3, r1
 800f22e:	d905      	bls.n	800f23c <HW_RTC_StartWakeUpAlarm+0x48>
    timeoutValue -= SECONDS_IN_1DAY;
 800f230:	493f      	ldr	r1, [pc, #252]	; (800f330 <HW_RTC_StartWakeUpAlarm+0x13c>)
 800f232:	468c      	mov	ip, r1
 800f234:	4463      	add	r3, ip
    rtcAlarmDays++;
 800f236:	3201      	adds	r2, #1
 800f238:	b292      	uxth	r2, r2
 800f23a:	e7f6      	b.n	800f22a <HW_RTC_StartWakeUpAlarm+0x36>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800f23c:	a901      	add	r1, sp, #4
 800f23e:	780c      	ldrb	r4, [r1, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800f240:	21e1      	movs	r1, #225	; 0xe1
 800f242:	0109      	lsls	r1, r1, #4
 800f244:	428b      	cmp	r3, r1
 800f246:	d305      	bcc.n	800f254 <HW_RTC_StartWakeUpAlarm+0x60>
    timeoutValue -= SECONDS_IN_1HOUR;
 800f248:	493a      	ldr	r1, [pc, #232]	; (800f334 <HW_RTC_StartWakeUpAlarm+0x140>)
 800f24a:	468c      	mov	ip, r1
 800f24c:	4463      	add	r3, ip
    rtcAlarmHours++;
 800f24e:	3401      	adds	r4, #1
 800f250:	b2a4      	uxth	r4, r4
 800f252:	e7f5      	b.n	800f240 <HW_RTC_StartWakeUpAlarm+0x4c>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800f254:	a901      	add	r1, sp, #4
 800f256:	784d      	ldrb	r5, [r1, #1]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800f258:	e002      	b.n	800f260 <HW_RTC_StartWakeUpAlarm+0x6c>
    timeoutValue -= SECONDS_IN_1MINUTE;
 800f25a:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 800f25c:	3501      	adds	r5, #1
 800f25e:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800f260:	2b3b      	cmp	r3, #59	; 0x3b
 800f262:	d8fa      	bhi.n	800f25a <HW_RTC_StartWakeUpAlarm+0x66>
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800f264:	a901      	add	r1, sp, #4
 800f266:	788e      	ldrb	r6, [r1, #2]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	18f6      	adds	r6, r6, r3
 800f26c:	b2b6      	uxth	r6, r6
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800f26e:	e005      	b.n	800f27c <HW_RTC_StartWakeUpAlarm+0x88>
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 800f270:	4b31      	ldr	r3, [pc, #196]	; (800f338 <HW_RTC_StartWakeUpAlarm+0x144>)
 800f272:	469c      	mov	ip, r3
 800f274:	4467      	add	r7, ip
 800f276:	b2bf      	uxth	r7, r7
    rtcAlarmSeconds++;
 800f278:	3601      	adds	r6, #1
 800f27a:	b2b6      	uxth	r6, r6
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800f27c:	2380      	movs	r3, #128	; 0x80
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	429f      	cmp	r7, r3
 800f282:	d2f5      	bcs.n	800f270 <HW_RTC_StartWakeUpAlarm+0x7c>
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800f284:	2e3b      	cmp	r6, #59	; 0x3b
 800f286:	d908      	bls.n	800f29a <HW_RTC_StartWakeUpAlarm+0xa6>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800f288:	3e3c      	subs	r6, #60	; 0x3c
 800f28a:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 800f28c:	3501      	adds	r5, #1
 800f28e:	b2ad      	uxth	r5, r5
 800f290:	e7f8      	b.n	800f284 <HW_RTC_StartWakeUpAlarm+0x90>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800f292:	3d3c      	subs	r5, #60	; 0x3c
 800f294:	b2ad      	uxth	r5, r5
    rtcAlarmHours++;
 800f296:	3401      	adds	r4, #1
 800f298:	b2a4      	uxth	r4, r4
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800f29a:	2d3b      	cmp	r5, #59	; 0x3b
 800f29c:	d8f9      	bhi.n	800f292 <HW_RTC_StartWakeUpAlarm+0x9e>
 800f29e:	e003      	b.n	800f2a8 <HW_RTC_StartWakeUpAlarm+0xb4>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800f2a0:	3c18      	subs	r4, #24
 800f2a2:	b2a4      	uxth	r4, r4
    rtcAlarmDays++;
 800f2a4:	3201      	adds	r2, #1
 800f2a6:	b292      	uxth	r2, r2
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800f2a8:	2c17      	cmp	r4, #23
 800f2aa:	d8f9      	bhi.n	800f2a0 <HW_RTC_StartWakeUpAlarm+0xac>
  if (RTC_DateStruct.Year % 4 == 0)
 800f2ac:	466b      	mov	r3, sp
 800f2ae:	78db      	ldrb	r3, [r3, #3]
 800f2b0:	079b      	lsls	r3, r3, #30
 800f2b2:	d12a      	bne.n	800f30a <HW_RTC_StartWakeUpAlarm+0x116>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800f2b4:	466b      	mov	r3, sp
 800f2b6:	785b      	ldrb	r3, [r3, #1]
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	4820      	ldr	r0, [pc, #128]	; (800f33c <HW_RTC_StartWakeUpAlarm+0x148>)
 800f2bc:	5cc1      	ldrb	r1, [r0, r3]
 800f2be:	4291      	cmp	r1, r2
 800f2c0:	d203      	bcs.n	800f2ca <HW_RTC_StartWakeUpAlarm+0xd6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800f2c2:	0010      	movs	r0, r2
 800f2c4:	f7f1 f89a 	bl	80003fc <__aeabi_idivmod>
 800f2c8:	b28a      	uxth	r2, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800f2ca:	4b17      	ldr	r3, [pc, #92]	; (800f328 <HW_RTC_StartWakeUpAlarm+0x134>)
 800f2cc:	1bdf      	subs	r7, r3, r7
 800f2ce:	4815      	ldr	r0, [pc, #84]	; (800f324 <HW_RTC_StartWakeUpAlarm+0x130>)
 800f2d0:	62c7      	str	r7, [r0, #44]	; 0x2c
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 800f2d2:	23a0      	movs	r3, #160	; 0xa0
 800f2d4:	051b      	lsls	r3, r3, #20
 800f2d6:	6403      	str	r3, [r0, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800f2d8:	0001      	movs	r1, r0
 800f2da:	3128      	adds	r1, #40	; 0x28
 800f2dc:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800f2de:	704d      	strb	r5, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800f2e0:	2328      	movs	r3, #40	; 0x28
 800f2e2:	54c4      	strb	r4, [r0, r3]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800f2e4:	0004      	movs	r4, r0
 800f2e6:	3448      	adds	r4, #72	; 0x48
 800f2e8:	7022      	strb	r2, [r4, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800f2ea:	aa01      	add	r2, sp, #4
 800f2ec:	78d2      	ldrb	r2, [r2, #3]
 800f2ee:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	6443      	str	r3, [r0, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800f2f4:	63c3      	str	r3, [r0, #60]	; 0x3c
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800f2f6:	2280      	movs	r2, #128	; 0x80
 800f2f8:	0052      	lsls	r2, r2, #1
 800f2fa:	64c2      	str	r2, [r0, #76]	; 0x4c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f2fc:	6343      	str	r3, [r0, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800f2fe:	6383      	str	r3, [r0, #56]	; 0x38
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800f300:	2200      	movs	r2, #0
 800f302:	f7f7 f8cd 	bl	80064a0 <HAL_RTC_SetAlarm_IT>
}
 800f306:	b007      	add	sp, #28
 800f308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800f30a:	466b      	mov	r3, sp
 800f30c:	7859      	ldrb	r1, [r3, #1]
 800f30e:	3901      	subs	r1, #1
 800f310:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <HW_RTC_StartWakeUpAlarm+0x148>)
 800f312:	185b      	adds	r3, r3, r1
 800f314:	7b19      	ldrb	r1, [r3, #12]
 800f316:	4291      	cmp	r1, r2
 800f318:	d2d7      	bcs.n	800f2ca <HW_RTC_StartWakeUpAlarm+0xd6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800f31a:	0010      	movs	r0, r2
 800f31c:	f7f1 f86e 	bl	80003fc <__aeabi_idivmod>
 800f320:	b28a      	uxth	r2, r1
 800f322:	e7d2      	b.n	800f2ca <HW_RTC_StartWakeUpAlarm+0xd6>
 800f324:	20001298 	.word	0x20001298
 800f328:	000003ff 	.word	0x000003ff
 800f32c:	0001517f 	.word	0x0001517f
 800f330:	fffeae80 	.word	0xfffeae80
 800f334:	fffff1f0 	.word	0xfffff1f0
 800f338:	fffffc00 	.word	0xfffffc00
 800f33c:	08011470 	.word	0x08011470

0800f340 <HW_RTC_SetAlarm>:
{
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	0004      	movs	r4, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800f344:	4a0f      	ldr	r2, [pc, #60]	; (800f384 <HW_RTC_SetAlarm+0x44>)
 800f346:	2350      	movs	r3, #80	; 0x50
 800f348:	5ed5      	ldrsh	r5, [r2, r3]
 800f34a:	3503      	adds	r5, #3
 800f34c:	f7ff ff22 	bl	800f194 <HW_RTC_GetTimerElapsedTime>
 800f350:	1a20      	subs	r0, r4, r0
 800f352:	4285      	cmp	r5, r0
 800f354:	d20b      	bcs.n	800f36e <HW_RTC_SetAlarm+0x2e>
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800f356:	2100      	movs	r1, #0
 800f358:	2004      	movs	r0, #4
 800f35a:	f7ff f955 	bl	800e608 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 800f35e:	f7ff f969 	bl	800e634 <LPM_GetMode>
 800f362:	2801      	cmp	r0, #1
 800f364:	d008      	beq.n	800f378 <HW_RTC_SetAlarm+0x38>
  HW_RTC_StartWakeUpAlarm(timeout);
 800f366:	0020      	movs	r0, r4
 800f368:	f7ff ff44 	bl	800f1f4 <HW_RTC_StartWakeUpAlarm>
}
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800f36e:	2101      	movs	r1, #1
 800f370:	2004      	movs	r0, #4
 800f372:	f7ff f949 	bl	800e608 <LPM_SetStopMode>
 800f376:	e7f2      	b.n	800f35e <HW_RTC_SetAlarm+0x1e>
    timeout = timeout -  McuWakeUpTimeCal;
 800f378:	4a02      	ldr	r2, [pc, #8]	; (800f384 <HW_RTC_SetAlarm+0x44>)
 800f37a:	2350      	movs	r3, #80	; 0x50
 800f37c:	5ed3      	ldrsh	r3, [r2, r3]
 800f37e:	1ae4      	subs	r4, r4, r3
 800f380:	e7f1      	b.n	800f366 <HW_RTC_SetAlarm+0x26>
 800f382:	46c0      	nop			; (mov r8, r8)
 800f384:	20001298 	.word	0x20001298

0800f388 <HW_RTC_IrqHandler>:
{
 800f388:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800f38a:	2100      	movs	r1, #0
 800f38c:	2004      	movs	r0, #4
 800f38e:	f7ff f93b 	bl	800e608 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800f392:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <HW_RTC_IrqHandler+0x38>)
 800f394:	2280      	movs	r2, #128	; 0x80
 800f396:	0292      	lsls	r2, r2, #10
 800f398:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800f39a:	4b0a      	ldr	r3, [pc, #40]	; (800f3c4 <HW_RTC_IrqHandler+0x3c>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	689a      	ldr	r2, [r3, #8]
 800f3a0:	04d2      	lsls	r2, r2, #19
 800f3a2:	d502      	bpl.n	800f3aa <HW_RTC_IrqHandler+0x22>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800f3a4:	68da      	ldr	r2, [r3, #12]
 800f3a6:	05d2      	lsls	r2, r2, #23
 800f3a8:	d400      	bmi.n	800f3ac <HW_RTC_IrqHandler+0x24>
}
 800f3aa:	bd10      	pop	{r4, pc}
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800f3ac:	68d9      	ldr	r1, [r3, #12]
 800f3ae:	22ff      	movs	r2, #255	; 0xff
 800f3b0:	4011      	ands	r1, r2
 800f3b2:	4a05      	ldr	r2, [pc, #20]	; (800f3c8 <HW_RTC_IrqHandler+0x40>)
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800f3b8:	4802      	ldr	r0, [pc, #8]	; (800f3c4 <HW_RTC_IrqHandler+0x3c>)
 800f3ba:	f000 faa3 	bl	800f904 <HAL_RTC_AlarmAEventCallback>
}
 800f3be:	e7f4      	b.n	800f3aa <HW_RTC_IrqHandler+0x22>
 800f3c0:	40010400 	.word	0x40010400
 800f3c4:	20001298 	.word	0x20001298
 800f3c8:	fffffe7f 	.word	0xfffffe7f

0800f3cc <HW_RTC_DelayMs>:
{
 800f3cc:	b570      	push	{r4, r5, r6, lr}
  delayValue = HW_RTC_ms2Tick(delay);
 800f3ce:	f7ff fec7 	bl	800f160 <HW_RTC_ms2Tick>
 800f3d2:	0005      	movs	r5, r0
  timeout = HW_RTC_GetTimerValue();
 800f3d4:	f7ff feec 	bl	800f1b0 <HW_RTC_GetTimerValue>
 800f3d8:	0004      	movs	r4, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 800f3da:	f7ff fee9 	bl	800f1b0 <HW_RTC_GetTimerValue>
 800f3de:	1b00      	subs	r0, r0, r4
 800f3e0:	42a8      	cmp	r0, r5
 800f3e2:	d201      	bcs.n	800f3e8 <HW_RTC_DelayMs+0x1c>
    __NOP();
 800f3e4:	46c0      	nop			; (mov r8, r8)
 800f3e6:	e7f8      	b.n	800f3da <HW_RTC_DelayMs+0xe>
}
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3ec <HW_RTC_SetTimerContext>:
{
 800f3ec:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800f3ee:	4c04      	ldr	r4, [pc, #16]	; (800f400 <HW_RTC_SetTimerContext+0x14>)
 800f3f0:	0021      	movs	r1, r4
 800f3f2:	3158      	adds	r1, #88	; 0x58
 800f3f4:	0020      	movs	r0, r4
 800f3f6:	306c      	adds	r0, #108	; 0x6c
 800f3f8:	f7ff fe48 	bl	800f08c <HW_RTC_GetCalendarValue>
 800f3fc:	6560      	str	r0, [r4, #84]	; 0x54
}
 800f3fe:	bd10      	pop	{r4, pc}
 800f400:	20001298 	.word	0x20001298

0800f404 <HW_RTC_Init>:
{
 800f404:	b510      	push	{r4, lr}
  if (HW_RTC_Initalized == false)
 800f406:	4a08      	ldr	r2, [pc, #32]	; (800f428 <HW_RTC_Init+0x24>)
 800f408:	2370      	movs	r3, #112	; 0x70
 800f40a:	5cd3      	ldrb	r3, [r2, r3]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d000      	beq.n	800f412 <HW_RTC_Init+0xe>
}
 800f410:	bd10      	pop	{r4, pc}
    HW_RTC_SetConfig();
 800f412:	f7ff fdfd 	bl	800f010 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 800f416:	f7ff fe2f 	bl	800f078 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 800f41a:	f7ff ffe7 	bl	800f3ec <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800f41e:	4a02      	ldr	r2, [pc, #8]	; (800f428 <HW_RTC_Init+0x24>)
 800f420:	2370      	movs	r3, #112	; 0x70
 800f422:	2101      	movs	r1, #1
 800f424:	54d1      	strb	r1, [r2, r3]
}
 800f426:	e7f3      	b.n	800f410 <HW_RTC_Init+0xc>
 800f428:	20001298 	.word	0x20001298

0800f42c <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 800f42c:	4b01      	ldr	r3, [pc, #4]	; (800f434 <HW_RTC_GetTimerContext+0x8>)
 800f42e:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 800f430:	4770      	bx	lr
 800f432:	46c0      	nop			; (mov r8, r8)
 800f434:	20001298 	.word	0x20001298

0800f438 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 800f438:	b530      	push	{r4, r5, lr}
 800f43a:	b087      	sub	sp, #28
 800f43c:	0005      	movs	r5, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800f43e:	a901      	add	r1, sp, #4
 800f440:	4668      	mov	r0, sp
 800f442:	f7ff fe23 	bl	800f08c <HW_RTC_GetCalendarValue>

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800f446:	0589      	lsls	r1, r1, #22
 800f448:	0a84      	lsrs	r4, r0, #10
 800f44a:	430c      	orrs	r4, r1

  ticks = (uint32_t) calendarValue & PREDIV_S;
 800f44c:	0580      	lsls	r0, r0, #22
 800f44e:	0d80      	lsrs	r0, r0, #22

  *mSeconds = HW_RTC_Tick2ms(ticks);
 800f450:	f7ff fe8e 	bl	800f170 <HW_RTC_Tick2ms>
 800f454:	8028      	strh	r0, [r5, #0]

  return seconds;
}
 800f456:	0020      	movs	r0, r4
 800f458:	b007      	add	sp, #28
 800f45a:	bd30      	pop	{r4, r5, pc}

0800f45c <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	0002      	movs	r2, r0
 800f460:	000c      	movs	r4, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800f462:	4d05      	ldr	r5, [pc, #20]	; (800f478 <HW_RTC_BKUPWrite+0x1c>)
 800f464:	2100      	movs	r1, #0
 800f466:	0028      	movs	r0, r5
 800f468:	f7f7 f954 	bl	8006714 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 800f46c:	0022      	movs	r2, r4
 800f46e:	2101      	movs	r1, #1
 800f470:	0028      	movs	r0, r5
 800f472:	f7f7 f94f 	bl	8006714 <HAL_RTCEx_BKUPWrite>
}
 800f476:	bd70      	pop	{r4, r5, r6, pc}
 800f478:	20001298 	.word	0x20001298

0800f47c <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	0005      	movs	r5, r0
 800f480:	000c      	movs	r4, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800f482:	4e06      	ldr	r6, [pc, #24]	; (800f49c <HW_RTC_BKUPRead+0x20>)
 800f484:	2100      	movs	r1, #0
 800f486:	0030      	movs	r0, r6
 800f488:	f7f7 f94a 	bl	8006720 <HAL_RTCEx_BKUPRead>
 800f48c:	6028      	str	r0, [r5, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800f48e:	2101      	movs	r1, #1
 800f490:	0030      	movs	r0, r6
 800f492:	f7f7 f945 	bl	8006720 <HAL_RTCEx_BKUPRead>
 800f496:	6020      	str	r0, [r4, #0]
}
 800f498:	bd70      	pop	{r4, r5, r6, pc}
 800f49a:	46c0      	nop			; (mov r8, r8)
 800f49c:	20001298 	.word	0x20001298

0800f4a0 <SpiFrequency>:
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800f4a0:	4b0e      	ldr	r3, [pc, #56]	; (800f4dc <SpiFrequency+0x3c>)
 800f4a2:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800f4a4:	2300      	movs	r3, #0
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800f4a6:	4282      	cmp	r2, r0
 800f4a8:	d903      	bls.n	800f4b2 <SpiFrequency+0x12>
  {
    divisor++;
 800f4aa:	3301      	adds	r3, #1
    SysClkTmp = (SysClkTmp >> 1);
 800f4ac:	0852      	lsrs	r2, r2, #1

    if (divisor >= 7)
 800f4ae:	2b06      	cmp	r3, #6
 800f4b0:	d9f9      	bls.n	800f4a6 <SpiFrequency+0x6>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	0010      	movs	r0, r2
 800f4b6:	4018      	ands	r0, r3
 800f4b8:	421a      	tst	r2, r3
 800f4ba:	d000      	beq.n	800f4be <SpiFrequency+0x1e>
 800f4bc:	2020      	movs	r0, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 800f4be:	2202      	movs	r2, #2
 800f4c0:	0011      	movs	r1, r2
 800f4c2:	4019      	ands	r1, r3
 800f4c4:	421a      	tst	r2, r3
 800f4c6:	d000      	beq.n	800f4ca <SpiFrequency+0x2a>
 800f4c8:	2110      	movs	r1, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f4ca:	4308      	orrs	r0, r1
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	0011      	movs	r1, r2
 800f4d0:	4019      	ands	r1, r3
 800f4d2:	421a      	tst	r2, r3
 800f4d4:	d000      	beq.n	800f4d8 <SpiFrequency+0x38>
 800f4d6:	2108      	movs	r1, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800f4d8:	4308      	orrs	r0, r1

  return baudRate;
}
 800f4da:	4770      	bx	lr
 800f4dc:	20000044 	.word	0x20000044

0800f4e0 <HW_SPI_IoInit>:
{
 800f4e0:	b530      	push	{r4, r5, lr}
 800f4e2:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = {0};
 800f4e4:	2500      	movs	r5, #0
 800f4e6:	9501      	str	r5, [sp, #4]
  initStruct.Mode = GPIO_MODE_AF_PP;
 800f4e8:	2302      	movs	r3, #2
 800f4ea:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL  ;
 800f4ec:	9503      	str	r5, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	9304      	str	r3, [sp, #16]
  initStruct.Alternate = SPI1_AF ;
 800f4f2:	9505      	str	r5, [sp, #20]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800f4f4:	aa01      	add	r2, sp, #4
 800f4f6:	2108      	movs	r1, #8
 800f4f8:	480f      	ldr	r0, [pc, #60]	; (800f538 <HW_SPI_IoInit+0x58>)
 800f4fa:	f7ff fca5 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800f4fe:	24a0      	movs	r4, #160	; 0xa0
 800f500:	05e4      	lsls	r4, r4, #23
 800f502:	aa01      	add	r2, sp, #4
 800f504:	2140      	movs	r1, #64	; 0x40
 800f506:	0020      	movs	r0, r4
 800f508:	f7ff fc9e 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800f50c:	aa01      	add	r2, sp, #4
 800f50e:	2180      	movs	r1, #128	; 0x80
 800f510:	0020      	movs	r0, r4
 800f512:	f7ff fc99 	bl	800ee48 <HW_GPIO_Init>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f516:	2301      	movs	r3, #1
 800f518:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 800f51a:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800f51c:	2580      	movs	r5, #128	; 0x80
 800f51e:	022d      	lsls	r5, r5, #8
 800f520:	aa01      	add	r2, sp, #4
 800f522:	0029      	movs	r1, r5
 800f524:	0020      	movs	r0, r4
 800f526:	f7ff fc8f 	bl	800ee48 <HW_GPIO_Init>
  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800f52a:	2201      	movs	r2, #1
 800f52c:	0029      	movs	r1, r5
 800f52e:	0020      	movs	r0, r4
 800f530:	f7ff fd08 	bl	800ef44 <HW_GPIO_Write>
}
 800f534:	b007      	add	sp, #28
 800f536:	bd30      	pop	{r4, r5, pc}
 800f538:	50000400 	.word	0x50000400

0800f53c <HW_SPI_Init>:
{
 800f53c:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800f53e:	4c12      	ldr	r4, [pc, #72]	; (800f588 <HW_SPI_Init+0x4c>)
 800f540:	4b12      	ldr	r3, [pc, #72]	; (800f58c <HW_SPI_Init+0x50>)
 800f542:	6023      	str	r3, [r4, #0]
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800f544:	4812      	ldr	r0, [pc, #72]	; (800f590 <HW_SPI_Init+0x54>)
 800f546:	f7ff ffab 	bl	800f4a0 <SpiFrequency>
 800f54a:	61e0      	str	r0, [r4, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800f54c:	2300      	movs	r3, #0
 800f54e:	60a3      	str	r3, [r4, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800f550:	2282      	movs	r2, #130	; 0x82
 800f552:	0052      	lsls	r2, r2, #1
 800f554:	6062      	str	r2, [r4, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800f556:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800f558:	6163      	str	r3, [r4, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800f55a:	60e3      	str	r3, [r4, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f55c:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800f55e:	6223      	str	r3, [r4, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800f560:	32fc      	adds	r2, #252	; 0xfc
 800f562:	61a2      	str	r2, [r4, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800f564:	6263      	str	r3, [r4, #36]	; 0x24
  SPI_CLK_ENABLE();
 800f566:	4a0b      	ldr	r2, [pc, #44]	; (800f594 <HW_SPI_Init+0x58>)
 800f568:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f56a:	2380      	movs	r3, #128	; 0x80
 800f56c:	015b      	lsls	r3, r3, #5
 800f56e:	430b      	orrs	r3, r1
 800f570:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 800f572:	0020      	movs	r0, r4
 800f574:	f7f7 f97a 	bl	800686c <HAL_SPI_Init>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d102      	bne.n	800f582 <HW_SPI_Init+0x46>
  HW_SPI_IoInit();
 800f57c:	f7ff ffb0 	bl	800f4e0 <HW_SPI_IoInit>
}
 800f580:	bd10      	pop	{r4, pc}
    Error_Handler();
 800f582:	f7ff fc37 	bl	800edf4 <Error_Handler>
 800f586:	e7f9      	b.n	800f57c <HW_SPI_Init+0x40>
 800f588:	2000130c 	.word	0x2000130c
 800f58c:	40013000 	.word	0x40013000
 800f590:	00989680 	.word	0x00989680
 800f594:	40021000 	.word	0x40021000

0800f598 <HW_SPI_InOut>:
{
 800f598:	b510      	push	{r4, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	210e      	movs	r1, #14
 800f59e:	4469      	add	r1, sp
 800f5a0:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800f5a2:	2416      	movs	r4, #22
 800f5a4:	446c      	add	r4, sp
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	425b      	negs	r3, r3
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	3302      	adds	r3, #2
 800f5ae:	0022      	movs	r2, r4
 800f5b0:	4802      	ldr	r0, [pc, #8]	; (800f5bc <HW_SPI_InOut+0x24>)
 800f5b2:	f7f7 f99f 	bl	80068f4 <HAL_SPI_TransmitReceive>
  return rxData;
 800f5b6:	8820      	ldrh	r0, [r4, #0]
}
 800f5b8:	b006      	add	sp, #24
 800f5ba:	bd10      	pop	{r4, pc}
 800f5bc:	2000130c 	.word	0x2000130c

0800f5c0 <LoraMacProcessNotify>:
}


void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 800f5c0:	4b01      	ldr	r3, [pc, #4]	; (800f5c8 <LoraMacProcessNotify+0x8>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	701a      	strb	r2, [r3, #0]
}
 800f5c6:	4770      	bx	lr
 800f5c8:	20001364 	.word	0x20001364

0800f5cc <LORA_RxData>:
  /* USER CODE END 3 */
}


static void LORA_RxData(lora_AppData_t *AppData)
{
 800f5cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 4 */
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 800f5ce:	7941      	ldrb	r1, [r0, #5]
 800f5d0:	4801      	ldr	r0, [pc, #4]	; (800f5d8 <LORA_RxData+0xc>)
 800f5d2:	f7ff fb43 	bl	800ec5c <TraceSend>

  /* USER CODE END 4 */
}
 800f5d6:	bd10      	pop	{r4, pc}
 800f5d8:	08011a88 	.word	0x08011a88

0800f5dc <LORA_TxNeeded>:

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
}

static void LORA_TxNeeded(void)
{
 800f5dc:	b510      	push	{r4, lr}
  AppData.BuffSize = 0;
 800f5de:	4804      	ldr	r0, [pc, #16]	; (800f5f0 <LORA_TxNeeded+0x14>)
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	7103      	strb	r3, [r0, #4]
  AppData.Port = LORAWAN_APP_PORT;
 800f5e4:	3302      	adds	r3, #2
 800f5e6:	7143      	strb	r3, [r0, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	f7fe ff65 	bl	800e4b8 <LORA_send>
}
 800f5ee:	bd10      	pop	{r4, pc}
 800f5f0:	2000015c 	.word	0x2000015c

0800f5f4 <LORA_ConfirmClass>:
{
 800f5f4:	b510      	push	{r4, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800f5f6:	4b07      	ldr	r3, [pc, #28]	; (800f614 <LORA_ConfirmClass+0x20>)
 800f5f8:	5c19      	ldrb	r1, [r3, r0]
 800f5fa:	4807      	ldr	r0, [pc, #28]	; (800f618 <LORA_ConfirmClass+0x24>)
 800f5fc:	f7ff fb2e 	bl	800ec5c <TraceSend>
  AppData.BuffSize = 0;
 800f600:	4806      	ldr	r0, [pc, #24]	; (800f61c <LORA_ConfirmClass+0x28>)
 800f602:	2300      	movs	r3, #0
 800f604:	7103      	strb	r3, [r0, #4]
  AppData.Port = LORAWAN_APP_PORT;
 800f606:	3302      	adds	r3, #2
 800f608:	7143      	strb	r3, [r0, #5]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800f60a:	2100      	movs	r1, #0
 800f60c:	f7fe ff54 	bl	800e4b8 <LORA_send>
}
 800f610:	bd10      	pop	{r4, pc}
 800f612:	46c0      	nop			; (mov r8, r8)
 800f614:	08011ac4 	.word	0x08011ac4
 800f618:	08011aa8 	.word	0x08011aa8
 800f61c:	2000015c 	.word	0x2000015c

0800f620 <LORA_HasJoined>:
{
 800f620:	b510      	push	{r4, lr}
  PRINTF("JOINED\n\r");
 800f622:	4803      	ldr	r0, [pc, #12]	; (800f630 <LORA_HasJoined+0x10>)
 800f624:	f7ff fb1a 	bl	800ec5c <TraceSend>
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 800f628:	2000      	movs	r0, #0
 800f62a:	f7fe ff8d 	bl	800e548 <LORA_RequestClass>
}
 800f62e:	bd10      	pop	{r4, pc}
 800f630:	08011ac8 	.word	0x08011ac8

0800f634 <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 800f634:	b510      	push	{r4, lr}
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;

  batteryLevelmV = HW_GetBatteryLevel();
 800f636:	f000 fb55 	bl	800fce4 <HW_GetBatteryLevel>


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800f63a:	4a0b      	ldr	r2, [pc, #44]	; (800f668 <LORA_GetBatteryLevel+0x34>)
 800f63c:	4290      	cmp	r0, r2
 800f63e:	d80f      	bhi.n	800f660 <LORA_GetBatteryLevel+0x2c>
  {
    batteryLevel = LORAWAN_MAX_BAT;
  }
  else if (batteryLevelmV < VDD_MIN)
 800f640:	22e1      	movs	r2, #225	; 0xe1
 800f642:	00d2      	lsls	r2, r2, #3
 800f644:	4290      	cmp	r0, r2
 800f646:	d30d      	bcc.n	800f664 <LORA_GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800f648:	4b08      	ldr	r3, [pc, #32]	; (800f66c <LORA_GetBatteryLevel+0x38>)
 800f64a:	469c      	mov	ip, r3
 800f64c:	4460      	add	r0, ip
 800f64e:	01c3      	lsls	r3, r0, #7
 800f650:	1a18      	subs	r0, r3, r0
 800f652:	0040      	lsls	r0, r0, #1
 800f654:	2196      	movs	r1, #150	; 0x96
 800f656:	00c9      	lsls	r1, r1, #3
 800f658:	f7f0 fd60 	bl	800011c <__udivsi3>
 800f65c:	b2c0      	uxtb	r0, r0
 800f65e:	e000      	b.n	800f662 <LORA_GetBatteryLevel+0x2e>
    batteryLevel = LORAWAN_MAX_BAT;
 800f660:	20fe      	movs	r0, #254	; 0xfe
  }

  return batteryLevel;
}
 800f662:	bd10      	pop	{r4, pc}
    batteryLevel = 0;
 800f664:	2000      	movs	r0, #0
 800f666:	e7fc      	b.n	800f662 <LORA_GetBatteryLevel+0x2e>
 800f668:	00000bb8 	.word	0x00000bb8
 800f66c:	fffff8f8 	.word	0xfffff8f8

0800f670 <OnTxTimerEvent>:
{
 800f670:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 800f672:	4c03      	ldr	r4, [pc, #12]	; (800f680 <OnTxTimerEvent+0x10>)
 800f674:	1d20      	adds	r0, r4, #4
 800f676:	f7ff f9c9 	bl	800ea0c <TimerStart>
  AppProcessRequest = LORA_SET;
 800f67a:	2301      	movs	r3, #1
 800f67c:	7723      	strb	r3, [r4, #28]
}
 800f67e:	bd10      	pop	{r4, pc}
 800f680:	20001364 	.word	0x20001364

0800f684 <LoraStartTx>:
{
 800f684:	b510      	push	{r4, lr}
 800f686:	b086      	sub	sp, #24
  if (EventType == TX_ON_TIMER)
 800f688:	2800      	cmp	r0, #0
 800f68a:	d10e      	bne.n	800f6aa <LoraStartTx+0x26>
    TimerInit(&TxTimer, OnTxTimerEvent);
 800f68c:	4c13      	ldr	r4, [pc, #76]	; (800f6dc <LoraStartTx+0x58>)
 800f68e:	3404      	adds	r4, #4
 800f690:	4913      	ldr	r1, [pc, #76]	; (800f6e0 <LoraStartTx+0x5c>)
 800f692:	0020      	movs	r0, r4
 800f694:	f7ff f9b0 	bl	800e9f8 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 800f698:	4912      	ldr	r1, [pc, #72]	; (800f6e4 <LoraStartTx+0x60>)
 800f69a:	0020      	movs	r0, r4
 800f69c:	f7ff fa78 	bl	800eb90 <TimerSetValue>
    OnTxTimerEvent(NULL);
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f7ff ffe5 	bl	800f670 <OnTxTimerEvent>
}
 800f6a6:	b006      	add	sp, #24
 800f6a8:	bd10      	pop	{r4, pc}
    GPIO_InitTypeDef initStruct = {0};
 800f6aa:	2214      	movs	r2, #20
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	a801      	add	r0, sp, #4
 800f6b0:	f000 fc68 	bl	800ff84 <memset>
    initStruct.Mode = GPIO_MODE_IT_RISING;
 800f6b4:	4b0c      	ldr	r3, [pc, #48]	; (800f6e8 <LoraStartTx+0x64>)
 800f6b6:	9302      	str	r3, [sp, #8]
    initStruct.Pull = GPIO_PULLUP;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	9303      	str	r3, [sp, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800f6bc:	3302      	adds	r3, #2
 800f6be:	9304      	str	r3, [sp, #16]
    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
 800f6c0:	4c0a      	ldr	r4, [pc, #40]	; (800f6ec <LoraStartTx+0x68>)
 800f6c2:	aa01      	add	r2, sp, #4
 800f6c4:	2104      	movs	r1, #4
 800f6c6:	0020      	movs	r0, r4
 800f6c8:	f7ff fbbe 	bl	800ee48 <HW_GPIO_Init>
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <LoraStartTx+0x6c>)
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	2104      	movs	r1, #4
 800f6d2:	0020      	movs	r0, r4
 800f6d4:	f7ff fc08 	bl	800eee8 <HW_GPIO_SetIrq>
}
 800f6d8:	e7e5      	b.n	800f6a6 <LoraStartTx+0x22>
 800f6da:	46c0      	nop			; (mov r8, r8)
 800f6dc:	20001364 	.word	0x20001364
 800f6e0:	0800f671 	.word	0x0800f671
 800f6e4:	0000c350 	.word	0x0000c350
 800f6e8:	10110000 	.word	0x10110000
 800f6ec:	50000400 	.word	0x50000400
 800f6f0:	0800f6f5 	.word	0x0800f6f5

0800f6f4 <Send>:
{
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	0004      	movs	r4, r0
  TimerInit(&TxLedTimer,OnTimerLedEvent);
 800f6f8:	4d11      	ldr	r5, [pc, #68]	; (800f740 <Send+0x4c>)
 800f6fa:	3520      	adds	r5, #32
 800f6fc:	4911      	ldr	r1, [pc, #68]	; (800f744 <Send+0x50>)
 800f6fe:	0028      	movs	r0, r5
 800f700:	f7ff f97a 	bl	800e9f8 <TimerInit>
  TimerSetValue(&TxLedTimer,1000); // Tx led on for 1s
 800f704:	21fa      	movs	r1, #250	; 0xfa
 800f706:	0089      	lsls	r1, r1, #2
 800f708:	0028      	movs	r0, r5
 800f70a:	f7ff fa41 	bl	800eb90 <TimerSetValue>
  LED_On(LED_RED1);
 800f70e:	2001      	movs	r0, #1
 800f710:	f7f3 f8a6 	bl	8002860 <BSP_LED_On>
  TimerStart(&TxLedTimer);
 800f714:	0028      	movs	r0, r5
 800f716:	f7ff f979 	bl	800ea0c <TimerStart>
  AppData->Port = LORAWAN_APP_PORT;
 800f71a:	2302      	movs	r3, #2
 800f71c:	7163      	strb	r3, [r4, #5]
  AppData->BuffSize = snprintf((char *)AppData->Buff, LORAWAN_APP_DATA_BUFF_SIZE,"%d", sensor_data);
 800f71e:	4d0a      	ldr	r5, [pc, #40]	; (800f748 <Send+0x54>)
 800f720:	882b      	ldrh	r3, [r5, #0]
 800f722:	4a0a      	ldr	r2, [pc, #40]	; (800f74c <Send+0x58>)
 800f724:	2140      	movs	r1, #64	; 0x40
 800f726:	6820      	ldr	r0, [r4, #0]
 800f728:	f000 fc34 	bl	800ff94 <sniprintf>
 800f72c:	7120      	strb	r0, [r4, #4]
  PRINTF("\nNumber sent: %d\n\n", sensor_data);
 800f72e:	8829      	ldrh	r1, [r5, #0]
 800f730:	4807      	ldr	r0, [pc, #28]	; (800f750 <Send+0x5c>)
 800f732:	f7ff fa93 	bl	800ec5c <TraceSend>
  LORA_send(AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800f736:	2100      	movs	r1, #0
 800f738:	0020      	movs	r0, r4
 800f73a:	f7fe febd 	bl	800e4b8 <LORA_send>
}
 800f73e:	bd70      	pop	{r4, r5, r6, pc}
 800f740:	20001364 	.word	0x20001364
 800f744:	0800f755 	.word	0x0800f755
 800f748:	20001614 	.word	0x20001614
 800f74c:	08011ad4 	.word	0x08011ad4
 800f750:	08011ad8 	.word	0x08011ad8

0800f754 <OnTimerLedEvent>:

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 800f754:	b510      	push	{r4, lr}
  LED_Off(LED_RED1) ;
 800f756:	2001      	movs	r0, #1
 800f758:	f7f3 f892 	bl	8002880 <BSP_LED_Off>
}
 800f75c:	bd10      	pop	{r4, pc}

0800f75e <Reverse16>:
    return (((value & 0x00FF) << 8) |
 800f75e:	0203      	lsls	r3, r0, #8
            ((value & 0xFF00) >> 8));
 800f760:	0a00      	lsrs	r0, r0, #8
    return (((value & 0x00FF) << 8) |
 800f762:	4318      	orrs	r0, r3
 800f764:	b280      	uxth	r0, r0
}
 800f766:	4770      	bx	lr

0800f768 <main>:
{
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	b082      	sub	sp, #8
  HAL_Init();
 800f76c:	f7f4 fef0 	bl	8004550 <HAL_Init>
  SystemClock_Config();
 800f770:	f000 f946 	bl	800fa00 <SystemClock_Config>
  DBG_Init();
 800f774:	f7ff fafa 	bl	800ed6c <DBG_Init>
  HW_Init();
 800f778:	f000 fa02 	bl	800fb80 <HW_Init>
  HW_I2C1_Init(&hi2c1);
 800f77c:	482a      	ldr	r0, [pc, #168]	; (800f828 <main+0xc0>)
 800f77e:	f7ff fbe7 	bl	800ef50 <HW_I2C1_Init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800f782:	2101      	movs	r1, #1
 800f784:	2001      	movs	r0, #1
 800f786:	f7fe ff29 	bl	800e5dc <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800f78a:	2400      	movs	r4, #0
 800f78c:	9400      	str	r4, [sp, #0]
 800f78e:	2300      	movs	r3, #0
 800f790:	2203      	movs	r2, #3
 800f792:	2101      	movs	r1, #1
 800f794:	4825      	ldr	r0, [pc, #148]	; (800f82c <main+0xc4>)
 800f796:	f7ff fa61 	bl	800ec5c <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 800f79a:	9400      	str	r4, [sp, #0]
 800f79c:	2302      	movs	r3, #2
 800f79e:	2204      	movs	r2, #4
 800f7a0:	2104      	movs	r1, #4
 800f7a2:	4823      	ldr	r0, [pc, #140]	; (800f830 <main+0xc8>)
 800f7a4:	f7ff fa5a 	bl	800ec5c <TraceSend>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 800f7a8:	4822      	ldr	r0, [pc, #136]	; (800f834 <main+0xcc>)
 800f7aa:	0001      	movs	r1, r0
 800f7ac:	3108      	adds	r1, #8
 800f7ae:	300c      	adds	r0, #12
 800f7b0:	f7fe fd64 	bl	800e27c <LORA_Init>
  LORA_Join();
 800f7b4:	f7fe fe4e 	bl	800e454 <LORA_Join>
  LoraStartTx(TX_ON_TIMER) ;
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	f7ff ff63 	bl	800f684 <LoraStartTx>
 800f7be:	e025      	b.n	800f80c <main+0xa4>
      AppProcessRequest = LORA_RESET;
 800f7c0:	4b1d      	ldr	r3, [pc, #116]	; (800f838 <main+0xd0>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	771a      	strb	r2, [r3, #28]
	  HAL_I2C_Master_Transmit(&hi2c1, 0x36<<1, &command, sizeof(command), HAL_MAX_DELAY);
 800f7c6:	4d18      	ldr	r5, [pc, #96]	; (800f828 <main+0xc0>)
 800f7c8:	2601      	movs	r6, #1
 800f7ca:	4276      	negs	r6, r6
 800f7cc:	9600      	str	r6, [sp, #0]
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	4a1a      	ldr	r2, [pc, #104]	; (800f83c <main+0xd4>)
 800f7d2:	216c      	movs	r1, #108	; 0x6c
 800f7d4:	0028      	movs	r0, r5
 800f7d6:	f7f5 fd53 	bl	8005280 <HAL_I2C_Master_Transmit>
	  HAL_Delay(4);
 800f7da:	2004      	movs	r0, #4
 800f7dc:	f000 f836 	bl	800f84c <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, 0x36<<1 | 0x01, &sensor_data, sizeof(sensor_data), HAL_MAX_DELAY);
 800f7e0:	4c17      	ldr	r4, [pc, #92]	; (800f840 <main+0xd8>)
 800f7e2:	9600      	str	r6, [sp, #0]
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	0022      	movs	r2, r4
 800f7e8:	216d      	movs	r1, #109	; 0x6d
 800f7ea:	0028      	movs	r0, r5
 800f7ec:	f7f5 fe02 	bl	80053f4 <HAL_I2C_Master_Receive>
	  sensor_data = Reverse16(sensor_data);
 800f7f0:	8820      	ldrh	r0, [r4, #0]
 800f7f2:	f7ff ffb4 	bl	800f75e <Reverse16>
 800f7f6:	0001      	movs	r1, r0
 800f7f8:	8020      	strh	r0, [r4, #0]
	  PRINTF("\nSensor Data: %d\n\n", sensor_data);
 800f7fa:	4812      	ldr	r0, [pc, #72]	; (800f844 <main+0xdc>)
 800f7fc:	f7ff fa2e 	bl	800ec5c <TraceSend>
      Send(&AppData);
 800f800:	480c      	ldr	r0, [pc, #48]	; (800f834 <main+0xcc>)
 800f802:	f7ff ff77 	bl	800f6f4 <Send>
 800f806:	e005      	b.n	800f814 <main+0xac>
  __ASM volatile ("cpsid i" : : : "memory");
 800f808:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 800f80a:	b662      	cpsie	i
    if (AppProcessRequest == LORA_SET)
 800f80c:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <main+0xd0>)
 800f80e:	7f1b      	ldrb	r3, [r3, #28]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d0d5      	beq.n	800f7c0 <main+0x58>
    if (LoraMacProcessRequest == LORA_SET)
 800f814:	4b08      	ldr	r3, [pc, #32]	; (800f838 <main+0xd0>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d1f5      	bne.n	800f808 <main+0xa0>
      LoraMacProcessRequest = LORA_RESET;
 800f81c:	4b06      	ldr	r3, [pc, #24]	; (800f838 <main+0xd0>)
 800f81e:	2200      	movs	r2, #0
 800f820:	701a      	strb	r2, [r3, #0]
      LoRaMacProcess();
 800f822:	f7fa ff65 	bl	800a6f0 <LoRaMacProcess>
 800f826:	e7ef      	b.n	800f808 <main+0xa0>
 800f828:	20001618 	.word	0x20001618
 800f82c:	08011aec 	.word	0x08011aec
 800f830:	08011b10 	.word	0x08011b10
 800f834:	2000015c 	.word	0x2000015c
 800f838:	20001364 	.word	0x20001364
 800f83c:	08011488 	.word	0x08011488
 800f840:	20001614 	.word	0x20001614
 800f844:	08011b34 	.word	0x08011b34

0800f848 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 800f848:	2000      	movs	r0, #0
 800f84a:	4770      	bx	lr

0800f84c <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800f84c:	b500      	push	{lr}
 800f84e:	b083      	sub	sp, #12
 800f850:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 800f852:	9801      	ldr	r0, [sp, #4]
 800f854:	f7ff fdba 	bl	800f3cc <HW_RTC_DelayMs>
}
 800f858:	b003      	add	sp, #12
 800f85a:	bd00      	pop	{pc}

0800f85c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800f85c:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800f85e:	4a0b      	ldr	r2, [pc, #44]	; (800f88c <HAL_MspInit+0x30>)
 800f860:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800f862:	2380      	movs	r3, #128	; 0x80
 800f864:	055b      	lsls	r3, r3, #21
 800f866:	430b      	orrs	r3, r1
 800f868:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800f86a:	f7f5 fed3 	bl	8005614 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800f86e:	f7f5 fee3 	bl	8005638 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800f872:	4b07      	ldr	r3, [pc, #28]	; (800f890 <HAL_MspInit+0x34>)
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	2108      	movs	r1, #8
 800f878:	430a      	orrs	r2, r1
 800f87a:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	438a      	bics	r2, r1
 800f880:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800f882:	f7f5 fecf 	bl	8005624 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800f886:	f000 f859 	bl	800f93c <HW_GpioInit>
}
 800f88a:	bd10      	pop	{r4, pc}
 800f88c:	40021000 	.word	0x40021000
 800f890:	40022000 	.word	0x40022000

0800f894 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800f894:	b500      	push	{lr}
 800f896:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f898:	2234      	movs	r2, #52	; 0x34
 800f89a:	2100      	movs	r1, #0
 800f89c:	a80b      	add	r0, sp, #44	; 0x2c
 800f89e:	f000 fb71 	bl	800ff84 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 800f8a2:	2224      	movs	r2, #36	; 0x24
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	a801      	add	r0, sp, #4
 800f8a8:	f000 fb6c 	bl	800ff84 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800f8ac:	2304      	movs	r3, #4
 800f8ae:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800f8b0:	33fc      	adds	r3, #252	; 0xfc
 800f8b2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f8b4:	a80a      	add	r0, sp, #40	; 0x28
 800f8b6:	f7f5 ff21 	bl	80056fc <HAL_RCC_OscConfig>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d119      	bne.n	800f8f2 <HAL_RTC_MspInit+0x5e>
  {
    Error_Handler();
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800f8be:	2320      	movs	r3, #32
 800f8c0:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800f8c2:	2380      	movs	r3, #128	; 0x80
 800f8c4:	025b      	lsls	r3, r3, #9
 800f8c6:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f8c8:	a801      	add	r0, sp, #4
 800f8ca:	f7f6 fad9 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d112      	bne.n	800f8f8 <HAL_RTC_MspInit+0x64>
    Error_Handler();
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800f8d2:	4a0b      	ldr	r2, [pc, #44]	; (800f900 <HAL_RTC_MspInit+0x6c>)
 800f8d4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800f8d6:	2380      	movs	r3, #128	; 0x80
 800f8d8:	02db      	lsls	r3, r3, #11
 800f8da:	430b      	orrs	r3, r1
 800f8dc:	6513      	str	r3, [r2, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	2002      	movs	r0, #2
 800f8e4:	f7f5 f902 	bl	8004aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800f8e8:	2002      	movs	r0, #2
 800f8ea:	f7f5 f92f 	bl	8004b4c <HAL_NVIC_EnableIRQ>
}
 800f8ee:	b019      	add	sp, #100	; 0x64
 800f8f0:	bd00      	pop	{pc}
    Error_Handler();
 800f8f2:	f7ff fa7f 	bl	800edf4 <Error_Handler>
 800f8f6:	e7e2      	b.n	800f8be <HAL_RTC_MspInit+0x2a>
    Error_Handler();
 800f8f8:	f7ff fa7c 	bl	800edf4 <Error_Handler>
 800f8fc:	e7e9      	b.n	800f8d2 <HAL_RTC_MspInit+0x3e>
 800f8fe:	46c0      	nop			; (mov r8, r8)
 800f900:	40021000 	.word	0x40021000

0800f904 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800f904:	b510      	push	{r4, lr}
  TimerIrqHandler();
 800f906:	f7ff f8b7 	bl	800ea78 <TimerIrqHandler>
}
 800f90a:	bd10      	pop	{r4, pc}

0800f90c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f90c:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler(GPIO_Pin);
 800f90e:	f7ff fb0b 	bl	800ef28 <HW_GPIO_IrqHandler>
}
 800f912:	bd10      	pop	{r4, pc}

0800f914 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 800f914:	2804      	cmp	r0, #4
 800f916:	d00c      	beq.n	800f932 <MSP_GetIRQn+0x1e>
 800f918:	d807      	bhi.n	800f92a <MSP_GetIRQn+0x16>
 800f91a:	3801      	subs	r0, #1
 800f91c:	b280      	uxth	r0, r0
 800f91e:	2801      	cmp	r0, #1
 800f920:	d801      	bhi.n	800f926 <MSP_GetIRQn+0x12>
 800f922:	2005      	movs	r0, #5
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
  }
}
 800f924:	4770      	bx	lr
      return EXTI4_15_IRQn;
 800f926:	2007      	movs	r0, #7
 800f928:	e7fc      	b.n	800f924 <MSP_GetIRQn+0x10>
  switch (GPIO_Pin)
 800f92a:	2808      	cmp	r0, #8
 800f92c:	d103      	bne.n	800f936 <MSP_GetIRQn+0x22>
      return EXTI2_3_IRQn;
 800f92e:	3802      	subs	r0, #2
 800f930:	e7f8      	b.n	800f924 <MSP_GetIRQn+0x10>
 800f932:	2006      	movs	r0, #6
 800f934:	e7f6      	b.n	800f924 <MSP_GetIRQn+0x10>
      return EXTI4_15_IRQn;
 800f936:	2007      	movs	r0, #7
 800f938:	e7f4      	b.n	800f924 <MSP_GetIRQn+0x10>
	...

0800f93c <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 800f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93e:	46c6      	mov	lr, r8
 800f940:	b500      	push	{lr}
 800f942:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f944:	2208      	movs	r2, #8
 800f946:	2100      	movs	r1, #0
 800f948:	a808      	add	r0, sp, #32
 800f94a:	f000 fb1b 	bl	800ff84 <memset>

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f94e:	4c26      	ldr	r4, [pc, #152]	; (800f9e8 <HW_GpioInit+0xac>)
 800f950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f952:	2201      	movs	r2, #1
 800f954:	4690      	mov	r8, r2
 800f956:	4313      	orrs	r3, r2
 800f958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f95a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f95c:	4013      	ands	r3, r2
 800f95e:	9301      	str	r3, [sp, #4]
 800f960:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f962:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f964:	2702      	movs	r7, #2
 800f966:	433b      	orrs	r3, r7
 800f968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f96a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f96c:	403b      	ands	r3, r7
 800f96e:	9302      	str	r3, [sp, #8]
 800f970:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f974:	2604      	movs	r6, #4
 800f976:	4333      	orrs	r3, r6
 800f978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f97a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f97c:	4033      	ands	r3, r6
 800f97e:	9303      	str	r3, [sp, #12]
 800f980:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f984:	2580      	movs	r5, #128	; 0x80
 800f986:	432b      	orrs	r3, r5
 800f988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f98a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f98c:	402b      	ands	r3, r5
 800f98e:	9304      	str	r3, [sp, #16]
 800f990:	9b04      	ldr	r3, [sp, #16]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f992:	2303      	movs	r3, #3
 800f994:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f996:	2300      	movs	r3, #0
 800f998:	9307      	str	r3, [sp, #28]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800f99a:	4b14      	ldr	r3, [pc, #80]	; (800f9ec <HW_GpioInit+0xb0>)
 800f99c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f99e:	20a0      	movs	r0, #160	; 0xa0
 800f9a0:	a905      	add	r1, sp, #20
 800f9a2:	05c0      	lsls	r0, r0, #23
 800f9a4:	f7f5 fa02 	bl	8004dac <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800f9a8:	4b11      	ldr	r3, [pc, #68]	; (800f9f0 <HW_GpioInit+0xb4>)
 800f9aa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9ac:	a905      	add	r1, sp, #20
 800f9ae:	4811      	ldr	r0, [pc, #68]	; (800f9f4 <HW_GpioInit+0xb8>)
 800f9b0:	f7f5 f9fc 	bl	8004dac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f9b4:	a905      	add	r1, sp, #20
 800f9b6:	4810      	ldr	r0, [pc, #64]	; (800f9f8 <HW_GpioInit+0xbc>)
 800f9b8:	f7f5 f9f8 	bl	8004dac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f9bc:	a905      	add	r1, sp, #20
 800f9be:	480f      	ldr	r0, [pc, #60]	; (800f9fc <HW_GpioInit+0xc0>)
 800f9c0:	f7f5 f9f4 	bl	8004dac <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800f9c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9c6:	4642      	mov	r2, r8
 800f9c8:	4393      	bics	r3, r2
 800f9ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800f9cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9ce:	43bb      	bics	r3, r7
 800f9d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800f9d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9d4:	43b3      	bics	r3, r6
 800f9d6:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800f9d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9da:	43ab      	bics	r3, r5
 800f9dc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800f9de:	b00a      	add	sp, #40	; 0x28
 800f9e0:	bc80      	pop	{r7}
 800f9e2:	46b8      	mov	r8, r7
 800f9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e6:	46c0      	nop			; (mov r8, r8)
 800f9e8:	40021000 	.word	0x40021000
 800f9ec:	00009fff 	.word	0x00009fff
 800f9f0:	0000ffff 	.word	0x0000ffff
 800f9f4:	50000400 	.word	0x50000400
 800f9f8:	50000800 	.word	0x50000800
 800f9fc:	50001c00 	.word	0x50001c00

0800fa00 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 800fa00:	b500      	push	{lr}
 800fa02:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fa04:	2214      	movs	r2, #20
 800fa06:	2100      	movs	r1, #0
 800fa08:	a80f      	add	r0, sp, #60	; 0x3c
 800fa0a:	f000 fabb 	bl	800ff84 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fa0e:	2220      	movs	r2, #32
 800fa10:	2100      	movs	r1, #0
 800fa12:	a803      	add	r0, sp, #12
 800fa14:	f000 fab6 	bl	800ff84 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800fa18:	2202      	movs	r2, #2
 800fa1a:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800fa20:	2101      	movs	r1, #1
 800fa22:	9104      	str	r1, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800fa24:	310f      	adds	r1, #15
 800fa26:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800fa28:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800fa2a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800fa2c:	2380      	movs	r3, #128	; 0x80
 800fa2e:	031b      	lsls	r3, r3, #12
 800fa30:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800fa32:	2380      	movs	r3, #128	; 0x80
 800fa34:	041b      	lsls	r3, r3, #16
 800fa36:	930e      	str	r3, [sp, #56]	; 0x38

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fa38:	a801      	add	r0, sp, #4
 800fa3a:	f7f5 fe5f 	bl	80056fc <HAL_RCC_OscConfig>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d121      	bne.n	800fa86 <SystemClock_Config+0x86>
  {
    Error_Handler();
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fa42:	4a14      	ldr	r2, [pc, #80]	; (800fa94 <SystemClock_Config+0x94>)
 800fa44:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fa46:	2380      	movs	r3, #128	; 0x80
 800fa48:	055b      	lsls	r3, r3, #21
 800fa4a:	430b      	orrs	r3, r1
 800fa4c:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fa4e:	4912      	ldr	r1, [pc, #72]	; (800fa98 <SystemClock_Config+0x98>)
 800fa50:	680b      	ldr	r3, [r1, #0]
 800fa52:	4a12      	ldr	r2, [pc, #72]	; (800fa9c <SystemClock_Config+0x9c>)
 800fa54:	401a      	ands	r2, r3
 800fa56:	2380      	movs	r3, #128	; 0x80
 800fa58:	011b      	lsls	r3, r3, #4
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	600b      	str	r3, [r1, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800fa5e:	4b0e      	ldr	r3, [pc, #56]	; (800fa98 <SystemClock_Config+0x98>)
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	06db      	lsls	r3, r3, #27
 800fa64:	d4fb      	bmi.n	800fa5e <SystemClock_Config+0x5e>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800fa66:	230f      	movs	r3, #15
 800fa68:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fa6a:	3b0c      	subs	r3, #12
 800fa6c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800fa72:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800fa74:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800fa76:	2101      	movs	r1, #1
 800fa78:	a80f      	add	r0, sp, #60	; 0x3c
 800fa7a:	f7f6 f907 	bl	8005c8c <HAL_RCC_ClockConfig>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d104      	bne.n	800fa8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
  }
}
 800fa82:	b015      	add	sp, #84	; 0x54
 800fa84:	bd00      	pop	{pc}
    Error_Handler();
 800fa86:	f7ff f9b5 	bl	800edf4 <Error_Handler>
 800fa8a:	e7da      	b.n	800fa42 <SystemClock_Config+0x42>
    Error_Handler();
 800fa8c:	f7ff f9b2 	bl	800edf4 <Error_Handler>
}
 800fa90:	e7f7      	b.n	800fa82 <SystemClock_Config+0x82>
 800fa92:	46c0      	nop			; (mov r8, r8)
 800fa94:	40021000 	.word	0x40021000
 800fa98:	40007000 	.word	0x40007000
 800fa9c:	ffffe7ff 	.word	0xffffe7ff

0800faa0 <HW_GetRandomSeed>:
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 800faa0:	4b04      	ldr	r3, [pc, #16]	; (800fab4 <HW_GetRandomSeed+0x14>)
 800faa2:	6818      	ldr	r0, [r3, #0]
 800faa4:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <HW_GetRandomSeed+0x18>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4058      	eors	r0, r3
 800faaa:	4b04      	ldr	r3, [pc, #16]	; (800fabc <HW_GetRandomSeed+0x1c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4058      	eors	r0, r3
}
 800fab0:	4770      	bx	lr
 800fab2:	46c0      	nop			; (mov r8, r8)
 800fab4:	1ff80050 	.word	0x1ff80050
 800fab8:	1ff80054 	.word	0x1ff80054
 800fabc:	1ff80064 	.word	0x1ff80064

0800fac0 <HW_GetUniqueId>:
  * @brief This function return a unique ID
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
 800fac0:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800fac2:	4913      	ldr	r1, [pc, #76]	; (800fb10 <HW_GetUniqueId+0x50>)
 800fac4:	4a13      	ldr	r2, [pc, #76]	; (800fb14 <HW_GetUniqueId+0x54>)
 800fac6:	680b      	ldr	r3, [r1, #0]
 800fac8:	001c      	movs	r4, r3
 800faca:	6813      	ldr	r3, [r2, #0]
 800facc:	469c      	mov	ip, r3
 800face:	4464      	add	r4, ip
 800fad0:	0e23      	lsrs	r3, r4, #24
 800fad2:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 800fad4:	680b      	ldr	r3, [r1, #0]
 800fad6:	001c      	movs	r4, r3
 800fad8:	6813      	ldr	r3, [r2, #0]
 800fada:	469c      	mov	ip, r3
 800fadc:	4464      	add	r4, ip
 800fade:	0c23      	lsrs	r3, r4, #16
 800fae0:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 800fae2:	680b      	ldr	r3, [r1, #0]
 800fae4:	001c      	movs	r4, r3
 800fae6:	6813      	ldr	r3, [r2, #0]
 800fae8:	469c      	mov	ip, r3
 800faea:	4464      	add	r4, ip
 800faec:	0a23      	lsrs	r3, r4, #8
 800faee:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 800faf0:	680b      	ldr	r3, [r1, #0]
 800faf2:	6812      	ldr	r2, [r2, #0]
 800faf4:	189b      	adds	r3, r3, r2
 800faf6:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 800faf8:	4b07      	ldr	r3, [pc, #28]	; (800fb18 <HW_GetUniqueId+0x58>)
 800fafa:	78da      	ldrb	r2, [r3, #3]
 800fafc:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 800fafe:	885a      	ldrh	r2, [r3, #2]
 800fb00:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	0a12      	lsrs	r2, r2, #8
 800fb06:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	7003      	strb	r3, [r0, #0]
}
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	46c0      	nop			; (mov r8, r8)
 800fb10:	1ff80050 	.word	0x1ff80050
 800fb14:	1ff80064 	.word	0x1ff80064
 800fb18:	1ff80054 	.word	0x1ff80054

0800fb1c <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 800fb1c:	b510      	push	{r4, lr}
  if (AdcInitialized == false)
 800fb1e:	4b15      	ldr	r3, [pc, #84]	; (800fb74 <HW_AdcInit+0x58>)
 800fb20:	785b      	ldrb	r3, [r3, #1]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d000      	beq.n	800fb28 <HW_AdcInit+0xc>


    HAL_ADC_Init(&hadc);

  }
}
 800fb26:	bd10      	pop	{r4, pc}
    AdcInitialized = true;
 800fb28:	4812      	ldr	r0, [pc, #72]	; (800fb74 <HW_AdcInit+0x58>)
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	7042      	strb	r2, [r0, #1]
    hadc.Instance  = ADC1;
 800fb2e:	4b12      	ldr	r3, [pc, #72]	; (800fb78 <HW_AdcInit+0x5c>)
 800fb30:	6043      	str	r3, [r0, #4]
    hadc.Init.OversamplingMode      = DISABLE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	6403      	str	r3, [r0, #64]	; 0x40
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800fb36:	2180      	movs	r1, #128	; 0x80
 800fb38:	0609      	lsls	r1, r1, #24
 800fb3a:	6081      	str	r1, [r0, #8]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800fb3c:	6203      	str	r3, [r0, #32]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800fb3e:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800fb40:	61c3      	str	r3, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800fb42:	60c3      	str	r3, [r0, #12]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800fb44:	2107      	movs	r1, #7
 800fb46:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800fb48:	6142      	str	r2, [r0, #20]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800fb4a:	6103      	str	r3, [r0, #16]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800fb4c:	3223      	adds	r2, #35	; 0x23
 800fb4e:	5483      	strb	r3, [r0, r2]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800fb50:	3201      	adds	r2, #1
 800fb52:	5483      	strb	r3, [r0, r2]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fb54:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800fb56:	3a21      	subs	r2, #33	; 0x21
 800fb58:	6182      	str	r2, [r0, #24]
    hadc.Init.DMAContinuousRequests = DISABLE;
 800fb5a:	322c      	adds	r2, #44	; 0x2c
 800fb5c:	5483      	strb	r3, [r0, r2]
    ADCCLK_ENABLE();
 800fb5e:	4a07      	ldr	r2, [pc, #28]	; (800fb7c <HW_AdcInit+0x60>)
 800fb60:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fb62:	2380      	movs	r3, #128	; 0x80
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	430b      	orrs	r3, r1
 800fb68:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_ADC_Init(&hadc);
 800fb6a:	3004      	adds	r0, #4
 800fb6c:	f7f4 fd80 	bl	8004670 <HAL_ADC_Init>
}
 800fb70:	e7d9      	b.n	800fb26 <HW_AdcInit+0xa>
 800fb72:	46c0      	nop			; (mov r8, r8)
 800fb74:	200013dc 	.word	0x200013dc
 800fb78:	40012400 	.word	0x40012400
 800fb7c:	40021000 	.word	0x40021000

0800fb80 <HW_Init>:
{
 800fb80:	b510      	push	{r4, lr}
  if (McuInitialized == false)
 800fb82:	4b11      	ldr	r3, [pc, #68]	; (800fbc8 <HW_Init+0x48>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d000      	beq.n	800fb8c <HW_Init+0xc>
}
 800fb8a:	bd10      	pop	{r4, pc}
    HW_AdcInit();
 800fb8c:	f7ff ffc6 	bl	800fb1c <HW_AdcInit>
    Radio.IoInit();
 800fb90:	4b0e      	ldr	r3, [pc, #56]	; (800fbcc <HW_Init+0x4c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4798      	blx	r3
    HW_SPI_Init();
 800fb96:	f7ff fcd1 	bl	800f53c <HW_SPI_Init>
    HW_RTC_Init();
 800fb9a:	f7ff fc33 	bl	800f404 <HW_RTC_Init>
    TraceInit();
 800fb9e:	f7ff f84b 	bl	800ec38 <TraceInit>
    BSP_sensor_Init();
 800fba2:	f7ff f8e1 	bl	800ed68 <BSP_sensor_Init>
    BSP_LED_Init(LED1);
 800fba6:	2000      	movs	r0, #0
 800fba8:	f7f2 fe10 	bl	80027cc <BSP_LED_Init>
    BSP_LED_Init(LED2);
 800fbac:	2001      	movs	r0, #1
 800fbae:	f7f2 fe0d 	bl	80027cc <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800fbb2:	2002      	movs	r0, #2
 800fbb4:	f7f2 fe0a 	bl	80027cc <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800fbb8:	2003      	movs	r0, #3
 800fbba:	f7f2 fe07 	bl	80027cc <BSP_LED_Init>
    McuInitialized = true;
 800fbbe:	4b02      	ldr	r3, [pc, #8]	; (800fbc8 <HW_Init+0x48>)
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	701a      	strb	r2, [r3, #0]
}
 800fbc4:	e7e1      	b.n	800fb8a <HW_Init+0xa>
 800fbc6:	46c0      	nop			; (mov r8, r8)
 800fbc8:	200013dc 	.word	0x200013dc
 800fbcc:	08010b84 	.word	0x08010b84

0800fbd0 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 800fbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	0005      	movs	r5, r0

  ADC_ChannelConfTypeDef adcConf = {0};
 800fbd6:	2208      	movs	r2, #8
 800fbd8:	2100      	movs	r1, #0
 800fbda:	4668      	mov	r0, sp
 800fbdc:	f000 f9d2 	bl	800ff84 <memset>

  uint16_t adcData = 0;

  HW_AdcInit();
 800fbe0:	f7ff ff9c 	bl	800fb1c <HW_AdcInit>

  if (AdcInitialized == true)
 800fbe4:	4b1f      	ldr	r3, [pc, #124]	; (800fc64 <HW_AdcReadChannel+0x94>)
 800fbe6:	785b      	ldrb	r3, [r3, #1]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d038      	beq.n	800fc5e <HW_AdcReadChannel+0x8e>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800fbec:	4b1e      	ldr	r3, [pc, #120]	; (800fc68 <HW_AdcReadChannel+0x98>)
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	071b      	lsls	r3, r3, #28
 800fbf2:	d5fb      	bpl.n	800fbec <HW_AdcReadChannel+0x1c>

    ADCCLK_ENABLE();
 800fbf4:	4e1d      	ldr	r6, [pc, #116]	; (800fc6c <HW_AdcReadChannel+0x9c>)
 800fbf6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800fbf8:	2380      	movs	r3, #128	; 0x80
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	6373      	str	r3, [r6, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800fc00:	4f18      	ldr	r7, [pc, #96]	; (800fc64 <HW_AdcReadChannel+0x94>)
 800fc02:	1d3c      	adds	r4, r7, #4
 800fc04:	2100      	movs	r1, #0
 800fc06:	0020      	movs	r0, r4
 800fc08:	f7f4 ff1c 	bl	8004a44 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 800fc0c:	4b18      	ldr	r3, [pc, #96]	; (800fc70 <HW_AdcReadChannel+0xa0>)
 800fc0e:	9300      	str	r3, [sp, #0]
    adcConf.Rank = ADC_RANK_NONE;
 800fc10:	4b18      	ldr	r3, [pc, #96]	; (800fc74 <HW_AdcReadChannel+0xa4>)
 800fc12:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800fc14:	4669      	mov	r1, sp
 800fc16:	0020      	movs	r0, r4
 800fc18:	f7f4 feb6 	bl	8004988 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
 800fc1c:	9500      	str	r5, [sp, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800fc1e:	2380      	movs	r3, #128	; 0x80
 800fc20:	015b      	lsls	r3, r3, #5
 800fc22:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800fc24:	4669      	mov	r1, sp
 800fc26:	0020      	movs	r0, r4
 800fc28:	f7f4 feae 	bl	8004988 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 800fc2c:	0020      	movs	r0, r4
 800fc2e:	f7f4 fe15 	bl	800485c <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800fc32:	2101      	movs	r1, #1
 800fc34:	4249      	negs	r1, r1
 800fc36:	0020      	movs	r0, r4
 800fc38:	f7f4 fe40 	bl	80048bc <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800fc3c:	0020      	movs	r0, r4
 800fc3e:	f7f4 fe9f 	bl	8004980 <HAL_ADC_GetValue>
 800fc42:	b280      	uxth	r0, r0

    __HAL_ADC_DISABLE(&hadc) ;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689a      	ldr	r2, [r3, #8]
 800fc48:	2102      	movs	r1, #2
 800fc4a:	430a      	orrs	r2, r1
 800fc4c:	609a      	str	r2, [r3, #8]
 800fc4e:	2203      	movs	r2, #3
 800fc50:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800fc52:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fc54:	4a08      	ldr	r2, [pc, #32]	; (800fc78 <HW_AdcReadChannel+0xa8>)
 800fc56:	4013      	ands	r3, r2
 800fc58:	6373      	str	r3, [r6, #52]	; 0x34
  }
  return adcData;
}
 800fc5a:	b003      	add	sp, #12
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t adcData = 0;
 800fc5e:	2000      	movs	r0, #0
 800fc60:	e7fb      	b.n	800fc5a <HW_AdcReadChannel+0x8a>
 800fc62:	46c0      	nop			; (mov r8, r8)
 800fc64:	200013dc 	.word	0x200013dc
 800fc68:	40007000 	.word	0x40007000
 800fc6c:	40021000 	.word	0x40021000
 800fc70:	0007ffff 	.word	0x0007ffff
 800fc74:	00001001 	.word	0x00001001
 800fc78:	fffffdff 	.word	0xfffffdff

0800fc7c <HW_GetTemperatureLevel>:
{
 800fc7c:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800fc7e:	4813      	ldr	r0, [pc, #76]	; (800fccc <HW_GetTemperatureLevel+0x50>)
 800fc80:	f7ff ffa6 	bl	800fbd0 <HW_AdcReadChannel>
 800fc84:	1e01      	subs	r1, r0, #0
  if (measuredLevel == 0)
 800fc86:	d01f      	beq.n	800fcc8 <HW_GetTemperatureLevel+0x4c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800fc88:	4b11      	ldr	r3, [pc, #68]	; (800fcd0 <HW_GetTemperatureLevel+0x54>)
 800fc8a:	881b      	ldrh	r3, [r3, #0]
 800fc8c:	4811      	ldr	r0, [pc, #68]	; (800fcd4 <HW_GetTemperatureLevel+0x58>)
 800fc8e:	4358      	muls	r0, r3
 800fc90:	f7f0 fa44 	bl	800011c <__udivsi3>
 800fc94:	0004      	movs	r4, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 800fc96:	4810      	ldr	r0, [pc, #64]	; (800fcd8 <HW_GetTemperatureLevel+0x5c>)
 800fc98:	f7ff ff9a 	bl	800fbd0 <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800fc9c:	4360      	muls	r0, r4
 800fc9e:	490d      	ldr	r1, [pc, #52]	; (800fcd4 <HW_GetTemperatureLevel+0x58>)
 800fca0:	f7f0 fa3c 	bl	800011c <__udivsi3>
 800fca4:	4b0d      	ldr	r3, [pc, #52]	; (800fcdc <HW_GetTemperatureLevel+0x60>)
 800fca6:	881a      	ldrh	r2, [r3, #0]
 800fca8:	1a83      	subs	r3, r0, r2
 800fcaa:	0098      	lsls	r0, r3, #2
 800fcac:	18c0      	adds	r0, r0, r3
 800fcae:	0300      	lsls	r0, r0, #12
 800fcb0:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <HW_GetTemperatureLevel+0x64>)
 800fcb2:	8819      	ldrh	r1, [r3, #0]
 800fcb4:	1a89      	subs	r1, r1, r2
 800fcb6:	f7f0 fabb 	bl	8000230 <__divsi3>
 800fcba:	b280      	uxth	r0, r0
 800fcbc:	23f0      	movs	r3, #240	; 0xf0
 800fcbe:	015b      	lsls	r3, r3, #5
 800fcc0:	469c      	mov	ip, r3
 800fcc2:	4460      	add	r0, ip
 800fcc4:	b280      	uxth	r0, r0
}
 800fcc6:	bd10      	pop	{r4, pc}
    batteryLevelmV = 0;
 800fcc8:	2400      	movs	r4, #0
 800fcca:	e7e4      	b.n	800fc96 <HW_GetTemperatureLevel+0x1a>
 800fccc:	44020000 	.word	0x44020000
 800fcd0:	1ff80078 	.word	0x1ff80078
 800fcd4:	00000bb8 	.word	0x00000bb8
 800fcd8:	48040000 	.word	0x48040000
 800fcdc:	1ff8007a 	.word	0x1ff8007a
 800fce0:	1ff8007e 	.word	0x1ff8007e

0800fce4 <HW_GetBatteryLevel>:
{
 800fce4:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800fce6:	4807      	ldr	r0, [pc, #28]	; (800fd04 <HW_GetBatteryLevel+0x20>)
 800fce8:	f7ff ff72 	bl	800fbd0 <HW_AdcReadChannel>
 800fcec:	1e01      	subs	r1, r0, #0
  if (measuredLevel == 0)
 800fcee:	d007      	beq.n	800fd00 <HW_GetBatteryLevel+0x1c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800fcf0:	4b05      	ldr	r3, [pc, #20]	; (800fd08 <HW_GetBatteryLevel+0x24>)
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	4805      	ldr	r0, [pc, #20]	; (800fd0c <HW_GetBatteryLevel+0x28>)
 800fcf6:	4358      	muls	r0, r3
 800fcf8:	f7f0 fa10 	bl	800011c <__udivsi3>
  return batteryLevelmV;
 800fcfc:	b280      	uxth	r0, r0
}
 800fcfe:	bd10      	pop	{r4, pc}
    batteryLevelmV = 0;
 800fd00:	2000      	movs	r0, #0
 800fd02:	e7fb      	b.n	800fcfc <HW_GetBatteryLevel+0x18>
 800fd04:	44020000 	.word	0x44020000
 800fd08:	1ff80078 	.word	0x1ff80078
 800fd0c:	00000bb8 	.word	0x00000bb8

0800fd10 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 800fd10:	4770      	bx	lr

0800fd12 <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 800fd12:	46c0      	nop			; (mov r8, r8)
  while (1)
 800fd14:	e7fd      	b.n	800fd12 <HardFault_Handler>

0800fd16 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800fd16:	4770      	bx	lr

0800fd18 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800fd18:	4770      	bx	lr

0800fd1a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800fd1a:	b510      	push	{r4, lr}
  HAL_IncTick();
 800fd1c:	f7f4 fc2c 	bl	8004578 <HAL_IncTick>
}
 800fd20:	bd10      	pop	{r4, pc}

0800fd22 <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 800fd22:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 800fd24:	f000 f880 	bl	800fe28 <vcom_IRQHandler>
}
 800fd28:	bd10      	pop	{r4, pc}

0800fd2a <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 800fd2a:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 800fd2c:	f000 f874 	bl	800fe18 <vcom_DMA_TX_IRQHandler>
}
 800fd30:	bd10      	pop	{r4, pc}

0800fd32 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 800fd32:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler();
 800fd34:	f7ff fb28 	bl	800f388 <HW_RTC_IrqHandler>
}
 800fd38:	bd10      	pop	{r4, pc}

0800fd3a <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 800fd3a:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	f7f5 f909 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800fd42:	2002      	movs	r0, #2
 800fd44:	f7f5 f906 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>
}
 800fd48:	bd10      	pop	{r4, pc}

0800fd4a <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800fd4a:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800fd4c:	2004      	movs	r0, #4
 800fd4e:	f7f5 f901 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800fd52:	2008      	movs	r0, #8
 800fd54:	f7f5 f8fe 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>
}
 800fd58:	bd10      	pop	{r4, pc}

0800fd5a <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 800fd5a:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800fd5c:	2010      	movs	r0, #16
 800fd5e:	f7f5 f8f9 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800fd62:	2020      	movs	r0, #32
 800fd64:	f7f5 f8f6 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800fd68:	2040      	movs	r0, #64	; 0x40
 800fd6a:	f7f5 f8f3 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800fd6e:	2080      	movs	r0, #128	; 0x80
 800fd70:	f7f5 f8f0 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800fd74:	2080      	movs	r0, #128	; 0x80
 800fd76:	0040      	lsls	r0, r0, #1
 800fd78:	f7f5 f8ec 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800fd7c:	2080      	movs	r0, #128	; 0x80
 800fd7e:	0080      	lsls	r0, r0, #2
 800fd80:	f7f5 f8e8 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800fd84:	2080      	movs	r0, #128	; 0x80
 800fd86:	00c0      	lsls	r0, r0, #3
 800fd88:	f7f5 f8e4 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800fd8c:	2080      	movs	r0, #128	; 0x80
 800fd8e:	0100      	lsls	r0, r0, #4
 800fd90:	f7f5 f8e0 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800fd94:	2080      	movs	r0, #128	; 0x80
 800fd96:	0140      	lsls	r0, r0, #5
 800fd98:	f7f5 f8dc 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800fd9c:	2080      	movs	r0, #128	; 0x80
 800fd9e:	0180      	lsls	r0, r0, #6
 800fda0:	f7f5 f8d8 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800fda4:	2080      	movs	r0, #128	; 0x80
 800fda6:	01c0      	lsls	r0, r0, #7
 800fda8:	f7f5 f8d4 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800fdac:	2080      	movs	r0, #128	; 0x80
 800fdae:	0200      	lsls	r0, r0, #8
 800fdb0:	f7f5 f8d0 	bl	8004f54 <HAL_GPIO_EXTI_IRQHandler>
}
 800fdb4:	bd10      	pop	{r4, pc}
	...

0800fdb8 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 800fdb8:	b510      	push	{r4, lr}

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 800fdba:	4b0b      	ldr	r3, [pc, #44]	; (800fde8 <vcom_Init+0x30>)
 800fdbc:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 800fdbe:	480b      	ldr	r0, [pc, #44]	; (800fdec <vcom_Init+0x34>)
 800fdc0:	4b0b      	ldr	r3, [pc, #44]	; (800fdf0 <vcom_Init+0x38>)
 800fdc2:	6003      	str	r3, [r0, #0]

  UartHandle.Init.BaudRate   = 115200;
 800fdc4:	23e1      	movs	r3, #225	; 0xe1
 800fdc6:	025b      	lsls	r3, r3, #9
 800fdc8:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800fdce:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800fdd0:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800fdd2:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 800fdd4:	3308      	adds	r3, #8
 800fdd6:	6143      	str	r3, [r0, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800fdd8:	f7f7 fac8 	bl	800736c <HAL_UART_Init>
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d100      	bne.n	800fde2 <vcom_Init+0x2a>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 800fde0:	bd10      	pop	{r4, pc}
    Error_Handler();
 800fde2:	f7ff f807 	bl	800edf4 <Error_Handler>
}
 800fde6:	e7fb      	b.n	800fde0 <vcom_Init+0x28>
 800fde8:	2000143c 	.word	0x2000143c
 800fdec:	20001488 	.word	0x20001488
 800fdf0:	40004400 	.word	0x40004400

0800fdf4 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800fdf8:	0001      	movs	r1, r0
 800fdfa:	4802      	ldr	r0, [pc, #8]	; (800fe04 <vcom_Trace+0x10>)
 800fdfc:	f7f6 feac 	bl	8006b58 <HAL_UART_Transmit_DMA>
}
 800fe00:	bd10      	pop	{r4, pc}
 800fe02:	46c0      	nop			; (mov r8, r8)
 800fe04:	20001488 	.word	0x20001488

0800fe08 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800fe08:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 800fe0a:	4b02      	ldr	r3, [pc, #8]	; (800fe14 <HAL_UART_TxCpltCallback+0xc>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4798      	blx	r3
}
 800fe10:	bd10      	pop	{r4, pc}
 800fe12:	46c0      	nop			; (mov r8, r8)
 800fe14:	2000143c 	.word	0x2000143c

0800fe18 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 800fe18:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 800fe1a:	4b02      	ldr	r3, [pc, #8]	; (800fe24 <vcom_DMA_TX_IRQHandler+0xc>)
 800fe1c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fe1e:	f7f4 ff67 	bl	8004cf0 <HAL_DMA_IRQHandler>
}
 800fe22:	bd10      	pop	{r4, pc}
 800fe24:	20001488 	.word	0x20001488

0800fe28 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 800fe28:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800fe2a:	4802      	ldr	r0, [pc, #8]	; (800fe34 <vcom_IRQHandler+0xc>)
 800fe2c:	f7f6 ff46 	bl	8006cbc <HAL_UART_IRQHandler>
}
 800fe30:	bd10      	pop	{r4, pc}
 800fe32:	46c0      	nop			; (mov r8, r8)
 800fe34:	20001488 	.word	0x20001488

0800fe38 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 800fe38:	b530      	push	{r4, r5, lr}
 800fe3a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800fe3c:	4a13      	ldr	r2, [pc, #76]	; (800fe8c <vcom_IoInit+0x54>)
 800fe3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fe40:	2301      	movs	r3, #1
 800fe42:	4319      	orrs	r1, r3
 800fe44:	62d1      	str	r1, [r2, #44]	; 0x2c
 800fe46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fe48:	4019      	ands	r1, r3
 800fe4a:	9101      	str	r1, [sp, #4]
 800fe4c:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 800fe4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fe50:	4319      	orrs	r1, r3
 800fe52:	62d1      	str	r1, [r2, #44]	; 0x2c
 800fe54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fe56:	4013      	ands	r3, r2
 800fe58:	9302      	str	r3, [sp, #8]
 800fe5a:	9b02      	ldr	r3, [sp, #8]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800fe5c:	2404      	movs	r4, #4
 800fe5e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800fe60:	2302      	movs	r3, #2
 800fe62:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800fe64:	2300      	movs	r3, #0
 800fe66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800fe68:	3303      	adds	r3, #3
 800fe6a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800fe6c:	9407      	str	r4, [sp, #28]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800fe6e:	25a0      	movs	r5, #160	; 0xa0
 800fe70:	05ed      	lsls	r5, r5, #23
 800fe72:	a903      	add	r1, sp, #12
 800fe74:	0028      	movs	r0, r5
 800fe76:	f7f4 ff99 	bl	8004dac <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800fe7a:	2308      	movs	r3, #8
 800fe7c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800fe7e:	9407      	str	r4, [sp, #28]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800fe80:	a903      	add	r1, sp, #12
 800fe82:	0028      	movs	r0, r5
 800fe84:	f7f4 ff92 	bl	8004dac <HAL_GPIO_Init>
}
 800fe88:	b009      	add	sp, #36	; 0x24
 800fe8a:	bd30      	pop	{r4, r5, pc}
 800fe8c:	40021000 	.word	0x40021000

0800fe90 <HAL_UART_MspInit>:
{
 800fe90:	b570      	push	{r4, r5, r6, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	0004      	movs	r4, r0
  if (huart->Instance == USARTx)
 800fe96:	4b25      	ldr	r3, [pc, #148]	; (800ff2c <HAL_UART_MspInit+0x9c>)
 800fe98:	6802      	ldr	r2, [r0, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d001      	beq.n	800fea2 <HAL_UART_MspInit+0x12>
}
 800fe9e:	b004      	add	sp, #16
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
    USARTx_TX_GPIO_CLK_ENABLE();
 800fea2:	4b23      	ldr	r3, [pc, #140]	; (800ff30 <HAL_UART_MspInit+0xa0>)
 800fea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fea6:	2201      	movs	r2, #1
 800fea8:	4311      	orrs	r1, r2
 800feaa:	62d9      	str	r1, [r3, #44]	; 0x2c
 800feac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800feae:	4011      	ands	r1, r2
 800feb0:	9101      	str	r1, [sp, #4]
 800feb2:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 800feb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800feb6:	4311      	orrs	r1, r2
 800feb8:	62d9      	str	r1, [r3, #44]	; 0x2c
 800feba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800febc:	4011      	ands	r1, r2
 800febe:	9102      	str	r1, [sp, #8]
 800fec0:	9902      	ldr	r1, [sp, #8]
    USARTx_CLK_ENABLE();
 800fec2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fec4:	2180      	movs	r1, #128	; 0x80
 800fec6:	0289      	lsls	r1, r1, #10
 800fec8:	4301      	orrs	r1, r0
 800feca:	6399      	str	r1, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 800fecc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fece:	4311      	orrs	r1, r2
 800fed0:	6319      	str	r1, [r3, #48]	; 0x30
 800fed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed4:	401a      	ands	r2, r3
 800fed6:	9203      	str	r2, [sp, #12]
 800fed8:	9b03      	ldr	r3, [sp, #12]
    vcom_IoInit();
 800feda:	f7ff ffad 	bl	800fe38 <vcom_IoInit>
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800fede:	4d15      	ldr	r5, [pc, #84]	; (800ff34 <HAL_UART_MspInit+0xa4>)
 800fee0:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <HAL_UART_MspInit+0xa8>)
 800fee2:	606b      	str	r3, [r5, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800fee4:	2310      	movs	r3, #16
 800fee6:	60eb      	str	r3, [r5, #12]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800fee8:	2300      	movs	r3, #0
 800feea:	612b      	str	r3, [r5, #16]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800feec:	2280      	movs	r2, #128	; 0x80
 800feee:	616a      	str	r2, [r5, #20]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fef0:	61ab      	str	r3, [r5, #24]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800fef2:	61eb      	str	r3, [r5, #28]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800fef4:	622b      	str	r3, [r5, #32]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800fef6:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800fef8:	3304      	adds	r3, #4
 800fefa:	60ab      	str	r3, [r5, #8]
    HAL_DMA_Init(&hdma_tx);
 800fefc:	1d2e      	adds	r6, r5, #4
 800fefe:	0030      	movs	r0, r6
 800ff00:	f7f4 fe48 	bl	8004b94 <HAL_DMA_Init>
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800ff04:	66a6      	str	r6, [r4, #104]	; 0x68
 800ff06:	62ec      	str	r4, [r5, #44]	; 0x2c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800ff08:	2201      	movs	r2, #1
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	200b      	movs	r0, #11
 800ff0e:	f7f4 fded 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800ff12:	200b      	movs	r0, #11
 800ff14:	f7f4 fe1a 	bl	8004b4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800ff18:	2201      	movs	r2, #1
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	201c      	movs	r0, #28
 800ff1e:	f7f4 fde5 	bl	8004aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800ff22:	201c      	movs	r0, #28
 800ff24:	f7f4 fe12 	bl	8004b4c <HAL_NVIC_EnableIRQ>
}
 800ff28:	e7b9      	b.n	800fe9e <HAL_UART_MspInit+0xe>
 800ff2a:	46c0      	nop			; (mov r8, r8)
 800ff2c:	40004400 	.word	0x40004400
 800ff30:	40021000 	.word	0x40021000
 800ff34:	2000143c 	.word	0x2000143c
 800ff38:	40020080 	.word	0x40020080

0800ff3c <__libc_init_array>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	2600      	movs	r6, #0
 800ff40:	4d0c      	ldr	r5, [pc, #48]	; (800ff74 <__libc_init_array+0x38>)
 800ff42:	4c0d      	ldr	r4, [pc, #52]	; (800ff78 <__libc_init_array+0x3c>)
 800ff44:	1b64      	subs	r4, r4, r5
 800ff46:	10a4      	asrs	r4, r4, #2
 800ff48:	42a6      	cmp	r6, r4
 800ff4a:	d109      	bne.n	800ff60 <__libc_init_array+0x24>
 800ff4c:	2600      	movs	r6, #0
 800ff4e:	f000 fe05 	bl	8010b5c <_init>
 800ff52:	4d0a      	ldr	r5, [pc, #40]	; (800ff7c <__libc_init_array+0x40>)
 800ff54:	4c0a      	ldr	r4, [pc, #40]	; (800ff80 <__libc_init_array+0x44>)
 800ff56:	1b64      	subs	r4, r4, r5
 800ff58:	10a4      	asrs	r4, r4, #2
 800ff5a:	42a6      	cmp	r6, r4
 800ff5c:	d105      	bne.n	800ff6a <__libc_init_array+0x2e>
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	00b3      	lsls	r3, r6, #2
 800ff62:	58eb      	ldr	r3, [r5, r3]
 800ff64:	4798      	blx	r3
 800ff66:	3601      	adds	r6, #1
 800ff68:	e7ee      	b.n	800ff48 <__libc_init_array+0xc>
 800ff6a:	00b3      	lsls	r3, r6, #2
 800ff6c:	58eb      	ldr	r3, [r5, r3]
 800ff6e:	4798      	blx	r3
 800ff70:	3601      	adds	r6, #1
 800ff72:	e7f2      	b.n	800ff5a <__libc_init_array+0x1e>
 800ff74:	08011be4 	.word	0x08011be4
 800ff78:	08011be4 	.word	0x08011be4
 800ff7c:	08011be4 	.word	0x08011be4
 800ff80:	08011be8 	.word	0x08011be8

0800ff84 <memset>:
 800ff84:	0003      	movs	r3, r0
 800ff86:	1882      	adds	r2, r0, r2
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d100      	bne.n	800ff8e <memset+0xa>
 800ff8c:	4770      	bx	lr
 800ff8e:	7019      	strb	r1, [r3, #0]
 800ff90:	3301      	adds	r3, #1
 800ff92:	e7f9      	b.n	800ff88 <memset+0x4>

0800ff94 <sniprintf>:
 800ff94:	b40c      	push	{r2, r3}
 800ff96:	b530      	push	{r4, r5, lr}
 800ff98:	4b17      	ldr	r3, [pc, #92]	; (800fff8 <sniprintf+0x64>)
 800ff9a:	000c      	movs	r4, r1
 800ff9c:	681d      	ldr	r5, [r3, #0]
 800ff9e:	b09d      	sub	sp, #116	; 0x74
 800ffa0:	2900      	cmp	r1, #0
 800ffa2:	da08      	bge.n	800ffb6 <sniprintf+0x22>
 800ffa4:	238b      	movs	r3, #139	; 0x8b
 800ffa6:	2001      	movs	r0, #1
 800ffa8:	602b      	str	r3, [r5, #0]
 800ffaa:	4240      	negs	r0, r0
 800ffac:	b01d      	add	sp, #116	; 0x74
 800ffae:	bc30      	pop	{r4, r5}
 800ffb0:	bc08      	pop	{r3}
 800ffb2:	b002      	add	sp, #8
 800ffb4:	4718      	bx	r3
 800ffb6:	2382      	movs	r3, #130	; 0x82
 800ffb8:	466a      	mov	r2, sp
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	8293      	strh	r3, [r2, #20]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	9002      	str	r0, [sp, #8]
 800ffc2:	9006      	str	r0, [sp, #24]
 800ffc4:	4299      	cmp	r1, r3
 800ffc6:	d000      	beq.n	800ffca <sniprintf+0x36>
 800ffc8:	1e4b      	subs	r3, r1, #1
 800ffca:	9304      	str	r3, [sp, #16]
 800ffcc:	9307      	str	r3, [sp, #28]
 800ffce:	2301      	movs	r3, #1
 800ffd0:	466a      	mov	r2, sp
 800ffd2:	425b      	negs	r3, r3
 800ffd4:	82d3      	strh	r3, [r2, #22]
 800ffd6:	0028      	movs	r0, r5
 800ffd8:	ab21      	add	r3, sp, #132	; 0x84
 800ffda:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ffdc:	a902      	add	r1, sp, #8
 800ffde:	9301      	str	r3, [sp, #4]
 800ffe0:	f000 f906 	bl	80101f0 <_svfiprintf_r>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	da01      	bge.n	800ffec <sniprintf+0x58>
 800ffe8:	238b      	movs	r3, #139	; 0x8b
 800ffea:	602b      	str	r3, [r5, #0]
 800ffec:	2c00      	cmp	r4, #0
 800ffee:	d0dd      	beq.n	800ffac <sniprintf+0x18>
 800fff0:	2300      	movs	r3, #0
 800fff2:	9a02      	ldr	r2, [sp, #8]
 800fff4:	7013      	strb	r3, [r2, #0]
 800fff6:	e7d9      	b.n	800ffac <sniprintf+0x18>
 800fff8:	2000018c 	.word	0x2000018c

0800fffc <_vsniprintf_r>:
 800fffc:	b530      	push	{r4, r5, lr}
 800fffe:	0014      	movs	r4, r2
 8010000:	0005      	movs	r5, r0
 8010002:	001a      	movs	r2, r3
 8010004:	b09b      	sub	sp, #108	; 0x6c
 8010006:	2c00      	cmp	r4, #0
 8010008:	da05      	bge.n	8010016 <_vsniprintf_r+0x1a>
 801000a:	238b      	movs	r3, #139	; 0x8b
 801000c:	6003      	str	r3, [r0, #0]
 801000e:	2001      	movs	r0, #1
 8010010:	4240      	negs	r0, r0
 8010012:	b01b      	add	sp, #108	; 0x6c
 8010014:	bd30      	pop	{r4, r5, pc}
 8010016:	2382      	movs	r3, #130	; 0x82
 8010018:	4668      	mov	r0, sp
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	8183      	strh	r3, [r0, #12]
 801001e:	2300      	movs	r3, #0
 8010020:	9100      	str	r1, [sp, #0]
 8010022:	9104      	str	r1, [sp, #16]
 8010024:	429c      	cmp	r4, r3
 8010026:	d000      	beq.n	801002a <_vsniprintf_r+0x2e>
 8010028:	1e63      	subs	r3, r4, #1
 801002a:	9302      	str	r3, [sp, #8]
 801002c:	9305      	str	r3, [sp, #20]
 801002e:	2301      	movs	r3, #1
 8010030:	4669      	mov	r1, sp
 8010032:	425b      	negs	r3, r3
 8010034:	81cb      	strh	r3, [r1, #14]
 8010036:	0028      	movs	r0, r5
 8010038:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801003a:	f000 f8d9 	bl	80101f0 <_svfiprintf_r>
 801003e:	1c43      	adds	r3, r0, #1
 8010040:	da01      	bge.n	8010046 <_vsniprintf_r+0x4a>
 8010042:	238b      	movs	r3, #139	; 0x8b
 8010044:	602b      	str	r3, [r5, #0]
 8010046:	2c00      	cmp	r4, #0
 8010048:	d0e3      	beq.n	8010012 <_vsniprintf_r+0x16>
 801004a:	2300      	movs	r3, #0
 801004c:	9a00      	ldr	r2, [sp, #0]
 801004e:	7013      	strb	r3, [r2, #0]
 8010050:	e7df      	b.n	8010012 <_vsniprintf_r+0x16>
	...

08010054 <vsniprintf>:
 8010054:	b507      	push	{r0, r1, r2, lr}
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	0013      	movs	r3, r2
 801005a:	000a      	movs	r2, r1
 801005c:	0001      	movs	r1, r0
 801005e:	4802      	ldr	r0, [pc, #8]	; (8010068 <vsniprintf+0x14>)
 8010060:	6800      	ldr	r0, [r0, #0]
 8010062:	f7ff ffcb 	bl	800fffc <_vsniprintf_r>
 8010066:	bd0e      	pop	{r1, r2, r3, pc}
 8010068:	2000018c 	.word	0x2000018c

0801006c <__retarget_lock_acquire_recursive>:
 801006c:	4770      	bx	lr

0801006e <__retarget_lock_release_recursive>:
 801006e:	4770      	bx	lr

08010070 <_malloc_r>:
 8010070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010072:	2303      	movs	r3, #3
 8010074:	1ccd      	adds	r5, r1, #3
 8010076:	439d      	bics	r5, r3
 8010078:	3508      	adds	r5, #8
 801007a:	0006      	movs	r6, r0
 801007c:	2d0c      	cmp	r5, #12
 801007e:	d21f      	bcs.n	80100c0 <_malloc_r+0x50>
 8010080:	250c      	movs	r5, #12
 8010082:	42a9      	cmp	r1, r5
 8010084:	d81e      	bhi.n	80100c4 <_malloc_r+0x54>
 8010086:	0030      	movs	r0, r6
 8010088:	f000 fb6e 	bl	8010768 <__malloc_lock>
 801008c:	4925      	ldr	r1, [pc, #148]	; (8010124 <_malloc_r+0xb4>)
 801008e:	680a      	ldr	r2, [r1, #0]
 8010090:	0014      	movs	r4, r2
 8010092:	2c00      	cmp	r4, #0
 8010094:	d11a      	bne.n	80100cc <_malloc_r+0x5c>
 8010096:	4f24      	ldr	r7, [pc, #144]	; (8010128 <_malloc_r+0xb8>)
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d104      	bne.n	80100a8 <_malloc_r+0x38>
 801009e:	0021      	movs	r1, r4
 80100a0:	0030      	movs	r0, r6
 80100a2:	f000 fb27 	bl	80106f4 <_sbrk_r>
 80100a6:	6038      	str	r0, [r7, #0]
 80100a8:	0029      	movs	r1, r5
 80100aa:	0030      	movs	r0, r6
 80100ac:	f000 fb22 	bl	80106f4 <_sbrk_r>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d12b      	bne.n	801010c <_malloc_r+0x9c>
 80100b4:	230c      	movs	r3, #12
 80100b6:	0030      	movs	r0, r6
 80100b8:	6033      	str	r3, [r6, #0]
 80100ba:	f000 fb5d 	bl	8010778 <__malloc_unlock>
 80100be:	e003      	b.n	80100c8 <_malloc_r+0x58>
 80100c0:	2d00      	cmp	r5, #0
 80100c2:	dade      	bge.n	8010082 <_malloc_r+0x12>
 80100c4:	230c      	movs	r3, #12
 80100c6:	6033      	str	r3, [r6, #0]
 80100c8:	2000      	movs	r0, #0
 80100ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	1b5b      	subs	r3, r3, r5
 80100d0:	d419      	bmi.n	8010106 <_malloc_r+0x96>
 80100d2:	2b0b      	cmp	r3, #11
 80100d4:	d903      	bls.n	80100de <_malloc_r+0x6e>
 80100d6:	6023      	str	r3, [r4, #0]
 80100d8:	18e4      	adds	r4, r4, r3
 80100da:	6025      	str	r5, [r4, #0]
 80100dc:	e003      	b.n	80100e6 <_malloc_r+0x76>
 80100de:	6863      	ldr	r3, [r4, #4]
 80100e0:	42a2      	cmp	r2, r4
 80100e2:	d10e      	bne.n	8010102 <_malloc_r+0x92>
 80100e4:	600b      	str	r3, [r1, #0]
 80100e6:	0030      	movs	r0, r6
 80100e8:	f000 fb46 	bl	8010778 <__malloc_unlock>
 80100ec:	0020      	movs	r0, r4
 80100ee:	2207      	movs	r2, #7
 80100f0:	300b      	adds	r0, #11
 80100f2:	1d23      	adds	r3, r4, #4
 80100f4:	4390      	bics	r0, r2
 80100f6:	1ac2      	subs	r2, r0, r3
 80100f8:	4298      	cmp	r0, r3
 80100fa:	d0e6      	beq.n	80100ca <_malloc_r+0x5a>
 80100fc:	1a1b      	subs	r3, r3, r0
 80100fe:	50a3      	str	r3, [r4, r2]
 8010100:	e7e3      	b.n	80100ca <_malloc_r+0x5a>
 8010102:	6053      	str	r3, [r2, #4]
 8010104:	e7ef      	b.n	80100e6 <_malloc_r+0x76>
 8010106:	0022      	movs	r2, r4
 8010108:	6864      	ldr	r4, [r4, #4]
 801010a:	e7c2      	b.n	8010092 <_malloc_r+0x22>
 801010c:	2303      	movs	r3, #3
 801010e:	1cc4      	adds	r4, r0, #3
 8010110:	439c      	bics	r4, r3
 8010112:	42a0      	cmp	r0, r4
 8010114:	d0e1      	beq.n	80100da <_malloc_r+0x6a>
 8010116:	1a21      	subs	r1, r4, r0
 8010118:	0030      	movs	r0, r6
 801011a:	f000 faeb 	bl	80106f4 <_sbrk_r>
 801011e:	1c43      	adds	r3, r0, #1
 8010120:	d1db      	bne.n	80100da <_malloc_r+0x6a>
 8010122:	e7c7      	b.n	80100b4 <_malloc_r+0x44>
 8010124:	20001508 	.word	0x20001508
 8010128:	2000150c 	.word	0x2000150c

0801012c <__ssputs_r>:
 801012c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801012e:	688e      	ldr	r6, [r1, #8]
 8010130:	b085      	sub	sp, #20
 8010132:	0007      	movs	r7, r0
 8010134:	000c      	movs	r4, r1
 8010136:	9203      	str	r2, [sp, #12]
 8010138:	9301      	str	r3, [sp, #4]
 801013a:	429e      	cmp	r6, r3
 801013c:	d83c      	bhi.n	80101b8 <__ssputs_r+0x8c>
 801013e:	2390      	movs	r3, #144	; 0x90
 8010140:	898a      	ldrh	r2, [r1, #12]
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	421a      	tst	r2, r3
 8010146:	d034      	beq.n	80101b2 <__ssputs_r+0x86>
 8010148:	2503      	movs	r5, #3
 801014a:	6909      	ldr	r1, [r1, #16]
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	1a5b      	subs	r3, r3, r1
 8010150:	9302      	str	r3, [sp, #8]
 8010152:	6963      	ldr	r3, [r4, #20]
 8010154:	9802      	ldr	r0, [sp, #8]
 8010156:	435d      	muls	r5, r3
 8010158:	0feb      	lsrs	r3, r5, #31
 801015a:	195d      	adds	r5, r3, r5
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	106d      	asrs	r5, r5, #1
 8010160:	3301      	adds	r3, #1
 8010162:	181b      	adds	r3, r3, r0
 8010164:	42ab      	cmp	r3, r5
 8010166:	d900      	bls.n	801016a <__ssputs_r+0x3e>
 8010168:	001d      	movs	r5, r3
 801016a:	0553      	lsls	r3, r2, #21
 801016c:	d532      	bpl.n	80101d4 <__ssputs_r+0xa8>
 801016e:	0029      	movs	r1, r5
 8010170:	0038      	movs	r0, r7
 8010172:	f7ff ff7d 	bl	8010070 <_malloc_r>
 8010176:	1e06      	subs	r6, r0, #0
 8010178:	d109      	bne.n	801018e <__ssputs_r+0x62>
 801017a:	230c      	movs	r3, #12
 801017c:	603b      	str	r3, [r7, #0]
 801017e:	2340      	movs	r3, #64	; 0x40
 8010180:	2001      	movs	r0, #1
 8010182:	89a2      	ldrh	r2, [r4, #12]
 8010184:	4240      	negs	r0, r0
 8010186:	4313      	orrs	r3, r2
 8010188:	81a3      	strh	r3, [r4, #12]
 801018a:	b005      	add	sp, #20
 801018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801018e:	9a02      	ldr	r2, [sp, #8]
 8010190:	6921      	ldr	r1, [r4, #16]
 8010192:	f000 facc 	bl	801072e <memcpy>
 8010196:	89a3      	ldrh	r3, [r4, #12]
 8010198:	4a14      	ldr	r2, [pc, #80]	; (80101ec <__ssputs_r+0xc0>)
 801019a:	401a      	ands	r2, r3
 801019c:	2380      	movs	r3, #128	; 0x80
 801019e:	4313      	orrs	r3, r2
 80101a0:	81a3      	strh	r3, [r4, #12]
 80101a2:	9b02      	ldr	r3, [sp, #8]
 80101a4:	6126      	str	r6, [r4, #16]
 80101a6:	18f6      	adds	r6, r6, r3
 80101a8:	6026      	str	r6, [r4, #0]
 80101aa:	6165      	str	r5, [r4, #20]
 80101ac:	9e01      	ldr	r6, [sp, #4]
 80101ae:	1aed      	subs	r5, r5, r3
 80101b0:	60a5      	str	r5, [r4, #8]
 80101b2:	9b01      	ldr	r3, [sp, #4]
 80101b4:	429e      	cmp	r6, r3
 80101b6:	d900      	bls.n	80101ba <__ssputs_r+0x8e>
 80101b8:	9e01      	ldr	r6, [sp, #4]
 80101ba:	0032      	movs	r2, r6
 80101bc:	9903      	ldr	r1, [sp, #12]
 80101be:	6820      	ldr	r0, [r4, #0]
 80101c0:	f000 fabe 	bl	8010740 <memmove>
 80101c4:	68a3      	ldr	r3, [r4, #8]
 80101c6:	2000      	movs	r0, #0
 80101c8:	1b9b      	subs	r3, r3, r6
 80101ca:	60a3      	str	r3, [r4, #8]
 80101cc:	6823      	ldr	r3, [r4, #0]
 80101ce:	199e      	adds	r6, r3, r6
 80101d0:	6026      	str	r6, [r4, #0]
 80101d2:	e7da      	b.n	801018a <__ssputs_r+0x5e>
 80101d4:	002a      	movs	r2, r5
 80101d6:	0038      	movs	r0, r7
 80101d8:	f000 fb20 	bl	801081c <_realloc_r>
 80101dc:	1e06      	subs	r6, r0, #0
 80101de:	d1e0      	bne.n	80101a2 <__ssputs_r+0x76>
 80101e0:	0038      	movs	r0, r7
 80101e2:	6921      	ldr	r1, [r4, #16]
 80101e4:	f000 fad0 	bl	8010788 <_free_r>
 80101e8:	e7c7      	b.n	801017a <__ssputs_r+0x4e>
 80101ea:	46c0      	nop			; (mov r8, r8)
 80101ec:	fffffb7f 	.word	0xfffffb7f

080101f0 <_svfiprintf_r>:
 80101f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101f2:	b0a1      	sub	sp, #132	; 0x84
 80101f4:	9003      	str	r0, [sp, #12]
 80101f6:	001d      	movs	r5, r3
 80101f8:	898b      	ldrh	r3, [r1, #12]
 80101fa:	000f      	movs	r7, r1
 80101fc:	0016      	movs	r6, r2
 80101fe:	061b      	lsls	r3, r3, #24
 8010200:	d511      	bpl.n	8010226 <_svfiprintf_r+0x36>
 8010202:	690b      	ldr	r3, [r1, #16]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10e      	bne.n	8010226 <_svfiprintf_r+0x36>
 8010208:	2140      	movs	r1, #64	; 0x40
 801020a:	f7ff ff31 	bl	8010070 <_malloc_r>
 801020e:	6038      	str	r0, [r7, #0]
 8010210:	6138      	str	r0, [r7, #16]
 8010212:	2800      	cmp	r0, #0
 8010214:	d105      	bne.n	8010222 <_svfiprintf_r+0x32>
 8010216:	230c      	movs	r3, #12
 8010218:	9a03      	ldr	r2, [sp, #12]
 801021a:	3801      	subs	r0, #1
 801021c:	6013      	str	r3, [r2, #0]
 801021e:	b021      	add	sp, #132	; 0x84
 8010220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010222:	2340      	movs	r3, #64	; 0x40
 8010224:	617b      	str	r3, [r7, #20]
 8010226:	2300      	movs	r3, #0
 8010228:	ac08      	add	r4, sp, #32
 801022a:	6163      	str	r3, [r4, #20]
 801022c:	3320      	adds	r3, #32
 801022e:	7663      	strb	r3, [r4, #25]
 8010230:	3310      	adds	r3, #16
 8010232:	76a3      	strb	r3, [r4, #26]
 8010234:	9507      	str	r5, [sp, #28]
 8010236:	0035      	movs	r5, r6
 8010238:	782b      	ldrb	r3, [r5, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d001      	beq.n	8010242 <_svfiprintf_r+0x52>
 801023e:	2b25      	cmp	r3, #37	; 0x25
 8010240:	d147      	bne.n	80102d2 <_svfiprintf_r+0xe2>
 8010242:	1bab      	subs	r3, r5, r6
 8010244:	9305      	str	r3, [sp, #20]
 8010246:	42b5      	cmp	r5, r6
 8010248:	d00c      	beq.n	8010264 <_svfiprintf_r+0x74>
 801024a:	0032      	movs	r2, r6
 801024c:	0039      	movs	r1, r7
 801024e:	9803      	ldr	r0, [sp, #12]
 8010250:	f7ff ff6c 	bl	801012c <__ssputs_r>
 8010254:	1c43      	adds	r3, r0, #1
 8010256:	d100      	bne.n	801025a <_svfiprintf_r+0x6a>
 8010258:	e0ae      	b.n	80103b8 <_svfiprintf_r+0x1c8>
 801025a:	6962      	ldr	r2, [r4, #20]
 801025c:	9b05      	ldr	r3, [sp, #20]
 801025e:	4694      	mov	ip, r2
 8010260:	4463      	add	r3, ip
 8010262:	6163      	str	r3, [r4, #20]
 8010264:	782b      	ldrb	r3, [r5, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d100      	bne.n	801026c <_svfiprintf_r+0x7c>
 801026a:	e0a5      	b.n	80103b8 <_svfiprintf_r+0x1c8>
 801026c:	2201      	movs	r2, #1
 801026e:	2300      	movs	r3, #0
 8010270:	4252      	negs	r2, r2
 8010272:	6062      	str	r2, [r4, #4]
 8010274:	a904      	add	r1, sp, #16
 8010276:	3254      	adds	r2, #84	; 0x54
 8010278:	1852      	adds	r2, r2, r1
 801027a:	1c6e      	adds	r6, r5, #1
 801027c:	6023      	str	r3, [r4, #0]
 801027e:	60e3      	str	r3, [r4, #12]
 8010280:	60a3      	str	r3, [r4, #8]
 8010282:	7013      	strb	r3, [r2, #0]
 8010284:	65a3      	str	r3, [r4, #88]	; 0x58
 8010286:	2205      	movs	r2, #5
 8010288:	7831      	ldrb	r1, [r6, #0]
 801028a:	4854      	ldr	r0, [pc, #336]	; (80103dc <_svfiprintf_r+0x1ec>)
 801028c:	f000 fa44 	bl	8010718 <memchr>
 8010290:	1c75      	adds	r5, r6, #1
 8010292:	2800      	cmp	r0, #0
 8010294:	d11f      	bne.n	80102d6 <_svfiprintf_r+0xe6>
 8010296:	6822      	ldr	r2, [r4, #0]
 8010298:	06d3      	lsls	r3, r2, #27
 801029a:	d504      	bpl.n	80102a6 <_svfiprintf_r+0xb6>
 801029c:	2353      	movs	r3, #83	; 0x53
 801029e:	a904      	add	r1, sp, #16
 80102a0:	185b      	adds	r3, r3, r1
 80102a2:	2120      	movs	r1, #32
 80102a4:	7019      	strb	r1, [r3, #0]
 80102a6:	0713      	lsls	r3, r2, #28
 80102a8:	d504      	bpl.n	80102b4 <_svfiprintf_r+0xc4>
 80102aa:	2353      	movs	r3, #83	; 0x53
 80102ac:	a904      	add	r1, sp, #16
 80102ae:	185b      	adds	r3, r3, r1
 80102b0:	212b      	movs	r1, #43	; 0x2b
 80102b2:	7019      	strb	r1, [r3, #0]
 80102b4:	7833      	ldrb	r3, [r6, #0]
 80102b6:	2b2a      	cmp	r3, #42	; 0x2a
 80102b8:	d016      	beq.n	80102e8 <_svfiprintf_r+0xf8>
 80102ba:	0035      	movs	r5, r6
 80102bc:	2100      	movs	r1, #0
 80102be:	200a      	movs	r0, #10
 80102c0:	68e3      	ldr	r3, [r4, #12]
 80102c2:	782a      	ldrb	r2, [r5, #0]
 80102c4:	1c6e      	adds	r6, r5, #1
 80102c6:	3a30      	subs	r2, #48	; 0x30
 80102c8:	2a09      	cmp	r2, #9
 80102ca:	d94e      	bls.n	801036a <_svfiprintf_r+0x17a>
 80102cc:	2900      	cmp	r1, #0
 80102ce:	d111      	bne.n	80102f4 <_svfiprintf_r+0x104>
 80102d0:	e017      	b.n	8010302 <_svfiprintf_r+0x112>
 80102d2:	3501      	adds	r5, #1
 80102d4:	e7b0      	b.n	8010238 <_svfiprintf_r+0x48>
 80102d6:	4b41      	ldr	r3, [pc, #260]	; (80103dc <_svfiprintf_r+0x1ec>)
 80102d8:	6822      	ldr	r2, [r4, #0]
 80102da:	1ac0      	subs	r0, r0, r3
 80102dc:	2301      	movs	r3, #1
 80102de:	4083      	lsls	r3, r0
 80102e0:	4313      	orrs	r3, r2
 80102e2:	002e      	movs	r6, r5
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	e7ce      	b.n	8010286 <_svfiprintf_r+0x96>
 80102e8:	9b07      	ldr	r3, [sp, #28]
 80102ea:	1d19      	adds	r1, r3, #4
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	9107      	str	r1, [sp, #28]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	db01      	blt.n	80102f8 <_svfiprintf_r+0x108>
 80102f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80102f6:	e004      	b.n	8010302 <_svfiprintf_r+0x112>
 80102f8:	425b      	negs	r3, r3
 80102fa:	60e3      	str	r3, [r4, #12]
 80102fc:	2302      	movs	r3, #2
 80102fe:	4313      	orrs	r3, r2
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	782b      	ldrb	r3, [r5, #0]
 8010304:	2b2e      	cmp	r3, #46	; 0x2e
 8010306:	d10a      	bne.n	801031e <_svfiprintf_r+0x12e>
 8010308:	786b      	ldrb	r3, [r5, #1]
 801030a:	2b2a      	cmp	r3, #42	; 0x2a
 801030c:	d135      	bne.n	801037a <_svfiprintf_r+0x18a>
 801030e:	9b07      	ldr	r3, [sp, #28]
 8010310:	3502      	adds	r5, #2
 8010312:	1d1a      	adds	r2, r3, #4
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	9207      	str	r2, [sp, #28]
 8010318:	2b00      	cmp	r3, #0
 801031a:	db2b      	blt.n	8010374 <_svfiprintf_r+0x184>
 801031c:	9309      	str	r3, [sp, #36]	; 0x24
 801031e:	4e30      	ldr	r6, [pc, #192]	; (80103e0 <_svfiprintf_r+0x1f0>)
 8010320:	2203      	movs	r2, #3
 8010322:	0030      	movs	r0, r6
 8010324:	7829      	ldrb	r1, [r5, #0]
 8010326:	f000 f9f7 	bl	8010718 <memchr>
 801032a:	2800      	cmp	r0, #0
 801032c:	d006      	beq.n	801033c <_svfiprintf_r+0x14c>
 801032e:	2340      	movs	r3, #64	; 0x40
 8010330:	1b80      	subs	r0, r0, r6
 8010332:	4083      	lsls	r3, r0
 8010334:	6822      	ldr	r2, [r4, #0]
 8010336:	3501      	adds	r5, #1
 8010338:	4313      	orrs	r3, r2
 801033a:	6023      	str	r3, [r4, #0]
 801033c:	7829      	ldrb	r1, [r5, #0]
 801033e:	2206      	movs	r2, #6
 8010340:	4828      	ldr	r0, [pc, #160]	; (80103e4 <_svfiprintf_r+0x1f4>)
 8010342:	1c6e      	adds	r6, r5, #1
 8010344:	7621      	strb	r1, [r4, #24]
 8010346:	f000 f9e7 	bl	8010718 <memchr>
 801034a:	2800      	cmp	r0, #0
 801034c:	d03c      	beq.n	80103c8 <_svfiprintf_r+0x1d8>
 801034e:	4b26      	ldr	r3, [pc, #152]	; (80103e8 <_svfiprintf_r+0x1f8>)
 8010350:	2b00      	cmp	r3, #0
 8010352:	d125      	bne.n	80103a0 <_svfiprintf_r+0x1b0>
 8010354:	2207      	movs	r2, #7
 8010356:	9b07      	ldr	r3, [sp, #28]
 8010358:	3307      	adds	r3, #7
 801035a:	4393      	bics	r3, r2
 801035c:	3308      	adds	r3, #8
 801035e:	9307      	str	r3, [sp, #28]
 8010360:	6963      	ldr	r3, [r4, #20]
 8010362:	9a04      	ldr	r2, [sp, #16]
 8010364:	189b      	adds	r3, r3, r2
 8010366:	6163      	str	r3, [r4, #20]
 8010368:	e765      	b.n	8010236 <_svfiprintf_r+0x46>
 801036a:	4343      	muls	r3, r0
 801036c:	0035      	movs	r5, r6
 801036e:	2101      	movs	r1, #1
 8010370:	189b      	adds	r3, r3, r2
 8010372:	e7a6      	b.n	80102c2 <_svfiprintf_r+0xd2>
 8010374:	2301      	movs	r3, #1
 8010376:	425b      	negs	r3, r3
 8010378:	e7d0      	b.n	801031c <_svfiprintf_r+0x12c>
 801037a:	2300      	movs	r3, #0
 801037c:	200a      	movs	r0, #10
 801037e:	001a      	movs	r2, r3
 8010380:	3501      	adds	r5, #1
 8010382:	6063      	str	r3, [r4, #4]
 8010384:	7829      	ldrb	r1, [r5, #0]
 8010386:	1c6e      	adds	r6, r5, #1
 8010388:	3930      	subs	r1, #48	; 0x30
 801038a:	2909      	cmp	r1, #9
 801038c:	d903      	bls.n	8010396 <_svfiprintf_r+0x1a6>
 801038e:	2b00      	cmp	r3, #0
 8010390:	d0c5      	beq.n	801031e <_svfiprintf_r+0x12e>
 8010392:	9209      	str	r2, [sp, #36]	; 0x24
 8010394:	e7c3      	b.n	801031e <_svfiprintf_r+0x12e>
 8010396:	4342      	muls	r2, r0
 8010398:	0035      	movs	r5, r6
 801039a:	2301      	movs	r3, #1
 801039c:	1852      	adds	r2, r2, r1
 801039e:	e7f1      	b.n	8010384 <_svfiprintf_r+0x194>
 80103a0:	ab07      	add	r3, sp, #28
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	003a      	movs	r2, r7
 80103a6:	0021      	movs	r1, r4
 80103a8:	4b10      	ldr	r3, [pc, #64]	; (80103ec <_svfiprintf_r+0x1fc>)
 80103aa:	9803      	ldr	r0, [sp, #12]
 80103ac:	e000      	b.n	80103b0 <_svfiprintf_r+0x1c0>
 80103ae:	bf00      	nop
 80103b0:	9004      	str	r0, [sp, #16]
 80103b2:	9b04      	ldr	r3, [sp, #16]
 80103b4:	3301      	adds	r3, #1
 80103b6:	d1d3      	bne.n	8010360 <_svfiprintf_r+0x170>
 80103b8:	89bb      	ldrh	r3, [r7, #12]
 80103ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80103bc:	065b      	lsls	r3, r3, #25
 80103be:	d400      	bmi.n	80103c2 <_svfiprintf_r+0x1d2>
 80103c0:	e72d      	b.n	801021e <_svfiprintf_r+0x2e>
 80103c2:	2001      	movs	r0, #1
 80103c4:	4240      	negs	r0, r0
 80103c6:	e72a      	b.n	801021e <_svfiprintf_r+0x2e>
 80103c8:	ab07      	add	r3, sp, #28
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	003a      	movs	r2, r7
 80103ce:	0021      	movs	r1, r4
 80103d0:	4b06      	ldr	r3, [pc, #24]	; (80103ec <_svfiprintf_r+0x1fc>)
 80103d2:	9803      	ldr	r0, [sp, #12]
 80103d4:	f000 f87c 	bl	80104d0 <_printf_i>
 80103d8:	e7ea      	b.n	80103b0 <_svfiprintf_r+0x1c0>
 80103da:	46c0      	nop			; (mov r8, r8)
 80103dc:	08011ba8 	.word	0x08011ba8
 80103e0:	08011bae 	.word	0x08011bae
 80103e4:	08011bb2 	.word	0x08011bb2
 80103e8:	00000000 	.word	0x00000000
 80103ec:	0801012d 	.word	0x0801012d

080103f0 <_printf_common>:
 80103f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103f2:	0015      	movs	r5, r2
 80103f4:	9301      	str	r3, [sp, #4]
 80103f6:	688a      	ldr	r2, [r1, #8]
 80103f8:	690b      	ldr	r3, [r1, #16]
 80103fa:	000c      	movs	r4, r1
 80103fc:	9000      	str	r0, [sp, #0]
 80103fe:	4293      	cmp	r3, r2
 8010400:	da00      	bge.n	8010404 <_printf_common+0x14>
 8010402:	0013      	movs	r3, r2
 8010404:	0022      	movs	r2, r4
 8010406:	602b      	str	r3, [r5, #0]
 8010408:	3243      	adds	r2, #67	; 0x43
 801040a:	7812      	ldrb	r2, [r2, #0]
 801040c:	2a00      	cmp	r2, #0
 801040e:	d001      	beq.n	8010414 <_printf_common+0x24>
 8010410:	3301      	adds	r3, #1
 8010412:	602b      	str	r3, [r5, #0]
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	069b      	lsls	r3, r3, #26
 8010418:	d502      	bpl.n	8010420 <_printf_common+0x30>
 801041a:	682b      	ldr	r3, [r5, #0]
 801041c:	3302      	adds	r3, #2
 801041e:	602b      	str	r3, [r5, #0]
 8010420:	6822      	ldr	r2, [r4, #0]
 8010422:	2306      	movs	r3, #6
 8010424:	0017      	movs	r7, r2
 8010426:	401f      	ands	r7, r3
 8010428:	421a      	tst	r2, r3
 801042a:	d027      	beq.n	801047c <_printf_common+0x8c>
 801042c:	0023      	movs	r3, r4
 801042e:	3343      	adds	r3, #67	; 0x43
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	1e5a      	subs	r2, r3, #1
 8010434:	4193      	sbcs	r3, r2
 8010436:	6822      	ldr	r2, [r4, #0]
 8010438:	0692      	lsls	r2, r2, #26
 801043a:	d430      	bmi.n	801049e <_printf_common+0xae>
 801043c:	0022      	movs	r2, r4
 801043e:	9901      	ldr	r1, [sp, #4]
 8010440:	9800      	ldr	r0, [sp, #0]
 8010442:	9e08      	ldr	r6, [sp, #32]
 8010444:	3243      	adds	r2, #67	; 0x43
 8010446:	47b0      	blx	r6
 8010448:	1c43      	adds	r3, r0, #1
 801044a:	d025      	beq.n	8010498 <_printf_common+0xa8>
 801044c:	2306      	movs	r3, #6
 801044e:	6820      	ldr	r0, [r4, #0]
 8010450:	682a      	ldr	r2, [r5, #0]
 8010452:	68e1      	ldr	r1, [r4, #12]
 8010454:	2500      	movs	r5, #0
 8010456:	4003      	ands	r3, r0
 8010458:	2b04      	cmp	r3, #4
 801045a:	d103      	bne.n	8010464 <_printf_common+0x74>
 801045c:	1a8d      	subs	r5, r1, r2
 801045e:	43eb      	mvns	r3, r5
 8010460:	17db      	asrs	r3, r3, #31
 8010462:	401d      	ands	r5, r3
 8010464:	68a3      	ldr	r3, [r4, #8]
 8010466:	6922      	ldr	r2, [r4, #16]
 8010468:	4293      	cmp	r3, r2
 801046a:	dd01      	ble.n	8010470 <_printf_common+0x80>
 801046c:	1a9b      	subs	r3, r3, r2
 801046e:	18ed      	adds	r5, r5, r3
 8010470:	2700      	movs	r7, #0
 8010472:	42bd      	cmp	r5, r7
 8010474:	d120      	bne.n	80104b8 <_printf_common+0xc8>
 8010476:	2000      	movs	r0, #0
 8010478:	e010      	b.n	801049c <_printf_common+0xac>
 801047a:	3701      	adds	r7, #1
 801047c:	68e3      	ldr	r3, [r4, #12]
 801047e:	682a      	ldr	r2, [r5, #0]
 8010480:	1a9b      	subs	r3, r3, r2
 8010482:	42bb      	cmp	r3, r7
 8010484:	ddd2      	ble.n	801042c <_printf_common+0x3c>
 8010486:	0022      	movs	r2, r4
 8010488:	2301      	movs	r3, #1
 801048a:	9901      	ldr	r1, [sp, #4]
 801048c:	9800      	ldr	r0, [sp, #0]
 801048e:	9e08      	ldr	r6, [sp, #32]
 8010490:	3219      	adds	r2, #25
 8010492:	47b0      	blx	r6
 8010494:	1c43      	adds	r3, r0, #1
 8010496:	d1f0      	bne.n	801047a <_printf_common+0x8a>
 8010498:	2001      	movs	r0, #1
 801049a:	4240      	negs	r0, r0
 801049c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801049e:	2030      	movs	r0, #48	; 0x30
 80104a0:	18e1      	adds	r1, r4, r3
 80104a2:	3143      	adds	r1, #67	; 0x43
 80104a4:	7008      	strb	r0, [r1, #0]
 80104a6:	0021      	movs	r1, r4
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	3145      	adds	r1, #69	; 0x45
 80104ac:	7809      	ldrb	r1, [r1, #0]
 80104ae:	18a2      	adds	r2, r4, r2
 80104b0:	3243      	adds	r2, #67	; 0x43
 80104b2:	3302      	adds	r3, #2
 80104b4:	7011      	strb	r1, [r2, #0]
 80104b6:	e7c1      	b.n	801043c <_printf_common+0x4c>
 80104b8:	0022      	movs	r2, r4
 80104ba:	2301      	movs	r3, #1
 80104bc:	9901      	ldr	r1, [sp, #4]
 80104be:	9800      	ldr	r0, [sp, #0]
 80104c0:	9e08      	ldr	r6, [sp, #32]
 80104c2:	321a      	adds	r2, #26
 80104c4:	47b0      	blx	r6
 80104c6:	1c43      	adds	r3, r0, #1
 80104c8:	d0e6      	beq.n	8010498 <_printf_common+0xa8>
 80104ca:	3701      	adds	r7, #1
 80104cc:	e7d1      	b.n	8010472 <_printf_common+0x82>
	...

080104d0 <_printf_i>:
 80104d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104d2:	b08b      	sub	sp, #44	; 0x2c
 80104d4:	9206      	str	r2, [sp, #24]
 80104d6:	000a      	movs	r2, r1
 80104d8:	3243      	adds	r2, #67	; 0x43
 80104da:	9307      	str	r3, [sp, #28]
 80104dc:	9005      	str	r0, [sp, #20]
 80104de:	9204      	str	r2, [sp, #16]
 80104e0:	7e0a      	ldrb	r2, [r1, #24]
 80104e2:	000c      	movs	r4, r1
 80104e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104e6:	2a78      	cmp	r2, #120	; 0x78
 80104e8:	d806      	bhi.n	80104f8 <_printf_i+0x28>
 80104ea:	2a62      	cmp	r2, #98	; 0x62
 80104ec:	d808      	bhi.n	8010500 <_printf_i+0x30>
 80104ee:	2a00      	cmp	r2, #0
 80104f0:	d100      	bne.n	80104f4 <_printf_i+0x24>
 80104f2:	e0c0      	b.n	8010676 <_printf_i+0x1a6>
 80104f4:	2a58      	cmp	r2, #88	; 0x58
 80104f6:	d052      	beq.n	801059e <_printf_i+0xce>
 80104f8:	0026      	movs	r6, r4
 80104fa:	3642      	adds	r6, #66	; 0x42
 80104fc:	7032      	strb	r2, [r6, #0]
 80104fe:	e022      	b.n	8010546 <_printf_i+0x76>
 8010500:	0010      	movs	r0, r2
 8010502:	3863      	subs	r0, #99	; 0x63
 8010504:	2815      	cmp	r0, #21
 8010506:	d8f7      	bhi.n	80104f8 <_printf_i+0x28>
 8010508:	f7ef fdfe 	bl	8000108 <__gnu_thumb1_case_shi>
 801050c:	001f0016 	.word	0x001f0016
 8010510:	fff6fff6 	.word	0xfff6fff6
 8010514:	fff6fff6 	.word	0xfff6fff6
 8010518:	fff6001f 	.word	0xfff6001f
 801051c:	fff6fff6 	.word	0xfff6fff6
 8010520:	00a8fff6 	.word	0x00a8fff6
 8010524:	009a0036 	.word	0x009a0036
 8010528:	fff6fff6 	.word	0xfff6fff6
 801052c:	fff600b9 	.word	0xfff600b9
 8010530:	fff60036 	.word	0xfff60036
 8010534:	009efff6 	.word	0x009efff6
 8010538:	0026      	movs	r6, r4
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	3642      	adds	r6, #66	; 0x42
 801053e:	1d11      	adds	r1, r2, #4
 8010540:	6019      	str	r1, [r3, #0]
 8010542:	6813      	ldr	r3, [r2, #0]
 8010544:	7033      	strb	r3, [r6, #0]
 8010546:	2301      	movs	r3, #1
 8010548:	e0a7      	b.n	801069a <_printf_i+0x1ca>
 801054a:	6808      	ldr	r0, [r1, #0]
 801054c:	6819      	ldr	r1, [r3, #0]
 801054e:	1d0a      	adds	r2, r1, #4
 8010550:	0605      	lsls	r5, r0, #24
 8010552:	d50b      	bpl.n	801056c <_printf_i+0x9c>
 8010554:	680d      	ldr	r5, [r1, #0]
 8010556:	601a      	str	r2, [r3, #0]
 8010558:	2d00      	cmp	r5, #0
 801055a:	da03      	bge.n	8010564 <_printf_i+0x94>
 801055c:	232d      	movs	r3, #45	; 0x2d
 801055e:	9a04      	ldr	r2, [sp, #16]
 8010560:	426d      	negs	r5, r5
 8010562:	7013      	strb	r3, [r2, #0]
 8010564:	4b61      	ldr	r3, [pc, #388]	; (80106ec <_printf_i+0x21c>)
 8010566:	270a      	movs	r7, #10
 8010568:	9303      	str	r3, [sp, #12]
 801056a:	e032      	b.n	80105d2 <_printf_i+0x102>
 801056c:	680d      	ldr	r5, [r1, #0]
 801056e:	601a      	str	r2, [r3, #0]
 8010570:	0641      	lsls	r1, r0, #25
 8010572:	d5f1      	bpl.n	8010558 <_printf_i+0x88>
 8010574:	b22d      	sxth	r5, r5
 8010576:	e7ef      	b.n	8010558 <_printf_i+0x88>
 8010578:	680d      	ldr	r5, [r1, #0]
 801057a:	6819      	ldr	r1, [r3, #0]
 801057c:	1d08      	adds	r0, r1, #4
 801057e:	6018      	str	r0, [r3, #0]
 8010580:	062e      	lsls	r6, r5, #24
 8010582:	d501      	bpl.n	8010588 <_printf_i+0xb8>
 8010584:	680d      	ldr	r5, [r1, #0]
 8010586:	e003      	b.n	8010590 <_printf_i+0xc0>
 8010588:	066d      	lsls	r5, r5, #25
 801058a:	d5fb      	bpl.n	8010584 <_printf_i+0xb4>
 801058c:	680d      	ldr	r5, [r1, #0]
 801058e:	b2ad      	uxth	r5, r5
 8010590:	4b56      	ldr	r3, [pc, #344]	; (80106ec <_printf_i+0x21c>)
 8010592:	270a      	movs	r7, #10
 8010594:	9303      	str	r3, [sp, #12]
 8010596:	2a6f      	cmp	r2, #111	; 0x6f
 8010598:	d117      	bne.n	80105ca <_printf_i+0xfa>
 801059a:	2708      	movs	r7, #8
 801059c:	e015      	b.n	80105ca <_printf_i+0xfa>
 801059e:	3145      	adds	r1, #69	; 0x45
 80105a0:	700a      	strb	r2, [r1, #0]
 80105a2:	4a52      	ldr	r2, [pc, #328]	; (80106ec <_printf_i+0x21c>)
 80105a4:	9203      	str	r2, [sp, #12]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	6821      	ldr	r1, [r4, #0]
 80105aa:	ca20      	ldmia	r2!, {r5}
 80105ac:	601a      	str	r2, [r3, #0]
 80105ae:	0608      	lsls	r0, r1, #24
 80105b0:	d550      	bpl.n	8010654 <_printf_i+0x184>
 80105b2:	07cb      	lsls	r3, r1, #31
 80105b4:	d502      	bpl.n	80105bc <_printf_i+0xec>
 80105b6:	2320      	movs	r3, #32
 80105b8:	4319      	orrs	r1, r3
 80105ba:	6021      	str	r1, [r4, #0]
 80105bc:	2710      	movs	r7, #16
 80105be:	2d00      	cmp	r5, #0
 80105c0:	d103      	bne.n	80105ca <_printf_i+0xfa>
 80105c2:	2320      	movs	r3, #32
 80105c4:	6822      	ldr	r2, [r4, #0]
 80105c6:	439a      	bics	r2, r3
 80105c8:	6022      	str	r2, [r4, #0]
 80105ca:	0023      	movs	r3, r4
 80105cc:	2200      	movs	r2, #0
 80105ce:	3343      	adds	r3, #67	; 0x43
 80105d0:	701a      	strb	r2, [r3, #0]
 80105d2:	6863      	ldr	r3, [r4, #4]
 80105d4:	60a3      	str	r3, [r4, #8]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	db03      	blt.n	80105e2 <_printf_i+0x112>
 80105da:	2204      	movs	r2, #4
 80105dc:	6821      	ldr	r1, [r4, #0]
 80105de:	4391      	bics	r1, r2
 80105e0:	6021      	str	r1, [r4, #0]
 80105e2:	2d00      	cmp	r5, #0
 80105e4:	d102      	bne.n	80105ec <_printf_i+0x11c>
 80105e6:	9e04      	ldr	r6, [sp, #16]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00c      	beq.n	8010606 <_printf_i+0x136>
 80105ec:	9e04      	ldr	r6, [sp, #16]
 80105ee:	0028      	movs	r0, r5
 80105f0:	0039      	movs	r1, r7
 80105f2:	f7ef fe19 	bl	8000228 <__aeabi_uidivmod>
 80105f6:	9b03      	ldr	r3, [sp, #12]
 80105f8:	3e01      	subs	r6, #1
 80105fa:	5c5b      	ldrb	r3, [r3, r1]
 80105fc:	7033      	strb	r3, [r6, #0]
 80105fe:	002b      	movs	r3, r5
 8010600:	0005      	movs	r5, r0
 8010602:	429f      	cmp	r7, r3
 8010604:	d9f3      	bls.n	80105ee <_printf_i+0x11e>
 8010606:	2f08      	cmp	r7, #8
 8010608:	d109      	bne.n	801061e <_printf_i+0x14e>
 801060a:	6823      	ldr	r3, [r4, #0]
 801060c:	07db      	lsls	r3, r3, #31
 801060e:	d506      	bpl.n	801061e <_printf_i+0x14e>
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	6922      	ldr	r2, [r4, #16]
 8010614:	4293      	cmp	r3, r2
 8010616:	dc02      	bgt.n	801061e <_printf_i+0x14e>
 8010618:	2330      	movs	r3, #48	; 0x30
 801061a:	3e01      	subs	r6, #1
 801061c:	7033      	strb	r3, [r6, #0]
 801061e:	9b04      	ldr	r3, [sp, #16]
 8010620:	1b9b      	subs	r3, r3, r6
 8010622:	6123      	str	r3, [r4, #16]
 8010624:	9b07      	ldr	r3, [sp, #28]
 8010626:	0021      	movs	r1, r4
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	9805      	ldr	r0, [sp, #20]
 801062c:	9b06      	ldr	r3, [sp, #24]
 801062e:	aa09      	add	r2, sp, #36	; 0x24
 8010630:	f7ff fede 	bl	80103f0 <_printf_common>
 8010634:	1c43      	adds	r3, r0, #1
 8010636:	d135      	bne.n	80106a4 <_printf_i+0x1d4>
 8010638:	2001      	movs	r0, #1
 801063a:	4240      	negs	r0, r0
 801063c:	b00b      	add	sp, #44	; 0x2c
 801063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010640:	2220      	movs	r2, #32
 8010642:	6809      	ldr	r1, [r1, #0]
 8010644:	430a      	orrs	r2, r1
 8010646:	6022      	str	r2, [r4, #0]
 8010648:	0022      	movs	r2, r4
 801064a:	2178      	movs	r1, #120	; 0x78
 801064c:	3245      	adds	r2, #69	; 0x45
 801064e:	7011      	strb	r1, [r2, #0]
 8010650:	4a27      	ldr	r2, [pc, #156]	; (80106f0 <_printf_i+0x220>)
 8010652:	e7a7      	b.n	80105a4 <_printf_i+0xd4>
 8010654:	0648      	lsls	r0, r1, #25
 8010656:	d5ac      	bpl.n	80105b2 <_printf_i+0xe2>
 8010658:	b2ad      	uxth	r5, r5
 801065a:	e7aa      	b.n	80105b2 <_printf_i+0xe2>
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	680d      	ldr	r5, [r1, #0]
 8010660:	1d10      	adds	r0, r2, #4
 8010662:	6949      	ldr	r1, [r1, #20]
 8010664:	6018      	str	r0, [r3, #0]
 8010666:	6813      	ldr	r3, [r2, #0]
 8010668:	062e      	lsls	r6, r5, #24
 801066a:	d501      	bpl.n	8010670 <_printf_i+0x1a0>
 801066c:	6019      	str	r1, [r3, #0]
 801066e:	e002      	b.n	8010676 <_printf_i+0x1a6>
 8010670:	066d      	lsls	r5, r5, #25
 8010672:	d5fb      	bpl.n	801066c <_printf_i+0x19c>
 8010674:	8019      	strh	r1, [r3, #0]
 8010676:	2300      	movs	r3, #0
 8010678:	9e04      	ldr	r6, [sp, #16]
 801067a:	6123      	str	r3, [r4, #16]
 801067c:	e7d2      	b.n	8010624 <_printf_i+0x154>
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	1d11      	adds	r1, r2, #4
 8010682:	6019      	str	r1, [r3, #0]
 8010684:	6816      	ldr	r6, [r2, #0]
 8010686:	2100      	movs	r1, #0
 8010688:	0030      	movs	r0, r6
 801068a:	6862      	ldr	r2, [r4, #4]
 801068c:	f000 f844 	bl	8010718 <memchr>
 8010690:	2800      	cmp	r0, #0
 8010692:	d001      	beq.n	8010698 <_printf_i+0x1c8>
 8010694:	1b80      	subs	r0, r0, r6
 8010696:	6060      	str	r0, [r4, #4]
 8010698:	6863      	ldr	r3, [r4, #4]
 801069a:	6123      	str	r3, [r4, #16]
 801069c:	2300      	movs	r3, #0
 801069e:	9a04      	ldr	r2, [sp, #16]
 80106a0:	7013      	strb	r3, [r2, #0]
 80106a2:	e7bf      	b.n	8010624 <_printf_i+0x154>
 80106a4:	6923      	ldr	r3, [r4, #16]
 80106a6:	0032      	movs	r2, r6
 80106a8:	9906      	ldr	r1, [sp, #24]
 80106aa:	9805      	ldr	r0, [sp, #20]
 80106ac:	9d07      	ldr	r5, [sp, #28]
 80106ae:	47a8      	blx	r5
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d0c1      	beq.n	8010638 <_printf_i+0x168>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	079b      	lsls	r3, r3, #30
 80106b8:	d415      	bmi.n	80106e6 <_printf_i+0x216>
 80106ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106bc:	68e0      	ldr	r0, [r4, #12]
 80106be:	4298      	cmp	r0, r3
 80106c0:	dabc      	bge.n	801063c <_printf_i+0x16c>
 80106c2:	0018      	movs	r0, r3
 80106c4:	e7ba      	b.n	801063c <_printf_i+0x16c>
 80106c6:	0022      	movs	r2, r4
 80106c8:	2301      	movs	r3, #1
 80106ca:	9906      	ldr	r1, [sp, #24]
 80106cc:	9805      	ldr	r0, [sp, #20]
 80106ce:	9e07      	ldr	r6, [sp, #28]
 80106d0:	3219      	adds	r2, #25
 80106d2:	47b0      	blx	r6
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d0af      	beq.n	8010638 <_printf_i+0x168>
 80106d8:	3501      	adds	r5, #1
 80106da:	68e3      	ldr	r3, [r4, #12]
 80106dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106de:	1a9b      	subs	r3, r3, r2
 80106e0:	42ab      	cmp	r3, r5
 80106e2:	dcf0      	bgt.n	80106c6 <_printf_i+0x1f6>
 80106e4:	e7e9      	b.n	80106ba <_printf_i+0x1ea>
 80106e6:	2500      	movs	r5, #0
 80106e8:	e7f7      	b.n	80106da <_printf_i+0x20a>
 80106ea:	46c0      	nop			; (mov r8, r8)
 80106ec:	08011bb9 	.word	0x08011bb9
 80106f0:	08011bca 	.word	0x08011bca

080106f4 <_sbrk_r>:
 80106f4:	2300      	movs	r3, #0
 80106f6:	b570      	push	{r4, r5, r6, lr}
 80106f8:	4d06      	ldr	r5, [pc, #24]	; (8010714 <_sbrk_r+0x20>)
 80106fa:	0004      	movs	r4, r0
 80106fc:	0008      	movs	r0, r1
 80106fe:	602b      	str	r3, [r5, #0]
 8010700:	f000 fa1c 	bl	8010b3c <_sbrk>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d103      	bne.n	8010710 <_sbrk_r+0x1c>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d000      	beq.n	8010710 <_sbrk_r+0x1c>
 801070e:	6023      	str	r3, [r4, #0]
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	46c0      	nop			; (mov r8, r8)
 8010714:	20001670 	.word	0x20001670

08010718 <memchr>:
 8010718:	b2c9      	uxtb	r1, r1
 801071a:	1882      	adds	r2, r0, r2
 801071c:	4290      	cmp	r0, r2
 801071e:	d101      	bne.n	8010724 <memchr+0xc>
 8010720:	2000      	movs	r0, #0
 8010722:	4770      	bx	lr
 8010724:	7803      	ldrb	r3, [r0, #0]
 8010726:	428b      	cmp	r3, r1
 8010728:	d0fb      	beq.n	8010722 <memchr+0xa>
 801072a:	3001      	adds	r0, #1
 801072c:	e7f6      	b.n	801071c <memchr+0x4>

0801072e <memcpy>:
 801072e:	2300      	movs	r3, #0
 8010730:	b510      	push	{r4, lr}
 8010732:	429a      	cmp	r2, r3
 8010734:	d100      	bne.n	8010738 <memcpy+0xa>
 8010736:	bd10      	pop	{r4, pc}
 8010738:	5ccc      	ldrb	r4, [r1, r3]
 801073a:	54c4      	strb	r4, [r0, r3]
 801073c:	3301      	adds	r3, #1
 801073e:	e7f8      	b.n	8010732 <memcpy+0x4>

08010740 <memmove>:
 8010740:	b510      	push	{r4, lr}
 8010742:	4288      	cmp	r0, r1
 8010744:	d902      	bls.n	801074c <memmove+0xc>
 8010746:	188b      	adds	r3, r1, r2
 8010748:	4298      	cmp	r0, r3
 801074a:	d303      	bcc.n	8010754 <memmove+0x14>
 801074c:	2300      	movs	r3, #0
 801074e:	e007      	b.n	8010760 <memmove+0x20>
 8010750:	5c8b      	ldrb	r3, [r1, r2]
 8010752:	5483      	strb	r3, [r0, r2]
 8010754:	3a01      	subs	r2, #1
 8010756:	d2fb      	bcs.n	8010750 <memmove+0x10>
 8010758:	bd10      	pop	{r4, pc}
 801075a:	5ccc      	ldrb	r4, [r1, r3]
 801075c:	54c4      	strb	r4, [r0, r3]
 801075e:	3301      	adds	r3, #1
 8010760:	429a      	cmp	r2, r3
 8010762:	d1fa      	bne.n	801075a <memmove+0x1a>
 8010764:	e7f8      	b.n	8010758 <memmove+0x18>
	...

08010768 <__malloc_lock>:
 8010768:	b510      	push	{r4, lr}
 801076a:	4802      	ldr	r0, [pc, #8]	; (8010774 <__malloc_lock+0xc>)
 801076c:	f7ff fc7e 	bl	801006c <__retarget_lock_acquire_recursive>
 8010770:	bd10      	pop	{r4, pc}
 8010772:	46c0      	nop			; (mov r8, r8)
 8010774:	20001668 	.word	0x20001668

08010778 <__malloc_unlock>:
 8010778:	b510      	push	{r4, lr}
 801077a:	4802      	ldr	r0, [pc, #8]	; (8010784 <__malloc_unlock+0xc>)
 801077c:	f7ff fc77 	bl	801006e <__retarget_lock_release_recursive>
 8010780:	bd10      	pop	{r4, pc}
 8010782:	46c0      	nop			; (mov r8, r8)
 8010784:	20001668 	.word	0x20001668

08010788 <_free_r>:
 8010788:	b570      	push	{r4, r5, r6, lr}
 801078a:	0005      	movs	r5, r0
 801078c:	2900      	cmp	r1, #0
 801078e:	d010      	beq.n	80107b2 <_free_r+0x2a>
 8010790:	1f0c      	subs	r4, r1, #4
 8010792:	6823      	ldr	r3, [r4, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	da00      	bge.n	801079a <_free_r+0x12>
 8010798:	18e4      	adds	r4, r4, r3
 801079a:	0028      	movs	r0, r5
 801079c:	f7ff ffe4 	bl	8010768 <__malloc_lock>
 80107a0:	4a1d      	ldr	r2, [pc, #116]	; (8010818 <_free_r+0x90>)
 80107a2:	6813      	ldr	r3, [r2, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d105      	bne.n	80107b4 <_free_r+0x2c>
 80107a8:	6063      	str	r3, [r4, #4]
 80107aa:	6014      	str	r4, [r2, #0]
 80107ac:	0028      	movs	r0, r5
 80107ae:	f7ff ffe3 	bl	8010778 <__malloc_unlock>
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	42a3      	cmp	r3, r4
 80107b6:	d908      	bls.n	80107ca <_free_r+0x42>
 80107b8:	6821      	ldr	r1, [r4, #0]
 80107ba:	1860      	adds	r0, r4, r1
 80107bc:	4283      	cmp	r3, r0
 80107be:	d1f3      	bne.n	80107a8 <_free_r+0x20>
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	1841      	adds	r1, r0, r1
 80107c6:	6021      	str	r1, [r4, #0]
 80107c8:	e7ee      	b.n	80107a8 <_free_r+0x20>
 80107ca:	001a      	movs	r2, r3
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <_free_r+0x4e>
 80107d2:	42a3      	cmp	r3, r4
 80107d4:	d9f9      	bls.n	80107ca <_free_r+0x42>
 80107d6:	6811      	ldr	r1, [r2, #0]
 80107d8:	1850      	adds	r0, r2, r1
 80107da:	42a0      	cmp	r0, r4
 80107dc:	d10b      	bne.n	80107f6 <_free_r+0x6e>
 80107de:	6820      	ldr	r0, [r4, #0]
 80107e0:	1809      	adds	r1, r1, r0
 80107e2:	1850      	adds	r0, r2, r1
 80107e4:	6011      	str	r1, [r2, #0]
 80107e6:	4283      	cmp	r3, r0
 80107e8:	d1e0      	bne.n	80107ac <_free_r+0x24>
 80107ea:	6818      	ldr	r0, [r3, #0]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	1841      	adds	r1, r0, r1
 80107f0:	6011      	str	r1, [r2, #0]
 80107f2:	6053      	str	r3, [r2, #4]
 80107f4:	e7da      	b.n	80107ac <_free_r+0x24>
 80107f6:	42a0      	cmp	r0, r4
 80107f8:	d902      	bls.n	8010800 <_free_r+0x78>
 80107fa:	230c      	movs	r3, #12
 80107fc:	602b      	str	r3, [r5, #0]
 80107fe:	e7d5      	b.n	80107ac <_free_r+0x24>
 8010800:	6821      	ldr	r1, [r4, #0]
 8010802:	1860      	adds	r0, r4, r1
 8010804:	4283      	cmp	r3, r0
 8010806:	d103      	bne.n	8010810 <_free_r+0x88>
 8010808:	6818      	ldr	r0, [r3, #0]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	1841      	adds	r1, r0, r1
 801080e:	6021      	str	r1, [r4, #0]
 8010810:	6063      	str	r3, [r4, #4]
 8010812:	6054      	str	r4, [r2, #4]
 8010814:	e7ca      	b.n	80107ac <_free_r+0x24>
 8010816:	46c0      	nop			; (mov r8, r8)
 8010818:	20001508 	.word	0x20001508

0801081c <_realloc_r>:
 801081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801081e:	0007      	movs	r7, r0
 8010820:	000d      	movs	r5, r1
 8010822:	0016      	movs	r6, r2
 8010824:	2900      	cmp	r1, #0
 8010826:	d105      	bne.n	8010834 <_realloc_r+0x18>
 8010828:	0011      	movs	r1, r2
 801082a:	f7ff fc21 	bl	8010070 <_malloc_r>
 801082e:	0004      	movs	r4, r0
 8010830:	0020      	movs	r0, r4
 8010832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010834:	2a00      	cmp	r2, #0
 8010836:	d103      	bne.n	8010840 <_realloc_r+0x24>
 8010838:	f7ff ffa6 	bl	8010788 <_free_r>
 801083c:	0034      	movs	r4, r6
 801083e:	e7f7      	b.n	8010830 <_realloc_r+0x14>
 8010840:	f000 f812 	bl	8010868 <_malloc_usable_size_r>
 8010844:	002c      	movs	r4, r5
 8010846:	42b0      	cmp	r0, r6
 8010848:	d2f2      	bcs.n	8010830 <_realloc_r+0x14>
 801084a:	0031      	movs	r1, r6
 801084c:	0038      	movs	r0, r7
 801084e:	f7ff fc0f 	bl	8010070 <_malloc_r>
 8010852:	1e04      	subs	r4, r0, #0
 8010854:	d0ec      	beq.n	8010830 <_realloc_r+0x14>
 8010856:	0029      	movs	r1, r5
 8010858:	0032      	movs	r2, r6
 801085a:	f7ff ff68 	bl	801072e <memcpy>
 801085e:	0029      	movs	r1, r5
 8010860:	0038      	movs	r0, r7
 8010862:	f7ff ff91 	bl	8010788 <_free_r>
 8010866:	e7e3      	b.n	8010830 <_realloc_r+0x14>

08010868 <_malloc_usable_size_r>:
 8010868:	1f0b      	subs	r3, r1, #4
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	1f18      	subs	r0, r3, #4
 801086e:	2b00      	cmp	r3, #0
 8010870:	da01      	bge.n	8010876 <_malloc_usable_size_r+0xe>
 8010872:	580b      	ldr	r3, [r1, r0]
 8010874:	18c0      	adds	r0, r0, r3
 8010876:	4770      	bx	lr

08010878 <ceil>:
 8010878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801087a:	004b      	lsls	r3, r1, #1
 801087c:	4a3d      	ldr	r2, [pc, #244]	; (8010974 <ceil+0xfc>)
 801087e:	0d5b      	lsrs	r3, r3, #21
 8010880:	189f      	adds	r7, r3, r2
 8010882:	4684      	mov	ip, r0
 8010884:	000e      	movs	r6, r1
 8010886:	000c      	movs	r4, r1
 8010888:	0005      	movs	r5, r0
 801088a:	9001      	str	r0, [sp, #4]
 801088c:	2f13      	cmp	r7, #19
 801088e:	dc33      	bgt.n	80108f8 <ceil+0x80>
 8010890:	2f00      	cmp	r7, #0
 8010892:	da15      	bge.n	80108c0 <ceil+0x48>
 8010894:	4a38      	ldr	r2, [pc, #224]	; (8010978 <ceil+0x100>)
 8010896:	4b39      	ldr	r3, [pc, #228]	; (801097c <ceil+0x104>)
 8010898:	4660      	mov	r0, ip
 801089a:	0031      	movs	r1, r6
 801089c:	f7f0 f900 	bl	8000aa0 <__aeabi_dadd>
 80108a0:	2200      	movs	r2, #0
 80108a2:	2300      	movs	r3, #0
 80108a4:	f7ef fdda 	bl	800045c <__aeabi_dcmpgt>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	d006      	beq.n	80108ba <ceil+0x42>
 80108ac:	2e00      	cmp	r6, #0
 80108ae:	db5c      	blt.n	801096a <ceil+0xf2>
 80108b0:	432c      	orrs	r4, r5
 80108b2:	2500      	movs	r5, #0
 80108b4:	42ac      	cmp	r4, r5
 80108b6:	d000      	beq.n	80108ba <ceil+0x42>
 80108b8:	4c31      	ldr	r4, [pc, #196]	; (8010980 <ceil+0x108>)
 80108ba:	46ac      	mov	ip, r5
 80108bc:	0026      	movs	r6, r4
 80108be:	e029      	b.n	8010914 <ceil+0x9c>
 80108c0:	4b30      	ldr	r3, [pc, #192]	; (8010984 <ceil+0x10c>)
 80108c2:	413b      	asrs	r3, r7
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	400b      	ands	r3, r1
 80108c8:	4303      	orrs	r3, r0
 80108ca:	d023      	beq.n	8010914 <ceil+0x9c>
 80108cc:	4a2a      	ldr	r2, [pc, #168]	; (8010978 <ceil+0x100>)
 80108ce:	4b2b      	ldr	r3, [pc, #172]	; (801097c <ceil+0x104>)
 80108d0:	4660      	mov	r0, ip
 80108d2:	0031      	movs	r1, r6
 80108d4:	f7f0 f8e4 	bl	8000aa0 <__aeabi_dadd>
 80108d8:	2200      	movs	r2, #0
 80108da:	2300      	movs	r3, #0
 80108dc:	f7ef fdbe 	bl	800045c <__aeabi_dcmpgt>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d0ea      	beq.n	80108ba <ceil+0x42>
 80108e4:	2e00      	cmp	r6, #0
 80108e6:	dd03      	ble.n	80108f0 <ceil+0x78>
 80108e8:	2380      	movs	r3, #128	; 0x80
 80108ea:	035b      	lsls	r3, r3, #13
 80108ec:	413b      	asrs	r3, r7
 80108ee:	18f4      	adds	r4, r6, r3
 80108f0:	9b00      	ldr	r3, [sp, #0]
 80108f2:	2500      	movs	r5, #0
 80108f4:	439c      	bics	r4, r3
 80108f6:	e7e0      	b.n	80108ba <ceil+0x42>
 80108f8:	2f33      	cmp	r7, #51	; 0x33
 80108fa:	dd0f      	ble.n	801091c <ceil+0xa4>
 80108fc:	2380      	movs	r3, #128	; 0x80
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	429f      	cmp	r7, r3
 8010902:	d107      	bne.n	8010914 <ceil+0x9c>
 8010904:	0002      	movs	r2, r0
 8010906:	000b      	movs	r3, r1
 8010908:	4660      	mov	r0, ip
 801090a:	0031      	movs	r1, r6
 801090c:	f7f0 f8c8 	bl	8000aa0 <__aeabi_dadd>
 8010910:	4684      	mov	ip, r0
 8010912:	000e      	movs	r6, r1
 8010914:	4660      	mov	r0, ip
 8010916:	0031      	movs	r1, r6
 8010918:	b003      	add	sp, #12
 801091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801091c:	4a1a      	ldr	r2, [pc, #104]	; (8010988 <ceil+0x110>)
 801091e:	189b      	adds	r3, r3, r2
 8010920:	2201      	movs	r2, #1
 8010922:	4252      	negs	r2, r2
 8010924:	40da      	lsrs	r2, r3
 8010926:	9200      	str	r2, [sp, #0]
 8010928:	4210      	tst	r0, r2
 801092a:	d0f3      	beq.n	8010914 <ceil+0x9c>
 801092c:	4a12      	ldr	r2, [pc, #72]	; (8010978 <ceil+0x100>)
 801092e:	4b13      	ldr	r3, [pc, #76]	; (801097c <ceil+0x104>)
 8010930:	4660      	mov	r0, ip
 8010932:	0031      	movs	r1, r6
 8010934:	f7f0 f8b4 	bl	8000aa0 <__aeabi_dadd>
 8010938:	2200      	movs	r2, #0
 801093a:	2300      	movs	r3, #0
 801093c:	f7ef fd8e 	bl	800045c <__aeabi_dcmpgt>
 8010940:	2800      	cmp	r0, #0
 8010942:	d0ba      	beq.n	80108ba <ceil+0x42>
 8010944:	2e00      	cmp	r6, #0
 8010946:	dd02      	ble.n	801094e <ceil+0xd6>
 8010948:	2f14      	cmp	r7, #20
 801094a:	d103      	bne.n	8010954 <ceil+0xdc>
 801094c:	3401      	adds	r4, #1
 801094e:	9b00      	ldr	r3, [sp, #0]
 8010950:	439d      	bics	r5, r3
 8010952:	e7b2      	b.n	80108ba <ceil+0x42>
 8010954:	2334      	movs	r3, #52	; 0x34
 8010956:	1bdf      	subs	r7, r3, r7
 8010958:	3b33      	subs	r3, #51	; 0x33
 801095a:	40bb      	lsls	r3, r7
 801095c:	18ed      	adds	r5, r5, r3
 801095e:	9b01      	ldr	r3, [sp, #4]
 8010960:	429d      	cmp	r5, r3
 8010962:	419b      	sbcs	r3, r3
 8010964:	425b      	negs	r3, r3
 8010966:	18f4      	adds	r4, r6, r3
 8010968:	e7f1      	b.n	801094e <ceil+0xd6>
 801096a:	2480      	movs	r4, #128	; 0x80
 801096c:	2500      	movs	r5, #0
 801096e:	0624      	lsls	r4, r4, #24
 8010970:	e7a3      	b.n	80108ba <ceil+0x42>
 8010972:	46c0      	nop			; (mov r8, r8)
 8010974:	fffffc01 	.word	0xfffffc01
 8010978:	8800759c 	.word	0x8800759c
 801097c:	7e37e43c 	.word	0x7e37e43c
 8010980:	3ff00000 	.word	0x3ff00000
 8010984:	000fffff 	.word	0x000fffff
 8010988:	fffffbed 	.word	0xfffffbed

0801098c <floor>:
 801098c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801098e:	004b      	lsls	r3, r1, #1
 8010990:	4a3d      	ldr	r2, [pc, #244]	; (8010a88 <floor+0xfc>)
 8010992:	0d5b      	lsrs	r3, r3, #21
 8010994:	189f      	adds	r7, r3, r2
 8010996:	4684      	mov	ip, r0
 8010998:	000e      	movs	r6, r1
 801099a:	000d      	movs	r5, r1
 801099c:	0004      	movs	r4, r0
 801099e:	9001      	str	r0, [sp, #4]
 80109a0:	2f13      	cmp	r7, #19
 80109a2:	dc34      	bgt.n	8010a0e <floor+0x82>
 80109a4:	2f00      	cmp	r7, #0
 80109a6:	da16      	bge.n	80109d6 <floor+0x4a>
 80109a8:	4a38      	ldr	r2, [pc, #224]	; (8010a8c <floor+0x100>)
 80109aa:	4b39      	ldr	r3, [pc, #228]	; (8010a90 <floor+0x104>)
 80109ac:	4660      	mov	r0, ip
 80109ae:	0031      	movs	r1, r6
 80109b0:	f7f0 f876 	bl	8000aa0 <__aeabi_dadd>
 80109b4:	2200      	movs	r2, #0
 80109b6:	2300      	movs	r3, #0
 80109b8:	f7ef fd50 	bl	800045c <__aeabi_dcmpgt>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d007      	beq.n	80109d0 <floor+0x44>
 80109c0:	2e00      	cmp	r6, #0
 80109c2:	da5d      	bge.n	8010a80 <floor+0xf4>
 80109c4:	0073      	lsls	r3, r6, #1
 80109c6:	085b      	lsrs	r3, r3, #1
 80109c8:	431c      	orrs	r4, r3
 80109ca:	d001      	beq.n	80109d0 <floor+0x44>
 80109cc:	2400      	movs	r4, #0
 80109ce:	4d31      	ldr	r5, [pc, #196]	; (8010a94 <floor+0x108>)
 80109d0:	46a4      	mov	ip, r4
 80109d2:	002e      	movs	r6, r5
 80109d4:	e029      	b.n	8010a2a <floor+0x9e>
 80109d6:	4b30      	ldr	r3, [pc, #192]	; (8010a98 <floor+0x10c>)
 80109d8:	413b      	asrs	r3, r7
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	400b      	ands	r3, r1
 80109de:	4303      	orrs	r3, r0
 80109e0:	d023      	beq.n	8010a2a <floor+0x9e>
 80109e2:	4a2a      	ldr	r2, [pc, #168]	; (8010a8c <floor+0x100>)
 80109e4:	4b2a      	ldr	r3, [pc, #168]	; (8010a90 <floor+0x104>)
 80109e6:	4660      	mov	r0, ip
 80109e8:	0031      	movs	r1, r6
 80109ea:	f7f0 f859 	bl	8000aa0 <__aeabi_dadd>
 80109ee:	2200      	movs	r2, #0
 80109f0:	2300      	movs	r3, #0
 80109f2:	f7ef fd33 	bl	800045c <__aeabi_dcmpgt>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d0ea      	beq.n	80109d0 <floor+0x44>
 80109fa:	2e00      	cmp	r6, #0
 80109fc:	da03      	bge.n	8010a06 <floor+0x7a>
 80109fe:	2380      	movs	r3, #128	; 0x80
 8010a00:	035b      	lsls	r3, r3, #13
 8010a02:	413b      	asrs	r3, r7
 8010a04:	18f5      	adds	r5, r6, r3
 8010a06:	9b00      	ldr	r3, [sp, #0]
 8010a08:	2400      	movs	r4, #0
 8010a0a:	439d      	bics	r5, r3
 8010a0c:	e7e0      	b.n	80109d0 <floor+0x44>
 8010a0e:	2f33      	cmp	r7, #51	; 0x33
 8010a10:	dd0f      	ble.n	8010a32 <floor+0xa6>
 8010a12:	2380      	movs	r3, #128	; 0x80
 8010a14:	00db      	lsls	r3, r3, #3
 8010a16:	429f      	cmp	r7, r3
 8010a18:	d107      	bne.n	8010a2a <floor+0x9e>
 8010a1a:	0002      	movs	r2, r0
 8010a1c:	000b      	movs	r3, r1
 8010a1e:	4660      	mov	r0, ip
 8010a20:	0031      	movs	r1, r6
 8010a22:	f7f0 f83d 	bl	8000aa0 <__aeabi_dadd>
 8010a26:	4684      	mov	ip, r0
 8010a28:	000e      	movs	r6, r1
 8010a2a:	4660      	mov	r0, ip
 8010a2c:	0031      	movs	r1, r6
 8010a2e:	b003      	add	sp, #12
 8010a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a32:	4a1a      	ldr	r2, [pc, #104]	; (8010a9c <floor+0x110>)
 8010a34:	189b      	adds	r3, r3, r2
 8010a36:	2201      	movs	r2, #1
 8010a38:	4252      	negs	r2, r2
 8010a3a:	40da      	lsrs	r2, r3
 8010a3c:	9200      	str	r2, [sp, #0]
 8010a3e:	4210      	tst	r0, r2
 8010a40:	d0f3      	beq.n	8010a2a <floor+0x9e>
 8010a42:	4a12      	ldr	r2, [pc, #72]	; (8010a8c <floor+0x100>)
 8010a44:	4b12      	ldr	r3, [pc, #72]	; (8010a90 <floor+0x104>)
 8010a46:	4660      	mov	r0, ip
 8010a48:	0031      	movs	r1, r6
 8010a4a:	f7f0 f829 	bl	8000aa0 <__aeabi_dadd>
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	f7ef fd03 	bl	800045c <__aeabi_dcmpgt>
 8010a56:	2800      	cmp	r0, #0
 8010a58:	d0ba      	beq.n	80109d0 <floor+0x44>
 8010a5a:	2e00      	cmp	r6, #0
 8010a5c:	da02      	bge.n	8010a64 <floor+0xd8>
 8010a5e:	2f14      	cmp	r7, #20
 8010a60:	d103      	bne.n	8010a6a <floor+0xde>
 8010a62:	3501      	adds	r5, #1
 8010a64:	9b00      	ldr	r3, [sp, #0]
 8010a66:	439c      	bics	r4, r3
 8010a68:	e7b2      	b.n	80109d0 <floor+0x44>
 8010a6a:	2334      	movs	r3, #52	; 0x34
 8010a6c:	1bdf      	subs	r7, r3, r7
 8010a6e:	3b33      	subs	r3, #51	; 0x33
 8010a70:	40bb      	lsls	r3, r7
 8010a72:	18e4      	adds	r4, r4, r3
 8010a74:	9b01      	ldr	r3, [sp, #4]
 8010a76:	429c      	cmp	r4, r3
 8010a78:	419b      	sbcs	r3, r3
 8010a7a:	425b      	negs	r3, r3
 8010a7c:	18f5      	adds	r5, r6, r3
 8010a7e:	e7f1      	b.n	8010a64 <floor+0xd8>
 8010a80:	2400      	movs	r4, #0
 8010a82:	0025      	movs	r5, r4
 8010a84:	e7a4      	b.n	80109d0 <floor+0x44>
 8010a86:	46c0      	nop			; (mov r8, r8)
 8010a88:	fffffc01 	.word	0xfffffc01
 8010a8c:	8800759c 	.word	0x8800759c
 8010a90:	7e37e43c 	.word	0x7e37e43c
 8010a94:	bff00000 	.word	0xbff00000
 8010a98:	000fffff 	.word	0x000fffff
 8010a9c:	fffffbed 	.word	0xfffffbed

08010aa0 <round>:
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	000d      	movs	r5, r1
 8010aa4:	0006      	movs	r6, r0
 8010aa6:	0001      	movs	r1, r0
 8010aa8:	006a      	lsls	r2, r5, #1
 8010aaa:	4820      	ldr	r0, [pc, #128]	; (8010b2c <round+0x8c>)
 8010aac:	0d52      	lsrs	r2, r2, #21
 8010aae:	1810      	adds	r0, r2, r0
 8010ab0:	2813      	cmp	r0, #19
 8010ab2:	dc18      	bgt.n	8010ae6 <round+0x46>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	da09      	bge.n	8010acc <round+0x2c>
 8010ab8:	0feb      	lsrs	r3, r5, #31
 8010aba:	2200      	movs	r2, #0
 8010abc:	07db      	lsls	r3, r3, #31
 8010abe:	1c41      	adds	r1, r0, #1
 8010ac0:	d101      	bne.n	8010ac6 <round+0x26>
 8010ac2:	491b      	ldr	r1, [pc, #108]	; (8010b30 <round+0x90>)
 8010ac4:	430b      	orrs	r3, r1
 8010ac6:	0019      	movs	r1, r3
 8010ac8:	0010      	movs	r0, r2
 8010aca:	e018      	b.n	8010afe <round+0x5e>
 8010acc:	4c19      	ldr	r4, [pc, #100]	; (8010b34 <round+0x94>)
 8010ace:	4104      	asrs	r4, r0
 8010ad0:	0022      	movs	r2, r4
 8010ad2:	402a      	ands	r2, r5
 8010ad4:	4311      	orrs	r1, r2
 8010ad6:	d014      	beq.n	8010b02 <round+0x62>
 8010ad8:	2280      	movs	r2, #128	; 0x80
 8010ada:	0312      	lsls	r2, r2, #12
 8010adc:	4102      	asrs	r2, r0
 8010ade:	1953      	adds	r3, r2, r5
 8010ae0:	43a3      	bics	r3, r4
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	e7ef      	b.n	8010ac6 <round+0x26>
 8010ae6:	2833      	cmp	r0, #51	; 0x33
 8010ae8:	dd0e      	ble.n	8010b08 <round+0x68>
 8010aea:	2380      	movs	r3, #128	; 0x80
 8010aec:	00db      	lsls	r3, r3, #3
 8010aee:	4298      	cmp	r0, r3
 8010af0:	d107      	bne.n	8010b02 <round+0x62>
 8010af2:	0032      	movs	r2, r6
 8010af4:	002b      	movs	r3, r5
 8010af6:	0030      	movs	r0, r6
 8010af8:	0029      	movs	r1, r5
 8010afa:	f7ef ffd1 	bl	8000aa0 <__aeabi_dadd>
 8010afe:	0006      	movs	r6, r0
 8010b00:	000d      	movs	r5, r1
 8010b02:	0030      	movs	r0, r6
 8010b04:	0029      	movs	r1, r5
 8010b06:	bd70      	pop	{r4, r5, r6, pc}
 8010b08:	4c0b      	ldr	r4, [pc, #44]	; (8010b38 <round+0x98>)
 8010b0a:	1912      	adds	r2, r2, r4
 8010b0c:	2401      	movs	r4, #1
 8010b0e:	4264      	negs	r4, r4
 8010b10:	40d4      	lsrs	r4, r2
 8010b12:	4234      	tst	r4, r6
 8010b14:	d0f5      	beq.n	8010b02 <round+0x62>
 8010b16:	2233      	movs	r2, #51	; 0x33
 8010b18:	1a10      	subs	r0, r2, r0
 8010b1a:	3a32      	subs	r2, #50	; 0x32
 8010b1c:	4082      	lsls	r2, r0
 8010b1e:	1992      	adds	r2, r2, r6
 8010b20:	42b2      	cmp	r2, r6
 8010b22:	4189      	sbcs	r1, r1
 8010b24:	4249      	negs	r1, r1
 8010b26:	186b      	adds	r3, r5, r1
 8010b28:	43a2      	bics	r2, r4
 8010b2a:	e7cc      	b.n	8010ac6 <round+0x26>
 8010b2c:	fffffc01 	.word	0xfffffc01
 8010b30:	3ff00000 	.word	0x3ff00000
 8010b34:	000fffff 	.word	0x000fffff
 8010b38:	fffffbed 	.word	0xfffffbed

08010b3c <_sbrk>:
 8010b3c:	4a05      	ldr	r2, [pc, #20]	; (8010b54 <_sbrk+0x18>)
 8010b3e:	0003      	movs	r3, r0
 8010b40:	6811      	ldr	r1, [r2, #0]
 8010b42:	2900      	cmp	r1, #0
 8010b44:	d101      	bne.n	8010b4a <_sbrk+0xe>
 8010b46:	4904      	ldr	r1, [pc, #16]	; (8010b58 <_sbrk+0x1c>)
 8010b48:	6011      	str	r1, [r2, #0]
 8010b4a:	6810      	ldr	r0, [r2, #0]
 8010b4c:	18c3      	adds	r3, r0, r3
 8010b4e:	6013      	str	r3, [r2, #0]
 8010b50:	4770      	bx	lr
 8010b52:	46c0      	nop			; (mov r8, r8)
 8010b54:	20001510 	.word	0x20001510
 8010b58:	20001678 	.word	0x20001678

08010b5c <_init>:
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	46c0      	nop			; (mov r8, r8)
 8010b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b62:	bc08      	pop	{r3}
 8010b64:	469e      	mov	lr, r3
 8010b66:	4770      	bx	lr

08010b68 <_fini>:
 8010b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6a:	46c0      	nop			; (mov r8, r8)
 8010b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b6e:	bc08      	pop	{r3}
 8010b70:	469e      	mov	lr, r3
 8010b72:	4770      	bx	lr
